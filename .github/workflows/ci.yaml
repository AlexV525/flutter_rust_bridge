name: CI

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**/*.md"
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always
  FRB_MAIN_RUST_VERSION: 1.70.0
  FRB_MAIN_DART_VERSION: 3.2.0
  FRB_MAIN_FLUTTER_VERSION: 3.16.0

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  # ----------------------------------- lint -----------------------------------

  lint_rust:
    name: 'Lint :: Rust'
    runs-on: ubuntu-latest

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.FRB_MAIN_DART_VERSION }}
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.FRB_MAIN_RUST_VERSION }}
          components: rustfmt, clippy
      - run: |-
          rustup toolchain install nightly
          rustup component add rustfmt --toolchain nightly-x86_64-unknown-linux-gnu
          rustup target add wasm32-unknown-unknown
      # execute
      - run: ./frb_internal lint-rust

  lint_dart:
    name: 'Lint :: Dart'
    runs-on: ubuntu-latest

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
      # execute
      - run: ./frb_internal lint-dart

  # ----------------------------------- codegen -----------------------------------

  generate_run_frb_codegen_command_generate:
    name: 'Generate :: Run FRB Codegen :: Command Generate'
    runs-on: ${{ matrix.image }}

    strategy:
      fail-fast: false
      matrix:
        image:
          - macos-11
          - windows-2019
          - ubuntu-20.04
        package:
          - frb_example/dart_minimal
          - frb_example/pure_dart
          # TODO with_flutter

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.FRB_MAIN_RUST_VERSION }}
          components: rustfmt, clippy
      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
          architecture: x64
      # execute
      - run: ./frb_internal generate-run-frb-codegen-command-generate --set-exit-if-changed --package ${{ matrix.package }}

  generate_run_frb_codegen_command_integrate:
    name: 'Generate :: Run FRB Codegen :: Command Integrate'
    runs-on: ${{ matrix.image }}

    strategy:
      fail-fast: false
      matrix:
        image:
          - macos-11
          - windows-2019
          - ubuntu-20.04
        package:
          - frb_example/flutter_via_create
          - frb_example/flutter_via_integrate

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.FRB_MAIN_RUST_VERSION }}
          components: rustfmt, clippy
      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
          architecture: x64
      # execute
      - run: ./frb_internal generate-run-frb-codegen-command-integrate --set-exit-if-changed --package ${{ matrix.package }}

  generate_internal:
    name: 'Generate :: Internal'
    runs-on: ubuntu-latest

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.FRB_MAIN_RUST_VERSION }}
          components: rustfmt, clippy
      - run: rustup toolchain install nightly && rustup component add rustfmt --toolchain nightly-x86_64-unknown-linux-gnu
      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
          architecture: x64
      # execute
      - run: ./frb_internal generate-internal --set-exit-if-changed

  # ----------------------------------- test -----------------------------------

  test_rust:
    name: 'Test :: Rust'
    runs-on: ${{ matrix.image_and_version.image }}
    strategy:
      fail-fast: false
      matrix:
        image_and_version:
          # run on various platforms
          - image: macos-11
            version: ''
          - image: windows-2019
            version: ''
          - image: ubuntu-latest
            version: ''
          # run on various rust versions
          - image: ubuntu-latest
            version: nightly
          - image: ubuntu-latest
            version: nightly-2023-06-28 # pre https://github.com/rust-lang/rust/issues/113152
          - image: ubuntu-latest
            version: nightly-2023-07-26 # post https://github.com/rust-lang/rust/issues/113152
          # TODO(@fzyzcjy, @gutenfries): add MSRV here, as well as other locked versions as needed

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.image_and_version.version || env.FRB_MAIN_RUST_VERSION }}
          components: rustfmt
      # TODO cache (for rust-toolchain, also for cargo build)
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.FRB_MAIN_DART_VERSION }}
          architecture: x64
      # execute
      - run: ./frb_internal test-rust

  test_dart_native:
    name: 'Test :: Dart :: Native'
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - windows-2019
          - macos-11
          - ubuntu-20.04
        package:
          - frb_dart
          - frb_utils
          - tools/frb_internal
          - frb_example/dart_minimal
          - frb_example/pure_dart
          # TODO with_flutter
        exclude:
          - {image: windows-2019, package: frb_utils}
          - {image: macos-11, package: frb_utils}
          - {image: windows-2019, package: tools/frb_internal}
          - {image: macos-11, package: tools/frb_internal}

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.FRB_MAIN_RUST_VERSION }}
          components: rustfmt
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
          architecture: x64
      # execute
      - run: ./frb_internal test-dart-native --package ${{ matrix.package }}

  test_dart_web:
    name: 'Test :: Dart :: Web'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - frb_dart
          - frb_example/dart_minimal
          - frb_example/pure_dart
          # TODO with_flutter

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.FRB_MAIN_DART_VERSION }}
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          components: rust-src,rustfmt
      - name: Cache dependencies
        id: test-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
            frb_example/pure_dart/rust/target/
            frb_example/pure_dart/.local-chromium
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install crates
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: |
          sh -c "$(curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf)" '' -f
      # execute
      - run: ./frb_internal test-dart-web --package ${{ matrix.package }}

  test_dart_valgrind:
    name: 'Test :: Dart :: Valgrind'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - frb_example/dart_minimal
          - frb_example/pure_dart

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.FRB_MAIN_RUST_VERSION }}
          components: rustfmt
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
          architecture: x64
      # execute
      - run: ./frb_internal test-dart-valgrind --package ${{ matrix.package }}

  # ref https://betterprogramming.pub/test-flutter-apps-on-android-with-github-actions-abdba2137b4
  test_dart_android:
    name: 'Test :: Dart :: Android'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - frb_example/flutter_via_integrate
          # TODO other packages
        device:
          - "pixel"
          - "Nexus 6"
        api-level: [29]

    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
          architecture: x64
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-api-level-${{ matrix.api-level }}
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      # execute
      - name: Run Flutter integration tests
        timeout-minutes: 20
        uses: Wandalen/wretry.action@v1.0.25
        with:
          action: reactivecircus/android-emulator-runner@v2
          with: |
            api-level: ${{ matrix.api-level }}
            emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
            arch: x86_64
            profile: ${{ matrix.device }}
            script: ./frb_internal test-dart-web --package ${{ matrix.package }}

  # ref https://medium.com/flutter-community/run-flutter-driver-tests-on-github-actions-13c639c7e4ab
  test_dart_ios:
    name: 'Test :: Dart :: iOS'
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        device:
          - "iPad (9th generation) Simulator (16.2)"
          - "iPhone 12 Pro Max Simulator (16.2)"

    steps:
      # setup
      - uses: actions/checkout@v4
      - name: "Start Simulator"
        run: |
          # list all devices
          xcrun xctrace list devices
          # the extra "(" is to avoid matching things like "iPhone 12 Pro Max Simulator (16.2) + Apple Watch Series 5 - 44mm (8.0)"
          UDID=$(xcrun xctrace list devices | grep '${{ matrix.device }} (' | awk '{print $NF}' | tr -d '()')
          echo UDID=$UDID
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FRB_MAIN_FLUTTER_VERSION }}
          architecture: x64
      - id: cache-deps
        uses: ./.github/actions/setup
        with:
          cache-key: "$${{ steps.rust-toolchain.outputs.cachekey }}"
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.FRB_MAIN_RUST_VERSION }}

      - name: Run Flutter integration tests
        working-directory: ./frb_example/with_flutter
        run: flutter test integration_test/main.dart --verbose

