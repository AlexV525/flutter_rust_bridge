use crate::codegen::generator::acc::Acc;
use crate::codegen::generator::wire::rust::base::{WireRustGenerator, WireRustGeneratorContext};
use crate::codegen::generator::wire::rust::misc::wire_func::generate_wire_func;
use crate::codegen::generator::wire::rust::wire_rust_code::WireRustCode;
use crate::codegen::generator::wire::rust::IrPackComputedCache;
use crate::codegen::ir::pack::IrPack;
use crate::codegen::ir::ty::IrType;
use crate::library::codegen::generator::wire::rust::misc::ty::WireRustGeneratorMiscTrait;
use crate::library::codegen::ir::ty::IrTypeTrait;
use crate::misc::consts::HANDLER_NAME;
use itertools::Itertools;
use std::collections::HashSet;

mod misc;
pub(crate) mod ty;
pub(crate) mod wire_func;

pub(super) fn generate(
    ir_pack: &IrPack,
    context: WireRustGeneratorContext,
    cache: &IrPackComputedCache,
) -> Acc<Vec<WireRustCode>> {
    let mut ans = Acc::<Vec<WireRustCode>>::default();

    ans.push(FILE_ATTRIBUTES.to_string().into());
    ans.push(generate_code_header().into());

    ans.push(section_header_comment("imports"));
    ans.push(generate_imports(&cache.input_and_output_types, context).into());

    ans.push(section_header_comment("wire functions"));
    ans += ir_pack
        .funcs
        .iter()
        .map(|f| generate_wire_func(f, context))
        .collect();

    ans.push(section_header_comment("wrapper structs"));
    ans.extend(
        cache
            .distinct_output_types
            .iter()
            .filter_map(|ty| generate_wrapper_struct(ty, context))
            .map(|x| x.into()),
    );

    ans.push(section_header_comment("static checks"));
    ans.push(generate_static_checks(&cache.input_and_output_types, context).into());

    ans.push(section_header_comment("executor"));
    ans.push(generate_executor(ir_pack).into());

    ans
}

const FILE_ATTRIBUTES: &'static str = r#"#![allow(non_camel_case_types, unused, clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg, clippy::double_parens, non_snake_case, clippy::too_many_arguments)]"#;

pub(super) fn section_header_comment(section_name: &str) -> WireRustCode {
    format!("// Section: {section_name}\n").into()
}

fn generate_code_header() -> String {
    format!(
        "// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ {}.",
        env!("CARGO_PKG_VERSION")
    )
}

fn generate_wrapper_struct(ty: &IrType, context: WireRustGeneratorContext) -> Option<String> {
    // the generated wrapper structs need to be public for the StreamSinkTrait impl to work
    WireRustGenerator::new(ty.clone(), context)
        .wrapper_struct_name()
        .map(|wrapper_struct_name| {
            format!(
                r###"
                #[derive(Clone)]
                pub struct {}({});
                "###,
                wrapper_struct_name,
                ty.rust_api_type(),
            )
        })
}

fn generate_static_checks(types: &[IrType], context: WireRustGeneratorContext) -> String {
    let raw = types
        .iter()
        .filter_map(|ty| WireRustGenerator::new(ty.clone(), context).generate_static_checks())
        .collect_vec();

    if raw.is_empty() {
        return "".to_owned();
    }

    let mut lines = vec![];
    lines.push("const _: fn() = || {".to_owned());
    lines.extend(raw);
    lines.push("};".to_owned());
    lines.join("\n")
}

fn generate_imports(types: &[IrType], context: WireRustGeneratorContext) -> String {
    let rust_wire_mod = &context.config.rust_wire_mod;
    let imports_misc = format!(
        r#"
        use crate::{rust_wire_mod}::*;
        use flutter_rust_bridge::*;
        use core::panic::UnwindSafe;
        use std::sync::Arc;
        use std::ffi::c_void;
        use flutter_rust_bridge::rust2dart::IntoIntoDart;
        "#
    );

    let imports_from_types = types
        .iter()
        .flat_map(|ty| WireRustGenerator::new(ty.clone(), context).generate_imports())
        .flatten()
        // Don't include imports from the API file
        .filter(|import| !import.starts_with(&format!("use crate::{rust_wire_mod}::")))
        // de-duplicate
        .collect::<HashSet<String>>()
        .into_iter()
        .join("\n");

    imports_misc + &imports_from_types
}

fn generate_executor(ir_pack: &IrPack) -> String {
    if ir_pack.has_executor {
        "/* nothing since executor detected */".to_string()
    } else {
        format!(
            "support::lazy_static! {{
                pub static ref {HANDLER_NAME}: support::DefaultHandler = Default::default();
            }}"
        )
    }
}
