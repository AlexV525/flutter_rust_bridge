use crate::codegen::generator::acc::Acc;
use crate::codegen::generator::misc::target::Target;
use crate::codegen::generator::wire::rust::spec_generator::base::{
    WireRustGenerator, WireRustGeneratorContext,
};
use crate::codegen::generator::wire::rust::spec_generator::misc::wire_func::generate_wire_func;
use crate::codegen::generator::wire::rust::spec_generator::output_code::WireRustOutputCode;
use crate::codegen::generator::wire::rust::IrPackComputedCache;
use crate::codegen::ir::pack::IrPack;
use crate::codegen::ir::ty::IrType;
use crate::library::codegen::generator::wire::rust::spec_generator::misc::ty::WireRustGeneratorMiscTrait;
use crate::library::codegen::generator::wire::rust::spec_generator::wire2api::ty::WireRustGeneratorWire2apiTrait;
use crate::library::codegen::ir::ty::IrTypeTrait;
use crate::misc::consts::HANDLER_NAME;
use crate::utils::rust_project_utils::compute_mod_from_rust_path;
use itertools::Itertools;
use serde::Serialize;
use std::collections::HashSet;

pub(crate) mod ty;
pub(crate) mod wire_func;

#[derive(Serialize)]
pub(crate) struct WireRustOutputSpecMisc {
    pub file_attributes: Acc<Vec<WireRustOutputCode>>,
    pub code_header: Acc<Vec<WireRustOutputCode>>,
    pub imports: Acc<Vec<WireRustOutputCode>>,
    pub wire_funcs: Acc<Vec<WireRustOutputCode>>,
    pub wrapper_structs: Acc<Vec<WireRustOutputCode>>,
    pub static_checks: Acc<Vec<WireRustOutputCode>>,
    pub executor: Acc<Vec<WireRustOutputCode>>,
    pub extern_struct_names: Vec<String>,
}

pub(crate) fn generate(
    context: WireRustGeneratorContext,
    cache: &IrPackComputedCache,
) -> anyhow::Result<WireRustOutputSpecMisc> {
    Ok(WireRustOutputSpecMisc {
        file_attributes: Acc::new_common(vec![FILE_ATTRIBUTES.to_string().into()]),
        code_header: Acc::new_common(vec![generate_code_header().into()]),
        imports: Acc::new_common(vec![
            generate_imports(&cache.distinct_types, context)?.into()
        ]),
        wire_funcs: context
            .ir_pack
            .funcs
            .iter()
            .map(|f| generate_wire_func(f, context))
            .collect(),
        wrapper_structs: cache
            .distinct_output_types
            .iter()
            .filter_map(|ty| generate_wrapper_struct(ty, context))
            .map(|x| Acc::new_common(x.into()))
            .collect(),
        static_checks: Acc::new_common(vec![generate_static_checks(
            &cache.distinct_types,
            context,
        )
        .into()]),
        executor: Acc::new_common(vec![generate_executor(context.ir_pack).into()]),
        extern_struct_names: generate_extern_struct_names(context, cache),
    })
}

const FILE_ATTRIBUTES: &'static str = r#"#![allow(non_camel_case_types, unused, clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg, clippy::double_parens, non_snake_case, clippy::too_many_arguments)]"#;

fn generate_code_header() -> String {
    format!(
        "// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ {}.",
        env!("CARGO_PKG_VERSION")
    )
}

fn generate_wrapper_struct(ty: &IrType, context: WireRustGeneratorContext) -> Option<String> {
    // the generated wrapper structs need to be public for the StreamSinkTrait impl to work
    WireRustGenerator::new(ty.clone(), context)
        .wrapper_struct_name()
        .map(|wrapper_struct_name| {
            format!(
                r###"
                #[derive(Clone)]
                pub struct {}({});
                "###,
                wrapper_struct_name,
                ty.rust_api_type(),
            )
        })
}

fn generate_static_checks(types: &[IrType], context: WireRustGeneratorContext) -> String {
    let raw = types
        .iter()
        .filter_map(|ty| WireRustGenerator::new(ty.clone(), context).generate_static_checks())
        .collect_vec();

    if raw.is_empty() {
        return "".to_owned();
    }

    let mut lines = vec![];
    lines.push("const _: fn() = || {".to_owned());
    lines.extend(raw);
    lines.push("};".to_owned());
    lines.join("\n")
}

fn generate_imports(types: &[IrType], context: WireRustGeneratorContext) -> anyhow::Result<String> {
    let imports_misc = format!(
        r#"
        use flutter_rust_bridge::*;
        use core::panic::UnwindSafe;
        use std::sync::Arc;
        use std::ffi::c_void;
        use flutter_rust_bridge::rust2dart::IntoIntoDart;
        "#
    );

    let imports_for_rust_input = (context.config.rust_input_path_pack.rust_input_paths)
        .iter()
        .map(|rust_input_path| {
            Ok(format!(
                "use crate::{}::*;\n",
                compute_mod_from_rust_path(rust_input_path, &context.config.rust_crate_dir)?
            ))
        })
        .collect::<anyhow::Result<Vec<_>>>()?
        .join("");

    let imports_from_types = types
        .iter()
        .flat_map(|ty| WireRustGenerator::new(ty.clone(), context).generate_imports())
        .flatten()
        // TODO do we really need this?
        // // Don't include imports from the API file
        // .filter(|import| !import.starts_with(&format!("use crate::{rust_wire_mod}::")))
        // de-duplicate
        .collect::<HashSet<String>>()
        .into_iter()
        .join("\n");

    Ok(imports_misc + &imports_for_rust_input + &imports_from_types)
}

fn generate_executor(ir_pack: &IrPack) -> String {
    if ir_pack.has_executor {
        "/* nothing since executor detected */".to_string()
    } else {
        format!(
            "support::lazy_static! {{
                pub static ref {HANDLER_NAME}: support::DefaultHandler = Default::default();
            }}"
        )
    }
}

fn generate_extern_struct_names(
    context: WireRustGeneratorContext,
    cache: &IrPackComputedCache,
) -> Vec<String> {
    cache
        .distinct_types
        .iter()
        .filter(|ty| matches!(&ty, IrType::StructRef(_)))
        .map(|ty| WireRustGenerator::new(ty.clone(), context).rust_wire_type(Target::Io))
        .collect()
}
