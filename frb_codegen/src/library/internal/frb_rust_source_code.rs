use crate::codegen::generator::misc::target::Target;
use crate::codegen::generator::wire::rust::spec_generator::codec::pde::entrypoint::FfiDispatcherMode;
use crate::codegen::generator::wire::rust::spec_generator::codec::sse::entrypoint::generate_platform_generalized_uint8list_params;
use crate::codegen::generator::wire::rust::spec_generator::extern_func::ExternFunc;
use crate::library::commands::format_rust::format_rust;
use itertools::Itertools;
use log::info;
use std::fs;
use std::path::Path;
use strum::IntoEnumIterator;

pub(crate) fn generate_frb_rust_source_code(repo_base_dir: &Path) -> anyhow::Result<()> {
    info!("generate_frb_rust_source_code");

    let path_target = repo_base_dir
        .join("frb_rust")
        .join("src")
        .join("internal_generated")
        .join("mod.rs");

    let text = Target::iter()
        .map(|target| generate_target(target))
        .join("");

    let text = format!(
        r#"
            // THIS FILE IS AUTO-GENERATED BY flutter_rust_bridge_codegen internal-generate, PLEASE DO NOT EDIT

            #[doc(hidden)]
            #[macro_export]
            macro_rules! frb_generated_io_extern_func {{
                () => {{
                    #[no_mangle]
                    pub extern "C" fn frb_pde_ffi_dispatcher_primary(
                        func_id: i32,
                        port: i64,
                        ptr: *mut u8,
                        rust_vec_len: i32,
                        data_len: i32,
                    ) {{
                        pde_ffi_dispatcher_primary_impl(func_id, port, ptr, rust_vec_len, data_len)
                    }}

                    #[no_mangle]
                    pub extern "C" fn frb_pde_ffi_dispatcher_sync(
                        func_id: i32,
                        ptr: *mut u8,
                        rust_vec_len: i32,
                        data_len: i32,
                    ) -> $crate::for_generated::WireSyncRust2DartSse {{
                        pde_ffi_dispatcher_sync_impl(func_id, ptr, rust_vec_len, data_len)
                    }}
                }};
            }}
            
            #[doc(hidden)]
            #[macro_export]
            macro_rules! frb_generated_web_extern_func {{
                () => {{
                    #[wasm_bindgen]
                    pub fn frb_pde_ffi_dispatcher_primary(
                        func_id: i32,
                        port: $crate::for_generated::MessagePort,
                        ptr: $crate::for_generated::PlatformGeneralizedUint8ListPtr,
                        rust_vec_len: i32,
                        data_len: i32,
                    ) {{
                        pde_ffi_dispatcher_primary_impl(func_id, port, ptr, rust_vec_len, data_len)
                    }}

                    #[wasm_bindgen]
                    pub fn frb_pde_ffi_dispatcher_sync(
                        func_id: i32,
                        ptr: $crate::for_generated::PlatformGeneralizedUint8ListPtr,
                        rust_vec_len: i32,
                        data_len: i32,
                    ) -> $crate::for_generated::WireSyncRust2DartSse {{
                        pde_ffi_dispatcher_sync_impl(func_id, ptr, rust_vec_len, data_len)
                    }}
                }};
            }}
        "#
    );

    fs::write(&path_target, text)?;
    format_rust(&[path_target])?;

    Ok(())
}

fn generate_target(target: Target) -> String {
    let target_lowercase = target.to_string().to_lowercase();

    let funcs = FfiDispatcherMode::iter()
        .map(|mode| generate_target_pde_dispatcher_mode(target, mode))
        .collect_vec();
    let body = funcs.iter().map(|f| f.generate("")).join("\n");

    format!(
        r#"
            #[doc(hidden)]
            #[macro_export]
            macro_rules! frb_generated_{target_lowercase}_extern_func {{
                () => {{
                    {body}
                }};
            }}
        "#
    )
}

fn generate_target_pde_dispatcher_mode(target: Target, mode: FfiDispatcherMode) -> ExternFunc {
    ExternFunc {
        partial_func_name: "frb_pde_ffi_dispatcher_primary".to_owned(),
        params: [
            vec![TODO_func_id, TODO_port],
            generate_platform_generalized_uint8list_params(target.into()),
        ]
        .concat(),
        return_type: None,
        body: TODO,
        target,
    }
}
