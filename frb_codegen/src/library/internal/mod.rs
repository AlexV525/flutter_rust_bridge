use crate::library::commands::cbindgen::{cbindgen, cbindgen_raw, default_cbindgen_config};
use crate::library::commands::ffigen::{
    ffigen_raw, FfigenCommandConfig, FfigenCommandConfigHeaders,
};
use crate::utils::path_utils::path_to_string;
use convert_case::{Case, Casing};
use log::info;
use serde_json::json;
use std::env;
use std::path::{Path, PathBuf};

pub fn generate() -> anyhow::Result<()> {
    let repo_base_dir = compute_repo_base_dir()?;
    info!("Determine repo_base_dir={repo_base_dir:?}");

    generate_dart_native_api(&repo_base_dir)?;
    generate_frb_rust(&repo_base_dir)?;

    Ok(())
}

fn compute_repo_base_dir() -> anyhow::Result<PathBuf> {
    Ok(PathBuf::from(env::var("CARGO_MANIFEST_DIR")?)
        .parent()
        .unwrap()
        .to_owned())
}

fn generate_dart_native_api(repo_base_dir: &PathBuf) -> anyhow::Result<()> {
    info!("generate_dart_native_api");

    ffigen(
        repo_base_dir,
        &repo_base_dir.join("frb_rust/src/dart_api/dart_native_api.h"),
        "dart_native_api",
    )
}

fn generate_frb_rust(repo_base_dir: &PathBuf) -> anyhow::Result<()> {
    info!("generate_frb_rust");
    cbindgen_and_ffigen(repo_base_dir, &repo_base_dir.join("frb_rust"), "frb_rust")
}

fn cbindgen_and_ffigen(
    repo_base_dir: &PathBuf,
    rust_crate_dir: &Path,
    name: &str,
) -> anyhow::Result<()> {
    let c_path = repo_base_dir.join(format!(
        "frb_dart/lib/src/ffigen_generated/{}.h",
        name.to_case(Case::Snake)
    ));

    cbindgen_raw(default_cbindgen_config(), rust_crate_dir, &c_path)?;

    ffigen(repo_base_dir, &c_path, name)
}

fn ffigen(repo_base_dir: &Path, header: &Path, name: &str) -> anyhow::Result<()> {
    ffigen_raw(
        &FfigenCommandConfig {
            output: repo_base_dir
                .join("frb_dart/lib/src/ffigen_generated")
                .join(format!("{}.dart", name.to_case(Case::Snake))),
            name: name.to_case(Case::Pascal),
            headers: FfigenCommandConfigHeaders {
                entry_points: vec![header.to_owned()],
                include_directives: vec![header.to_owned()],
            },
            preamble: FFIGEN_PREAMBLE.to_owned(),
            description: FFIGEN_DESCRIPTION.to_owned(),
            ..Default::default()
        },
        &repo_base_dir.join("frb_dart"),
    )
}

const FFIGEN_PREAMBLE: &str = "// AUTO-GENERATED BY frb_codegen::internal command\n// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names, unused_field, library_private_types_in_public_api\n";
const FFIGEN_DESCRIPTION: &str = "generated by frb_codegen::internal command";
