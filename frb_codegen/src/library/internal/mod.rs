use crate::library::commands::cbindgen::{cbindgen, cbindgen_raw, default_cbindgen_config};
use crate::library::commands::ffigen::{
    ffigen_raw, FfigenCommandConfig, FfigenCommandConfigHeaders,
};
use crate::utils::path_utils::path_to_string;
use log::info;
use serde_json::json;
use std::env;
use std::path::PathBuf;

pub fn generate() -> anyhow::Result<()> {
    let repo_base_dir = compute_repo_base_dir()?;
    info!("Determine repo_base_dir={repo_base_dir:?}");

    generate_dart_native_api_ffigen(&repo_base_dir)?;

    generate_frb_rust_cbindgen(&repo_base_dir)?;
    generate_frb_rust_ffigen(&repo_base_dir)?;

    Ok(())
}

fn compute_repo_base_dir() -> anyhow::Result<PathBuf> {
    Ok(PathBuf::from(env::var("CARGO_MANIFEST_DIR")?)
        .parent()
        .unwrap()
        .to_owned())
}

fn generate_dart_native_api_ffigen(repo_base_dir: &PathBuf) -> anyhow::Result<()> {
    info!("generate_dart_native_api_ffigen");

    let header = repo_base_dir.join("frb_rust/src/dart_api/dart_native_api.h");
    ffigen_raw(
        &FfigenCommandConfig {
            output: repo_base_dir.join("frb_dart/lib/src/ffigen_generated/dart_native_api.dart"),
            name: "DartNativeApiCBinding".to_owned(),
            headers: FfigenCommandConfigHeaders {
                entry_points: vec![header.clone()],
                include_directives: vec![header],
            },
            preamble: FFIGEN_PREAMBLE.to_owned(),
            description: FFIGEN_DESCRIPTION.to_owned(),
            ..Default::default()
        },
        &repo_base_dir.join("frb_dart"),
    )
}

fn generate_frb_rust_cbindgen(repo_base_dir: &PathBuf) -> anyhow::Result<()> {
    info!("generate_frb_rust_cbindgen");

    cbindgen_raw(
        default_cbindgen_config(),
        &repo_base_dir.join("frb_rust"),
        &repo_base_dir.join("frb_dart/lib/src/ffigen_generated/frb_rust.h"),
    )
}

fn generate_frb_rust_ffigen(repo_base_dir: &PathBuf) -> anyhow::Result<()> {
    info!("generate_frb_rust_ffigen");

    let header = repo_base_dir.join("frb_dart/lib/src/ffigen_generated/frb_rust.h");
    ffigen_raw(
        &FfigenCommandConfig {
            output: repo_base_dir.join("frb_dart/lib/src/ffigen_generated/frb_rust.dart"),
            name: "FrbRustCBinding".to_owned(),
            headers: FfigenCommandConfigHeaders {
                entry_points: vec![header.clone()],
                include_directives: vec![header],
            },
            preamble: FFIGEN_PREAMBLE.to_owned(),
            description: FFIGEN_DESCRIPTION.to_owned(),
            ..Default::default()
        },
        &repo_base_dir.join("frb_dart"),
    )
}

const FFIGEN_PREAMBLE: &str = "// AUTO-GENERATED BY frb_codegen::internal command\n// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names, unused_field, library_private_types_in_public_api\n";
const FFIGEN_DESCRIPTION: &str = "generated by frb_codegen::internal command";
