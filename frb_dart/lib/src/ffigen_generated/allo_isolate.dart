// AUTO-GENERATED BY frb_codegen::internal command
// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names, unused_field, library_private_types_in_public_api

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// generated by frb_codegen::internal command
class AlloIsolateCBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AlloIsolateCBinding(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AlloIsolateCBinding.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  /// Stores the function pointer of `Dart_PostCObject`, this only should be
  /// called once at the start up of the Dart/Flutter Application. it is exported
  /// and marked as `#[no_mangle]`.
  ///
  /// you could use it from Dart as following:
  ///
  /// #### Safety
  /// This function should only be called once at the start up of the Dart
  /// application.
  ///
  /// ### Example
  /// ```dart,ignore
  /// import 'dart:ffi';
  ///
  /// typedef dartPostCObject = Pointer Function(
  /// Pointer<NativeFunction<Int8 Function(Int64,
  /// Pointer<Dart_CObject>)>>);
  ///
  /// // assumes that _dl is the `DynamicLibrary`
  /// final storeDartPostCObject =
  /// _dl.lookupFunction<dartPostCObject, dartPostCObject>(
  /// 'store_dart_post_cobject',
  /// );
  ///
  /// // then later call
  ///
  /// storeDartPostCObject(NativeApi.postCObject);
  /// ```
  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();
}

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_WeakPersistentHandleFinalizer callback; a non-NULL callback must be
/// provided.
///
/// https://github.com/dart-lang/sdk/blob/main/runtime/include/dart_native_api.h
abstract class DartCObjectType {
  static const int DartNull = 0;
  static const int DartBool = 1;
  static const int DartInt32 = 2;
  static const int DartInt64 = 3;
  static const int DartDouble = 4;
  static const int DartString = 5;
  static const int DartArray = 6;
  static const int DartTypedData = 7;
  static const int DartExternalTypedData = 8;
  static const int DartSendPort = 9;
  static const int DartCapability = 10;
  static const int DartNativePointer = 11;
  static const int DartUnsupported = 12;
  static const int DartNumberOfTypes = 13;
}

abstract class DartTypedDataType {
  static const int ByteData = 0;
  static const int Int8 = 1;
  static const int Uint8 = 2;
  static const int Uint8Clamped = 3;
  static const int Int16 = 4;
  static const int Uint16 = 5;
  static const int Int32 = 6;
  static const int Uint32 = 7;
  static const int Int64 = 8;
  static const int Uint64 = 9;
  static const int Float32 = 10;
  static const int Float64 = 11;
  static const int Float32x4 = 12;
  static const int Invalid = 13;
}

final class DartNativeSendPort extends ffi.Struct {
  @DartPort()
  external int id;

  @DartPort()
  external int origin_id;
}

/// A port is used to send or receive inter-isolate messages
typedef DartPort = ffi.Int64;

final class DartNativeCapability extends ffi.Struct {
  @ffi.Int64()
  external int id;
}

final class DartNativeArray extends ffi.Struct {
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Pointer<DartCObject>> values;
}

final class DartCObject extends ffi.Struct {
  @DartCObjectType1()
  external int ty;

  external DartCObjectValue value;
}

typedef DartCObjectType1 = ffi.Int32;

final class DartCObjectValue extends ffi.Union {
  @ffi.Bool()
  external bool as_bool;

  @ffi.Int32()
  external int as_int32;

  @ffi.Int64()
  external int as_int64;

  @ffi.Double()
  external double as_double;

  external ffi.Pointer<ffi.Char> as_string;

  external DartNativeSendPort as_send_port;

  external DartNativeCapability as_capability;

  external DartNativeArray as_array;

  external DartNativeTypedData as_typed_data;

  external DartNativeExternalTypedData as_external_typed_data;

  external DartNativePointer as_native_pointer;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint64> _bindgen_union_align;
}

final class DartNativeTypedData extends ffi.Struct {
  @DartTypedDataType1()
  external int ty;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> values;
}

typedef DartTypedDataType1 = ffi.Int32;

final class DartNativeExternalTypedData extends ffi.Struct {
  @DartTypedDataType1()
  external int ty;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<ffi.Void> peer;

  external DartHandleFinalizer callback;
}

/// https://github.com/dart-lang/sdk/blob/main/runtime/include/dart_api.h
typedef DartHandleFinalizer = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> isolate_callback_data, ffi.Pointer<ffi.Void> peer)>>;

final class DartNativePointer extends ffi.Struct {
  @ffi.IntPtr()
  external int ptr;

  @ffi.IntPtr()
  external int size;

  external DartHandleFinalizer callback;
}

/// Posts a message on some port. The message will contain the
/// Dart_CObject object graph rooted in 'message'.
///
/// While the message is being sent the state of the graph of
/// Dart_CObject structures rooted in 'message' should not be accessed,
/// as the message generation will make temporary modifications to the
/// data. When the message has been sent the graph will be fully
/// restored.
///
/// `port_id` The destination port.
/// `message` The message to send.
///
/// return true if the message was posted.
typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<DartCObject> message)>>;
