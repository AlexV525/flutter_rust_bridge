// AUTO-GENERATED BY frb_codegen::internal command
// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names, unused_field, library_private_types_in_public_api

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// generated by frb_codegen::internal command
class MultiPackageCBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MultiPackageCBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MultiPackageCBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Posts a message on some port. The message will contain the Dart_CObject
  /// object graph rooted in 'message'.
  ///
  /// While the message is being sent the state of the graph of Dart_CObject
  /// structures rooted in 'message' should not be accessed, as the message
  /// generation will make temporary modifications to the data. When the message
  /// has been sent the graph will be fully restored.
  ///
  /// If true is returned, the message was enqueued, and finalizers for external
  /// typed data will eventually run, even if the receiving isolate shuts down
  /// before processing the message. If false is returned, the message was not
  /// enqueued and ownership of external typed data in the message remains with the
  /// caller.
  ///
  /// This function may be called on any thread when the VM is running (that is,
  /// after Dart_Initialize has returned and before Dart_Cleanup has been called).
  ///
  /// \param port_id The destination port.
  /// \param message The message to send.
  ///
  /// \return True if the message was posted.
  late final ffi.Pointer<ffi.Int> _bool = _lookup<ffi.Int>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  /// Creates a new native port.  When messages are received on this
  /// native port, then they will be dispatched to the provided native
  /// message handler.
  ///
  /// \param name The name of this port in debugging messages.
  /// \param handler The C handler to run when messages arrive on the port.
  /// \param handle_concurrently Is it okay to process requests on this
  /// native port concurrently?
  ///
  /// \return If successful, returns the port id for the native port.  In
  /// case of error, returns ILLEGAL_PORT.
  late final ffi.Pointer<ffi.Int> _Dart_Port = _lookup<ffi.Int>('Dart_Port');

  int get Dart_Port => _Dart_Port.value;

  set Dart_Port(int value) => _Dart_Port.value = value;

  /// Forces all loaded classes and functions to be compiled eagerly in
  /// the current isolate..
  ///
  /// TODO(turnidge): Document.
  late final ffi.Pointer<ffi.Int> _DART_WARN_UNUSED_RESULT =
      _lookup<ffi.Int>('DART_WARN_UNUSED_RESULT');

  int get DART_WARN_UNUSED_RESULT => _DART_WARN_UNUSED_RESULT.value;

  set DART_WARN_UNUSED_RESULT(int value) =>
      _DART_WARN_UNUSED_RESULT.value = value;

  ffi.Pointer<ffi.Int> Dart_ExecuteInternalCommand(
    ffi.Pointer<ffi.Char> command,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _Dart_ExecuteInternalCommand(
      command,
      arg,
    );
  }

  late final _Dart_ExecuteInternalCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('Dart_ExecuteInternalCommand');
  late final _Dart_ExecuteInternalCommand =
      _Dart_ExecuteInternalCommandPtr.asFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// Stores the function pointer of `Dart_PostCObject`, this only should be
  /// called once at the start up of the Dart/Flutter Application. it is exported
  /// and marked as `#[no_mangle]`.
  ///
  /// you could use it from Dart as following:
  ///
  /// #### Safety
  /// This function should only be called once at the start up of the Dart
  /// application.
  ///
  /// ### Example
  /// ```dart,ignore
  /// import 'dart:ffi';
  ///
  /// typedef dartPostCObject = Pointer Function(
  /// Pointer<NativeFunction<Int8 Function(Int64,
  /// Pointer<Dart_CObject>)>>);
  ///
  /// // assumes that _dl is the `DynamicLibrary`
  /// final storeDartPostCObject =
  /// _dl.lookupFunction<dartPostCObject, dartPostCObject>(
  /// 'store_dart_post_cobject',
  /// );
  ///
  /// // then later call
  ///
  /// storeDartPostCObject(NativeApi.postCObject);
  /// ```
  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void error(
    ffi.Pointer<ffi.Int> msg,
  ) {
    return _error(
      msg,
    );
  }

  late final _errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'error');
  late final _error =
      _errorPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  /// # Safety
  ///
  /// This function should never be called manually.
  int new_dart_opaque(
    int handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Int)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(int)>();

  /// # Safety
  ///
  /// This function should never be called manually.
  int get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<int Function(int)>();

  /// # Safety
  ///
  /// This function should never be called manually.
  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  /// # Safety
  ///
  /// This function should never be called manually.
  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _init_frb_dart_api_dl(
      data,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// # Safety
  ///
  /// This function should never be called manually.
  void free_wire_sync_return(
    WireSyncReturn ptr,
  ) {
    return _free_wire_sync_return(
      ptr,
    );
  }

  late final _free_wire_sync_returnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_wire_sync_return');
  late final _free_wire_sync_return =
      _free_wire_sync_returnPtr.asFunction<void Function(WireSyncReturn)>();
}

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_HandleFinalizer callback; a non-NULL callback must be provided.
///
/// Note that Dart_CObject_kNativePointer is intended for internal use by
/// dart:io implementation and has no connection to dart:ffi Pointer class.
/// It represents a pointer to a native resource of a known type.
/// The receiving side will only see this pointer as an integer and will not
/// see the specified finalizer.
/// The specified finalizer will only be invoked if the message is not delivered.
abstract class Dart_CObject_Type {
  static const int Dart_CObject_kNull = 0;
  static const int Dart_CObject_kBool = 1;
  static const int Dart_CObject_kInt32 = 2;
  static const int Dart_CObject_kInt64 = 3;
  static const int Dart_CObject_kDouble = 4;
  static const int Dart_CObject_kString = 5;
  static const int Dart_CObject_kArray = 6;
  static const int Dart_CObject_kTypedData = 7;
  static const int Dart_CObject_kExternalTypedData = 8;
  static const int Dart_CObject_kSendPort = 9;
  static const int Dart_CObject_kCapability = 10;
  static const int Dart_CObject_kNativePointer = 11;
  static const int Dart_CObject_kUnsupported = 12;
  static const int Dart_CObject_kUnmodifiableExternalTypedData = 13;
  static const int Dart_CObject_kNumberOfTypes = 14;
}

final class _Dart_CObject extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion1 value;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Int()
  external int as_bool;

  @ffi.Int()
  external int as_int32;

  @ffi.Int()
  external int as_int64;

  @ffi.Double()
  external double as_double;

  external ffi.Pointer<ffi.Char> as_string;

  external UnnamedStruct1 as_send_port;

  external UnnamedStruct2 as_capability;

  external UnnamedStruct3 as_array;

  external UnnamedStruct4 as_typed_data;

  external UnnamedStruct5 as_external_typed_data;

  external UnnamedStruct6 as_native_pointer;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int()
  external int id;

  @ffi.Int()
  external int origin_id;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int()
  external int id;
}

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int()
  external int length;

  external ffi.Pointer<ffi.Pointer<_Dart_CObject>> values;
}

final class UnnamedStruct4 extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.Int()
  external int length;

  external ffi.Pointer<ffi.Int> values;
}

final class UnnamedStruct5 extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.Int()
  external int length;

  external ffi.Pointer<ffi.Int> data;

  external ffi.Pointer<ffi.Void> peer;

  @ffi.Int()
  external int callback;
}

final class UnnamedStruct6 extends ffi.Struct {
  @ffi.Int()
  external int ptr;

  @ffi.Int()
  external int size;

  @ffi.Int()
  external int callback;
}

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_WeakPersistentHandleFinalizer callback; a non-NULL callback must be
/// provided.
///
/// https://github.com/dart-lang/sdk/blob/main/runtime/include/dart_native_api.h
abstract class DartCObjectType {
  static const int DartNull = 0;
  static const int DartBool = 1;
  static const int DartInt32 = 2;
  static const int DartInt64 = 3;
  static const int DartDouble = 4;
  static const int DartString = 5;
  static const int DartArray = 6;
  static const int DartTypedData = 7;
  static const int DartExternalTypedData = 8;
  static const int DartSendPort = 9;
  static const int DartCapability = 10;
  static const int DartNativePointer = 11;
  static const int DartUnsupported = 12;
  static const int DartNumberOfTypes = 13;
}

abstract class DartTypedDataType {
  static const int ByteData = 0;
  static const int Int8 = 1;
  static const int Uint8 = 2;
  static const int Uint8Clamped = 3;
  static const int Int16 = 4;
  static const int Uint16 = 5;
  static const int Int32 = 6;
  static const int Uint32 = 7;
  static const int Int64 = 8;
  static const int Uint64 = 9;
  static const int Float32 = 10;
  static const int Float64 = 11;
  static const int Float32x4 = 12;
  static const int Invalid = 13;
}

final class DartNativeSendPort extends ffi.Struct {
  @DartPort()
  external int id;

  @DartPort()
  external int origin_id;
}

/// A port is used to send or receive inter-isolate messages
typedef DartPort = ffi.Int64;

final class DartNativeCapability extends ffi.Struct {
  @ffi.Int64()
  external int id;
}

final class DartNativeArray extends ffi.Struct {
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Pointer<DartCObject>> values;
}

final class DartCObject extends ffi.Struct {
  @DartCObjectType1()
  external int ty;

  external DartCObjectValue value;
}

typedef DartCObjectType1 = ffi.Int32;

final class DartCObjectValue extends ffi.Union {
  @ffi.Bool()
  external bool as_bool;

  @ffi.Int32()
  external int as_int32;

  @ffi.Int64()
  external int as_int64;

  @ffi.Double()
  external double as_double;

  external ffi.Pointer<ffi.Char> as_string;

  external DartNativeSendPort as_send_port;

  external DartNativeCapability as_capability;

  external DartNativeArray as_array;

  external DartNativeTypedData as_typed_data;

  external DartNativeExternalTypedData as_external_typed_data;

  external DartNativePointer as_native_pointer;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint64> _bindgen_union_align;
}

final class DartNativeTypedData extends ffi.Struct {
  @DartTypedDataType1()
  external int ty;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> values;
}

typedef DartTypedDataType1 = ffi.Int32;

final class DartNativeExternalTypedData extends ffi.Struct {
  @DartTypedDataType1()
  external int ty;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<ffi.Void> peer;

  external DartHandleFinalizer callback;
}

/// https://github.com/dart-lang/sdk/blob/main/runtime/include/dart_api.h
typedef DartHandleFinalizer = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> isolate_callback_data,
            ffi.Pointer<ffi.Void> peer)>>;

final class DartNativePointer extends ffi.Struct {
  @ffi.IntPtr()
  external int ptr;

  @ffi.IntPtr()
  external int size;

  external DartHandleFinalizer callback;
}

/// Posts a message on some port. The message will contain the
/// Dart_CObject object graph rooted in 'message'.
///
/// While the message is being sent the state of the graph of
/// Dart_CObject structures rooted in 'message' should not be accessed,
/// as the message generation will make temporary modifications to the
/// data. When the message has been sent the graph will be fully
/// restored.
///
/// `port_id` The destination port.
/// `message` The message to send.
///
/// return true if the message was posted.
typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<DartCObject> message)>>;

final class Result_JsValue extends ffi.Opaque {}

typedef WireSyncReturn = ffi.Pointer<Dart_CObject>;
typedef Dart_CObject = _Dart_CObject;
