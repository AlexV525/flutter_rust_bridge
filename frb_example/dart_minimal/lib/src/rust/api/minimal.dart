// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `SimpleTraitTwinNormalRwLockReadGuard`
// These functions are ignored: `blocking_read`

Future<int> minimalAdder({required int a, required int b}) =>
    RustLib.instance.api.crateApiMinimalMinimalAdder(a: a, b: b);

Future<int> funcArgTraitImplTwinNormal(
        {required SimpleTraitTwinNormalImpl arg}) =>
    RustLib.instance.api.crateApiMinimalFuncArgTraitImplTwinNormal(arg: arg);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructOneWithTraitTwinNormal>>
abstract class StructOneWithTraitTwinNormal implements SimpleTraitTwinNormal {
  int get one;

  void set one(int one);

  Future<int> simpleTraitFnReceiverBorrowTwinNormal();

  void dispose();

  bool get isDisposed;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructTwoWithTraitTwinNormal>>
abstract class StructTwoWithTraitTwinNormal implements SimpleTraitTwinNormal {
  int get two;

  void set two(int two);

  Future<int> simpleTraitFnReceiverBorrowTwinNormal();

  void dispose();

  bool get isDisposed;
}

abstract class SimpleTraitTwinNormal {
  Future<int> simpleTraitFnReceiverBorrowTwinNormal();
}
