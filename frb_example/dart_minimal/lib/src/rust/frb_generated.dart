// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: unused_import, unused_element, duplicate_ignore, invalid_use_of_internal_member

import 'api/minimal.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'frb_example_dart_minimal',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<TheEnum> hi({required TheEnum a, dynamic hint});

  Future<int> minimalAdder({required int a, required int b, dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<TheEnum> hi({required TheEnum a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_the_enum(a);
        return wire.wire_hi(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_the_enum,
        decodeErrorData: null,
      ),
      constMeta: kHiConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHiConstMeta => const TaskConstMeta(
        debugName: "hi",
        argNames: ["a"],
      );

  @override
  Future<int> minimalAdder({required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(a);
        var arg1 = cst_encode_i_32(b);
        return wire.wire_minimal_adder(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kMinimalAdderConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMinimalAdderConstMeta => const TaskConstMeta(
        debugName: "minimal_adder",
        argNames: ["a", "b"],
      );

  @protected
  TheEnum dco_decode_box_autoadd_the_enum(dynamic raw) {
    return dco_decode_the_enum(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  @protected
  TheEnum dco_decode_the_enum(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return TheEnum_TheVariant(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  TheEnum sse_decode_box_autoadd_the_enum(SseDeserializer deserializer) {
    return (sse_decode_the_enum(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  TheEnum sse_decode_the_enum(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return TheEnum_TheVariant(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int cst_encode_i_32(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  void sse_encode_box_autoadd_the_enum(TheEnum self, SseSerializer serializer) {
    sse_encode_the_enum(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_the_enum(TheEnum self, SseSerializer serializer) {
    switch (self) {
      case TheEnum_TheVariant(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}
}
