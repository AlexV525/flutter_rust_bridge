// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: unused_import, unused_element, duplicate_ignore, invalid_use_of_internal_member

import 'api/minimal.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  ffi.Pointer<wire_cst_hello> cst_encode_box_autoadd_hello(Hello raw) {
    final ptr = wire.cst_new_box_autoadd_hello();
    _cst_api_fill_to_wire_hello(raw, ptr.ref);
    return ptr;
  }

  void _cst_api_fill_to_wire_box_autoadd_hello(
      Hello apiObj, ffi.Pointer<wire_cst_hello> wireObj) {
    _cst_api_fill_to_wire_hello(apiObj, wireObj.ref);
  }

  void _cst_api_fill_to_wire_hello(Hello apiObj, wire_cst_hello wireObj) {
    if (apiObj is Hello_Apple) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Hello_Orange) {
      var pre_field0 = cst_encode_i_32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = wire.cst_inflate_Hello_Orange();
      wireObj.kind.ref.Orange.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Hello_Raspi) {
      var pre_hello_world = cst_encode_i_32(apiObj.helloWorld);
      var pre_another_field = cst_encode_i_32(apiObj.anotherField);
      wireObj.tag = 2;
      wireObj.kind = wire.cst_inflate_Hello_Raspi();
      wireObj.kind.ref.Raspi.ref.hello_world = pre_hello_world;
      wireObj.kind.ref.Raspi.ref.another_field = pre_another_field;
      return;
    }
  }
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void frb_initialize_rust(
    int dart_opaque_drop_port,
    int dart_fn_invoke_port,
  ) {
    return _frb_initialize_rust(
      dart_opaque_drop_port,
      dart_fn_invoke_port,
    );
  }

  late final _frb_initialize_rustPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'frb_initialize_rust');
  late final _frb_initialize_rust =
      _frb_initialize_rustPtr.asFunction<void Function(int, int)>();

  void wire_hello(
    int port_,
    ffi.Pointer<wire_cst_hello> a,
  ) {
    return _wire_hello(
      port_,
      a,
    );
  }

  late final _wire_helloPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_cst_hello>)>>('wire_hello');
  late final _wire_hello = _wire_helloPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_hello>)>();

  void wire_minimal_adder(
    int port_,
    int a,
    int b,
  ) {
    return _wire_minimal_adder(
      port_,
      a,
      b,
    );
  }

  late final _wire_minimal_adderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>(
      'wire_minimal_adder');
  late final _wire_minimal_adder =
      _wire_minimal_adderPtr.asFunction<void Function(int, int, int)>();

  ffi.Pointer<wire_cst_hello> cst_new_box_autoadd_hello() {
    return _cst_new_box_autoadd_hello();
  }

  late final _cst_new_box_autoadd_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_hello> Function()>>(
          'cst_new_box_autoadd_hello');
  late final _cst_new_box_autoadd_hello = _cst_new_box_autoadd_helloPtr
      .asFunction<ffi.Pointer<wire_cst_hello> Function()>();

  ffi.Pointer<HelloKind> cst_inflate_Hello_Orange() {
    return _cst_inflate_Hello_Orange();
  }

  late final _cst_inflate_Hello_OrangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HelloKind> Function()>>(
          'cst_inflate_Hello_Orange');
  late final _cst_inflate_Hello_Orange = _cst_inflate_Hello_OrangePtr
      .asFunction<ffi.Pointer<HelloKind> Function()>();

  ffi.Pointer<HelloKind> cst_inflate_Hello_Raspi() {
    return _cst_inflate_Hello_Raspi();
  }

  late final _cst_inflate_Hello_RaspiPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HelloKind> Function()>>(
          'cst_inflate_Hello_Raspi');
  late final _cst_inflate_Hello_Raspi = _cst_inflate_Hello_RaspiPtr
      .asFunction<ffi.Pointer<HelloKind> Function()>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_Hello_Apple extends ffi.Opaque {}

final class wire_cst_Hello_Orange extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_Hello_Raspi extends ffi.Struct {
  @ffi.Int32()
  external int hello_world;

  @ffi.Int32()
  external int another_field;
}

final class HelloKind extends ffi.Union {
  external ffi.Pointer<wire_cst_Hello_Apple> Apple;

  external ffi.Pointer<wire_cst_Hello_Orange> Orange;

  external ffi.Pointer<wire_cst_Hello_Raspi> Raspi;
}

final class wire_cst_hello extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<HelloKind> kind;
}
