// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: unused_import, unused_element, duplicate_ignore

import 'api/minimal.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  List<dynamic> cst_encode_box_autoadd_hello(Hello raw) {
    return cst_encode_hello(raw);
  }

  @protected
  List<dynamic> cst_encode_hello(Hello raw) {
    if (raw is Hello_Apple) {
      return [0];
    }
    if (raw is Hello_Orange) {
      return [1, cst_encode_i_32(raw.field0)];
    }
    if (raw is Hello_Raspi) {
      return [
        2,
        cst_encode_i_32(raw.helloWorld),
        cst_encode_i_32(raw.anotherField)
      ];
    }

    throw Exception('unreachable');
  }
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void frb_initialize_rust(NativePortType dart_opaque_drop_port,
          NativePortType dart_fn_invoke_port) =>
      wasmModule.frb_initialize_rust(
          dart_opaque_drop_port, dart_fn_invoke_port);

  void wire_hello(NativePortType port_, List<dynamic> a) =>
      wasmModule.wire_hello(port_, a);

  void wire_minimal_adder(NativePortType port_, int a, int b) =>
      wasmModule.wire_minimal_adder(port_, a, b);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void frb_initialize_rust(
      NativePortType dart_opaque_drop_port, NativePortType dart_fn_invoke_port);

  external void wire_hello(NativePortType port_, List<dynamic> a);

  external void wire_minimal_adder(NativePortType port_, int a, int b);
}
