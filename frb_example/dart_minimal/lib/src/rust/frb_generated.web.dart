// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.38.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'api/minimal.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  StructWithDartKeywordFieldTwinNormal
      dco_decode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
          dynamic raw);

  @protected
  StructWithFieldRenameTwinNormal
      dco_decode_box_autoadd_struct_with_field_rename_twin_normal(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  StructWithDartKeywordFieldTwinNormal
      dco_decode_struct_with_dart_keyword_field_twin_normal(dynamic raw);

  @protected
  StructWithFieldRenameTwinNormal
      dco_decode_struct_with_field_rename_twin_normal(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  StructWithDartKeywordFieldTwinNormal
      sse_decode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
          SseDeserializer deserializer);

  @protected
  StructWithFieldRenameTwinNormal
      sse_decode_box_autoadd_struct_with_field_rename_twin_normal(
          SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  StructWithDartKeywordFieldTwinNormal
      sse_decode_struct_with_dart_keyword_field_twin_normal(
          SseDeserializer deserializer);

  @protected
  StructWithFieldRenameTwinNormal
      sse_decode_struct_with_field_rename_twin_normal(
          SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  List<dynamic>
      cst_encode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
          StructWithDartKeywordFieldTwinNormal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_struct_with_dart_keyword_field_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_field_rename_twin_normal(
      StructWithFieldRenameTwinNormal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_struct_with_field_rename_twin_normal(raw);
  }

  @protected
  Object cst_encode_i_64(PlatformInt64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return castNativeBigInt(raw);
  }

  @protected
  List<dynamic> cst_encode_struct_with_dart_keyword_field_twin_normal(
      StructWithDartKeywordFieldTwinNormal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_i_32(raw.class_), cst_encode_i_64(raw.interface_)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_field_rename_twin_normal(
      StructWithFieldRenameTwinNormal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_i_32(raw.renamed_field)];
  }

  @protected
  int cst_encode_i_32(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
      StructWithDartKeywordFieldTwinNormal self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_struct_with_field_rename_twin_normal(
      StructWithFieldRenameTwinNormal self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_struct_with_dart_keyword_field_twin_normal(
      StructWithDartKeywordFieldTwinNormal self, SseSerializer serializer);

  @protected
  void sse_encode_struct_with_field_rename_twin_normal(
      StructWithFieldRenameTwinNormal self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void wire__crate__api__minimal__func_for_struct_with_dart_keyword_field_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule
          .wire__crate__api__minimal__func_for_struct_with_dart_keyword_field_twin_normal(
              port_, arg);

  void wire__crate__api__minimal__func_for_struct_with_field_rename_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule
          .wire__crate__api__minimal__func_for_struct_with_field_rename_twin_normal(
              port_, arg);

  void wire__crate__api__minimal__init_app(NativePortType port_) =>
      wasmModule.wire__crate__api__minimal__init_app(port_);

  void wire__crate__api__minimal__minimal_adder(
          NativePortType port_, int a, int b) =>
      wasmModule.wire__crate__api__minimal__minimal_adder(port_, a, b);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule {
  external void
      wire__crate__api__minimal__func_for_struct_with_dart_keyword_field_twin_normal(
          NativePortType port_, List<dynamic> arg);

  external void
      wire__crate__api__minimal__func_for_struct_with_field_rename_twin_normal(
          NativePortType port_, List<dynamic> arg);

  external void wire__crate__api__minimal__init_app(NativePortType port_);

  external void wire__crate__api__minimal__minimal_adder(
      NativePortType port_, int a, int b);
}
