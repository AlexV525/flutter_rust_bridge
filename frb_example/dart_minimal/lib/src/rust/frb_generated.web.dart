// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: unused_import, unused_element, duplicate_ignore, invalid_use_of_internal_member

import 'api/minimal.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  TheEnum dco_decode_box_autoadd_the_enum(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  TheEnum dco_decode_the_enum(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  TheEnum sse_decode_box_autoadd_the_enum(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  TheEnum sse_decode_the_enum(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  List<dynamic> cst_encode_box_autoadd_the_enum(TheEnum raw) {
    return cst_encode_the_enum(raw);
  }

  @protected
  List<dynamic> cst_encode_the_enum(TheEnum raw) {
    if (raw is TheEnum_TheVariant) {
      return [0, cst_encode_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  int cst_encode_i_32(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_box_autoadd_the_enum(TheEnum self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_the_enum(TheEnum self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void frb_initialize_rust(NativePortType dart_opaque_drop_port,
          NativePortType dart_fn_invoke_port) =>
      wasmModule.frb_initialize_rust(
          dart_opaque_drop_port, dart_fn_invoke_port);

  void dart_fn_deliver_output(int call_id, PlatformGeneralizedUint8ListPtr ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.dart_fn_deliver_output(
          call_id, ptr_, rust_vec_len_, data_len_);

  void wire_hi(NativePortType port_, List<dynamic> a) =>
      wasmModule.wire_hi(port_, a);

  void wire_minimal_adder(NativePortType port_, int a, int b) =>
      wasmModule.wire_minimal_adder(port_, a, b);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void frb_initialize_rust(
      NativePortType dart_opaque_drop_port, NativePortType dart_fn_invoke_port);

  external void dart_fn_deliver_output(int call_id,
      PlatformGeneralizedUint8ListPtr ptr_, int rust_vec_len_, int data_len_);

  external void wire_hi(NativePortType port_, List<dynamic> a);

  external void wire_minimal_adder(NativePortType port_, int a, int b);
}
