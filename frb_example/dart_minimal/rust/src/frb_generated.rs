// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.20.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::minimal::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::rust_async::{RwLock, RwLockReadGuard};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.20";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: arena

enum ArenaItem<'a> {
    RustAutoOpaque_Opaque_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(
        RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<MyOpaqueType>>,
    ),
    RustAutoOpaque_Lock_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(
        flutter_rust_bridge::rust_async::RwLockReadGuard<'a, MyOpaqueType>,
    ),
}

impl<'a> Arena<'a> {
    fn alloc_RustAutoOpaque_Opaque_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(
        &'a self,
        value: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<MyOpaqueType>>,
    ) -> &'a mut RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<MyOpaqueType>>
    {
        let output = self.0.alloc(ArenaItem::RustAutoOpaque_Opaque_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(value));
        if let ArenaItem::RustAutoOpaque_Opaque_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(inner) = output { inner } else { panic!() }
    }
    fn alloc_RustAutoOpaque_Lock_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(
        &'a self,
        value: flutter_rust_bridge::rust_async::RwLockReadGuard<'a, MyOpaqueType>,
    ) -> &'a mut flutter_rust_bridge::rust_async::RwLockReadGuard<'a, MyOpaqueType> {
        let output = self.0.alloc(ArenaItem::RustAutoOpaque_Lock_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(value));
        if let ArenaItem::RustAutoOpaque_Lock_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(inner) = output { inner } else { panic!() }
    }
}

// Section: wire_funcs

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<MyOpaqueType>
);

// Section: dart2rust

impl<'a> SseDecode<'a> for &'a MyOpaqueType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        arena: &'a Arena<'a>,
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<MyOpaqueType>,
        >>::sse_decode(arena, deserializer);
        let inner_ref: &'a mut RustOpaqueMoi<RwLock<MyOpaqueType>> = arena.alloc_RustAutoOpaque_Opaque_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(inner);
        let ans: &'a mut RwLockReadGuard<MyOpaqueType> = arena.alloc_RustAutoOpaque_Lock_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMyOpaqueType(inner_ref.rust_auto_opaque_decode_ref());
        return ans;
    }
}

impl<'a> SseDecode<'a>
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<MyOpaqueType>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        arena: &Arena,
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        panic!()
    }
}
