// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

#[cfg(not(target_family = "wasm"))]
flutter_rust_bridge::for_generated::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER:
    flutter_rust_bridge::DefaultHandler<flutter_rust_bridge::for_generated::SimpleThreadPool>
    = flutter_rust_bridge::DefaultHandler::new_simple(Default::default());
}

#[cfg(target_family = "wasm")]
thread_local! {
    pub static THREAD_POOL: flutter_rust_bridge::for_generated::SimpleThreadPool = Default::default();
}

#[cfg(target_family = "wasm")]
flutter_rust_bridge::for_generated::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER:
    flutter_rust_bridge::DefaultHandler<&'static std::thread::LocalKey<flutter_rust_bridge::for_generated::SimpleThreadPool>>
    = flutter_rust_bridge::DefaultHandler::new_simple(&THREAD_POOL);
}

// Section: wire_funcs

fn wire_hello_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<crate::api::minimal::Hello> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "hello",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(crate::api::minimal::hello(api_a)))
            }
        },
    )
}
fn wire_minimal_adder_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<i32> + core::panic::UnwindSafe,
    b: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "minimal_adder",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(crate::api::minimal::minimal_adder(
                    api_a, api_b,
                )))
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl SseDecode for crate::api::minimal::Hello {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::minimal::Hello::Apple;
            }
            1 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                return crate::api::minimal::Hello::Orange(field0);
            }
            2 => {
                let mut helloWorld = <i32>::sse_decode(deserializer);
                let mut anotherField = <i32>::sse_decode(deserializer);
                return crate::api::minimal::Hello::Raspi {
                    hello_world: helloWorld,
                    another_field: anotherField,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::api::minimal::Hello {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::minimal::Hello::Apple => {
                vec![0.into_dart()]
            }
            crate::api::minimal::Hello::Orange(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::minimal::Hello::Raspi {
                hello_world,
                another_field,
            } => {
                vec![
                    2.into_dart(),
                    hello_world.into_into_dart().into_dart(),
                    another_field.into_into_dart().into_dart(),
                ]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::minimal::Hello {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::minimal::Hello> for crate::api::minimal::Hello {
    fn into_into_dart(self) -> crate::api::minimal::Hello {
        self
    }
}

impl SseEncode for crate::api::minimal::Hello {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::minimal::Hello::Apple => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::minimal::Hello::Orange(field0) => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::api::minimal::Hello::Raspi {
                hello_world,
                another_field,
            } => {
                <i32>::sse_encode(2, serializer);
                <i32>::sse_encode(hello_world, serializer);
                <i32>::sse_encode(another_field, serializer);
            }
        }
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
