// Section: file_attributes

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: code_header

// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::Handler;

// Section: wire_funcs

fn wire_make_heap_use_after_free_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "make_heap_use_after_free",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(crate::api::simple::make_heap_use_after_free())
        },
    )
}
fn wire_make_memory_leak_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "make_memory_leak",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::simple::make_memory_leak()),
    )
}
fn wire_make_stack_buffer_overflow_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "make_stack_buffer_overflow",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::simple::make_stack_buffer_overflow())
            }
        },
    )
}

// Section: executor

flutter_rust_bridge::support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: flutter_rust_bridge::support::DefaultHandler = Default::default();
}

// Section: impl_wire2api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
