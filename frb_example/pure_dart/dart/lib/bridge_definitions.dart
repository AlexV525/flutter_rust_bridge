// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class FlutterRustBridgeExampleSingleBlockTest {
  Future<TestOpaque> handleOpaqueAaa({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueAaaConstMeta;

  Future<BoxRwLockWtffi> magic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMagicConstMeta;

  Future<String> handleMagic({required BoxRwLockWtffi magic, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleMagicConstMeta;

  Future<String> handleOpaqueBbb({TestOpaque? value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueBbbConstMeta;

  Future<OpaqueBag> handleOpaque({OpaqueBag? value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueConstMeta;

  Future<String?> handleOpaqueRepr({required RwLockI32 value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueReprConstMeta;
}

@sealed
class BoxDartDebug extends FrbOpaque {
  BoxDartDebug.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

@sealed
class BoxRwLockWtffi extends FrbOpaque {
  BoxRwLockWtffi.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

@sealed
class BoxWtffi extends FrbOpaque {
  BoxWtffi.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

@sealed
class RwLockI32 extends FrbOpaque {
  RwLockI32.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

@sealed
class RwLockIsize10 extends FrbOpaque {
  RwLockIsize10.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

@sealed
class Str extends FrbOpaque {
  Str.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

class OpaqueBag {
  final RwLockI32 primitive;
  final RwLockIsize10 array;
  final Str lifetime;
  final BoxDartDebug traitObj;

  OpaqueBag({
    required this.primitive,
    required this.array,
    required this.lifetime,
    required this.traitObj,
  });
}

class TestOpaque {
  final BoxWtffi magic;

  TestOpaque({
    required this.magic,
  });
}
