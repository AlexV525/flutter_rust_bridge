// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';
import 'package:meta/meta.dart';

class FlutterRustBridgeExampleSingleBlockTestImpl implements FlutterRustBridgeExampleSingleBlockTest {
  final FlutterRustBridgeExampleSingleBlockTestPlatform _platform;
  factory FlutterRustBridgeExampleSingleBlockTestImpl(ExternalLibrary dylib) =>
      FlutterRustBridgeExampleSingleBlockTestImpl.raw(FlutterRustBridgeExampleSingleBlockTestPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FlutterRustBridgeExampleSingleBlockTestImpl.wasm(FutureOr<WasmModule> module) =>
      FlutterRustBridgeExampleSingleBlockTestImpl(module as ExternalLibrary);
  FlutterRustBridgeExampleSingleBlockTestImpl.raw(this._platform);
  Future<TestOpaque> handleOpaqueAaa({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_handle_opaque_aaa(port_),
        parseSuccessData: _wire2api_test_opaque,
        constMeta: kHandleOpaqueAaaConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueAaaConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque_aaa",
        argNames: [],
      );

  Future<BoxRwLockWtffi> magic({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_magic(port_),
        parseSuccessData: _wire2api_BoxRwLockWtffi,
        constMeta: kMagicConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMagicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "magic",
        argNames: [],
      );

  Future<String> handleMagic({required BoxRwLockWtffi magic, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_handle_magic(port_, _platform.api2wire_BoxRwLockWtffi(magic)),
        parseSuccessData: _wire2api_String,
        constMeta: kHandleMagicConstMeta,
        argValues: [magic],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleMagicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_magic",
        argNames: ["magic"],
      );

  Future<String> handleOpaqueBbb({TestOpaque? value, dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            _platform.inner.wire_handle_opaque_bbb(port_, _platform.api2wire_opt_box_autoadd_test_opaque(value)),
        parseSuccessData: _wire2api_String,
        constMeta: kHandleOpaqueBbbConstMeta,
        argValues: [value],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueBbbConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque_bbb",
        argNames: ["value"],
      );

  Future<OpaqueBag> handleOpaque({OpaqueBag? value, dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            _platform.inner.wire_handle_opaque(port_, _platform.api2wire_opt_box_autoadd_opaque_bag(value)),
        parseSuccessData: _wire2api_opaque_bag,
        constMeta: kHandleOpaqueConstMeta,
        argValues: [value],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque",
        argNames: ["value"],
      );

  Future<String?> handleOpaqueRepr({required RwLockI32 value, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_handle_opaque_repr(port_, _platform.api2wire_RwLockI32(value)),
        parseSuccessData: _wire2api_opt_String,
        constMeta: kHandleOpaqueReprConstMeta,
        argValues: [value],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueReprConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque_repr",
        argNames: ["value"],
      );
}

// Section: api2wire

// Section: wire2api

BoxDartDebug _wire2api_BoxDartDebug(dynamic raw) {
  return BoxDartDebug.MYC(raw[0], raw[1], raw[2]);
}

BoxRwLockWtffi _wire2api_BoxRwLockWtffi(dynamic raw) {
  return BoxRwLockWtffi.MYC(raw[0], raw[1], raw[2]);
}

BoxWtffi _wire2api_BoxWtffi(dynamic raw) {
  return BoxWtffi.MYC(raw[0], raw[1], raw[2]);
}

RwLockI32 _wire2api_RwLockI32(dynamic raw) {
  return RwLockI32.MYC(raw[0], raw[1], raw[2]);
}

RwLockIsize10 _wire2api_RwLockIsize10(dynamic raw) {
  return RwLockIsize10.MYC(raw[0], raw[1], raw[2]);
}

Str _wire2api_Str(dynamic raw) {
  return Str.MYC(raw[0], raw[1], raw[2]);
}

String _wire2api_String(dynamic raw) {
  return raw as String;
}

OpaqueBag _wire2api_opaque_bag(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return OpaqueBag(
    primitive: _wire2api_RwLockI32(arr[0]),
    array: _wire2api_RwLockIsize10(arr[1]),
    lifetime: _wire2api_Str(arr[2]),
    traitObj: _wire2api_BoxDartDebug(arr[3]),
  );
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

TestOpaque _wire2api_test_opaque(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return TestOpaque(
    magic: _wire2api_BoxWtffi(arr[0]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}
