// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.71.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart' as meta;
import 'package:collection/collection.dart';

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class FlutterRustBridgeExampleSingleBlockTest {
  /// Documentation on a simple adder function.
  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta;

  int simpleAdderSync({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta;

  ///
  /// Multiline comments are fine,
  /// but they are not preferred in Rust nor in Dart.
  /// Newlines are preserved.
  ///
  Future<int> primitiveTypes(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrimitiveTypesConstMeta;

  Future<int?> primitiveOptionalTypes({int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrimitiveOptionalTypesConstMeta;

  int primitiveTypesSync(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrimitiveTypesSyncConstMeta;

  Future<int> primitiveU32({required int myU32, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrimitiveU32ConstMeta;

  int primitiveU32Sync({required int myU32, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrimitiveU32SyncConstMeta;

  Future<String> handleString({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStringConstMeta;

  String handleStringSync({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStringSyncConstMeta;

  Future<void> handleReturnUnit({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleReturnUnitConstMeta;

  void handleReturnUnitSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleReturnUnitSyncConstMeta;

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleVecU8ConstMeta;

  Uint8List handleVecU8Sync({required Uint8List v, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleVecU8SyncConstMeta;

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleVecOfPrimitiveConstMeta;

  VecOfPrimitivePack handleVecOfPrimitiveSync({required int n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleVecOfPrimitiveSyncConstMeta;

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleZeroCopyVecOfPrimitiveConstMeta;

  ZeroCopyVecOfPrimitivePack handleZeroCopyVecOfPrimitiveSync({required int n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleZeroCopyVecOfPrimitiveSyncConstMeta;

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStructConstMeta;

  MySize handleStructSync({required MySize arg, required MySize boxed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStructSyncConstMeta;

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleNewtypeConstMeta;

  NewTypeInt handleNewtypeSync({required NewTypeInt arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleNewtypeSyncConstMeta;

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleListOfStructConstMeta;

  List<MySize> handleListOfStructSync({required List<MySize> l, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleListOfStructSyncConstMeta;

  Future<List<String>> handleStringList({required List<String> names, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStringListConstMeta;

  List<String> handleStringListSync({required List<String> names, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStringListSyncConstMeta;

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleComplexStructConstMeta;

  MyTreeNode handleComplexStructSync({required MyTreeNode s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleComplexStructSyncConstMeta;

  Future<MyNestedStruct> handleNestedStruct({required MyNestedStruct s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleNestedStructConstMeta;

  Uint8List handleSyncReturn({required String mode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleSyncReturnConstMeta;

  Stream<String> handleStream({required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStreamConstMeta;

  Stream<MyStreamEntry> handleStreamOfStruct({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStreamOfStructConstMeta;

  Future<int> returnErr({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturnErrConstMeta;

  Future<int> returnPanic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturnPanicConstMeta;

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOptionalReturnConstMeta;

  Future<Element?> handleOptionalStruct({String? document, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOptionalStructConstMeta;

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOptionalIncrementConstMeta;

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleIncrementBoxedOptionalConstMeta;

  Future<String> handleOptionBoxArguments(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionals? structbox,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOptionBoxArgumentsConstMeta;

  Future<Uint8List> printNote({required Note note, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrintNoteConstMeta;

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleReturnEnumConstMeta;

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleEnumParameterConstMeta;

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleCustomizedStructConstMeta;

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleEnumStructConstMeta;

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUseImportedStructConstMeta;

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUseImportedEnumConstMeta;

  Future<ApplicationSettings> getAppSettings({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAppSettingsConstMeta;

  Future<ApplicationSettings> getFallibleAppSettings({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFallibleAppSettingsConstMeta;

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsAppEmbeddedConstMeta;

  Future<ApplicationMessage> getMessage({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMessageConstMeta;

  Future<Numbers> repeatNumber({required int num, required int times, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRepeatNumberConstMeta;

  Future<Sequences> repeatSequence({required int seq, required int times, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRepeatSequenceConstMeta;

  Future<int?> firstNumber({required Numbers nums, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFirstNumberConstMeta;

  Future<int?> firstSequence({required Sequences seqs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFirstSequenceConstMeta;

  Future<U8Array5> getArray({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetArrayConstMeta;

  Future<PointArray2> getComplexArray({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetComplexArrayConstMeta;

  Future<int> getUsize({required int u, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUsizeConstMeta;

  Future<UserId> nextUserId({required UserId userId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNextUserIdConstMeta;

  Stream<Event> registerEventListener({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterEventListenerConstMeta;

  Future<void> closeEventListener({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseEventListenerConstMeta;

  Future<void> createEvent({required String address, required String payload, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateEventConstMeta;

  Stream<Log> handleStreamSinkAt1({required int key, required int max, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt1ConstMeta;

  Stream<Log> handleStreamSinkAt2({required int key, required int max, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt2ConstMeta;

  Stream<Log> handleStreamSinkAt3({required int key, required int max, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt3ConstMeta;

  Future<SumWith> getSumStruct({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSumStructConstMeta;

  Future<SumWithArray3> getSumArray({required int a, required int b, required int c, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSumArrayConstMeta;

  Future<Measure?> multiplyByTen({required Measure measure, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMultiplyByTenConstMeta;

  Future<OldSimpleStruct> callOldModuleSystem({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCallOldModuleSystemConstMeta;

  Future<NewSimpleStruct> callNewModuleSystem({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCallNewModuleSystemConstMeta;

  Future<BigBuffers> handleBigBuffers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleBigBuffersConstMeta;

  Future<DateTime> datetimeUtc({required DateTime d, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDatetimeUtcConstMeta;

  Future<DateTime> datetimeLocal({required DateTime d, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDatetimeLocalConstMeta;

  Future<DateTime> naivedatetime({required DateTime d, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNaivedatetimeConstMeta;

  Future<DateTime?> optionalEmptyDatetimeUtc({DateTime? d, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOptionalEmptyDatetimeUtcConstMeta;

  Future<Duration> duration({required Duration d, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDurationConstMeta;

  Future<List<Duration>> handleTimestamps({required List<DateTime> timestamps, required DateTime epoch, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleTimestampsConstMeta;

  Future<List<DateTime>> handleDurations({required List<Duration> durations, required DateTime since, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleDurationsConstMeta;

  Future<TestChrono> testChrono({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestChronoConstMeta;

  Future<TestChrono> testPreciseChrono({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestPreciseChronoConstMeta;

  Future<Duration> howLongDoesItTake({required FeatureChrono mine, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHowLongDoesItTakeConstMeta;

  Future<UuidValue> handleUuid({required UuidValue id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleUuidConstMeta;

  Future<List<UuidValue>> handleUuids({required List<UuidValue> ids, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleUuidsConstMeta;

  Future<FeatureUuid> handleNestedUuids({required FeatureUuid ids, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleNestedUuidsConstMeta;

  Future<MessageId> newMsgid({required U8Array32 id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewMsgidConstMeta;

  Future<U8Array32> useMsgid({required MessageId id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUseMsgidConstMeta;

  Future<Blob> boxedBlob({required U8Array1600 blob, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBoxedBlobConstMeta;

  Future<U8Array1600> useBoxedBlob({required Blob blob, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUseBoxedBlobConstMeta;

  Future<FeedId> returnBoxedFeedId({required U8Array8 id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturnBoxedFeedIdConstMeta;

  Future<U8Array8> returnBoxedRawFeedId({required FeedId id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturnBoxedRawFeedIdConstMeta;

  Future<TestId> testId({required TestId id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestIdConstMeta;

  Future<double> lastNumber({required F64Array16 array, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLastNumberConstMeta;

  Future<TestIdArray2> nestedId({required TestIdArray4 id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNestedIdConstMeta;

  String syncAcceptDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncAcceptDartOpaqueConstMeta;

  Future<String> asyncAcceptDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsyncAcceptDartOpaqueConstMeta;

  Future<Object> loopBack({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopBackConstMeta;

  Future<Object?> loopBackOption({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopBackOptionConstMeta;

  Future<ObjectArray1> loopBackArray({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopBackArrayConstMeta;

  Future<List<Object>> loopBackVec({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopBackVecConstMeta;

  Future<void> loopBackOptionGet({Object? opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopBackOptionGetConstMeta;

  Future<void> loopBackArrayGet({required ObjectArray1 opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopBackArrayGetConstMeta;

  Future<void> loopBackVecGet({required List<Object> opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopBackVecGetConstMeta;

  /// [DartWrapObject] can be safely retrieved on a dart thread.
  String unwrapDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnwrapDartOpaqueConstMeta;

  /// [DartWrapObject] cannot be obtained
  /// on a thread other than the thread it was created on.
  Future<void> panicUnwrapDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPanicUnwrapDartOpaqueConstMeta;

  Future<HideData> createOpaque({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateOpaqueConstMeta;

  Future<HideData?> createOptionOpaque({HideData? opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateOptionOpaqueConstMeta;

  HideData syncCreateOpaque({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncCreateOpaqueConstMeta;

  Future<EnumOpaqueArray5> createArrayOpaqueEnum({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateArrayOpaqueEnumConstMeta;

  Future<String> runEnumOpaque({required EnumOpaque opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunEnumOpaqueConstMeta;

  Future<String> runOpaque({required HideData opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunOpaqueConstMeta;

  Future<String> runOpaqueWithDelay({required HideData opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunOpaqueWithDelayConstMeta;

  Future<HideDataArray2> opaqueArray({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpaqueArrayConstMeta;

  Future<NonSendHideData> createSyncOpaque({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateSyncOpaqueConstMeta;

  NonSendHideData syncCreateSyncOpaque({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncCreateSyncOpaqueConstMeta;

  String syncRunOpaque({required NonSendHideData opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncRunOpaqueConstMeta;

  Future<void> opaqueArrayRun({required HideDataArray2 data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpaqueArrayRunConstMeta;

  Future<List<HideData>> opaqueVec({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpaqueVecConstMeta;

  Future<void> opaqueVecRun({required List<HideData> data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpaqueVecRunConstMeta;

  Future<OpaqueNested> createNestedOpaque({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateNestedOpaqueConstMeta;

  Object syncLoopback({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncLoopbackConstMeta;

  Object? syncOptionLoopback({Object? opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncOptionLoopbackConstMeta;

  String? syncOption({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncOptionConstMeta;

  String? syncOptionNull({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncOptionNullConstMeta;

  HideData? syncOptionRustOpaque({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncOptionRustOpaqueConstMeta;

  Object? syncOptionDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncOptionDartOpaqueConstMeta;

  void syncVoid({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncVoidConstMeta;

  Future<void> runNestedOpaque({required OpaqueNested opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunNestedOpaqueConstMeta;

  Future<DartOpaqueNested> createNestedDartOpaque({required Object opaque1, required Object opaque2, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateNestedDartOpaqueConstMeta;

  Future<void> getNestedDartOpaque({required DartOpaqueNested opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNestedDartOpaqueConstMeta;

  Future<EnumDartOpaque> createEnumDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateEnumDartOpaqueConstMeta;

  Future<void> getEnumDartOpaque({required EnumDartOpaque opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEnumDartOpaqueConstMeta;

  Future<void> setStaticDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetStaticDartOpaqueConstMeta;

  Future<void> dropStaticDartOpaque({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDropStaticDartOpaqueConstMeta;

  Future<String> unwrapRustOpaque({required HideData opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnwrapRustOpaqueConstMeta;

  Object returnNonDroppableDartOpaque({required Object opaque, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturnNonDroppableDartOpaqueConstMeta;

  /// Function to check the code generator.
  /// FrbOpaqueReturn must be only return type.
  /// FrbOpaqueReturn must not be used as an argument.
  Future<FrbOpaqueReturn> frbGeneratorTest({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFrbGeneratorTestConstMeta;

  /// Structure for testing the SyncReturn<RustOpaque> code generator.
  /// FrbOpaqueSyncReturn must be only return type.
  /// FrbOpaqueSyncReturn must be without wrapper like Option<> Vec<> etc.
  FrbOpaqueSyncReturn frbSyncGeneratorTest({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFrbSyncGeneratorTestConstMeta;

  Future<int> handleTypeAliasId({required int input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleTypeAliasIdConstMeta;

  Future<int> handleTypeNestAliasId({required int input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleTypeNestAliasIdConstMeta;

  Future<TestModel> handleTypeAliasModel({required int input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleTypeAliasModelConstMeta;

  Future<Empty> emptyStruct({required Empty empty, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEmptyStructConstMeta;

  Future<dynamic> returnDartDynamic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturnDartDynamicConstMeta;

  Future<RawStringItemStruct> testRawStringItemStruct({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestRawStringItemStructConstMeta;

  Future<List<Weekdays>> listOfPrimitiveEnums({required List<Weekdays> weekdays, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListOfPrimitiveEnumsConstMeta;

  Future<int> sumMethodSumWith({required SumWith that, required int y, required int z, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSumMethodSumWithConstMeta;

  /// Documentation on a static method
  Future<ConcatenateWith> newStaticMethodConcatenateWith({required String a, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodConcatenateWithConstMeta;

  /// Documentation on an instance method
  Future<String> concatenateMethodConcatenateWith({required ConcatenateWith that, required String b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConcatenateMethodConcatenateWithConstMeta;

  Future<String> concatenateStaticStaticMethodConcatenateWith({required String a, required String b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConcatenateStaticStaticMethodConcatenateWithConstMeta;

  Stream<Log2> handleSomeStreamSinkMethodConcatenateWith(
      {required ConcatenateWith that, required int key, required int max, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkMethodConcatenateWithConstMeta;

  Stream<int> handleSomeStreamSinkAt1MethodConcatenateWith({required ConcatenateWith that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkAt1MethodConcatenateWithConstMeta;

  Stream<Log2> handleSomeStaticStreamSinkStaticMethodConcatenateWith(
      {required int key, required int max, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkStaticMethodConcatenateWithConstMeta;

  Stream<int> handleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWith({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWithConstMeta;

  DropFnType get dropOpaqueBoxDartDebug;
  ShareFnType get shareOpaqueBoxDartDebug;
  OpaqueTypeFinalizer get BoxDartDebugFinalizer;

  DropFnType get dropOpaqueFrbOpaqueReturn;
  ShareFnType get shareOpaqueFrbOpaqueReturn;
  OpaqueTypeFinalizer get FrbOpaqueReturnFinalizer;

  DropFnType get dropOpaqueFrbOpaqueSyncReturn;
  ShareFnType get shareOpaqueFrbOpaqueSyncReturn;
  OpaqueTypeFinalizer get FrbOpaqueSyncReturnFinalizer;

  DropFnType get dropOpaqueHideData;
  ShareFnType get shareOpaqueHideData;
  OpaqueTypeFinalizer get HideDataFinalizer;

  DropFnType get dropOpaqueI32;
  ShareFnType get shareOpaqueI32;
  OpaqueTypeFinalizer get I32Finalizer;

  DropFnType get dropOpaqueMutexHideData;
  ShareFnType get shareOpaqueMutexHideData;
  OpaqueTypeFinalizer get MutexHideDataFinalizer;

  DropFnType get dropOpaqueNonSendHideData;
  ShareFnType get shareOpaqueNonSendHideData;
  OpaqueTypeFinalizer get NonSendHideDataFinalizer;

  DropFnType get dropOpaqueRwLockHideData;
  ShareFnType get shareOpaqueRwLockHideData;
  OpaqueTypeFinalizer get RwLockHideDataFinalizer;
}

@sealed
class BoxDartDebug extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  BoxDartDebug.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueBoxDartDebug;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueBoxDartDebug;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.BoxDartDebugFinalizer;
}

class EnumOpaqueArray5 extends NonGrowableListView<EnumOpaque> {
  static const arraySize = 5;
  EnumOpaqueArray5(List<EnumOpaque> inner)
      : assert(inner.length == arraySize),
        super(inner);
  EnumOpaqueArray5.unchecked(List<EnumOpaque> inner) : super(inner);
  EnumOpaqueArray5.init(EnumOpaque fill) : super(List<EnumOpaque>.filled(arraySize, fill));
}

@sealed
class FrbOpaqueReturn extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  FrbOpaqueReturn.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueFrbOpaqueReturn;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueFrbOpaqueReturn;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.FrbOpaqueReturnFinalizer;
}

@sealed
class FrbOpaqueSyncReturn extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  FrbOpaqueSyncReturn.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueFrbOpaqueSyncReturn;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueFrbOpaqueSyncReturn;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.FrbOpaqueSyncReturnFinalizer;
}

@sealed
class HideData extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  HideData.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueHideData;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueHideData;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.HideDataFinalizer;
}

class HideDataArray2 extends NonGrowableListView<HideData> {
  static const arraySize = 2;
  HideDataArray2(List<HideData> inner)
      : assert(inner.length == arraySize),
        super(inner);
  HideDataArray2.unchecked(List<HideData> inner) : super(inner);
  HideDataArray2.init(HideData fill) : super(List<HideData>.filled(arraySize, fill));
}

@sealed
class I32 extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  I32.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueI32;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueI32;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.I32Finalizer;
}

@sealed
class MutexHideData extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  MutexHideData.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexHideData;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexHideData;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexHideDataFinalizer;
}

@sealed
class NonSendHideData extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  NonSendHideData.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueNonSendHideData;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueNonSendHideData;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.NonSendHideDataFinalizer;
}

class ObjectArray1 extends NonGrowableListView<Object> {
  static const arraySize = 1;
  ObjectArray1(List<Object> inner)
      : assert(inner.length == arraySize),
        super(inner);
  ObjectArray1.unchecked(List<Object> inner) : super(inner);
  ObjectArray1.init(Object fill) : super(List<Object>.filled(arraySize, fill));
}

class PointArray2 extends NonGrowableListView<Point> {
  static const arraySize = 2;
  PointArray2(List<Point> inner)
      : assert(inner.length == arraySize),
        super(inner);
  PointArray2.unchecked(List<Point> inner) : super(inner);
  PointArray2.init(Point fill) : super(List<Point>.filled(arraySize, fill));
}

@sealed
class RwLockHideData extends FrbOpaque {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  RwLockHideData.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRwLockHideData;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRwLockHideData;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RwLockHideDataFinalizer;
}

class SumWithArray3 extends NonGrowableListView<SumWith> {
  static const arraySize = 3;
  SumWithArray3(List<SumWith> inner)
      : assert(inner.length == arraySize),
        super(inner);
  SumWithArray3.unchecked(List<SumWith> inner) : super(inner);
  SumWithArray3.init(SumWith fill) : super(List<SumWith>.filled(arraySize, fill));
}

class TestIdArray2 extends NonGrowableListView<TestId> {
  static const arraySize = 2;
  TestIdArray2(List<TestId> inner)
      : assert(inner.length == arraySize),
        super(inner);
  TestIdArray2.unchecked(List<TestId> inner) : super(inner);
  TestIdArray2.init(TestId fill) : super(List<TestId>.filled(arraySize, fill));
}

class TestIdArray4 extends NonGrowableListView<TestId> {
  static const arraySize = 4;
  TestIdArray4(List<TestId> inner)
      : assert(inner.length == arraySize),
        super(inner);
  TestIdArray4.unchecked(List<TestId> inner) : super(inner);
  TestIdArray4.init(TestId fill) : super(List<TestId>.filled(arraySize, fill));
}

class ApplicationEnv {
  final List<ApplicationEnvVar> vars;

  const ApplicationEnv({
    required this.vars,
  });
}

class ApplicationEnvVar {
  final String field0;
  final bool field1;

  const ApplicationEnvVar({
    required this.field0,
    required this.field1,
  });
}

@freezed
class ApplicationMessage with _$ApplicationMessage {
  const factory ApplicationMessage.displayMessage(
    String field0,
  ) = ApplicationMessage_DisplayMessage;
  const factory ApplicationMessage.renderPixel({
    required int x,
    required int y,
  }) = ApplicationMessage_RenderPixel;
  const factory ApplicationMessage.exit() = ApplicationMessage_Exit;
}

enum ApplicationMode {
  Standalone,
  Embedded,
}

class ApplicationSettings {
  final String name;
  final String version;
  final ApplicationMode mode;
  final ApplicationEnv env;
  final ApplicationEnv? envOptional;

  const ApplicationSettings({
    required this.name,
    required this.version,
    required this.mode,
    required this.env,
    this.envOptional,
  });
}

class Attribute {
  final String key;
  final String value;

  const Attribute({
    required this.key,
    required this.value,
  });
}

class BigBuffers {
  final Int64List int64;
  final Uint64List uint64;

  const BigBuffers({
    required this.int64,
    required this.uint64,
  });
}

class Blob {
  final U8Array1600 field0;

  const Blob({
    required this.field0,
  });
}

class ConcatenateWith {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  final String a;

  const ConcatenateWith({
    required this.bridge,
    required this.a,
  });

  /// Documentation on a static method
  static Future<ConcatenateWith> newConcatenateWith(
          {required FlutterRustBridgeExampleSingleBlockTest bridge, required String a, dynamic hint}) =>
      bridge.newStaticMethodConcatenateWith(a: a, hint: hint);

  /// Documentation on an instance method
  Future<String> concatenate({required String b, dynamic hint}) => bridge.concatenateMethodConcatenateWith(
        that: this,
        b: b,
      );

  static Future<String> concatenateStatic(
          {required FlutterRustBridgeExampleSingleBlockTest bridge,
          required String a,
          required String b,
          dynamic hint}) =>
      bridge.concatenateStaticStaticMethodConcatenateWith(a: a, b: b, hint: hint);

  Stream<Log2> handleSomeStreamSink({required int key, required int max, dynamic hint}) =>
      bridge.handleSomeStreamSinkMethodConcatenateWith(
        that: this,
        key: key,
        max: max,
      );

  Stream<int> handleSomeStreamSinkAt1({dynamic hint}) => bridge.handleSomeStreamSinkAt1MethodConcatenateWith(
        that: this,
      );

  static Stream<Log2> handleSomeStaticStreamSink(
          {required FlutterRustBridgeExampleSingleBlockTest bridge,
          required int key,
          required int max,
          dynamic hint}) =>
      bridge.handleSomeStaticStreamSinkStaticMethodConcatenateWith(key: key, max: max, hint: hint);

  static Stream<int> handleSomeStaticStreamSinkSingleArg(
          {required FlutterRustBridgeExampleSingleBlockTest bridge, dynamic hint}) =>
      bridge.handleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWith(hint: hint);
}

class Customized {
  final String finalField;
  String? nonFinalField;

  Customized({
    required this.finalField,
    this.nonFinalField,
  });
}

class DartOpaqueNested {
  final Object first;
  final Object second;

  const DartOpaqueNested({
    required this.first,
    required this.second,
  });
}

@freezed
class Distance with _$Distance {
  const factory Distance.unknown() = Distance_Unknown;
  const factory Distance.map(
    double field0,
  ) = Distance_Map;
}

class Element {
  final String? tag;
  final String? text;
  final List<Attribute>? attributes;
  final List<Element>? children;

  const Element({
    this.tag,
    this.text,
    this.attributes,
    this.children,
  });
}

class Empty {
  const Empty();
}

@freezed
class EnumDartOpaque with _$EnumDartOpaque {
  const factory EnumDartOpaque.primitive(
    int field0,
  ) = EnumDartOpaque_Primitive;
  const factory EnumDartOpaque.opaque(
    Object field0,
  ) = EnumDartOpaque_Opaque;
}

@freezed
class EnumOpaque with _$EnumOpaque {
  const factory EnumOpaque.struct(
    HideData field0,
  ) = EnumOpaque_Struct;
  const factory EnumOpaque.primitive(
    I32 field0,
  ) = EnumOpaque_Primitive;
  const factory EnumOpaque.traitObj(
    BoxDartDebug field0,
  ) = EnumOpaque_TraitObj;
  const factory EnumOpaque.mutex(
    MutexHideData field0,
  ) = EnumOpaque_Mutex;
  const factory EnumOpaque.rwLock(
    RwLockHideData field0,
  ) = EnumOpaque_RwLock;
}

@freezed
class Event with _$Event {
  const factory Event({
    required String address,
    required String payload,
  }) = _Event;
}

class ExoticOptionals {
  final int? int32;
  final int? int64;
  final double? float64;
  final bool? boolean;
  final Uint8List? zerocopy;
  final Int8List? int8List;
  final Uint8List? uint8List;
  final Int32List? int32List;
  final Float32List? float32List;
  final Float64List? float64List;
  final List<Attribute>? attributes;
  final List<Attribute?> attributesNullable;
  final List<Attribute?>? nullableAttributes;
  final NewTypeInt? newtypeint;

  const ExoticOptionals({
    this.int32,
    this.int64,
    this.float64,
    this.boolean,
    this.zerocopy,
    this.int8List,
    this.uint8List,
    this.int32List,
    this.float32List,
    this.float64List,
    this.attributes,
    required this.attributesNullable,
    this.nullableAttributes,
    this.newtypeint,
  });
}

class F64Array16 extends NonGrowableListView<double> {
  static const arraySize = 16;
  F64Array16(Float64List inner)
      : assert(inner.length == arraySize),
        super(inner);
  F64Array16.unchecked(Float64List inner) : super(inner);
  F64Array16.init() : super(Float64List(arraySize));
}

class FeatureChrono {
  final DateTime utc;
  final DateTime local;
  final Duration duration;
  final DateTime naive;

  const FeatureChrono({
    required this.utc,
    required this.local,
    required this.duration,
    required this.naive,
  });
}

class FeatureUuid {
  final UuidValue one;
  final List<UuidValue> many;

  const FeatureUuid({
    required this.one,
    required this.many,
  });
}

class FeedId {
  final U8Array8 field0;

  const FeedId({
    required this.field0,
  });
}

class I32Array2 extends NonGrowableListView<int> {
  static const arraySize = 2;
  I32Array2(Int32List inner)
      : assert(inner.length == arraySize),
        super(inner);
  I32Array2.unchecked(Int32List inner) : super(inner);
  I32Array2.init() : super(Int32List(arraySize));
}

@freezed
class KitchenSink with _$KitchenSink {
  /// Comment on variant
  const factory KitchenSink.empty() = KitchenSink_Empty;
  const factory KitchenSink.primitives({
    /// Dart field comment
    @Default(-1) int int32,
    required double float64,
    required bool boolean,
  }) = KitchenSink_Primitives;
  const factory KitchenSink.nested(
    int field0, [
    @Default(KitchenSink.empty()) KitchenSink field1,
  ]) = KitchenSink_Nested;
  const factory KitchenSink.optional([
    /// Comment on anonymous field
    @Default(-1) int? field0,
    int? field1,
  ]) = KitchenSink_Optional;
  const factory KitchenSink.buffer(
    Uint8List field0,
  ) = KitchenSink_Buffer;
  const factory KitchenSink.enums([
    @Default(Weekdays.Sunday) Weekdays field0,
  ]) = KitchenSink_Enums;
}

class Log {
  final int key;
  final int value;

  const Log({
    required this.key,
    required this.value,
  });
}

class Log2 {
  final int key;
  final String value;

  const Log2({
    required this.key,
    required this.value,
  });
}

@freezed
class Measure with _$Measure {
  const factory Measure.speed(
    Speed field0,
  ) = Measure_Speed;
  const factory Measure.distance(
    Distance field0,
  ) = Measure_Distance;
}

class MessageId {
  final U8Array32 field0;

  const MessageId({
    required this.field0,
  });
}

enum MyEnum {
  False,
  True,
}

class MyNestedStruct {
  final MyTreeNode treeNode;
  final Weekdays weekday;

  const MyNestedStruct({
    required this.treeNode,
    required this.weekday,
  });
}

class MySize {
  final int width;
  final int height;

  const MySize({
    required this.width,
    required this.height,
  });
}

class MyStreamEntry {
  final String hello;

  const MyStreamEntry({
    required this.hello,
  });
}

class MyStruct {
  final bool content;

  const MyStruct({
    required this.content,
  });
}

class MyTreeNode {
  final int valueI32;
  final Uint8List valueVecU8;
  final bool valueBoolean;
  final List<MyTreeNode> children;

  const MyTreeNode({
    required this.valueI32,
    required this.valueVecU8,
    required this.valueBoolean,
    required this.children,
  });
}

class NewSimpleStruct {
  final int field;

  const NewSimpleStruct({
    required this.field,
  });
}

class NewTypeInt {
  final int field0;

  const NewTypeInt({
    required this.field0,
  });
}

class Note {
  final Weekdays day;
  final String body;

  const Note({
    this.day = Weekdays.Sunday,
    required this.body,
  });
}

class Numbers {
  final Int32List field0;

  const Numbers({
    required this.field0,
  });
}

class OldSimpleStruct {
  final int field;

  const OldSimpleStruct({
    required this.field,
  });
}

/// [`HideData`] has private fields.
class OpaqueNested {
  final HideData first;
  final HideData second;

  const OpaqueNested({
    required this.first,
    required this.second,
  });
}

class Point {
  final double x;
  final double y;

  const Point({
    required this.x,
    required this.y,
  });
}

class RawStringItemStruct {
  final String type;

  const RawStringItemStruct({
    required this.type,
  });
}

class Sequences {
  final Int32List field0;

  const Sequences({
    required this.field0,
  });
}

@freezed
class Speed with _$Speed {
  const factory Speed.unknown() = Speed_Unknown;
  const factory Speed.gps(
    double field0,
  ) = Speed_GPS;
}

class SumWith {
  final FlutterRustBridgeExampleSingleBlockTest bridge;
  final int x;

  const SumWith({
    required this.bridge,
    required this.x,
  });

  Future<int> sum({required int y, required int z, dynamic hint}) => bridge.sumMethodSumWith(
        that: this,
        y: y,
        z: z,
      );
}

class TestChrono {
  final DateTime? dt;
  final DateTime? dt2;
  final Duration? du;

  const TestChrono({
    this.dt,
    this.dt2,
    this.du,
  });
}

class TestId {
  final I32Array2 field0;

  const TestId({
    required this.field0,
  });
}

class TestModel {
  final int id;
  final String name;
  final MyEnum aliasEnum;
  final MyStruct aliasStruct;

  const TestModel({
    required this.id,
    required this.name,
    required this.aliasEnum,
    required this.aliasStruct,
  });
}

class U8Array1600 extends NonGrowableListView<int> {
  static const arraySize = 1600;
  U8Array1600(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array1600.unchecked(Uint8List inner) : super(inner);
  U8Array1600.init() : super(Uint8List(arraySize));
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class U8Array5 extends NonGrowableListView<int> {
  static const arraySize = 5;
  U8Array5(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array5.unchecked(Uint8List inner) : super(inner);
  U8Array5.init() : super(Uint8List(arraySize));
}

class U8Array8 extends NonGrowableListView<int> {
  static const arraySize = 8;
  U8Array8(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array8.unchecked(Uint8List inner) : super(inner);
  U8Array8.init() : super(Uint8List(arraySize));
}

/// Example for @freezed and @meta.immutable
@freezed
@meta.immutable
class UserId with _$UserId {
  const factory UserId({
    @Default(0) int value,
  }) = _UserId;
}

class VecOfPrimitivePack {
  final Int8List int8List;
  final Uint8List uint8List;
  final Int16List int16List;
  final Uint16List uint16List;
  final Uint32List uint32List;
  final Int32List int32List;
  final Uint64List uint64List;
  final Int64List int64List;
  final Float32List float32List;
  final Float64List float64List;

  const VecOfPrimitivePack({
    required this.int8List,
    required this.uint8List,
    required this.int16List,
    required this.uint16List,
    required this.uint32List,
    required this.int32List,
    required this.uint64List,
    required this.int64List,
    required this.float32List,
    required this.float64List,
  });
}

/// Simple enums.
enum Weekdays {
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,

  /// Best day of the week.
  Saturday,
  Sunday,
}

class ZeroCopyVecOfPrimitivePack {
  final Int8List int8List;
  final Uint8List uint8List;
  final Int16List int16List;
  final Uint16List uint16List;
  final Uint32List uint32List;
  final Int32List int32List;
  final Uint64List uint64List;
  final Int64List int64List;
  final Float32List float32List;
  final Float64List float64List;

  const ZeroCopyVecOfPrimitivePack({
    required this.int8List,
    required this.uint8List,
    required this.int16List,
    required this.uint16List,
    required this.uint32List,
    required this.int32List,
    required this.uint64List,
    required this.int64List,
    required this.float32List,
    required this.float64List,
  });
}

class FlutterRustBridgeExampleSingleBlockTestImpl implements FlutterRustBridgeExampleSingleBlockTest {
  final FlutterRustBridgeExampleSingleBlockTestPlatform _platform;
  factory FlutterRustBridgeExampleSingleBlockTestImpl(ExternalLibrary dylib) =>
      FlutterRustBridgeExampleSingleBlockTestImpl.raw(FlutterRustBridgeExampleSingleBlockTestPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FlutterRustBridgeExampleSingleBlockTestImpl.wasm(FutureOr<WasmModule> module) =>
      FlutterRustBridgeExampleSingleBlockTestImpl(module as ExternalLibrary);
  FlutterRustBridgeExampleSingleBlockTestImpl.raw(this._platform);
  Future<int> simpleAdder({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_adder(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder",
        argNames: ["a", "b"],
      );

  int simpleAdderSync({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_simple_adder_sync(arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderSyncConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder_sync",
        argNames: ["a", "b"],
      );

  Future<int> primitiveTypes(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) {
    var arg0 = api2wire_i32(myI32);
    var arg1 = _platform.api2wire_i64(myI64);
    var arg2 = api2wire_f64(myF64);
    var arg3 = myBool;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_primitive_types(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_i32,
      constMeta: kPrimitiveTypesConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveTypesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_types",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  Future<int?> primitiveOptionalTypes({int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_i32(myI32);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(myI64);
    var arg2 = _platform.api2wire_opt_box_autoadd_f64(myF64);
    var arg3 = _platform.api2wire_opt_box_autoadd_bool(myBool);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_primitive_optional_types(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      constMeta: kPrimitiveOptionalTypesConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveOptionalTypesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_optional_types",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  int primitiveTypesSync(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) {
    var arg0 = api2wire_i32(myI32);
    var arg1 = _platform.api2wire_i64(myI64);
    var arg2 = api2wire_f64(myF64);
    var arg3 = myBool;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_primitive_types_sync(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_i32,
      constMeta: kPrimitiveTypesSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveTypesSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_types_sync",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  Future<int> primitiveU32({required int myU32, dynamic hint}) {
    var arg0 = api2wire_u32(myU32);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_primitive_u32(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kPrimitiveU32ConstMeta,
      argValues: [myU32],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveU32ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_u32",
        argNames: ["myU32"],
      );

  int primitiveU32Sync({required int myU32, dynamic hint}) {
    var arg0 = api2wire_u32(myU32);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_primitive_u32_sync(arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kPrimitiveU32SyncConstMeta,
      argValues: [myU32],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveU32SyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_u32_sync",
        argNames: ["myU32"],
      );

  Future<String> handleString({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_string(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kHandleStringConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string",
        argNames: ["s"],
      );

  String handleStringSync({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_string_sync(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kHandleStringSyncConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string_sync",
        argNames: ["s"],
      );

  Future<void> handleReturnUnit({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_return_unit(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kHandleReturnUnitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleReturnUnitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_unit",
        argNames: [],
      );

  void handleReturnUnitSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_return_unit_sync(),
      parseSuccessData: _wire2api_unit,
      constMeta: kHandleReturnUnitSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleReturnUnitSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_unit_sync",
        argNames: [],
      );

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(v);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_vec_u8(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHandleVecU8ConstMeta,
      argValues: [v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecU8ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_u8",
        argNames: ["v"],
      );

  Uint8List handleVecU8Sync({required Uint8List v, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(v);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_vec_u8_sync(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHandleVecU8SyncConstMeta,
      argValues: [v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecU8SyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_u8_sync",
        argNames: ["v"],
      );

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_vec_of_primitive(port_, arg0),
      parseSuccessData: _wire2api_vec_of_primitive_pack,
      constMeta: kHandleVecOfPrimitiveConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecOfPrimitiveConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_of_primitive",
        argNames: ["n"],
      );

  VecOfPrimitivePack handleVecOfPrimitiveSync({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_vec_of_primitive_sync(arg0),
      parseSuccessData: _wire2api_vec_of_primitive_pack,
      constMeta: kHandleVecOfPrimitiveSyncConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecOfPrimitiveSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_of_primitive_sync",
        argNames: ["n"],
      );

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_zero_copy_vec_of_primitive(port_, arg0),
      parseSuccessData: _wire2api_zero_copy_vec_of_primitive_pack,
      constMeta: kHandleZeroCopyVecOfPrimitiveConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleZeroCopyVecOfPrimitiveConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_zero_copy_vec_of_primitive",
        argNames: ["n"],
      );

  ZeroCopyVecOfPrimitivePack handleZeroCopyVecOfPrimitiveSync({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_zero_copy_vec_of_primitive_sync(arg0),
      parseSuccessData: _wire2api_zero_copy_vec_of_primitive_pack,
      constMeta: kHandleZeroCopyVecOfPrimitiveSyncConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleZeroCopyVecOfPrimitiveSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_zero_copy_vec_of_primitive_sync",
        argNames: ["n"],
      );

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_size(arg);
    var arg1 = _platform.api2wire_box_my_size(boxed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_struct(port_, arg0, arg1),
      parseSuccessData: _wire2api_my_size,
      constMeta: kHandleStructConstMeta,
      argValues: [arg, boxed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_struct",
        argNames: ["arg", "boxed"],
      );

  MySize handleStructSync({required MySize arg, required MySize boxed, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_size(arg);
    var arg1 = _platform.api2wire_box_my_size(boxed);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_struct_sync(arg0, arg1),
      parseSuccessData: _wire2api_my_size,
      constMeta: kHandleStructSyncConstMeta,
      argValues: [arg, boxed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStructSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_struct_sync",
        argNames: ["arg", "boxed"],
      );

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_new_type_int(arg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_newtype(port_, arg0),
      parseSuccessData: _wire2api_new_type_int,
      constMeta: kHandleNewtypeConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNewtypeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_newtype",
        argNames: ["arg"],
      );

  NewTypeInt handleNewtypeSync({required NewTypeInt arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_new_type_int(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_newtype_sync(arg0),
      parseSuccessData: _wire2api_new_type_int,
      constMeta: kHandleNewtypeSyncConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNewtypeSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_newtype_sync",
        argNames: ["arg"],
      );

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint}) {
    var arg0 = _platform.api2wire_list_my_size(l);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_list_of_struct(port_, arg0),
      parseSuccessData: _wire2api_list_my_size,
      constMeta: kHandleListOfStructConstMeta,
      argValues: [l],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleListOfStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_list_of_struct",
        argNames: ["l"],
      );

  List<MySize> handleListOfStructSync({required List<MySize> l, dynamic hint}) {
    var arg0 = _platform.api2wire_list_my_size(l);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_list_of_struct_sync(arg0),
      parseSuccessData: _wire2api_list_my_size,
      constMeta: kHandleListOfStructSyncConstMeta,
      argValues: [l],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleListOfStructSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_list_of_struct_sync",
        argNames: ["l"],
      );

  Future<List<String>> handleStringList({required List<String> names, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(names);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_string_list(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kHandleStringListConstMeta,
      argValues: [names],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringListConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string_list",
        argNames: ["names"],
      );

  List<String> handleStringListSync({required List<String> names, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(names);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_string_list_sync(arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kHandleStringListSyncConstMeta,
      argValues: [names],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringListSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string_list_sync",
        argNames: ["names"],
      );

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_tree_node(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_complex_struct(port_, arg0),
      parseSuccessData: _wire2api_my_tree_node,
      constMeta: kHandleComplexStructConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleComplexStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_complex_struct",
        argNames: ["s"],
      );

  MyTreeNode handleComplexStructSync({required MyTreeNode s, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_tree_node(s);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_complex_struct_sync(arg0),
      parseSuccessData: _wire2api_my_tree_node,
      constMeta: kHandleComplexStructSyncConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleComplexStructSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_complex_struct_sync",
        argNames: ["s"],
      );

  Future<MyNestedStruct> handleNestedStruct({required MyNestedStruct s, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_nested_struct(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_nested_struct(port_, arg0),
      parseSuccessData: _wire2api_my_nested_struct,
      constMeta: kHandleNestedStructConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNestedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_nested_struct",
        argNames: ["s"],
      );

  Uint8List handleSyncReturn({required String mode, dynamic hint}) {
    var arg0 = _platform.api2wire_String(mode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_sync_return(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHandleSyncReturnConstMeta,
      argValues: [mode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSyncReturnConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_sync_return",
        argNames: ["mode"],
      );

  Stream<String> handleStream({required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(arg);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kHandleStreamConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream",
        argNames: ["arg"],
      );

  Stream<MyStreamEntry> handleStreamOfStruct({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_of_struct(port_),
      parseSuccessData: _wire2api_my_stream_entry,
      constMeta: kHandleStreamOfStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamOfStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_of_struct",
        argNames: [],
      );

  Future<int> returnErr({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_err(port_),
      parseSuccessData: _wire2api_i32,
      constMeta: kReturnErrConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnErrConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_err",
        argNames: [],
      );

  Future<int> returnPanic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_panic(port_),
      parseSuccessData: _wire2api_i32,
      constMeta: kReturnPanicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnPanicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_panic",
        argNames: [],
      );

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint}) {
    var arg0 = api2wire_f64(left);
    var arg1 = api2wire_f64(right);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_optional_return(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_f64,
      constMeta: kHandleOptionalReturnConstMeta,
      argValues: [left, right],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionalReturnConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_return",
        argNames: ["left", "right"],
      );

  Future<Element?> handleOptionalStruct({String? document, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(document);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_optional_struct(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_element,
      constMeta: kHandleOptionalStructConstMeta,
      argValues: [document],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionalStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_struct",
        argNames: ["document"],
      );

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_exotic_optionals(opt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_optional_increment(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_exotic_optionals,
      constMeta: kHandleOptionalIncrementConstMeta,
      argValues: [opt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionalIncrementConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_increment",
        argNames: ["opt"],
      );

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_f64(opt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_increment_boxed_optional(port_, arg0),
      parseSuccessData: _wire2api_f64,
      constMeta: kHandleIncrementBoxedOptionalConstMeta,
      argValues: [opt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleIncrementBoxedOptionalConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_increment_boxed_optional",
        argNames: ["opt"],
      );

  Future<String> handleOptionBoxArguments(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionals? structbox,
      dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_i8(i8Box);
    var arg1 = _platform.api2wire_opt_box_u8(u8Box);
    var arg2 = _platform.api2wire_opt_box_i32(i32Box);
    var arg3 = _platform.api2wire_opt_box_i64(i64Box);
    var arg4 = _platform.api2wire_opt_box_f64(f64Box);
    var arg5 = _platform.api2wire_opt_box_bool(boolbox);
    var arg6 = _platform.api2wire_opt_box_exotic_optionals(structbox);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_option_box_arguments(port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_String,
      constMeta: kHandleOptionBoxArgumentsConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionBoxArgumentsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_option_box_arguments",
        argNames: ["i8Box", "u8Box", "i32Box", "i64Box", "f64Box", "boolbox", "structbox"],
      );

  Future<Uint8List> printNote({required Note note, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_note(note);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_print_note(port_, arg0),
      parseSuccessData: _wire2api_ZeroCopyBuffer_Uint8List,
      constMeta: kPrintNoteConstMeta,
      argValues: [note],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrintNoteConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "print_note",
        argNames: ["note"],
      );

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint}) {
    var arg0 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_return_enum(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_weekdays,
      constMeta: kHandleReturnEnumConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleReturnEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_enum",
        argNames: ["input"],
      );

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint}) {
    var arg0 = api2wire_weekdays(weekday);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_enum_parameter(port_, arg0),
      parseSuccessData: _wire2api_weekdays,
      constMeta: kHandleEnumParameterConstMeta,
      argValues: [weekday],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleEnumParameterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_enum_parameter",
        argNames: ["weekday"],
      );

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_customized(val);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_customized_struct(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kHandleCustomizedStructConstMeta,
      argValues: [val],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleCustomizedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_customized_struct",
        argNames: ["val"],
      );

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_kitchen_sink(val);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_enum_struct(port_, arg0),
      parseSuccessData: _wire2api_kitchen_sink,
      constMeta: kHandleEnumStructConstMeta,
      argValues: [val],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleEnumStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_enum_struct",
        argNames: ["val"],
      );

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_struct(myStruct);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_imported_struct(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kUseImportedStructConstMeta,
      argValues: [myStruct],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseImportedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_imported_struct",
        argNames: ["myStruct"],
      );

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint}) {
    var arg0 = api2wire_my_enum(myEnum);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_imported_enum(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kUseImportedEnumConstMeta,
      argValues: [myEnum],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseImportedEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_imported_enum",
        argNames: ["myEnum"],
      );

  Future<ApplicationSettings> getAppSettings({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_app_settings(port_),
      parseSuccessData: _wire2api_application_settings,
      constMeta: kGetAppSettingsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAppSettingsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_app_settings",
        argNames: [],
      );

  Future<ApplicationSettings> getFallibleAppSettings({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_fallible_app_settings(port_),
      parseSuccessData: _wire2api_application_settings,
      constMeta: kGetFallibleAppSettingsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetFallibleAppSettingsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_fallible_app_settings",
        argNames: [],
      );

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_application_settings(appSettings);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_app_embedded(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsAppEmbeddedConstMeta,
      argValues: [appSettings],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsAppEmbeddedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_app_embedded",
        argNames: ["appSettings"],
      );

  Future<ApplicationMessage> getMessage({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_message(port_),
      parseSuccessData: _wire2api_application_message,
      constMeta: kGetMessageConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMessageConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_message",
        argNames: [],
      );

  Future<Numbers> repeatNumber({required int num, required int times, dynamic hint}) {
    var arg0 = api2wire_i32(num);
    var arg1 = api2wire_usize(times);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_repeat_number(port_, arg0, arg1),
      parseSuccessData: _wire2api_numbers,
      constMeta: kRepeatNumberConstMeta,
      argValues: [num, times],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRepeatNumberConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "repeat_number",
        argNames: ["num", "times"],
      );

  Future<Sequences> repeatSequence({required int seq, required int times, dynamic hint}) {
    var arg0 = api2wire_i32(seq);
    var arg1 = api2wire_usize(times);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_repeat_sequence(port_, arg0, arg1),
      parseSuccessData: _wire2api_sequences,
      constMeta: kRepeatSequenceConstMeta,
      argValues: [seq, times],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRepeatSequenceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "repeat_sequence",
        argNames: ["seq", "times"],
      );

  Future<int?> firstNumber({required Numbers nums, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_numbers(nums);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_first_number(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      constMeta: kFirstNumberConstMeta,
      argValues: [nums],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFirstNumberConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "first_number",
        argNames: ["nums"],
      );

  Future<int?> firstSequence({required Sequences seqs, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_sequences(seqs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_first_sequence(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      constMeta: kFirstSequenceConstMeta,
      argValues: [seqs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFirstSequenceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "first_sequence",
        argNames: ["seqs"],
      );

  Future<U8Array5> getArray({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_array(port_),
      parseSuccessData: _wire2api_u8_array_5,
      constMeta: kGetArrayConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_array",
        argNames: [],
      );

  Future<PointArray2> getComplexArray({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_complex_array(port_),
      parseSuccessData: _wire2api_Point_array_2,
      constMeta: kGetComplexArrayConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetComplexArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_complex_array",
        argNames: [],
      );

  Future<int> getUsize({required int u, dynamic hint}) {
    var arg0 = api2wire_usize(u);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_usize(port_, arg0),
      parseSuccessData: _wire2api_usize,
      constMeta: kGetUsizeConstMeta,
      argValues: [u],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetUsizeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_usize",
        argNames: ["u"],
      );

  Future<UserId> nextUserId({required UserId userId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_user_id(userId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_next_user_id(port_, arg0),
      parseSuccessData: _wire2api_user_id,
      constMeta: kNextUserIdConstMeta,
      argValues: [userId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNextUserIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "next_user_id",
        argNames: ["userId"],
      );

  Stream<Event> registerEventListener({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_register_event_listener(port_),
      parseSuccessData: _wire2api_event,
      constMeta: kRegisterEventListenerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterEventListenerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "register_event_listener",
        argNames: [],
      );

  Future<void> closeEventListener({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_event_listener(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kCloseEventListenerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseEventListenerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_event_listener",
        argNames: [],
      );

  Future<void> createEvent({required String address, required String payload, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    var arg1 = _platform.api2wire_String(payload);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_event(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kCreateEventConstMeta,
      argValues: [address, payload],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_event",
        argNames: ["address", "payload"],
      );

  Stream<Log> handleStreamSinkAt1({required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_sink_at_1(port_, arg0, arg1),
      parseSuccessData: _wire2api_log,
      constMeta: kHandleStreamSinkAt1ConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_1",
        argNames: ["key", "max"],
      );

  Stream<Log> handleStreamSinkAt2({required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_sink_at_2(port_, arg0, arg1),
      parseSuccessData: _wire2api_log,
      constMeta: kHandleStreamSinkAt2ConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt2ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_2",
        argNames: ["key", "max"],
      );

  Stream<Log> handleStreamSinkAt3({required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_sink_at_3(port_, arg0, arg1),
      parseSuccessData: _wire2api_log,
      constMeta: kHandleStreamSinkAt3ConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt3ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_3",
        argNames: ["key", "max"],
      );

  Future<SumWith> getSumStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_sum_struct(port_),
      parseSuccessData: (d) => _wire2api_sum_with(d),
      constMeta: kGetSumStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSumStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sum_struct",
        argNames: [],
      );

  Future<SumWithArray3> getSumArray({required int a, required int b, required int c, dynamic hint}) {
    var arg0 = api2wire_u32(a);
    var arg1 = api2wire_u32(b);
    var arg2 = api2wire_u32(c);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_sum_array(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_SumWith_array_3,
      constMeta: kGetSumArrayConstMeta,
      argValues: [a, b, c],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSumArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sum_array",
        argNames: ["a", "b", "c"],
      );

  Future<Measure?> multiplyByTen({required Measure measure, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_measure(measure);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_multiply_by_ten(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_measure,
      constMeta: kMultiplyByTenConstMeta,
      argValues: [measure],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMultiplyByTenConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "multiply_by_ten",
        argNames: ["measure"],
      );

  Future<OldSimpleStruct> callOldModuleSystem({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_call_old_module_system(port_),
      parseSuccessData: _wire2api_old_simple_struct,
      constMeta: kCallOldModuleSystemConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallOldModuleSystemConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "call_old_module_system",
        argNames: [],
      );

  Future<NewSimpleStruct> callNewModuleSystem({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_call_new_module_system(port_),
      parseSuccessData: _wire2api_new_simple_struct,
      constMeta: kCallNewModuleSystemConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallNewModuleSystemConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "call_new_module_system",
        argNames: [],
      );

  Future<BigBuffers> handleBigBuffers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_big_buffers(port_),
      parseSuccessData: _wire2api_big_buffers,
      constMeta: kHandleBigBuffersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleBigBuffersConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_big_buffers",
        argNames: [],
      );

  Future<DateTime> datetimeUtc({required DateTime d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Utc(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_datetime_utc(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Utc,
      constMeta: kDatetimeUtcConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDatetimeUtcConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "datetime_utc",
        argNames: ["d"],
      );

  Future<DateTime> datetimeLocal({required DateTime d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Local(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_datetime_local(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Local,
      constMeta: kDatetimeLocalConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDatetimeLocalConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "datetime_local",
        argNames: ["d"],
      );

  Future<DateTime> naivedatetime({required DateTime d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Naive(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_naivedatetime(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Naive,
      constMeta: kNaivedatetimeConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNaivedatetimeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "naivedatetime",
        argNames: ["d"],
      );

  Future<DateTime?> optionalEmptyDatetimeUtc({DateTime? d, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_Chrono_Utc(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_optional_empty_datetime_utc(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_Chrono_Utc,
      constMeta: kOptionalEmptyDatetimeUtcConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOptionalEmptyDatetimeUtcConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "optional_empty_datetime_utc",
        argNames: ["d"],
      );

  Future<Duration> duration({required Duration d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Duration(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_duration(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Duration,
      constMeta: kDurationConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDurationConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "duration",
        argNames: ["d"],
      );

  Future<List<Duration>> handleTimestamps({required List<DateTime> timestamps, required DateTime epoch, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_NaiveList(timestamps);
    var arg1 = _platform.api2wire_Chrono_Naive(epoch);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_timestamps(port_, arg0, arg1),
      parseSuccessData: _wire2api_Chrono_DurationList,
      constMeta: kHandleTimestampsConstMeta,
      argValues: [timestamps, epoch],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTimestampsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_timestamps",
        argNames: ["timestamps", "epoch"],
      );

  Future<List<DateTime>> handleDurations({required List<Duration> durations, required DateTime since, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_DurationList(durations);
    var arg1 = _platform.api2wire_Chrono_Local(since);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_durations(port_, arg0, arg1),
      parseSuccessData: _wire2api_Chrono_LocalList,
      constMeta: kHandleDurationsConstMeta,
      argValues: [durations, since],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleDurationsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_durations",
        argNames: ["durations", "since"],
      );

  Future<TestChrono> testChrono({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_chrono(port_),
      parseSuccessData: _wire2api_test_chrono,
      constMeta: kTestChronoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestChronoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_chrono",
        argNames: [],
      );

  Future<TestChrono> testPreciseChrono({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_precise_chrono(port_),
      parseSuccessData: _wire2api_test_chrono,
      constMeta: kTestPreciseChronoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestPreciseChronoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_precise_chrono",
        argNames: [],
      );

  Future<Duration> howLongDoesItTake({required FeatureChrono mine, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_feature_chrono(mine);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_how_long_does_it_take(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Duration,
      constMeta: kHowLongDoesItTakeConstMeta,
      argValues: [mine],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHowLongDoesItTakeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "how_long_does_it_take",
        argNames: ["mine"],
      );

  Future<UuidValue> handleUuid({required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_uuid(port_, arg0),
      parseSuccessData: _wire2api_Uuid,
      constMeta: kHandleUuidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleUuidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_uuid",
        argNames: ["id"],
      );

  Future<List<UuidValue>> handleUuids({required List<UuidValue> ids, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuids(ids);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_uuids(port_, arg0),
      parseSuccessData: _wire2api_Uuids,
      constMeta: kHandleUuidsConstMeta,
      argValues: [ids],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleUuidsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_uuids",
        argNames: ["ids"],
      );

  Future<FeatureUuid> handleNestedUuids({required FeatureUuid ids, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_feature_uuid(ids);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_nested_uuids(port_, arg0),
      parseSuccessData: _wire2api_feature_uuid,
      constMeta: kHandleNestedUuidsConstMeta,
      argValues: [ids],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNestedUuidsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_nested_uuids",
        argNames: ["ids"],
      );

  Future<MessageId> newMsgid({required U8Array32 id, dynamic hint}) {
    var arg0 = _platform.api2wire_u8_array_32(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_msgid(port_, arg0),
      parseSuccessData: _wire2api_message_id,
      constMeta: kNewMsgidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewMsgidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_msgid",
        argNames: ["id"],
      );

  Future<U8Array32> useMsgid({required MessageId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_message_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_msgid(port_, arg0),
      parseSuccessData: _wire2api_u8_array_32,
      constMeta: kUseMsgidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseMsgidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_msgid",
        argNames: ["id"],
      );

  Future<Blob> boxedBlob({required U8Array1600 blob, dynamic hint}) {
    var arg0 = _platform.api2wire_box_u8_array_1600(blob);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_boxed_blob(port_, arg0),
      parseSuccessData: _wire2api_blob,
      constMeta: kBoxedBlobConstMeta,
      argValues: [blob],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBoxedBlobConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "boxed_blob",
        argNames: ["blob"],
      );

  Future<U8Array1600> useBoxedBlob({required Blob blob, dynamic hint}) {
    var arg0 = _platform.api2wire_box_blob(blob);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_boxed_blob(port_, arg0),
      parseSuccessData: _wire2api_u8_array_1600,
      constMeta: kUseBoxedBlobConstMeta,
      argValues: [blob],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseBoxedBlobConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_boxed_blob",
        argNames: ["blob"],
      );

  Future<FeedId> returnBoxedFeedId({required U8Array8 id, dynamic hint}) {
    var arg0 = _platform.api2wire_u8_array_8(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_boxed_feed_id(port_, arg0),
      parseSuccessData: _wire2api_box_feed_id,
      constMeta: kReturnBoxedFeedIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnBoxedFeedIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_boxed_feed_id",
        argNames: ["id"],
      );

  Future<U8Array8> returnBoxedRawFeedId({required FeedId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_feed_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_boxed_raw_feed_id(port_, arg0),
      parseSuccessData: _wire2api_box_u8_array_8,
      constMeta: kReturnBoxedRawFeedIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnBoxedRawFeedIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_boxed_raw_feed_id",
        argNames: ["id"],
      );

  Future<TestId> testId({required TestId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_test_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_id(port_, arg0),
      parseSuccessData: _wire2api_test_id,
      constMeta: kTestIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_id",
        argNames: ["id"],
      );

  Future<double> lastNumber({required F64Array16 array, dynamic hint}) {
    var arg0 = _platform.api2wire_f64_array_16(array);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_last_number(port_, arg0),
      parseSuccessData: _wire2api_f64,
      constMeta: kLastNumberConstMeta,
      argValues: [array],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLastNumberConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "last_number",
        argNames: ["array"],
      );

  Future<TestIdArray2> nestedId({required TestIdArray4 id, dynamic hint}) {
    var arg0 = _platform.api2wire_TestId_array_4(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nested_id(port_, arg0),
      parseSuccessData: _wire2api_TestId_array_2,
      constMeta: kNestedIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNestedIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "nested_id",
        argNames: ["id"],
      );

  String syncAcceptDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_accept_dart_opaque(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSyncAcceptDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncAcceptDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_accept_dart_opaque",
        argNames: ["opaque"],
      );

  Future<String> asyncAcceptDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_async_accept_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kAsyncAcceptDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsyncAcceptDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "async_accept_dart_opaque",
        argNames: ["opaque"],
      );

  Future<Object> loopBack({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back(port_, arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kLoopBackConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back",
        argNames: ["opaque"],
      );

  Future<Object?> loopBackOption({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_option(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_DartOpaque,
      constMeta: kLoopBackOptionConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackOptionConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_option",
        argNames: ["opaque"],
      );

  Future<ObjectArray1> loopBackArray({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_array(port_, arg0),
      parseSuccessData: _wire2api_Object_array_1,
      constMeta: kLoopBackArrayConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_array",
        argNames: ["opaque"],
      );

  Future<List<Object>> loopBackVec({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_vec(port_, arg0),
      parseSuccessData: _wire2api_list_DartOpaque,
      constMeta: kLoopBackVecConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackVecConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_vec",
        argNames: ["opaque"],
      );

  Future<void> loopBackOptionGet({Object? opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_option_get(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kLoopBackOptionGetConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackOptionGetConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_option_get",
        argNames: ["opaque"],
      );

  Future<void> loopBackArrayGet({required ObjectArray1 opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_Object_array_1(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_array_get(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kLoopBackArrayGetConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackArrayGetConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_array_get",
        argNames: ["opaque"],
      );

  Future<void> loopBackVecGet({required List<Object> opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_list_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_vec_get(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kLoopBackVecGetConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackVecGetConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_vec_get",
        argNames: ["opaque"],
      );

  String unwrapDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_unwrap_dart_opaque(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kUnwrapDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnwrapDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "unwrap_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> panicUnwrapDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_panic_unwrap_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kPanicUnwrapDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPanicUnwrapDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "panic_unwrap_dart_opaque",
        argNames: ["opaque"],
      );

  Future<HideData> createOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_opaque(port_),
      parseSuccessData: _wire2api_HideData,
      constMeta: kCreateOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_opaque",
        argNames: [],
      );

  Future<HideData?> createOptionOpaque({HideData? opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_option_opaque(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_HideData,
      constMeta: kCreateOptionOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateOptionOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_option_opaque",
        argNames: ["opaque"],
      );

  HideData syncCreateOpaque({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_create_opaque(),
      parseSuccessData: _wire2api_HideData,
      constMeta: kSyncCreateOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncCreateOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_create_opaque",
        argNames: [],
      );

  Future<EnumOpaqueArray5> createArrayOpaqueEnum({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_array_opaque_enum(port_),
      parseSuccessData: _wire2api_EnumOpaque_array_5,
      constMeta: kCreateArrayOpaqueEnumConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateArrayOpaqueEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_array_opaque_enum",
        argNames: [],
      );

  Future<String> runEnumOpaque({required EnumOpaque opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_enum_opaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_enum_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kRunEnumOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunEnumOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_enum_opaque",
        argNames: ["opaque"],
      );

  Future<String> runOpaque({required HideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kRunOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_opaque",
        argNames: ["opaque"],
      );

  Future<String> runOpaqueWithDelay({required HideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_opaque_with_delay(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kRunOpaqueWithDelayConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunOpaqueWithDelayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_opaque_with_delay",
        argNames: ["opaque"],
      );

  Future<HideDataArray2> opaqueArray({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_array(port_),
      parseSuccessData: _wire2api_HideData_array_2,
      constMeta: kOpaqueArrayConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_array",
        argNames: [],
      );

  Future<NonSendHideData> createSyncOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_sync_opaque(port_),
      parseSuccessData: _wire2api_NonSendHideData,
      constMeta: kCreateSyncOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateSyncOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_sync_opaque",
        argNames: [],
      );

  NonSendHideData syncCreateSyncOpaque({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_create_sync_opaque(),
      parseSuccessData: _wire2api_NonSendHideData,
      constMeta: kSyncCreateSyncOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncCreateSyncOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_create_sync_opaque",
        argNames: [],
      );

  String syncRunOpaque({required NonSendHideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_NonSendHideData(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_run_opaque(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSyncRunOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncRunOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_run_opaque",
        argNames: ["opaque"],
      );

  Future<void> opaqueArrayRun({required HideDataArray2 data, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData_array_2(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_array_run(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kOpaqueArrayRunConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueArrayRunConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_array_run",
        argNames: ["data"],
      );

  Future<List<HideData>> opaqueVec({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_vec(port_),
      parseSuccessData: _wire2api_list_HideData,
      constMeta: kOpaqueVecConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueVecConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_vec",
        argNames: [],
      );

  Future<void> opaqueVecRun({required List<HideData> data, dynamic hint}) {
    var arg0 = _platform.api2wire_list_HideData(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_vec_run(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kOpaqueVecRunConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueVecRunConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_vec_run",
        argNames: ["data"],
      );

  Future<OpaqueNested> createNestedOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_nested_opaque(port_),
      parseSuccessData: _wire2api_opaque_nested,
      constMeta: kCreateNestedOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNestedOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_nested_opaque",
        argNames: [],
      );

  Object syncLoopback({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_loopback(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kSyncLoopbackConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncLoopbackConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_loopback",
        argNames: ["opaque"],
      );

  Object? syncOptionLoopback({Object? opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_loopback(arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_DartOpaque,
      constMeta: kSyncOptionLoopbackConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionLoopbackConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_loopback",
        argNames: ["opaque"],
      );

  String? syncOption({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option(),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSyncOptionConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option",
        argNames: [],
      );

  String? syncOptionNull({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_null(),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSyncOptionNullConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionNullConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_null",
        argNames: [],
      );

  HideData? syncOptionRustOpaque({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_rust_opaque(),
      parseSuccessData: _wire2api_opt_box_autoadd_HideData,
      constMeta: kSyncOptionRustOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionRustOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_rust_opaque",
        argNames: [],
      );

  Object? syncOptionDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_dart_opaque(arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_DartOpaque,
      constMeta: kSyncOptionDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_dart_opaque",
        argNames: ["opaque"],
      );

  void syncVoid({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_void(),
      parseSuccessData: _wire2api_unit,
      constMeta: kSyncVoidConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncVoidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_void",
        argNames: [],
      );

  Future<void> runNestedOpaque({required OpaqueNested opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_opaque_nested(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_nested_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kRunNestedOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunNestedOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_nested_opaque",
        argNames: ["opaque"],
      );

  Future<DartOpaqueNested> createNestedDartOpaque({required Object opaque1, required Object opaque2, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque1);
    var arg1 = _platform.api2wire_DartOpaque(opaque2);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_nested_dart_opaque(port_, arg0, arg1),
      parseSuccessData: _wire2api_dart_opaque_nested,
      constMeta: kCreateNestedDartOpaqueConstMeta,
      argValues: [opaque1, opaque2],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNestedDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_nested_dart_opaque",
        argNames: ["opaque1", "opaque2"],
      );

  Future<void> getNestedDartOpaque({required DartOpaqueNested opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_dart_opaque_nested(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_nested_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kGetNestedDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetNestedDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_nested_dart_opaque",
        argNames: ["opaque"],
      );

  Future<EnumDartOpaque> createEnumDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_enum_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_enum_dart_opaque,
      constMeta: kCreateEnumDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateEnumDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_enum_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> getEnumDartOpaque({required EnumDartOpaque opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_enum_dart_opaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_enum_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kGetEnumDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEnumDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_enum_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> setStaticDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_static_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetStaticDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetStaticDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_static_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> dropStaticDartOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_drop_static_dart_opaque(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kDropStaticDartOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDropStaticDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "drop_static_dart_opaque",
        argNames: [],
      );

  Future<String> unwrapRustOpaque({required HideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_unwrap_rust_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kUnwrapRustOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnwrapRustOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "unwrap_rust_opaque",
        argNames: ["opaque"],
      );

  Object returnNonDroppableDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_return_non_droppable_dart_opaque(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kReturnNonDroppableDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnNonDroppableDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_non_droppable_dart_opaque",
        argNames: ["opaque"],
      );

  Future<FrbOpaqueReturn> frbGeneratorTest({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_frb_generator_test(port_),
      parseSuccessData: _wire2api_FrbOpaqueReturn,
      constMeta: kFrbGeneratorTestConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFrbGeneratorTestConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "frb_generator_test",
        argNames: [],
      );

  FrbOpaqueSyncReturn frbSyncGeneratorTest({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_frb_sync_generator_test(),
      parseSuccessData: _wire2api_FrbOpaqueSyncReturn,
      constMeta: kFrbSyncGeneratorTestConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFrbSyncGeneratorTestConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "frb_sync_generator_test",
        argNames: [],
      );

  Future<int> handleTypeAliasId({required int input, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_type_alias_id(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kHandleTypeAliasIdConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTypeAliasIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_type_alias_id",
        argNames: ["input"],
      );

  Future<int> handleTypeNestAliasId({required int input, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_type_nest_alias_id(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kHandleTypeNestAliasIdConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTypeNestAliasIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_type_nest_alias_id",
        argNames: ["input"],
      );

  Future<TestModel> handleTypeAliasModel({required int input, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_type_alias_model(port_, arg0),
      parseSuccessData: _wire2api_test_model,
      constMeta: kHandleTypeAliasModelConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTypeAliasModelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_type_alias_model",
        argNames: ["input"],
      );

  Future<Empty> emptyStruct({required Empty empty, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_empty(empty);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_empty_struct(port_, arg0),
      parseSuccessData: _wire2api_empty,
      constMeta: kEmptyStructConstMeta,
      argValues: [empty],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEmptyStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "empty_struct",
        argNames: ["empty"],
      );

  Future<dynamic> returnDartDynamic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_dart_dynamic(port_),
      parseSuccessData: _wire2api_dartabi,
      constMeta: kReturnDartDynamicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnDartDynamicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_dart_dynamic",
        argNames: [],
      );

  Future<RawStringItemStruct> testRawStringItemStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_raw_string_item_struct(port_),
      parseSuccessData: _wire2api_raw_string_item_struct,
      constMeta: kTestRawStringItemStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestRawStringItemStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_raw_string_item_struct",
        argNames: [],
      );

  Future<List<Weekdays>> listOfPrimitiveEnums({required List<Weekdays> weekdays, dynamic hint}) {
    var arg0 = _platform.api2wire_list_weekdays(weekdays);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_of_primitive_enums(port_, arg0),
      parseSuccessData: _wire2api_list_weekdays,
      constMeta: kListOfPrimitiveEnumsConstMeta,
      argValues: [weekdays],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListOfPrimitiveEnumsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_of_primitive_enums",
        argNames: ["weekdays"],
      );

  Future<int> sumMethodSumWith({required SumWith that, required int y, required int z, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_sum_with(that);
    var arg1 = api2wire_u32(y);
    var arg2 = api2wire_u32(z);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sum__method__SumWith(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      constMeta: kSumMethodSumWithConstMeta,
      argValues: [that, y, z],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSumMethodSumWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sum__method__SumWith",
        argNames: ["that", "y", "z"],
      );

  Future<ConcatenateWith> newStaticMethodConcatenateWith({required String a, dynamic hint}) {
    var arg0 = _platform.api2wire_String(a);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new__static_method__ConcatenateWith(port_, arg0),
      parseSuccessData: (d) => _wire2api_concatenate_with(d),
      constMeta: kNewStaticMethodConcatenateWithConstMeta,
      argValues: [a],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodConcatenateWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__ConcatenateWith",
        argNames: ["a"],
      );

  Future<String> concatenateMethodConcatenateWith({required ConcatenateWith that, required String b, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_concatenate_with(that);
    var arg1 = _platform.api2wire_String(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_concatenate__method__ConcatenateWith(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kConcatenateMethodConcatenateWithConstMeta,
      argValues: [that, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConcatenateMethodConcatenateWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "concatenate__method__ConcatenateWith",
        argNames: ["that", "b"],
      );

  Future<String> concatenateStaticStaticMethodConcatenateWith({required String a, required String b, dynamic hint}) {
    var arg0 = _platform.api2wire_String(a);
    var arg1 = _platform.api2wire_String(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_concatenate_static__static_method__ConcatenateWith(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kConcatenateStaticStaticMethodConcatenateWithConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConcatenateStaticStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "concatenate_static__static_method__ConcatenateWith",
        argNames: ["a", "b"],
      );

  Stream<Log2> handleSomeStreamSinkMethodConcatenateWith(
      {required ConcatenateWith that, required int key, required int max, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_concatenate_with(that);
    var arg1 = api2wire_u32(key);
    var arg2 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_some_stream_sink__method__ConcatenateWith(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_log_2,
      constMeta: kHandleSomeStreamSinkMethodConcatenateWithConstMeta,
      argValues: [that, key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_stream_sink__method__ConcatenateWith",
        argNames: ["that", "key", "max"],
      );

  Stream<int> handleSomeStreamSinkAt1MethodConcatenateWith({required ConcatenateWith that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_concatenate_with(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_some_stream_sink_at_1__method__ConcatenateWith(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kHandleSomeStreamSinkAt1MethodConcatenateWithConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkAt1MethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_stream_sink_at_1__method__ConcatenateWith",
        argNames: ["that"],
      );

  Stream<Log2> handleSomeStaticStreamSinkStaticMethodConcatenateWith(
      {required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_some_static_stream_sink__static_method__ConcatenateWith(port_, arg0, arg1),
      parseSuccessData: _wire2api_log_2,
      constMeta: kHandleSomeStaticStreamSinkStaticMethodConcatenateWithConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_static_stream_sink__static_method__ConcatenateWith",
        argNames: ["key", "max"],
      );

  Stream<int> handleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWith({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(port_),
      parseSuccessData: _wire2api_u32,
      constMeta: kHandleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWithConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith",
        argNames: [],
      );

  DropFnType get dropOpaqueBoxDartDebug => _platform.inner.drop_opaque_BoxDartDebug;
  ShareFnType get shareOpaqueBoxDartDebug => _platform.inner.share_opaque_BoxDartDebug;
  OpaqueTypeFinalizer get BoxDartDebugFinalizer => _platform.BoxDartDebugFinalizer;

  DropFnType get dropOpaqueFrbOpaqueReturn => _platform.inner.drop_opaque_FrbOpaqueReturn;
  ShareFnType get shareOpaqueFrbOpaqueReturn => _platform.inner.share_opaque_FrbOpaqueReturn;
  OpaqueTypeFinalizer get FrbOpaqueReturnFinalizer => _platform.FrbOpaqueReturnFinalizer;

  DropFnType get dropOpaqueFrbOpaqueSyncReturn => _platform.inner.drop_opaque_FrbOpaqueSyncReturn;
  ShareFnType get shareOpaqueFrbOpaqueSyncReturn => _platform.inner.share_opaque_FrbOpaqueSyncReturn;
  OpaqueTypeFinalizer get FrbOpaqueSyncReturnFinalizer => _platform.FrbOpaqueSyncReturnFinalizer;

  DropFnType get dropOpaqueHideData => _platform.inner.drop_opaque_HideData;
  ShareFnType get shareOpaqueHideData => _platform.inner.share_opaque_HideData;
  OpaqueTypeFinalizer get HideDataFinalizer => _platform.HideDataFinalizer;

  DropFnType get dropOpaqueI32 => _platform.inner.drop_opaque_I32;
  ShareFnType get shareOpaqueI32 => _platform.inner.share_opaque_I32;
  OpaqueTypeFinalizer get I32Finalizer => _platform.I32Finalizer;

  DropFnType get dropOpaqueMutexHideData => _platform.inner.drop_opaque_MutexHideData;
  ShareFnType get shareOpaqueMutexHideData => _platform.inner.share_opaque_MutexHideData;
  OpaqueTypeFinalizer get MutexHideDataFinalizer => _platform.MutexHideDataFinalizer;

  DropFnType get dropOpaqueNonSendHideData => _platform.inner.drop_opaque_NonSendHideData;
  ShareFnType get shareOpaqueNonSendHideData => _platform.inner.share_opaque_NonSendHideData;
  OpaqueTypeFinalizer get NonSendHideDataFinalizer => _platform.NonSendHideDataFinalizer;

  DropFnType get dropOpaqueRwLockHideData => _platform.inner.drop_opaque_RwLockHideData;
  ShareFnType get shareOpaqueRwLockHideData => _platform.inner.share_opaque_RwLockHideData;
  OpaqueTypeFinalizer get RwLockHideDataFinalizer => _platform.RwLockHideDataFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  BoxDartDebug _wire2api_BoxDartDebug(dynamic raw) {
    return BoxDartDebug.fromRaw(raw[0], raw[1], this);
  }

  Duration _wire2api_Chrono_Duration(dynamic raw) {
    return wire2apiDuration(_wire2api_i64(raw));
  }

  List<Duration> _wire2api_Chrono_DurationList(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_Chrono_Duration).toList();
  }

  DateTime _wire2api_Chrono_Local(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: false);
  }

  List<DateTime> _wire2api_Chrono_LocalList(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_Chrono_Local).toList();
  }

  DateTime _wire2api_Chrono_Naive(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  DateTime _wire2api_Chrono_Utc(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  Object _wire2api_DartOpaque(dynamic raw) {
    return _platform.inner.get_dart_object(raw);
  }

  EnumOpaqueArray5 _wire2api_EnumOpaque_array_5(dynamic raw) {
    return EnumOpaqueArray5((raw as List<dynamic>).map(_wire2api_enum_opaque).toList());
  }

  FrbOpaqueReturn _wire2api_FrbOpaqueReturn(dynamic raw) {
    return FrbOpaqueReturn.fromRaw(raw[0], raw[1], this);
  }

  FrbOpaqueSyncReturn _wire2api_FrbOpaqueSyncReturn(dynamic raw) {
    return FrbOpaqueSyncReturn.fromRaw(raw[0], raw[1], this);
  }

  HideData _wire2api_HideData(dynamic raw) {
    return HideData.fromRaw(raw[0], raw[1], this);
  }

  HideDataArray2 _wire2api_HideData_array_2(dynamic raw) {
    return HideDataArray2((raw as List<dynamic>).map(_wire2api_HideData).toList());
  }

  I32 _wire2api_I32(dynamic raw) {
    return I32.fromRaw(raw[0], raw[1], this);
  }

  MutexHideData _wire2api_MutexHideData(dynamic raw) {
    return MutexHideData.fromRaw(raw[0], raw[1], this);
  }

  NonSendHideData _wire2api_NonSendHideData(dynamic raw) {
    return NonSendHideData.fromRaw(raw[0], raw[1], this);
  }

  ObjectArray1 _wire2api_Object_array_1(dynamic raw) {
    return ObjectArray1((raw as List<dynamic>).map(_wire2api_DartOpaque).toList());
  }

  PointArray2 _wire2api_Point_array_2(dynamic raw) {
    return PointArray2((raw as List<dynamic>).map(_wire2api_point).toList());
  }

  RwLockHideData _wire2api_RwLockHideData(dynamic raw) {
    return RwLockHideData.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  SumWithArray3 _wire2api_SumWith_array_3(dynamic raw) {
    return SumWithArray3((raw as List<dynamic>).map(_wire2api_sum_with).toList());
  }

  TestIdArray2 _wire2api_TestId_array_2(dynamic raw) {
    return TestIdArray2((raw as List<dynamic>).map(_wire2api_test_id).toList());
  }

  UuidValue _wire2api_Uuid(dynamic raw) {
    return UuidValue.fromByteList(_wire2api_uint_8_list(raw));
  }

  List<UuidValue> _wire2api_Uuids(dynamic raw) {
    final bytes = _wire2api_uint_8_list(raw);
    return wire2apiUuids(bytes);
  }

  Float32List _wire2api_ZeroCopyBuffer_Float32List(dynamic raw) {
    return raw as Float32List;
  }

  Float64List _wire2api_ZeroCopyBuffer_Float64List(dynamic raw) {
    return raw as Float64List;
  }

  Int16List _wire2api_ZeroCopyBuffer_Int16List(dynamic raw) {
    return raw as Int16List;
  }

  Int32List _wire2api_ZeroCopyBuffer_Int32List(dynamic raw) {
    return raw as Int32List;
  }

  Int64List _wire2api_ZeroCopyBuffer_Int64List(dynamic raw) {
    return _wire2api_int_64_list(raw);
  }

  Int8List _wire2api_ZeroCopyBuffer_Int8List(dynamic raw) {
    return raw as Int8List;
  }

  Uint16List _wire2api_ZeroCopyBuffer_Uint16List(dynamic raw) {
    return raw as Uint16List;
  }

  Uint32List _wire2api_ZeroCopyBuffer_Uint32List(dynamic raw) {
    return raw as Uint32List;
  }

  Uint64List _wire2api_ZeroCopyBuffer_Uint64List(dynamic raw) {
    return _wire2api_uint_64_list(raw);
  }

  Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
    return raw as Uint8List;
  }

  ApplicationEnv _wire2api_application_env(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ApplicationEnv(
      vars: _wire2api_list_application_env_var(arr[0]),
    );
  }

  ApplicationEnvVar _wire2api_application_env_var(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApplicationEnvVar(
      field0: _wire2api_String(arr[0]),
      field1: _wire2api_bool(arr[1]),
    );
  }

  ApplicationMessage _wire2api_application_message(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ApplicationMessage_DisplayMessage(
          _wire2api_String(raw[1]),
        );
      case 1:
        return ApplicationMessage_RenderPixel(
          x: _wire2api_i32(raw[1]),
          y: _wire2api_i32(raw[2]),
        );
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw Exception("unreachable");
    }
  }

  ApplicationMode _wire2api_application_mode(dynamic raw) {
    return ApplicationMode.values[raw];
  }

  ApplicationSettings _wire2api_application_settings(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApplicationSettings(
      name: _wire2api_String(arr[0]),
      version: _wire2api_String(arr[1]),
      mode: _wire2api_application_mode(arr[2]),
      env: _wire2api_box_application_env(arr[3]),
      envOptional: _wire2api_opt_box_autoadd_application_env(arr[4]),
    );
  }

  Attribute _wire2api_attribute(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Attribute(
      key: _wire2api_String(arr[0]),
      value: _wire2api_String(arr[1]),
    );
  }

  BigBuffers _wire2api_big_buffers(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffers(
      int64: _wire2api_int_64_list(arr[0]),
      uint64: _wire2api_uint_64_list(arr[1]),
    );
  }

  Blob _wire2api_blob(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Blob(
      field0: _wire2api_u8_array_1600(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ApplicationEnv _wire2api_box_application_env(dynamic raw) {
    return _wire2api_application_env(raw);
  }

  Duration _wire2api_box_autoadd_Chrono_Duration(dynamic raw) {
    return _wire2api_Chrono_Duration(raw);
  }

  DateTime _wire2api_box_autoadd_Chrono_Naive(dynamic raw) {
    return _wire2api_Chrono_Naive(raw);
  }

  DateTime _wire2api_box_autoadd_Chrono_Utc(dynamic raw) {
    return _wire2api_Chrono_Utc(raw);
  }

  Object _wire2api_box_autoadd_DartOpaque(dynamic raw) {
    return _wire2api_DartOpaque(raw);
  }

  HideData _wire2api_box_autoadd_HideData(dynamic raw) {
    return _wire2api_HideData(raw);
  }

  ApplicationEnv _wire2api_box_autoadd_application_env(dynamic raw) {
    return _wire2api_application_env(raw);
  }

  Attribute _wire2api_box_autoadd_attribute(dynamic raw) {
    return _wire2api_attribute(raw);
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  Element _wire2api_box_autoadd_element(dynamic raw) {
    return _wire2api_element(raw);
  }

  ExoticOptionals _wire2api_box_autoadd_exotic_optionals(dynamic raw) {
    return _wire2api_exotic_optionals(raw);
  }

  double _wire2api_box_autoadd_f64(dynamic raw) {
    return raw as double;
  }

  int _wire2api_box_autoadd_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_i64(dynamic raw) {
    return _wire2api_i64(raw);
  }

  Measure _wire2api_box_autoadd_measure(dynamic raw) {
    return _wire2api_measure(raw);
  }

  NewTypeInt _wire2api_box_autoadd_new_type_int(dynamic raw) {
    return _wire2api_new_type_int(raw);
  }

  Weekdays _wire2api_box_autoadd_weekdays(dynamic raw) {
    return _wire2api_weekdays(raw);
  }

  Distance _wire2api_box_distance(dynamic raw) {
    return _wire2api_distance(raw);
  }

  FeedId _wire2api_box_feed_id(dynamic raw) {
    return _wire2api_feed_id(raw);
  }

  KitchenSink _wire2api_box_kitchen_sink(dynamic raw) {
    return _wire2api_kitchen_sink(raw);
  }

  Speed _wire2api_box_speed(dynamic raw) {
    return _wire2api_speed(raw);
  }

  U8Array8 _wire2api_box_u8_array_8(dynamic raw) {
    return _wire2api_u8_array_8(raw);
  }

  ConcatenateWith _wire2api_concatenate_with(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWith(
      bridge: this,
      a: _wire2api_String(arr[0]),
    );
  }

  DartOpaqueNested _wire2api_dart_opaque_nested(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNested(
      first: _wire2api_DartOpaque(arr[0]),
      second: _wire2api_DartOpaque(arr[1]),
    );
  }

  dynamic _wire2api_dartabi(dynamic raw) {
    return raw;
  }

  Distance _wire2api_distance(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Distance_Unknown();
      case 1:
        return Distance_Map(
          _wire2api_f64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Element _wire2api_element(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Element(
      tag: _wire2api_opt_String(arr[0]),
      text: _wire2api_opt_String(arr[1]),
      attributes: _wire2api_opt_list_attribute(arr[2]),
      children: _wire2api_opt_list_element(arr[3]),
    );
  }

  Empty _wire2api_empty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0) throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Empty();
  }

  EnumDartOpaque _wire2api_enum_dart_opaque(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaque_Primitive(
          _wire2api_i32(raw[1]),
        );
      case 1:
        return EnumDartOpaque_Opaque(
          _wire2api_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaque _wire2api_enum_opaque(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaque_Struct(
          _wire2api_HideData(raw[1]),
        );
      case 1:
        return EnumOpaque_Primitive(
          _wire2api_I32(raw[1]),
        );
      case 2:
        return EnumOpaque_TraitObj(
          _wire2api_BoxDartDebug(raw[1]),
        );
      case 3:
        return EnumOpaque_Mutex(
          _wire2api_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaque_RwLock(
          _wire2api_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Event _wire2api_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Event(
      address: _wire2api_String(arr[0]),
      payload: _wire2api_String(arr[1]),
    );
  }

  ExoticOptionals _wire2api_exotic_optionals(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14) throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionals(
      int32: _wire2api_opt_box_autoadd_i32(arr[0]),
      int64: _wire2api_opt_box_autoadd_i64(arr[1]),
      float64: _wire2api_opt_box_autoadd_f64(arr[2]),
      boolean: _wire2api_opt_box_autoadd_bool(arr[3]),
      zerocopy: _wire2api_opt_ZeroCopyBuffer_Uint8List(arr[4]),
      int8List: _wire2api_opt_int_8_list(arr[5]),
      uint8List: _wire2api_opt_uint_8_list(arr[6]),
      int32List: _wire2api_opt_int_32_list(arr[7]),
      float32List: _wire2api_opt_float_32_list(arr[8]),
      float64List: _wire2api_opt_float_64_list(arr[9]),
      attributes: _wire2api_opt_list_attribute(arr[10]),
      attributesNullable: _wire2api_list_opt_box_autoadd_attribute(arr[11]),
      nullableAttributes: _wire2api_opt_list_opt_box_autoadd_attribute(arr[12]),
      newtypeint: _wire2api_opt_box_autoadd_new_type_int(arr[13]),
    );
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FeatureUuid _wire2api_feature_uuid(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FeatureUuid(
      one: _wire2api_Uuid(arr[0]),
      many: _wire2api_Uuids(arr[1]),
    );
  }

  FeedId _wire2api_feed_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedId(
      field0: _wire2api_u8_array_8(arr[0]),
    );
  }

  Float32List _wire2api_float_32_list(dynamic raw) {
    return raw as Float32List;
  }

  Float64List _wire2api_float_64_list(dynamic raw) {
    return raw as Float64List;
  }

  int _wire2api_i16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  I32Array2 _wire2api_i32_array_2(dynamic raw) {
    return I32Array2(_wire2api_int_32_list(raw));
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_i8(dynamic raw) {
    return raw as int;
  }

  Int16List _wire2api_int_16_list(dynamic raw) {
    return raw as Int16List;
  }

  Int32List _wire2api_int_32_list(dynamic raw) {
    return raw as Int32List;
  }

  Int64List _wire2api_int_64_list(dynamic raw) {
    return Int64List.from(raw);
  }

  Int8List _wire2api_int_8_list(dynamic raw) {
    return raw as Int8List;
  }

  KitchenSink _wire2api_kitchen_sink(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSink_Empty();
      case 1:
        return KitchenSink_Primitives(
          int32: _wire2api_i32(raw[1]),
          float64: _wire2api_f64(raw[2]),
          boolean: _wire2api_bool(raw[3]),
        );
      case 2:
        return KitchenSink_Nested(
          _wire2api_i32(raw[1]),
          _wire2api_box_kitchen_sink(raw[2]),
        );
      case 3:
        return KitchenSink_Optional(
          _wire2api_opt_box_autoadd_i32(raw[1]),
          _wire2api_opt_box_autoadd_i32(raw[2]),
        );
      case 4:
        return KitchenSink_Buffer(
          _wire2api_ZeroCopyBuffer_Uint8List(raw[1]),
        );
      case 5:
        return KitchenSink_Enums(
          _wire2api_weekdays(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  List<Object> _wire2api_list_DartOpaque(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_DartOpaque).toList();
  }

  List<HideData> _wire2api_list_HideData(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_HideData).toList();
  }

  List<ApplicationEnvVar> _wire2api_list_application_env_var(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_application_env_var).toList();
  }

  List<Attribute> _wire2api_list_attribute(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_attribute).toList();
  }

  List<Element> _wire2api_list_element(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_element).toList();
  }

  List<EnumOpaque> _wire2api_list_enum_opaque(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_enum_opaque).toList();
  }

  List<MySize> _wire2api_list_my_size(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_my_size).toList();
  }

  List<MyTreeNode> _wire2api_list_my_tree_node(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_my_tree_node).toList();
  }

  List<Attribute?> _wire2api_list_opt_box_autoadd_attribute(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_box_autoadd_attribute).toList();
  }

  List<Point> _wire2api_list_point(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_point).toList();
  }

  List<SumWith> _wire2api_list_sum_with(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_sum_with).toList();
  }

  List<TestId> _wire2api_list_test_id(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_test_id).toList();
  }

  List<Weekdays> _wire2api_list_weekdays(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_weekdays).toList();
  }

  Log _wire2api_log(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log(
      key: _wire2api_u32(arr[0]),
      value: _wire2api_u32(arr[1]),
    );
  }

  Log2 _wire2api_log_2(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2(
      key: _wire2api_u32(arr[0]),
      value: _wire2api_String(arr[1]),
    );
  }

  Measure _wire2api_measure(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Measure_Speed(
          _wire2api_box_speed(raw[1]),
        );
      case 1:
        return Measure_Distance(
          _wire2api_box_distance(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MessageId _wire2api_message_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageId(
      field0: _wire2api_u8_array_32(arr[0]),
    );
  }

  MyEnum _wire2api_my_enum(dynamic raw) {
    return MyEnum.values[raw];
  }

  MyNestedStruct _wire2api_my_nested_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStruct(
      treeNode: _wire2api_my_tree_node(arr[0]),
      weekday: _wire2api_weekdays(arr[1]),
    );
  }

  MySize _wire2api_my_size(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MySize(
      width: _wire2api_i32(arr[0]),
      height: _wire2api_i32(arr[1]),
    );
  }

  MyStreamEntry _wire2api_my_stream_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntry(
      hello: _wire2api_String(arr[0]),
    );
  }

  MyStruct _wire2api_my_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStruct(
      content: _wire2api_bool(arr[0]),
    );
  }

  MyTreeNode _wire2api_my_tree_node(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNode(
      valueI32: _wire2api_i32(arr[0]),
      valueVecU8: _wire2api_uint_8_list(arr[1]),
      valueBoolean: _wire2api_bool(arr[2]),
      children: _wire2api_list_my_tree_node(arr[3]),
    );
  }

  NewSimpleStruct _wire2api_new_simple_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewSimpleStruct(
      field: _wire2api_i32(arr[0]),
    );
  }

  NewTypeInt _wire2api_new_type_int(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeInt(
      field0: _wire2api_i64(arr[0]),
    );
  }

  Numbers _wire2api_numbers(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Numbers(
      field0: _wire2api_int_32_list(arr[0]),
    );
  }

  OldSimpleStruct _wire2api_old_simple_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OldSimpleStruct(
      field: _wire2api_i32(arr[0]),
    );
  }

  OpaqueNested _wire2api_opaque_nested(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNested(
      first: _wire2api_HideData(arr[0]),
      second: _wire2api_HideData(arr[1]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Uint8List? _wire2api_opt_ZeroCopyBuffer_Uint8List(dynamic raw) {
    return raw == null ? null : _wire2api_ZeroCopyBuffer_Uint8List(raw);
  }

  Duration? _wire2api_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Chrono_Duration(raw);
  }

  DateTime? _wire2api_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Chrono_Naive(raw);
  }

  DateTime? _wire2api_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Chrono_Utc(raw);
  }

  Object? _wire2api_opt_box_autoadd_DartOpaque(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_DartOpaque(raw);
  }

  HideData? _wire2api_opt_box_autoadd_HideData(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_HideData(raw);
  }

  ApplicationEnv? _wire2api_opt_box_autoadd_application_env(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_application_env(raw);
  }

  Attribute? _wire2api_opt_box_autoadd_attribute(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_attribute(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  Element? _wire2api_opt_box_autoadd_element(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_element(raw);
  }

  ExoticOptionals? _wire2api_opt_box_autoadd_exotic_optionals(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_exotic_optionals(raw);
  }

  double? _wire2api_opt_box_autoadd_f64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_f64(raw);
  }

  int? _wire2api_opt_box_autoadd_i32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_i32(raw);
  }

  int? _wire2api_opt_box_autoadd_i64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_i64(raw);
  }

  Measure? _wire2api_opt_box_autoadd_measure(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_measure(raw);
  }

  NewTypeInt? _wire2api_opt_box_autoadd_new_type_int(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_new_type_int(raw);
  }

  Weekdays? _wire2api_opt_box_autoadd_weekdays(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_weekdays(raw);
  }

  Float32List? _wire2api_opt_float_32_list(dynamic raw) {
    return raw == null ? null : _wire2api_float_32_list(raw);
  }

  Float64List? _wire2api_opt_float_64_list(dynamic raw) {
    return raw == null ? null : _wire2api_float_64_list(raw);
  }

  Int32List? _wire2api_opt_int_32_list(dynamic raw) {
    return raw == null ? null : _wire2api_int_32_list(raw);
  }

  Int8List? _wire2api_opt_int_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_int_8_list(raw);
  }

  List<Attribute>? _wire2api_opt_list_attribute(dynamic raw) {
    return raw == null ? null : _wire2api_list_attribute(raw);
  }

  List<Element>? _wire2api_opt_list_element(dynamic raw) {
    return raw == null ? null : _wire2api_list_element(raw);
  }

  List<Attribute?>? _wire2api_opt_list_opt_box_autoadd_attribute(dynamic raw) {
    return raw == null ? null : _wire2api_list_opt_box_autoadd_attribute(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  Point _wire2api_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Point(
      x: _wire2api_f32(arr[0]),
      y: _wire2api_f32(arr[1]),
    );
  }

  RawStringItemStruct _wire2api_raw_string_item_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStruct(
      type: _wire2api_String(arr[0]),
    );
  }

  Sequences _wire2api_sequences(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Sequences(
      field0: _wire2api_int_32_list(arr[0]),
    );
  }

  Speed _wire2api_speed(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Speed_Unknown();
      case 1:
        return Speed_GPS(
          _wire2api_f64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SumWith _wire2api_sum_with(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWith(
      bridge: this,
      x: _wire2api_u32(arr[0]),
    );
  }

  TestChrono _wire2api_test_chrono(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChrono(
      dt: _wire2api_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: _wire2api_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: _wire2api_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  TestId _wire2api_test_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestId(
      field0: _wire2api_i32_array_2(arr[0]),
    );
  }

  TestModel _wire2api_test_model(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModel(
      id: _wire2api_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      aliasEnum: _wire2api_my_enum(arr[2]),
      aliasStruct: _wire2api_my_struct(arr[3]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array1600 _wire2api_u8_array_1600(dynamic raw) {
    return U8Array1600(_wire2api_uint_8_list(raw));
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  U8Array5 _wire2api_u8_array_5(dynamic raw) {
    return U8Array5(_wire2api_uint_8_list(raw));
  }

  U8Array8 _wire2api_u8_array_8(dynamic raw) {
    return U8Array8(_wire2api_uint_8_list(raw));
  }

  Uint16List _wire2api_uint_16_list(dynamic raw) {
    return raw as Uint16List;
  }

  Uint32List _wire2api_uint_32_list(dynamic raw) {
    return raw as Uint32List;
  }

  Uint64List _wire2api_uint_64_list(dynamic raw) {
    return Uint64List.from(raw);
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UserId _wire2api_user_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserId(
      value: _wire2api_u32(arr[0]),
    );
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  VecOfPrimitivePack _wire2api_vec_of_primitive_pack(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return VecOfPrimitivePack(
      int8List: _wire2api_int_8_list(arr[0]),
      uint8List: _wire2api_uint_8_list(arr[1]),
      int16List: _wire2api_int_16_list(arr[2]),
      uint16List: _wire2api_uint_16_list(arr[3]),
      uint32List: _wire2api_uint_32_list(arr[4]),
      int32List: _wire2api_int_32_list(arr[5]),
      uint64List: _wire2api_uint_64_list(arr[6]),
      int64List: _wire2api_int_64_list(arr[7]),
      float32List: _wire2api_float_32_list(arr[8]),
      float64List: _wire2api_float_64_list(arr[9]),
    );
  }

  Weekdays _wire2api_weekdays(dynamic raw) {
    return Weekdays.values[raw];
  }

  ZeroCopyVecOfPrimitivePack _wire2api_zero_copy_vec_of_primitive_pack(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ZeroCopyVecOfPrimitivePack(
      int8List: _wire2api_ZeroCopyBuffer_Int8List(arr[0]),
      uint8List: _wire2api_ZeroCopyBuffer_Uint8List(arr[1]),
      int16List: _wire2api_ZeroCopyBuffer_Int16List(arr[2]),
      uint16List: _wire2api_ZeroCopyBuffer_Uint16List(arr[3]),
      uint32List: _wire2api_ZeroCopyBuffer_Uint32List(arr[4]),
      int32List: _wire2api_ZeroCopyBuffer_Int32List(arr[5]),
      uint64List: _wire2api_ZeroCopyBuffer_Uint64List(arr[6]),
      int64List: _wire2api_ZeroCopyBuffer_Int64List(arr[7]),
      float32List: _wire2api_ZeroCopyBuffer_Float32List(arr[8]),
      float64List: _wire2api_ZeroCopyBuffer_Float64List(arr[9]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_application_mode(ApplicationMode raw) {
  return api2wire_i32(raw.index);
}

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_i8(int raw) {
  return raw;
}

@protected
int api2wire_my_enum(MyEnum raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

@protected
int api2wire_weekdays(Weekdays raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer

class FlutterRustBridgeExampleSingleBlockTestPlatform
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleSingleBlockTestWire> {
  FlutterRustBridgeExampleSingleBlockTestPlatform(ffi.DynamicLibrary dylib)
      : super(FlutterRustBridgeExampleSingleBlockTestWire(dylib));

// Section: api2wire

  @protected
  wire_BoxDartDebug api2wire_BoxDartDebug(BoxDartDebug raw) {
    final ptr = inner.new_BoxDartDebug();
    _api_fill_to_wire_BoxDartDebug(raw, ptr);
    return ptr;
  }

  @protected
  int api2wire_Chrono_Duration(Duration raw) {
    return api2wire_i64(raw.inMicroseconds);
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_Chrono_DurationList(List<Duration> raw) {
    final ans = Int64List(raw.length);
    for (var i = 0; i < raw.length; ++i) ans[i] = api2wire_Chrono_Duration(raw[i]);
    return api2wire_int_64_list(ans);
  }

  @protected
  int api2wire_Chrono_Local(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  int api2wire_Chrono_Naive(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_Chrono_NaiveList(List<DateTime> raw) {
    final ans = Int64List(raw.length);
    for (var i = 0; i < raw.length; ++i) ans[i] = api2wire_Chrono_Naive(raw[i]);
    return api2wire_int_64_list(ans);
  }

  @protected
  int api2wire_Chrono_Utc(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  wire_DartOpaque api2wire_DartOpaque(Object raw) {
    inner.dartApi.initApi();
    final ptr = inner.new_DartOpaque();
    _api_fill_to_wire_DartOpaque(raw, ptr);
    return ptr;
  }

  @protected
  wire_HideData api2wire_HideData(HideData raw) {
    final ptr = inner.new_HideData();
    _api_fill_to_wire_HideData(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_HideData> api2wire_HideData_array_2(HideDataArray2 raw) {
    return api2wire_list_HideData(raw);
  }

  @protected
  wire_I32 api2wire_I32(I32 raw) {
    final ptr = inner.new_I32();
    _api_fill_to_wire_I32(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexHideData api2wire_MutexHideData(MutexHideData raw) {
    final ptr = inner.new_MutexHideData();
    _api_fill_to_wire_MutexHideData(raw, ptr);
    return ptr;
  }

  @protected
  wire_NonSendHideData api2wire_NonSendHideData(NonSendHideData raw) {
    final ptr = inner.new_NonSendHideData();
    _api_fill_to_wire_NonSendHideData(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_DartOpaque> api2wire_Object_array_1(ObjectArray1 raw) {
    return api2wire_list_DartOpaque(raw);
  }

  @protected
  wire_RwLockHideData api2wire_RwLockHideData(RwLockHideData raw) {
    final ptr = inner.new_RwLockHideData();
    _api_fill_to_wire_RwLockHideData(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_test_id> api2wire_TestId_array_4(TestIdArray4 raw) {
    return api2wire_list_test_id(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuids(List<UuidValue> raw) {
    return api2wire_uint_8_list(api2wireConcatenateBytes(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_ZeroCopyBuffer_Uint8List(Uint8List raw) {
    return api2wire_uint_8_list(raw);
  }

  @protected
  ffi.Pointer<wire_ApplicationEnv> api2wire_box_application_env(ApplicationEnv raw) {
    final ptr = inner.new_box_application_env_0();
    _api_fill_to_wire_application_env(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_Chrono_Utc(DateTime raw) {
    return inner.new_box_autoadd_Chrono_Utc_0(api2wire_Chrono_Utc(raw));
  }

  @protected
  ffi.Pointer<wire_DartOpaque> api2wire_box_autoadd_DartOpaque(Object raw) {
    final ptr = inner.new_box_autoadd_DartOpaque_0();
    _api_fill_to_wire_DartOpaque(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_HideData> api2wire_box_autoadd_HideData(HideData raw) {
    final ptr = inner.new_box_autoadd_HideData_0();
    _api_fill_to_wire_HideData(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApplicationEnv> api2wire_box_autoadd_application_env(ApplicationEnv raw) {
    final ptr = inner.new_box_autoadd_application_env_0();
    _api_fill_to_wire_application_env(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApplicationSettings> api2wire_box_autoadd_application_settings(ApplicationSettings raw) {
    final ptr = inner.new_box_autoadd_application_settings_0();
    _api_fill_to_wire_application_settings(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Attribute> api2wire_box_autoadd_attribute(Attribute raw) {
    final ptr = inner.new_box_autoadd_attribute_0();
    _api_fill_to_wire_attribute(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_ConcatenateWith> api2wire_box_autoadd_concatenate_with(ConcatenateWith raw) {
    final ptr = inner.new_box_autoadd_concatenate_with_0();
    _api_fill_to_wire_concatenate_with(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Customized> api2wire_box_autoadd_customized(Customized raw) {
    final ptr = inner.new_box_autoadd_customized_0();
    _api_fill_to_wire_customized(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DartOpaqueNested> api2wire_box_autoadd_dart_opaque_nested(DartOpaqueNested raw) {
    final ptr = inner.new_box_autoadd_dart_opaque_nested_0();
    _api_fill_to_wire_dart_opaque_nested(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Empty> api2wire_box_autoadd_empty(Empty raw) {
    final ptr = inner.new_box_autoadd_empty_0();
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EnumDartOpaque> api2wire_box_autoadd_enum_dart_opaque(EnumDartOpaque raw) {
    final ptr = inner.new_box_autoadd_enum_dart_opaque_0();
    _api_fill_to_wire_enum_dart_opaque(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EnumOpaque> api2wire_box_autoadd_enum_opaque(EnumOpaque raw) {
    final ptr = inner.new_box_autoadd_enum_opaque_0();
    _api_fill_to_wire_enum_opaque(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_box_autoadd_exotic_optionals(ExoticOptionals raw) {
    final ptr = inner.new_box_autoadd_exotic_optionals_0();
    _api_fill_to_wire_exotic_optionals(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_box_autoadd_f64(double raw) {
    return inner.new_box_autoadd_f64_0(api2wire_f64(raw));
  }

  @protected
  ffi.Pointer<wire_FeatureChrono> api2wire_box_autoadd_feature_chrono(FeatureChrono raw) {
    final ptr = inner.new_box_autoadd_feature_chrono_0();
    _api_fill_to_wire_feature_chrono(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_FeatureUuid> api2wire_box_autoadd_feature_uuid(FeatureUuid raw) {
    final ptr = inner.new_box_autoadd_feature_uuid_0();
    _api_fill_to_wire_feature_uuid(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_FeedId> api2wire_box_autoadd_feed_id(FeedId raw) {
    final ptr = inner.new_box_autoadd_feed_id_0();
    _api_fill_to_wire_feed_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_KitchenSink> api2wire_box_autoadd_kitchen_sink(KitchenSink raw) {
    final ptr = inner.new_box_autoadd_kitchen_sink_0();
    _api_fill_to_wire_kitchen_sink(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Measure> api2wire_box_autoadd_measure(Measure raw) {
    final ptr = inner.new_box_autoadd_measure_0();
    _api_fill_to_wire_measure(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MessageId> api2wire_box_autoadd_message_id(MessageId raw) {
    final ptr = inner.new_box_autoadd_message_id_0();
    _api_fill_to_wire_message_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyNestedStruct> api2wire_box_autoadd_my_nested_struct(MyNestedStruct raw) {
    final ptr = inner.new_box_autoadd_my_nested_struct_0();
    _api_fill_to_wire_my_nested_struct(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MySize> api2wire_box_autoadd_my_size(MySize raw) {
    final ptr = inner.new_box_autoadd_my_size_0();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyStruct> api2wire_box_autoadd_my_struct(MyStruct raw) {
    final ptr = inner.new_box_autoadd_my_struct_0();
    _api_fill_to_wire_my_struct(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyTreeNode> api2wire_box_autoadd_my_tree_node(MyTreeNode raw) {
    final ptr = inner.new_box_autoadd_my_tree_node_0();
    _api_fill_to_wire_my_tree_node(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NewTypeInt> api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
    final ptr = inner.new_box_autoadd_new_type_int_0();
    _api_fill_to_wire_new_type_int(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Note> api2wire_box_autoadd_note(Note raw) {
    final ptr = inner.new_box_autoadd_note_0();
    _api_fill_to_wire_note(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Numbers> api2wire_box_autoadd_numbers(Numbers raw) {
    final ptr = inner.new_box_autoadd_numbers_0();
    _api_fill_to_wire_numbers(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OpaqueNested> api2wire_box_autoadd_opaque_nested(OpaqueNested raw) {
    final ptr = inner.new_box_autoadd_opaque_nested_0();
    _api_fill_to_wire_opaque_nested(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Sequences> api2wire_box_autoadd_sequences(Sequences raw) {
    final ptr = inner.new_box_autoadd_sequences_0();
    _api_fill_to_wire_sequences(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SumWith> api2wire_box_autoadd_sum_with(SumWith raw) {
    final ptr = inner.new_box_autoadd_sum_with_0();
    _api_fill_to_wire_sum_with(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_TestId> api2wire_box_autoadd_test_id(TestId raw) {
    final ptr = inner.new_box_autoadd_test_id_0();
    _api_fill_to_wire_test_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_UserId> api2wire_box_autoadd_user_id(UserId raw) {
    final ptr = inner.new_box_autoadd_user_id_0();
    _api_fill_to_wire_user_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Blob> api2wire_box_blob(Blob raw) {
    final ptr = inner.new_box_blob_0();
    _api_fill_to_wire_blob(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_bool(bool raw) {
    return inner.new_box_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_Distance> api2wire_box_distance(Distance raw) {
    final ptr = inner.new_box_distance_0();
    _api_fill_to_wire_distance(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_box_exotic_optionals(ExoticOptionals raw) {
    final ptr = inner.new_box_exotic_optionals_0();
    _api_fill_to_wire_exotic_optionals(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_box_f64(double raw) {
    return inner.new_box_f64_0(api2wire_f64(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_i32(int raw) {
    return inner.new_box_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_i64(int raw) {
    return inner.new_box_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<ffi.Int8> api2wire_box_i8(int raw) {
    return inner.new_box_i8_0(api2wire_i8(raw));
  }

  @protected
  ffi.Pointer<wire_KitchenSink> api2wire_box_kitchen_sink(KitchenSink raw) {
    final ptr = inner.new_box_kitchen_sink_0();
    _api_fill_to_wire_kitchen_sink(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MySize> api2wire_box_my_size(MySize raw) {
    final ptr = inner.new_box_my_size_0();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Speed> api2wire_box_speed(Speed raw) {
    final ptr = inner.new_box_speed_0();
    _api_fill_to_wire_speed(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_u8(int raw) {
    return inner.new_box_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_box_u8_array_1600(U8Array1600 raw) {
    return api2wire_u8_array_1600(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_weekdays(Weekdays raw) {
    return inner.new_box_weekdays_0(api2wire_weekdays(raw));
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_f64_array_16(F64Array16 raw) {
    final ans = inner.new_float_64_list_0(16);
    ans.ref.ptr.asTypedList(16).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_float_32_list> api2wire_float_32_list(Float32List raw) {
    final ans = inner.new_float_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_i32_array_2(I32Array2 raw) {
    final ans = inner.new_int_32_list_0(2);
    ans.ref.ptr.asTypedList(2).setAll(0, raw);
    return ans;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_int_32_list(Int32List raw) {
    final ans = inner.new_int_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_int_64_list(Int64List raw) {
    final ans = inner.new_int_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw.inner);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_8_list> api2wire_int_8_list(Int8List raw) {
    final ans = inner.new_int_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_DartOpaque> api2wire_list_DartOpaque(List<Object> raw) {
    final ans = inner.new_list_DartOpaque_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_DartOpaque(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_HideData> api2wire_list_HideData(List<HideData> raw) {
    final ans = inner.new_list_HideData_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_HideData(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_application_env_var> api2wire_list_application_env_var(List<ApplicationEnvVar> raw) {
    final ans = inner.new_list_application_env_var_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_application_env_var(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_attribute> api2wire_list_attribute(List<Attribute> raw) {
    final ans = inner.new_list_attribute_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_my_size> api2wire_list_my_size(List<MySize> raw) {
    final ans = inner.new_list_my_size_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_size(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_my_tree_node> api2wire_list_my_tree_node(List<MyTreeNode> raw) {
    final ans = inner.new_list_my_tree_node_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_tree_node(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_box_autoadd_attribute> api2wire_list_opt_box_autoadd_attribute(List<Attribute?> raw) {
    final ans = inner.new_list_opt_box_autoadd_attribute_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_opt_box_autoadd_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_test_id> api2wire_list_test_id(List<TestId> raw) {
    final ans = inner.new_list_test_id_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_test_id(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_weekdays> api2wire_list_weekdays(List<Weekdays> raw) {
    final ans = inner.new_list_weekdays_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = api2wire_weekdays(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_ZeroCopyBuffer_Uint8List(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_ZeroCopyBuffer_Uint8List(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_Chrono_Utc(DateTime? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  ffi.Pointer<wire_DartOpaque> api2wire_opt_box_autoadd_DartOpaque(Object? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_DartOpaque(raw);
  }

  @protected
  ffi.Pointer<wire_HideData> api2wire_opt_box_autoadd_HideData(HideData? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_HideData(raw);
  }

  @protected
  ffi.Pointer<wire_ApplicationEnv> api2wire_opt_box_autoadd_application_env(ApplicationEnv? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_application_env(raw);
  }

  @protected
  ffi.Pointer<wire_Attribute> api2wire_opt_box_autoadd_attribute(Attribute? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_attribute(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_opt_box_autoadd_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_exotic_optionals(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_opt_box_autoadd_f64(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_f64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<wire_NewTypeInt> api2wire_opt_box_autoadd_new_type_int(NewTypeInt? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_new_type_int(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_bool(raw);
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_opt_box_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_exotic_optionals(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_opt_box_f64(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_f64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_i32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_i64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int8> api2wire_opt_box_i8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_i8(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_u8(raw);
  }

  @protected
  ffi.Pointer<wire_float_32_list> api2wire_opt_float_32_list(Float32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_float_32_list(raw);
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? ffi.nullptr : api2wire_float_64_list(raw);
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_opt_int_32_list(Int32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_int_32_list(raw);
  }

  @protected
  ffi.Pointer<wire_int_8_list> api2wire_opt_int_8_list(Int8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_int_8_list(raw);
  }

  @protected
  ffi.Pointer<wire_list_attribute> api2wire_opt_list_attribute(List<Attribute>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_attribute(raw);
  }

  @protected
  ffi.Pointer<wire_list_opt_box_autoadd_attribute> api2wire_opt_list_opt_box_autoadd_attribute(List<Attribute?>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_opt_box_autoadd_attribute(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_1600(U8Array1600 raw) {
    final ans = inner.new_uint_8_list_0(1600);
    ans.ref.ptr.asTypedList(1600).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_32(U8Array32 raw) {
    final ans = inner.new_uint_8_list_0(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_8(U8Array8 raw) {
    final ans = inner.new_uint_8_list_0(8);
    ans.ref.ptr.asTypedList(8).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _BoxDartDebugFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_BoxDartDebugPtr);
  OpaqueTypeFinalizer get BoxDartDebugFinalizer => _BoxDartDebugFinalizer;
  late final OpaqueTypeFinalizer _FrbOpaqueReturnFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_FrbOpaqueReturnPtr);
  OpaqueTypeFinalizer get FrbOpaqueReturnFinalizer => _FrbOpaqueReturnFinalizer;
  late final OpaqueTypeFinalizer _FrbOpaqueSyncReturnFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_FrbOpaqueSyncReturnPtr);
  OpaqueTypeFinalizer get FrbOpaqueSyncReturnFinalizer => _FrbOpaqueSyncReturnFinalizer;
  late final OpaqueTypeFinalizer _HideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_HideDataPtr);
  OpaqueTypeFinalizer get HideDataFinalizer => _HideDataFinalizer;
  late final OpaqueTypeFinalizer _I32Finalizer = OpaqueTypeFinalizer(inner._drop_opaque_I32Ptr);
  OpaqueTypeFinalizer get I32Finalizer => _I32Finalizer;
  late final OpaqueTypeFinalizer _MutexHideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexHideDataPtr);
  OpaqueTypeFinalizer get MutexHideDataFinalizer => _MutexHideDataFinalizer;
  late final OpaqueTypeFinalizer _NonSendHideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_NonSendHideDataPtr);
  OpaqueTypeFinalizer get NonSendHideDataFinalizer => _NonSendHideDataFinalizer;
  late final OpaqueTypeFinalizer _RwLockHideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_RwLockHideDataPtr);
  OpaqueTypeFinalizer get RwLockHideDataFinalizer => _RwLockHideDataFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_BoxDartDebug(BoxDartDebug apiObj, wire_BoxDartDebug wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DartOpaque(Object apiObj, wire_DartOpaque wireObj) {
    wireObj.handle = inner.new_dart_opaque(apiObj);
    wireObj.port = dropPort;
  }

  void _api_fill_to_wire_HideData(HideData apiObj, wire_HideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_I32(I32 apiObj, wire_I32 wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexHideData(MutexHideData apiObj, wire_MutexHideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_NonSendHideData(NonSendHideData apiObj, wire_NonSendHideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockHideData(RwLockHideData apiObj, wire_RwLockHideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_application_env(ApplicationEnv apiObj, wire_ApplicationEnv wireObj) {
    wireObj.vars = api2wire_list_application_env_var(apiObj.vars);
  }

  void _api_fill_to_wire_application_env_var(ApplicationEnvVar apiObj, wire_ApplicationEnvVar wireObj) {
    wireObj.field0 = api2wire_String(apiObj.field0);
    wireObj.field1 = api2wire_bool(apiObj.field1);
  }

  void _api_fill_to_wire_application_settings(ApplicationSettings apiObj, wire_ApplicationSettings wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.version = api2wire_String(apiObj.version);
    wireObj.mode = api2wire_application_mode(apiObj.mode);
    wireObj.env = api2wire_box_application_env(apiObj.env);
    wireObj.env_optional = api2wire_opt_box_autoadd_application_env(apiObj.envOptional);
  }

  void _api_fill_to_wire_attribute(Attribute apiObj, wire_Attribute wireObj) {
    wireObj.key = api2wire_String(apiObj.key);
    wireObj.value = api2wire_String(apiObj.value);
  }

  void _api_fill_to_wire_blob(Blob apiObj, wire_Blob wireObj) {
    wireObj.field0 = api2wire_u8_array_1600(apiObj.field0);
  }

  void _api_fill_to_wire_box_application_env(ApplicationEnv apiObj, ffi.Pointer<wire_ApplicationEnv> wireObj) {
    _api_fill_to_wire_application_env(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_DartOpaque(Object apiObj, ffi.Pointer<wire_DartOpaque> wireObj) {
    _api_fill_to_wire_DartOpaque(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_HideData(HideData apiObj, ffi.Pointer<wire_HideData> wireObj) {
    _api_fill_to_wire_HideData(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_application_env(ApplicationEnv apiObj, ffi.Pointer<wire_ApplicationEnv> wireObj) {
    _api_fill_to_wire_application_env(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_application_settings(
      ApplicationSettings apiObj, ffi.Pointer<wire_ApplicationSettings> wireObj) {
    _api_fill_to_wire_application_settings(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_attribute(Attribute apiObj, ffi.Pointer<wire_Attribute> wireObj) {
    _api_fill_to_wire_attribute(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_concatenate_with(
      ConcatenateWith apiObj, ffi.Pointer<wire_ConcatenateWith> wireObj) {
    _api_fill_to_wire_concatenate_with(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_customized(Customized apiObj, ffi.Pointer<wire_Customized> wireObj) {
    _api_fill_to_wire_customized(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_dart_opaque_nested(
      DartOpaqueNested apiObj, ffi.Pointer<wire_DartOpaqueNested> wireObj) {
    _api_fill_to_wire_dart_opaque_nested(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_enum_dart_opaque(EnumDartOpaque apiObj, ffi.Pointer<wire_EnumDartOpaque> wireObj) {
    _api_fill_to_wire_enum_dart_opaque(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_enum_opaque(EnumOpaque apiObj, ffi.Pointer<wire_EnumOpaque> wireObj) {
    _api_fill_to_wire_enum_opaque(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_exotic_optionals(
      ExoticOptionals apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    _api_fill_to_wire_exotic_optionals(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_feature_chrono(FeatureChrono apiObj, ffi.Pointer<wire_FeatureChrono> wireObj) {
    _api_fill_to_wire_feature_chrono(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_feature_uuid(FeatureUuid apiObj, ffi.Pointer<wire_FeatureUuid> wireObj) {
    _api_fill_to_wire_feature_uuid(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_feed_id(FeedId apiObj, ffi.Pointer<wire_FeedId> wireObj) {
    _api_fill_to_wire_feed_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_kitchen_sink(KitchenSink apiObj, ffi.Pointer<wire_KitchenSink> wireObj) {
    _api_fill_to_wire_kitchen_sink(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_measure(Measure apiObj, ffi.Pointer<wire_Measure> wireObj) {
    _api_fill_to_wire_measure(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_message_id(MessageId apiObj, ffi.Pointer<wire_MessageId> wireObj) {
    _api_fill_to_wire_message_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_nested_struct(MyNestedStruct apiObj, ffi.Pointer<wire_MyNestedStruct> wireObj) {
    _api_fill_to_wire_my_nested_struct(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_size(MySize apiObj, ffi.Pointer<wire_MySize> wireObj) {
    _api_fill_to_wire_my_size(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_struct(MyStruct apiObj, ffi.Pointer<wire_MyStruct> wireObj) {
    _api_fill_to_wire_my_struct(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_tree_node(MyTreeNode apiObj, ffi.Pointer<wire_MyTreeNode> wireObj) {
    _api_fill_to_wire_my_tree_node(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_new_type_int(NewTypeInt apiObj, ffi.Pointer<wire_NewTypeInt> wireObj) {
    _api_fill_to_wire_new_type_int(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_note(Note apiObj, ffi.Pointer<wire_Note> wireObj) {
    _api_fill_to_wire_note(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_numbers(Numbers apiObj, ffi.Pointer<wire_Numbers> wireObj) {
    _api_fill_to_wire_numbers(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_opaque_nested(OpaqueNested apiObj, ffi.Pointer<wire_OpaqueNested> wireObj) {
    _api_fill_to_wire_opaque_nested(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sequences(Sequences apiObj, ffi.Pointer<wire_Sequences> wireObj) {
    _api_fill_to_wire_sequences(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sum_with(SumWith apiObj, ffi.Pointer<wire_SumWith> wireObj) {
    _api_fill_to_wire_sum_with(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_test_id(TestId apiObj, ffi.Pointer<wire_TestId> wireObj) {
    _api_fill_to_wire_test_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_user_id(UserId apiObj, ffi.Pointer<wire_UserId> wireObj) {
    _api_fill_to_wire_user_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_blob(Blob apiObj, ffi.Pointer<wire_Blob> wireObj) {
    _api_fill_to_wire_blob(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_distance(Distance apiObj, ffi.Pointer<wire_Distance> wireObj) {
    _api_fill_to_wire_distance(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_exotic_optionals(ExoticOptionals apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    _api_fill_to_wire_exotic_optionals(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_kitchen_sink(KitchenSink apiObj, ffi.Pointer<wire_KitchenSink> wireObj) {
    _api_fill_to_wire_kitchen_sink(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_my_size(MySize apiObj, ffi.Pointer<wire_MySize> wireObj) {
    _api_fill_to_wire_my_size(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_speed(Speed apiObj, ffi.Pointer<wire_Speed> wireObj) {
    _api_fill_to_wire_speed(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_u8_array_1600(U8Array1600 apiObj, ffi.Pointer<wire_uint_8_list> wireObj) {
    wireObj = api2wire_u8_array_1600(apiObj);
  }

  void _api_fill_to_wire_concatenate_with(ConcatenateWith apiObj, wire_ConcatenateWith wireObj) {
    wireObj.a = api2wire_String(apiObj.a);
  }

  void _api_fill_to_wire_customized(Customized apiObj, wire_Customized wireObj) {
    wireObj.final_field = api2wire_String(apiObj.finalField);
    wireObj.non_final_field = api2wire_opt_String(apiObj.nonFinalField);
  }

  void _api_fill_to_wire_dart_opaque_nested(DartOpaqueNested apiObj, wire_DartOpaqueNested wireObj) {
    wireObj.first = api2wire_DartOpaque(apiObj.first);
    wireObj.second = api2wire_DartOpaque(apiObj.second);
  }

  void _api_fill_to_wire_distance(Distance apiObj, wire_Distance wireObj) {
    if (apiObj is Distance_Unknown) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Distance_Map) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Distance_Map();
      wireObj.kind.ref.Map.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_empty(Empty apiObj, wire_Empty wireObj) {}

  void _api_fill_to_wire_enum_dart_opaque(EnumDartOpaque apiObj, wire_EnumDartOpaque wireObj) {
    if (apiObj is EnumDartOpaque_Primitive) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_EnumDartOpaque_Primitive();
      wireObj.kind.ref.Primitive.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumDartOpaque_Opaque) {
      var pre_field0 = api2wire_DartOpaque(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_EnumDartOpaque_Opaque();
      wireObj.kind.ref.Opaque.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_enum_opaque(EnumOpaque apiObj, wire_EnumOpaque wireObj) {
    if (apiObj is EnumOpaque_Struct) {
      var pre_field0 = api2wire_HideData(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_EnumOpaque_Struct();
      wireObj.kind.ref.Struct.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_Primitive) {
      var pre_field0 = api2wire_I32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_EnumOpaque_Primitive();
      wireObj.kind.ref.Primitive.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_TraitObj) {
      var pre_field0 = api2wire_BoxDartDebug(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_EnumOpaque_TraitObj();
      wireObj.kind.ref.TraitObj.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_Mutex) {
      var pre_field0 = api2wire_MutexHideData(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_EnumOpaque_Mutex();
      wireObj.kind.ref.Mutex.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_RwLock) {
      var pre_field0 = api2wire_RwLockHideData(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_EnumOpaque_RwLock();
      wireObj.kind.ref.RwLock.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_exotic_optionals(ExoticOptionals apiObj, wire_ExoticOptionals wireObj) {
    wireObj.int32 = api2wire_opt_box_autoadd_i32(apiObj.int32);
    wireObj.int64 = api2wire_opt_box_autoadd_i64(apiObj.int64);
    wireObj.float64 = api2wire_opt_box_autoadd_f64(apiObj.float64);
    wireObj.boolean = api2wire_opt_box_autoadd_bool(apiObj.boolean);
    wireObj.zerocopy = api2wire_opt_ZeroCopyBuffer_Uint8List(apiObj.zerocopy);
    wireObj.int8list = api2wire_opt_int_8_list(apiObj.int8List);
    wireObj.uint8list = api2wire_opt_uint_8_list(apiObj.uint8List);
    wireObj.int32list = api2wire_opt_int_32_list(apiObj.int32List);
    wireObj.float32list = api2wire_opt_float_32_list(apiObj.float32List);
    wireObj.float64list = api2wire_opt_float_64_list(apiObj.float64List);
    wireObj.attributes = api2wire_opt_list_attribute(apiObj.attributes);
    wireObj.attributes_nullable = api2wire_list_opt_box_autoadd_attribute(apiObj.attributesNullable);
    wireObj.nullable_attributes = api2wire_opt_list_opt_box_autoadd_attribute(apiObj.nullableAttributes);
    wireObj.newtypeint = api2wire_opt_box_autoadd_new_type_int(apiObj.newtypeint);
  }

  void _api_fill_to_wire_feature_chrono(FeatureChrono apiObj, wire_FeatureChrono wireObj) {
    wireObj.utc = api2wire_Chrono_Utc(apiObj.utc);
    wireObj.local = api2wire_Chrono_Local(apiObj.local);
    wireObj.duration = api2wire_Chrono_Duration(apiObj.duration);
    wireObj.naive = api2wire_Chrono_Naive(apiObj.naive);
  }

  void _api_fill_to_wire_feature_uuid(FeatureUuid apiObj, wire_FeatureUuid wireObj) {
    wireObj.one = api2wire_Uuid(apiObj.one);
    wireObj.many = api2wire_Uuids(apiObj.many);
  }

  void _api_fill_to_wire_feed_id(FeedId apiObj, wire_FeedId wireObj) {
    wireObj.field0 = api2wire_u8_array_8(apiObj.field0);
  }

  void _api_fill_to_wire_kitchen_sink(KitchenSink apiObj, wire_KitchenSink wireObj) {
    if (apiObj is KitchenSink_Empty) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is KitchenSink_Primitives) {
      var pre_int32 = api2wire_i32(apiObj.int32);
      var pre_float64 = api2wire_f64(apiObj.float64);
      var pre_boolean = api2wire_bool(apiObj.boolean);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_KitchenSink_Primitives();
      wireObj.kind.ref.Primitives.ref.int32 = pre_int32;
      wireObj.kind.ref.Primitives.ref.float64 = pre_float64;
      wireObj.kind.ref.Primitives.ref.boolean = pre_boolean;
      return;
    }
    if (apiObj is KitchenSink_Nested) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      var pre_field1 = api2wire_box_kitchen_sink(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_KitchenSink_Nested();
      wireObj.kind.ref.Nested.ref.field0 = pre_field0;
      wireObj.kind.ref.Nested.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is KitchenSink_Optional) {
      var pre_field0 = api2wire_opt_box_autoadd_i32(apiObj.field0);
      var pre_field1 = api2wire_opt_box_autoadd_i32(apiObj.field1);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_KitchenSink_Optional();
      wireObj.kind.ref.Optional.ref.field0 = pre_field0;
      wireObj.kind.ref.Optional.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is KitchenSink_Buffer) {
      var pre_field0 = api2wire_ZeroCopyBuffer_Uint8List(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_KitchenSink_Buffer();
      wireObj.kind.ref.Buffer.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is KitchenSink_Enums) {
      var pre_field0 = api2wire_weekdays(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_KitchenSink_Enums();
      wireObj.kind.ref.Enums.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_measure(Measure apiObj, wire_Measure wireObj) {
    if (apiObj is Measure_Speed) {
      var pre_field0 = api2wire_box_speed(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Measure_Speed();
      wireObj.kind.ref.Speed.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Measure_Distance) {
      var pre_field0 = api2wire_box_distance(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Measure_Distance();
      wireObj.kind.ref.Distance.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_message_id(MessageId apiObj, wire_MessageId wireObj) {
    wireObj.field0 = api2wire_u8_array_32(apiObj.field0);
  }

  void _api_fill_to_wire_my_nested_struct(MyNestedStruct apiObj, wire_MyNestedStruct wireObj) {
    _api_fill_to_wire_my_tree_node(apiObj.treeNode, wireObj.tree_node);
    wireObj.weekday = api2wire_weekdays(apiObj.weekday);
  }

  void _api_fill_to_wire_my_size(MySize apiObj, wire_MySize wireObj) {
    wireObj.width = api2wire_i32(apiObj.width);
    wireObj.height = api2wire_i32(apiObj.height);
  }

  void _api_fill_to_wire_my_struct(MyStruct apiObj, wire_MyStruct wireObj) {
    wireObj.content = api2wire_bool(apiObj.content);
  }

  void _api_fill_to_wire_my_tree_node(MyTreeNode apiObj, wire_MyTreeNode wireObj) {
    wireObj.value_i32 = api2wire_i32(apiObj.valueI32);
    wireObj.value_vec_u8 = api2wire_uint_8_list(apiObj.valueVecU8);
    wireObj.value_boolean = api2wire_bool(apiObj.valueBoolean);
    wireObj.children = api2wire_list_my_tree_node(apiObj.children);
  }

  void _api_fill_to_wire_new_type_int(NewTypeInt apiObj, wire_NewTypeInt wireObj) {
    wireObj.field0 = api2wire_i64(apiObj.field0);
  }

  void _api_fill_to_wire_note(Note apiObj, wire_Note wireObj) {
    wireObj.day = api2wire_box_weekdays(apiObj.day);
    wireObj.body = api2wire_String(apiObj.body);
  }

  void _api_fill_to_wire_numbers(Numbers apiObj, wire_Numbers wireObj) {
    wireObj.field0 = api2wire_int_32_list(apiObj.field0);
  }

  void _api_fill_to_wire_opaque_nested(OpaqueNested apiObj, wire_OpaqueNested wireObj) {
    wireObj.first = api2wire_HideData(apiObj.first);
    wireObj.second = api2wire_HideData(apiObj.second);
  }

  void _api_fill_to_wire_opt_box_autoadd_DartOpaque(Object? apiObj, ffi.Pointer<wire_DartOpaque> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_DartOpaque(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_HideData(HideData? apiObj, ffi.Pointer<wire_HideData> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_HideData(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_application_env(
      ApplicationEnv? apiObj, ffi.Pointer<wire_ApplicationEnv> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_application_env(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_attribute(Attribute? apiObj, ffi.Pointer<wire_Attribute> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_attribute(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_exotic_optionals(
      ExoticOptionals? apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_exotic_optionals(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_new_type_int(NewTypeInt? apiObj, ffi.Pointer<wire_NewTypeInt> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_new_type_int(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_exotic_optionals(ExoticOptionals? apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_exotic_optionals(apiObj, wireObj);
  }

  void _api_fill_to_wire_sequences(Sequences apiObj, wire_Sequences wireObj) {
    wireObj.field0 = api2wire_int_32_list(apiObj.field0);
  }

  void _api_fill_to_wire_speed(Speed apiObj, wire_Speed wireObj) {
    if (apiObj is Speed_Unknown) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Speed_GPS) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Speed_GPS();
      wireObj.kind.ref.GPS.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_sum_with(SumWith apiObj, wire_SumWith wireObj) {
    wireObj.x = api2wire_u32(apiObj.x);
  }

  void _api_fill_to_wire_test_id(TestId apiObj, wire_TestId wireObj) {
    wireObj.field0 = api2wire_i32_array_2(apiObj.field0);
  }

  void _api_fill_to_wire_user_id(UserId apiObj, wire_UserId wireObj) {
    wireObj.value = api2wire_u32(apiObj.value);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleSingleBlockTestWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleSingleBlockTestWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleSingleBlockTestWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_simple_adder(
    int port_,
    int a,
    int b,
  ) {
    return _wire_simple_adder(
      port_,
      a,
      b,
    );
  }

  late final _wire_simple_adderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_simple_adder');
  late final _wire_simple_adder = _wire_simple_adderPtr.asFunction<void Function(int, int, int)>();

  WireSyncReturn wire_simple_adder_sync(
    int a,
    int b,
  ) {
    return _wire_simple_adder_sync(
      a,
      b,
    );
  }

  late final _wire_simple_adder_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32, ffi.Int32)>>('wire_simple_adder_sync');
  late final _wire_simple_adder_sync = _wire_simple_adder_syncPtr.asFunction<WireSyncReturn Function(int, int)>();

  void wire_primitive_types(
    int port_,
    int my_i32,
    int my_i64,
    double my_f64,
    bool my_bool,
  ) {
    return _wire_primitive_types(
      port_,
      my_i32,
      my_i64,
      my_f64,
      my_bool,
    );
  }

  late final _wire_primitive_typesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int64, ffi.Double, ffi.Bool)>>(
          'wire_primitive_types');
  late final _wire_primitive_types = _wire_primitive_typesPtr.asFunction<void Function(int, int, int, double, bool)>();

  void wire_primitive_optional_types(
    int port_,
    ffi.Pointer<ffi.Int32> my_i32,
    ffi.Pointer<ffi.Int64> my_i64,
    ffi.Pointer<ffi.Double> my_f64,
    ffi.Pointer<ffi.Bool> my_bool,
  ) {
    return _wire_primitive_optional_types(
      port_,
      my_i32,
      my_i64,
      my_f64,
      my_bool,
    );
  }

  late final _wire_primitive_optional_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Bool>)>>('wire_primitive_optional_types');
  late final _wire_primitive_optional_types = _wire_primitive_optional_typesPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>();

  WireSyncReturn wire_primitive_types_sync(
    int my_i32,
    int my_i64,
    double my_f64,
    bool my_bool,
  ) {
    return _wire_primitive_types_sync(
      my_i32,
      my_i64,
      my_f64,
      my_bool,
    );
  }

  late final _wire_primitive_types_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32, ffi.Int64, ffi.Double, ffi.Bool)>>(
          'wire_primitive_types_sync');
  late final _wire_primitive_types_sync =
      _wire_primitive_types_syncPtr.asFunction<WireSyncReturn Function(int, int, double, bool)>();

  void wire_primitive_u32(
    int port_,
    int my_u32,
  ) {
    return _wire_primitive_u32(
      port_,
      my_u32,
    );
  }

  late final _wire_primitive_u32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>('wire_primitive_u32');
  late final _wire_primitive_u32 = _wire_primitive_u32Ptr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_primitive_u32_sync(
    int my_u32,
  ) {
    return _wire_primitive_u32_sync(
      my_u32,
    );
  }

  late final _wire_primitive_u32_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Uint32)>>('wire_primitive_u32_sync');
  late final _wire_primitive_u32_sync = _wire_primitive_u32_syncPtr.asFunction<WireSyncReturn Function(int)>();

  void wire_handle_string(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_handle_string(
      port_,
      s,
    );
  }

  late final _wire_handle_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_string');
  late final _wire_handle_string =
      _wire_handle_stringPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_handle_string_sync(
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_handle_string_sync(
      s,
    );
  }

  late final _wire_handle_string_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_handle_string_sync');
  late final _wire_handle_string_sync =
      _wire_handle_string_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_return_unit(
    int port_,
  ) {
    return _wire_handle_return_unit(
      port_,
    );
  }

  late final _wire_handle_return_unitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_handle_return_unit');
  late final _wire_handle_return_unit = _wire_handle_return_unitPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_handle_return_unit_sync() {
    return _wire_handle_return_unit_sync();
  }

  late final _wire_handle_return_unit_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_handle_return_unit_sync');
  late final _wire_handle_return_unit_sync = _wire_handle_return_unit_syncPtr.asFunction<WireSyncReturn Function()>();

  void wire_handle_vec_u8(
    int port_,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_handle_vec_u8(
      port_,
      v,
    );
  }

  late final _wire_handle_vec_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_vec_u8');
  late final _wire_handle_vec_u8 =
      _wire_handle_vec_u8Ptr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_handle_vec_u8_sync(
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_handle_vec_u8_sync(
      v,
    );
  }

  late final _wire_handle_vec_u8_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_handle_vec_u8_sync');
  late final _wire_handle_vec_u8_sync =
      _wire_handle_vec_u8_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_vec_of_primitive(
    int port_,
    int n,
  ) {
    return _wire_handle_vec_of_primitive(
      port_,
      n,
    );
  }

  late final _wire_handle_vec_of_primitivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_vec_of_primitive');
  late final _wire_handle_vec_of_primitive = _wire_handle_vec_of_primitivePtr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_handle_vec_of_primitive_sync(
    int n,
  ) {
    return _wire_handle_vec_of_primitive_sync(
      n,
    );
  }

  late final _wire_handle_vec_of_primitive_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32)>>('wire_handle_vec_of_primitive_sync');
  late final _wire_handle_vec_of_primitive_sync =
      _wire_handle_vec_of_primitive_syncPtr.asFunction<WireSyncReturn Function(int)>();

  void wire_handle_zero_copy_vec_of_primitive(
    int port_,
    int n,
  ) {
    return _wire_handle_zero_copy_vec_of_primitive(
      port_,
      n,
    );
  }

  late final _wire_handle_zero_copy_vec_of_primitivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_zero_copy_vec_of_primitive');
  late final _wire_handle_zero_copy_vec_of_primitive =
      _wire_handle_zero_copy_vec_of_primitivePtr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_handle_zero_copy_vec_of_primitive_sync(
    int n,
  ) {
    return _wire_handle_zero_copy_vec_of_primitive_sync(
      n,
    );
  }

  late final _wire_handle_zero_copy_vec_of_primitive_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32)>>('wire_handle_zero_copy_vec_of_primitive_sync');
  late final _wire_handle_zero_copy_vec_of_primitive_sync =
      _wire_handle_zero_copy_vec_of_primitive_syncPtr.asFunction<WireSyncReturn Function(int)>();

  void wire_handle_struct(
    int port_,
    ffi.Pointer<wire_MySize> arg,
    ffi.Pointer<wire_MySize> boxed,
  ) {
    return _wire_handle_struct(
      port_,
      arg,
      boxed,
    );
  }

  late final _wire_handle_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>>(
          'wire_handle_struct');
  late final _wire_handle_struct =
      _wire_handle_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>();

  WireSyncReturn wire_handle_struct_sync(
    ffi.Pointer<wire_MySize> arg,
    ffi.Pointer<wire_MySize> boxed,
  ) {
    return _wire_handle_struct_sync(
      arg,
      boxed,
    );
  }

  late final _wire_handle_struct_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>>(
          'wire_handle_struct_sync');
  late final _wire_handle_struct_sync = _wire_handle_struct_syncPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>();

  void wire_handle_newtype(
    int port_,
    ffi.Pointer<wire_NewTypeInt> arg,
  ) {
    return _wire_handle_newtype(
      port_,
      arg,
    );
  }

  late final _wire_handle_newtypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NewTypeInt>)>>('wire_handle_newtype');
  late final _wire_handle_newtype =
      _wire_handle_newtypePtr.asFunction<void Function(int, ffi.Pointer<wire_NewTypeInt>)>();

  WireSyncReturn wire_handle_newtype_sync(
    ffi.Pointer<wire_NewTypeInt> arg,
  ) {
    return _wire_handle_newtype_sync(
      arg,
    );
  }

  late final _wire_handle_newtype_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_NewTypeInt>)>>('wire_handle_newtype_sync');
  late final _wire_handle_newtype_sync =
      _wire_handle_newtype_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_NewTypeInt>)>();

  void wire_handle_list_of_struct(
    int port_,
    ffi.Pointer<wire_list_my_size> l,
  ) {
    return _wire_handle_list_of_struct(
      port_,
      l,
    );
  }

  late final _wire_handle_list_of_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_my_size>)>>(
          'wire_handle_list_of_struct');
  late final _wire_handle_list_of_struct =
      _wire_handle_list_of_structPtr.asFunction<void Function(int, ffi.Pointer<wire_list_my_size>)>();

  WireSyncReturn wire_handle_list_of_struct_sync(
    ffi.Pointer<wire_list_my_size> l,
  ) {
    return _wire_handle_list_of_struct_sync(
      l,
    );
  }

  late final _wire_handle_list_of_struct_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_list_my_size>)>>(
          'wire_handle_list_of_struct_sync');
  late final _wire_handle_list_of_struct_sync =
      _wire_handle_list_of_struct_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_list_my_size>)>();

  void wire_handle_string_list(
    int port_,
    ffi.Pointer<wire_StringList> names,
  ) {
    return _wire_handle_string_list(
      port_,
      names,
    );
  }

  late final _wire_handle_string_listPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_StringList>)>>(
          'wire_handle_string_list');
  late final _wire_handle_string_list =
      _wire_handle_string_listPtr.asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_handle_string_list_sync(
    ffi.Pointer<wire_StringList> names,
  ) {
    return _wire_handle_string_list_sync(
      names,
    );
  }

  late final _wire_handle_string_list_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_StringList>)>>(
          'wire_handle_string_list_sync');
  late final _wire_handle_string_list_sync =
      _wire_handle_string_list_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_StringList>)>();

  void wire_handle_complex_struct(
    int port_,
    ffi.Pointer<wire_MyTreeNode> s,
  ) {
    return _wire_handle_complex_struct(
      port_,
      s,
    );
  }

  late final _wire_handle_complex_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyTreeNode>)>>(
          'wire_handle_complex_struct');
  late final _wire_handle_complex_struct =
      _wire_handle_complex_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyTreeNode>)>();

  WireSyncReturn wire_handle_complex_struct_sync(
    ffi.Pointer<wire_MyTreeNode> s,
  ) {
    return _wire_handle_complex_struct_sync(
      s,
    );
  }

  late final _wire_handle_complex_struct_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MyTreeNode>)>>(
          'wire_handle_complex_struct_sync');
  late final _wire_handle_complex_struct_sync =
      _wire_handle_complex_struct_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_MyTreeNode>)>();

  void wire_handle_nested_struct(
    int port_,
    ffi.Pointer<wire_MyNestedStruct> s,
  ) {
    return _wire_handle_nested_struct(
      port_,
      s,
    );
  }

  late final _wire_handle_nested_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyNestedStruct>)>>(
          'wire_handle_nested_struct');
  late final _wire_handle_nested_struct =
      _wire_handle_nested_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyNestedStruct>)>();

  WireSyncReturn wire_handle_sync_return(
    ffi.Pointer<wire_uint_8_list> mode,
  ) {
    return _wire_handle_sync_return(
      mode,
    );
  }

  late final _wire_handle_sync_returnPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_handle_sync_return');
  late final _wire_handle_sync_return =
      _wire_handle_sync_returnPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_handle_stream(
      port_,
      arg,
    );
  }

  late final _wire_handle_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_stream');
  late final _wire_handle_stream =
      _wire_handle_streamPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_stream_of_struct(
    int port_,
  ) {
    return _wire_handle_stream_of_struct(
      port_,
    );
  }

  late final _wire_handle_stream_of_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_handle_stream_of_struct');
  late final _wire_handle_stream_of_struct = _wire_handle_stream_of_structPtr.asFunction<void Function(int)>();

  void wire_return_err(
    int port_,
  ) {
    return _wire_return_err(
      port_,
    );
  }

  late final _wire_return_errPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_err');
  late final _wire_return_err = _wire_return_errPtr.asFunction<void Function(int)>();

  void wire_return_panic(
    int port_,
  ) {
    return _wire_return_panic(
      port_,
    );
  }

  late final _wire_return_panicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_panic');
  late final _wire_return_panic = _wire_return_panicPtr.asFunction<void Function(int)>();

  void wire_handle_optional_return(
    int port_,
    double left,
    double right,
  ) {
    return _wire_handle_optional_return(
      port_,
      left,
      right,
    );
  }

  late final _wire_handle_optional_returnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Double, ffi.Double)>>('wire_handle_optional_return');
  late final _wire_handle_optional_return =
      _wire_handle_optional_returnPtr.asFunction<void Function(int, double, double)>();

  void wire_handle_optional_struct(
    int port_,
    ffi.Pointer<wire_uint_8_list> document,
  ) {
    return _wire_handle_optional_struct(
      port_,
      document,
    );
  }

  late final _wire_handle_optional_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_handle_optional_struct');
  late final _wire_handle_optional_struct =
      _wire_handle_optional_structPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_optional_increment(
    int port_,
    ffi.Pointer<wire_ExoticOptionals> opt,
  ) {
    return _wire_handle_optional_increment(
      port_,
      opt,
    );
  }

  late final _wire_handle_optional_incrementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ExoticOptionals>)>>(
          'wire_handle_optional_increment');
  late final _wire_handle_optional_increment =
      _wire_handle_optional_incrementPtr.asFunction<void Function(int, ffi.Pointer<wire_ExoticOptionals>)>();

  void wire_handle_increment_boxed_optional(
    int port_,
    ffi.Pointer<ffi.Double> opt,
  ) {
    return _wire_handle_increment_boxed_optional(
      port_,
      opt,
    );
  }

  late final _wire_handle_increment_boxed_optionalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Double>)>>(
          'wire_handle_increment_boxed_optional');
  late final _wire_handle_increment_boxed_optional =
      _wire_handle_increment_boxed_optionalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Double>)>();

  void wire_handle_option_box_arguments(
    int port_,
    ffi.Pointer<ffi.Int8> i8box,
    ffi.Pointer<ffi.Uint8> u8box,
    ffi.Pointer<ffi.Int32> i32box,
    ffi.Pointer<ffi.Int64> i64box,
    ffi.Pointer<ffi.Double> f64box,
    ffi.Pointer<ffi.Bool> boolbox,
    ffi.Pointer<wire_ExoticOptionals> structbox,
  ) {
    return _wire_handle_option_box_arguments(
      port_,
      i8box,
      u8box,
      i32box,
      i64box,
      f64box,
      boolbox,
      structbox,
    );
  }

  late final _wire_handle_option_box_argumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_ExoticOptionals>)>>('wire_handle_option_box_arguments');
  late final _wire_handle_option_box_arguments = _wire_handle_option_box_argumentsPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>, ffi.Pointer<wire_ExoticOptionals>)>();

  void wire_print_note(
    int port_,
    ffi.Pointer<wire_Note> note,
  ) {
    return _wire_print_note(
      port_,
      note,
    );
  }

  late final _wire_print_notePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Note>)>>('wire_print_note');
  late final _wire_print_note = _wire_print_notePtr.asFunction<void Function(int, ffi.Pointer<wire_Note>)>();

  void wire_handle_return_enum(
    int port_,
    ffi.Pointer<wire_uint_8_list> input,
  ) {
    return _wire_handle_return_enum(
      port_,
      input,
    );
  }

  late final _wire_handle_return_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_handle_return_enum');
  late final _wire_handle_return_enum =
      _wire_handle_return_enumPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_enum_parameter(
    int port_,
    int weekday,
  ) {
    return _wire_handle_enum_parameter(
      port_,
      weekday,
    );
  }

  late final _wire_handle_enum_parameterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_enum_parameter');
  late final _wire_handle_enum_parameter = _wire_handle_enum_parameterPtr.asFunction<void Function(int, int)>();

  void wire_handle_customized_struct(
    int port_,
    ffi.Pointer<wire_Customized> val,
  ) {
    return _wire_handle_customized_struct(
      port_,
      val,
    );
  }

  late final _wire_handle_customized_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Customized>)>>(
          'wire_handle_customized_struct');
  late final _wire_handle_customized_struct =
      _wire_handle_customized_structPtr.asFunction<void Function(int, ffi.Pointer<wire_Customized>)>();

  void wire_handle_enum_struct(
    int port_,
    ffi.Pointer<wire_KitchenSink> val,
  ) {
    return _wire_handle_enum_struct(
      port_,
      val,
    );
  }

  late final _wire_handle_enum_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_KitchenSink>)>>(
          'wire_handle_enum_struct');
  late final _wire_handle_enum_struct =
      _wire_handle_enum_structPtr.asFunction<void Function(int, ffi.Pointer<wire_KitchenSink>)>();

  void wire_use_imported_struct(
    int port_,
    ffi.Pointer<wire_MyStruct> my_struct,
  ) {
    return _wire_use_imported_struct(
      port_,
      my_struct,
    );
  }

  late final _wire_use_imported_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyStruct>)>>('wire_use_imported_struct');
  late final _wire_use_imported_struct =
      _wire_use_imported_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyStruct>)>();

  void wire_use_imported_enum(
    int port_,
    int my_enum,
  ) {
    return _wire_use_imported_enum(
      port_,
      my_enum,
    );
  }

  late final _wire_use_imported_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_use_imported_enum');
  late final _wire_use_imported_enum = _wire_use_imported_enumPtr.asFunction<void Function(int, int)>();

  void wire_get_app_settings(
    int port_,
  ) {
    return _wire_get_app_settings(
      port_,
    );
  }

  late final _wire_get_app_settingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_app_settings');
  late final _wire_get_app_settings = _wire_get_app_settingsPtr.asFunction<void Function(int)>();

  void wire_get_fallible_app_settings(
    int port_,
  ) {
    return _wire_get_fallible_app_settings(
      port_,
    );
  }

  late final _wire_get_fallible_app_settingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_fallible_app_settings');
  late final _wire_get_fallible_app_settings = _wire_get_fallible_app_settingsPtr.asFunction<void Function(int)>();

  void wire_is_app_embedded(
    int port_,
    ffi.Pointer<wire_ApplicationSettings> app_settings,
  ) {
    return _wire_is_app_embedded(
      port_,
      app_settings,
    );
  }

  late final _wire_is_app_embeddedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ApplicationSettings>)>>(
          'wire_is_app_embedded');
  late final _wire_is_app_embedded =
      _wire_is_app_embeddedPtr.asFunction<void Function(int, ffi.Pointer<wire_ApplicationSettings>)>();

  void wire_get_message(
    int port_,
  ) {
    return _wire_get_message(
      port_,
    );
  }

  late final _wire_get_messagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_message');
  late final _wire_get_message = _wire_get_messagePtr.asFunction<void Function(int)>();

  void wire_repeat_number(
    int port_,
    int num,
    int times,
  ) {
    return _wire_repeat_number(
      port_,
      num,
      times,
    );
  }

  late final _wire_repeat_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.UintPtr)>>('wire_repeat_number');
  late final _wire_repeat_number = _wire_repeat_numberPtr.asFunction<void Function(int, int, int)>();

  void wire_repeat_sequence(
    int port_,
    int seq,
    int times,
  ) {
    return _wire_repeat_sequence(
      port_,
      seq,
      times,
    );
  }

  late final _wire_repeat_sequencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.UintPtr)>>('wire_repeat_sequence');
  late final _wire_repeat_sequence = _wire_repeat_sequencePtr.asFunction<void Function(int, int, int)>();

  void wire_first_number(
    int port_,
    ffi.Pointer<wire_Numbers> nums,
  ) {
    return _wire_first_number(
      port_,
      nums,
    );
  }

  late final _wire_first_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Numbers>)>>('wire_first_number');
  late final _wire_first_number = _wire_first_numberPtr.asFunction<void Function(int, ffi.Pointer<wire_Numbers>)>();

  void wire_first_sequence(
    int port_,
    ffi.Pointer<wire_Sequences> seqs,
  ) {
    return _wire_first_sequence(
      port_,
      seqs,
    );
  }

  late final _wire_first_sequencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Sequences>)>>('wire_first_sequence');
  late final _wire_first_sequence =
      _wire_first_sequencePtr.asFunction<void Function(int, ffi.Pointer<wire_Sequences>)>();

  void wire_get_array(
    int port_,
  ) {
    return _wire_get_array(
      port_,
    );
  }

  late final _wire_get_arrayPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_array');
  late final _wire_get_array = _wire_get_arrayPtr.asFunction<void Function(int)>();

  void wire_get_complex_array(
    int port_,
  ) {
    return _wire_get_complex_array(
      port_,
    );
  }

  late final _wire_get_complex_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_complex_array');
  late final _wire_get_complex_array = _wire_get_complex_arrayPtr.asFunction<void Function(int)>();

  void wire_get_usize(
    int port_,
    int u,
  ) {
    return _wire_get_usize(
      port_,
      u,
    );
  }

  late final _wire_get_usizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>('wire_get_usize');
  late final _wire_get_usize = _wire_get_usizePtr.asFunction<void Function(int, int)>();

  void wire_next_user_id(
    int port_,
    ffi.Pointer<wire_UserId> user_id,
  ) {
    return _wire_next_user_id(
      port_,
      user_id,
    );
  }

  late final _wire_next_user_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_UserId>)>>('wire_next_user_id');
  late final _wire_next_user_id = _wire_next_user_idPtr.asFunction<void Function(int, ffi.Pointer<wire_UserId>)>();

  void wire_register_event_listener(
    int port_,
  ) {
    return _wire_register_event_listener(
      port_,
    );
  }

  late final _wire_register_event_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_register_event_listener');
  late final _wire_register_event_listener = _wire_register_event_listenerPtr.asFunction<void Function(int)>();

  void wire_close_event_listener(
    int port_,
  ) {
    return _wire_close_event_listener(
      port_,
    );
  }

  late final _wire_close_event_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_close_event_listener');
  late final _wire_close_event_listener = _wire_close_event_listenerPtr.asFunction<void Function(int)>();

  void wire_create_event(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
    ffi.Pointer<wire_uint_8_list> payload,
  ) {
    return _wire_create_event(
      port_,
      address,
      payload,
    );
  }

  late final _wire_create_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_create_event');
  late final _wire_create_event = _wire_create_eventPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_stream_sink_at_1(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_stream_sink_at_1(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_stream_sink_at_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>('wire_handle_stream_sink_at_1');
  late final _wire_handle_stream_sink_at_1 =
      _wire_handle_stream_sink_at_1Ptr.asFunction<void Function(int, int, int)>();

  void wire_handle_stream_sink_at_2(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_stream_sink_at_2(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_stream_sink_at_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>('wire_handle_stream_sink_at_2');
  late final _wire_handle_stream_sink_at_2 =
      _wire_handle_stream_sink_at_2Ptr.asFunction<void Function(int, int, int)>();

  void wire_handle_stream_sink_at_3(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_stream_sink_at_3(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_stream_sink_at_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>('wire_handle_stream_sink_at_3');
  late final _wire_handle_stream_sink_at_3 =
      _wire_handle_stream_sink_at_3Ptr.asFunction<void Function(int, int, int)>();

  void wire_get_sum_struct(
    int port_,
  ) {
    return _wire_get_sum_struct(
      port_,
    );
  }

  late final _wire_get_sum_structPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_sum_struct');
  late final _wire_get_sum_struct = _wire_get_sum_structPtr.asFunction<void Function(int)>();

  void wire_get_sum_array(
    int port_,
    int a,
    int b,
    int c,
  ) {
    return _wire_get_sum_array(
      port_,
      a,
      b,
      c,
    );
  }

  late final _wire_get_sum_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'wire_get_sum_array');
  late final _wire_get_sum_array = _wire_get_sum_arrayPtr.asFunction<void Function(int, int, int, int)>();

  void wire_multiply_by_ten(
    int port_,
    ffi.Pointer<wire_Measure> measure,
  ) {
    return _wire_multiply_by_ten(
      port_,
      measure,
    );
  }

  late final _wire_multiply_by_tenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Measure>)>>('wire_multiply_by_ten');
  late final _wire_multiply_by_ten =
      _wire_multiply_by_tenPtr.asFunction<void Function(int, ffi.Pointer<wire_Measure>)>();

  void wire_call_old_module_system(
    int port_,
  ) {
    return _wire_call_old_module_system(
      port_,
    );
  }

  late final _wire_call_old_module_systemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_call_old_module_system');
  late final _wire_call_old_module_system = _wire_call_old_module_systemPtr.asFunction<void Function(int)>();

  void wire_call_new_module_system(
    int port_,
  ) {
    return _wire_call_new_module_system(
      port_,
    );
  }

  late final _wire_call_new_module_systemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_call_new_module_system');
  late final _wire_call_new_module_system = _wire_call_new_module_systemPtr.asFunction<void Function(int)>();

  void wire_handle_big_buffers(
    int port_,
  ) {
    return _wire_handle_big_buffers(
      port_,
    );
  }

  late final _wire_handle_big_buffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_handle_big_buffers');
  late final _wire_handle_big_buffers = _wire_handle_big_buffersPtr.asFunction<void Function(int)>();

  void wire_datetime_utc(
    int port_,
    int d,
  ) {
    return _wire_datetime_utc(
      port_,
      d,
    );
  }

  late final _wire_datetime_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_datetime_utc');
  late final _wire_datetime_utc = _wire_datetime_utcPtr.asFunction<void Function(int, int)>();

  void wire_datetime_local(
    int port_,
    int d,
  ) {
    return _wire_datetime_local(
      port_,
      d,
    );
  }

  late final _wire_datetime_localPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_datetime_local');
  late final _wire_datetime_local = _wire_datetime_localPtr.asFunction<void Function(int, int)>();

  void wire_naivedatetime(
    int port_,
    int d,
  ) {
    return _wire_naivedatetime(
      port_,
      d,
    );
  }

  late final _wire_naivedatetimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_naivedatetime');
  late final _wire_naivedatetime = _wire_naivedatetimePtr.asFunction<void Function(int, int)>();

  void wire_optional_empty_datetime_utc(
    int port_,
    ffi.Pointer<ffi.Int64> d,
  ) {
    return _wire_optional_empty_datetime_utc(
      port_,
      d,
    );
  }

  late final _wire_optional_empty_datetime_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Int64>)>>(
          'wire_optional_empty_datetime_utc');
  late final _wire_optional_empty_datetime_utc =
      _wire_optional_empty_datetime_utcPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int64>)>();

  void wire_duration(
    int port_,
    int d,
  ) {
    return _wire_duration(
      port_,
      d,
    );
  }

  late final _wire_durationPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_duration');
  late final _wire_duration = _wire_durationPtr.asFunction<void Function(int, int)>();

  void wire_handle_timestamps(
    int port_,
    ffi.Pointer<wire_int_64_list> timestamps,
    int epoch,
  ) {
    return _wire_handle_timestamps(
      port_,
      timestamps,
      epoch,
    );
  }

  late final _wire_handle_timestampsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_int_64_list>, ffi.Int64)>>(
          'wire_handle_timestamps');
  late final _wire_handle_timestamps =
      _wire_handle_timestampsPtr.asFunction<void Function(int, ffi.Pointer<wire_int_64_list>, int)>();

  void wire_handle_durations(
    int port_,
    ffi.Pointer<wire_int_64_list> durations,
    int since,
  ) {
    return _wire_handle_durations(
      port_,
      durations,
      since,
    );
  }

  late final _wire_handle_durationsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_int_64_list>, ffi.Int64)>>(
          'wire_handle_durations');
  late final _wire_handle_durations =
      _wire_handle_durationsPtr.asFunction<void Function(int, ffi.Pointer<wire_int_64_list>, int)>();

  void wire_test_chrono(
    int port_,
  ) {
    return _wire_test_chrono(
      port_,
    );
  }

  late final _wire_test_chronoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_chrono');
  late final _wire_test_chrono = _wire_test_chronoPtr.asFunction<void Function(int)>();

  void wire_test_precise_chrono(
    int port_,
  ) {
    return _wire_test_precise_chrono(
      port_,
    );
  }

  late final _wire_test_precise_chronoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_precise_chrono');
  late final _wire_test_precise_chrono = _wire_test_precise_chronoPtr.asFunction<void Function(int)>();

  void wire_how_long_does_it_take(
    int port_,
    ffi.Pointer<wire_FeatureChrono> mine,
  ) {
    return _wire_how_long_does_it_take(
      port_,
      mine,
    );
  }

  late final _wire_how_long_does_it_takePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_FeatureChrono>)>>(
          'wire_how_long_does_it_take');
  late final _wire_how_long_does_it_take =
      _wire_how_long_does_it_takePtr.asFunction<void Function(int, ffi.Pointer<wire_FeatureChrono>)>();

  void wire_handle_uuid(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_handle_uuid(
      port_,
      id,
    );
  }

  late final _wire_handle_uuidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_uuid');
  late final _wire_handle_uuid = _wire_handle_uuidPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_uuids(
    int port_,
    ffi.Pointer<wire_uint_8_list> ids,
  ) {
    return _wire_handle_uuids(
      port_,
      ids,
    );
  }

  late final _wire_handle_uuidsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_uuids');
  late final _wire_handle_uuids = _wire_handle_uuidsPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_nested_uuids(
    int port_,
    ffi.Pointer<wire_FeatureUuid> ids,
  ) {
    return _wire_handle_nested_uuids(
      port_,
      ids,
    );
  }

  late final _wire_handle_nested_uuidsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_FeatureUuid>)>>(
          'wire_handle_nested_uuids');
  late final _wire_handle_nested_uuids =
      _wire_handle_nested_uuidsPtr.asFunction<void Function(int, ffi.Pointer<wire_FeatureUuid>)>();

  void wire_new_msgid(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_new_msgid(
      port_,
      id,
    );
  }

  late final _wire_new_msgidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_new_msgid');
  late final _wire_new_msgid = _wire_new_msgidPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_use_msgid(
    int port_,
    ffi.Pointer<wire_MessageId> id,
  ) {
    return _wire_use_msgid(
      port_,
      id,
    );
  }

  late final _wire_use_msgidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MessageId>)>>('wire_use_msgid');
  late final _wire_use_msgid = _wire_use_msgidPtr.asFunction<void Function(int, ffi.Pointer<wire_MessageId>)>();

  void wire_boxed_blob(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
  ) {
    return _wire_boxed_blob(
      port_,
      blob,
    );
  }

  late final _wire_boxed_blobPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_boxed_blob');
  late final _wire_boxed_blob = _wire_boxed_blobPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_use_boxed_blob(
    int port_,
    ffi.Pointer<wire_Blob> blob,
  ) {
    return _wire_use_boxed_blob(
      port_,
      blob,
    );
  }

  late final _wire_use_boxed_blobPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Blob>)>>('wire_use_boxed_blob');
  late final _wire_use_boxed_blob = _wire_use_boxed_blobPtr.asFunction<void Function(int, ffi.Pointer<wire_Blob>)>();

  void wire_return_boxed_feed_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_return_boxed_feed_id(
      port_,
      id,
    );
  }

  late final _wire_return_boxed_feed_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_return_boxed_feed_id');
  late final _wire_return_boxed_feed_id =
      _wire_return_boxed_feed_idPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_return_boxed_raw_feed_id(
    int port_,
    ffi.Pointer<wire_FeedId> id,
  ) {
    return _wire_return_boxed_raw_feed_id(
      port_,
      id,
    );
  }

  late final _wire_return_boxed_raw_feed_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_FeedId>)>>(
          'wire_return_boxed_raw_feed_id');
  late final _wire_return_boxed_raw_feed_id =
      _wire_return_boxed_raw_feed_idPtr.asFunction<void Function(int, ffi.Pointer<wire_FeedId>)>();

  void wire_test_id(
    int port_,
    ffi.Pointer<wire_TestId> id,
  ) {
    return _wire_test_id(
      port_,
      id,
    );
  }

  late final _wire_test_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_TestId>)>>('wire_test_id');
  late final _wire_test_id = _wire_test_idPtr.asFunction<void Function(int, ffi.Pointer<wire_TestId>)>();

  void wire_last_number(
    int port_,
    ffi.Pointer<wire_float_64_list> array,
  ) {
    return _wire_last_number(
      port_,
      array,
    );
  }

  late final _wire_last_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_float_64_list>)>>('wire_last_number');
  late final _wire_last_number = _wire_last_numberPtr.asFunction<void Function(int, ffi.Pointer<wire_float_64_list>)>();

  void wire_nested_id(
    int port_,
    ffi.Pointer<wire_list_test_id> id,
  ) {
    return _wire_nested_id(
      port_,
      id,
    );
  }

  late final _wire_nested_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_test_id>)>>('wire_nested_id');
  late final _wire_nested_id = _wire_nested_idPtr.asFunction<void Function(int, ffi.Pointer<wire_list_test_id>)>();

  WireSyncReturn wire_sync_accept_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_sync_accept_dart_opaque(
      opaque,
    );
  }

  late final _wire_sync_accept_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_sync_accept_dart_opaque');
  late final _wire_sync_accept_dart_opaque =
      _wire_sync_accept_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  void wire_async_accept_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_async_accept_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_async_accept_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_async_accept_dart_opaque');
  late final _wire_async_accept_dart_opaque =
      _wire_async_accept_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back(
      port_,
      opaque,
    );
  }

  late final _wire_loop_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back');
  late final _wire_loop_back = _wire_loop_backPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_option(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back_option(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_optionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back_option');
  late final _wire_loop_back_option = _wire_loop_back_optionPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_array(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back_array(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back_array');
  late final _wire_loop_back_array = _wire_loop_back_arrayPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_vec(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back_vec(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_vecPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back_vec');
  late final _wire_loop_back_vec = _wire_loop_back_vecPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_option_get(
    int port_,
    ffi.Pointer<wire_DartOpaque> opaque,
  ) {
    return _wire_loop_back_option_get(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_option_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DartOpaque>)>>(
          'wire_loop_back_option_get');
  late final _wire_loop_back_option_get =
      _wire_loop_back_option_getPtr.asFunction<void Function(int, ffi.Pointer<wire_DartOpaque>)>();

  void wire_loop_back_array_get(
    int port_,
    ffi.Pointer<wire_list_DartOpaque> opaque,
  ) {
    return _wire_loop_back_array_get(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_array_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_DartOpaque>)>>(
          'wire_loop_back_array_get');
  late final _wire_loop_back_array_get =
      _wire_loop_back_array_getPtr.asFunction<void Function(int, ffi.Pointer<wire_list_DartOpaque>)>();

  void wire_loop_back_vec_get(
    int port_,
    ffi.Pointer<wire_list_DartOpaque> opaque,
  ) {
    return _wire_loop_back_vec_get(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_vec_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_DartOpaque>)>>(
          'wire_loop_back_vec_get');
  late final _wire_loop_back_vec_get =
      _wire_loop_back_vec_getPtr.asFunction<void Function(int, ffi.Pointer<wire_list_DartOpaque>)>();

  WireSyncReturn wire_unwrap_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_unwrap_dart_opaque(
      opaque,
    );
  }

  late final _wire_unwrap_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_unwrap_dart_opaque');
  late final _wire_unwrap_dart_opaque =
      _wire_unwrap_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  void wire_panic_unwrap_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_panic_unwrap_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_panic_unwrap_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_panic_unwrap_dart_opaque');
  late final _wire_panic_unwrap_dart_opaque =
      _wire_panic_unwrap_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_create_opaque(
    int port_,
  ) {
    return _wire_create_opaque(
      port_,
    );
  }

  late final _wire_create_opaquePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_opaque');
  late final _wire_create_opaque = _wire_create_opaquePtr.asFunction<void Function(int)>();

  void wire_create_option_opaque(
    int port_,
    ffi.Pointer<wire_HideData> opaque,
  ) {
    return _wire_create_option_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_create_option_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_HideData>)>>(
          'wire_create_option_opaque');
  late final _wire_create_option_opaque =
      _wire_create_option_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_HideData>)>();

  WireSyncReturn wire_sync_create_opaque() {
    return _wire_sync_create_opaque();
  }

  late final _wire_sync_create_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_create_opaque');
  late final _wire_sync_create_opaque = _wire_sync_create_opaquePtr.asFunction<WireSyncReturn Function()>();

  void wire_create_array_opaque_enum(
    int port_,
  ) {
    return _wire_create_array_opaque_enum(
      port_,
    );
  }

  late final _wire_create_array_opaque_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_array_opaque_enum');
  late final _wire_create_array_opaque_enum = _wire_create_array_opaque_enumPtr.asFunction<void Function(int)>();

  void wire_run_enum_opaque(
    int port_,
    ffi.Pointer<wire_EnumOpaque> opaque,
  ) {
    return _wire_run_enum_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_run_enum_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_EnumOpaque>)>>('wire_run_enum_opaque');
  late final _wire_run_enum_opaque =
      _wire_run_enum_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_EnumOpaque>)>();

  void wire_run_opaque(
    int port_,
    wire_HideData opaque,
  ) {
    return _wire_run_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_run_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_HideData)>>('wire_run_opaque');
  late final _wire_run_opaque = _wire_run_opaquePtr.asFunction<void Function(int, wire_HideData)>();

  void wire_run_opaque_with_delay(
    int port_,
    wire_HideData opaque,
  ) {
    return _wire_run_opaque_with_delay(
      port_,
      opaque,
    );
  }

  late final _wire_run_opaque_with_delayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_HideData)>>('wire_run_opaque_with_delay');
  late final _wire_run_opaque_with_delay =
      _wire_run_opaque_with_delayPtr.asFunction<void Function(int, wire_HideData)>();

  void wire_opaque_array(
    int port_,
  ) {
    return _wire_opaque_array(
      port_,
    );
  }

  late final _wire_opaque_arrayPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_opaque_array');
  late final _wire_opaque_array = _wire_opaque_arrayPtr.asFunction<void Function(int)>();

  void wire_create_sync_opaque(
    int port_,
  ) {
    return _wire_create_sync_opaque(
      port_,
    );
  }

  late final _wire_create_sync_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_sync_opaque');
  late final _wire_create_sync_opaque = _wire_create_sync_opaquePtr.asFunction<void Function(int)>();

  WireSyncReturn wire_sync_create_sync_opaque() {
    return _wire_sync_create_sync_opaque();
  }

  late final _wire_sync_create_sync_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_create_sync_opaque');
  late final _wire_sync_create_sync_opaque = _wire_sync_create_sync_opaquePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_run_opaque(
    wire_NonSendHideData opaque,
  ) {
    return _wire_sync_run_opaque(
      opaque,
    );
  }

  late final _wire_sync_run_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_NonSendHideData)>>('wire_sync_run_opaque');
  late final _wire_sync_run_opaque =
      _wire_sync_run_opaquePtr.asFunction<WireSyncReturn Function(wire_NonSendHideData)>();

  void wire_opaque_array_run(
    int port_,
    ffi.Pointer<wire_list_HideData> data,
  ) {
    return _wire_opaque_array_run(
      port_,
      data,
    );
  }

  late final _wire_opaque_array_runPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_HideData>)>>(
          'wire_opaque_array_run');
  late final _wire_opaque_array_run =
      _wire_opaque_array_runPtr.asFunction<void Function(int, ffi.Pointer<wire_list_HideData>)>();

  void wire_opaque_vec(
    int port_,
  ) {
    return _wire_opaque_vec(
      port_,
    );
  }

  late final _wire_opaque_vecPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_opaque_vec');
  late final _wire_opaque_vec = _wire_opaque_vecPtr.asFunction<void Function(int)>();

  void wire_opaque_vec_run(
    int port_,
    ffi.Pointer<wire_list_HideData> data,
  ) {
    return _wire_opaque_vec_run(
      port_,
      data,
    );
  }

  late final _wire_opaque_vec_runPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_HideData>)>>('wire_opaque_vec_run');
  late final _wire_opaque_vec_run =
      _wire_opaque_vec_runPtr.asFunction<void Function(int, ffi.Pointer<wire_list_HideData>)>();

  void wire_create_nested_opaque(
    int port_,
  ) {
    return _wire_create_nested_opaque(
      port_,
    );
  }

  late final _wire_create_nested_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_nested_opaque');
  late final _wire_create_nested_opaque = _wire_create_nested_opaquePtr.asFunction<void Function(int)>();

  WireSyncReturn wire_sync_loopback(
    wire_DartOpaque opaque,
  ) {
    return _wire_sync_loopback(
      opaque,
    );
  }

  late final _wire_sync_loopbackPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_sync_loopback');
  late final _wire_sync_loopback = _wire_sync_loopbackPtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  WireSyncReturn wire_sync_option_loopback(
    ffi.Pointer<wire_DartOpaque> opaque,
  ) {
    return _wire_sync_option_loopback(
      opaque,
    );
  }

  late final _wire_sync_option_loopbackPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_DartOpaque>)>>('wire_sync_option_loopback');
  late final _wire_sync_option_loopback =
      _wire_sync_option_loopbackPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_DartOpaque>)>();

  WireSyncReturn wire_sync_option() {
    return _wire_sync_option();
  }

  late final _wire_sync_optionPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_option');
  late final _wire_sync_option = _wire_sync_optionPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_option_null() {
    return _wire_sync_option_null();
  }

  late final _wire_sync_option_nullPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_option_null');
  late final _wire_sync_option_null = _wire_sync_option_nullPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_option_rust_opaque() {
    return _wire_sync_option_rust_opaque();
  }

  late final _wire_sync_option_rust_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_option_rust_opaque');
  late final _wire_sync_option_rust_opaque = _wire_sync_option_rust_opaquePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_option_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_sync_option_dart_opaque(
      opaque,
    );
  }

  late final _wire_sync_option_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_sync_option_dart_opaque');
  late final _wire_sync_option_dart_opaque =
      _wire_sync_option_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  WireSyncReturn wire_sync_void() {
    return _wire_sync_void();
  }

  late final _wire_sync_voidPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_void');
  late final _wire_sync_void = _wire_sync_voidPtr.asFunction<WireSyncReturn Function()>();

  void wire_run_nested_opaque(
    int port_,
    ffi.Pointer<wire_OpaqueNested> opaque,
  ) {
    return _wire_run_nested_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_run_nested_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpaqueNested>)>>(
          'wire_run_nested_opaque');
  late final _wire_run_nested_opaque =
      _wire_run_nested_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_OpaqueNested>)>();

  void wire_create_nested_dart_opaque(
    int port_,
    wire_DartOpaque opaque1,
    wire_DartOpaque opaque2,
  ) {
    return _wire_create_nested_dart_opaque(
      port_,
      opaque1,
      opaque2,
    );
  }

  late final _wire_create_nested_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque, wire_DartOpaque)>>(
          'wire_create_nested_dart_opaque');
  late final _wire_create_nested_dart_opaque =
      _wire_create_nested_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque, wire_DartOpaque)>();

  void wire_get_nested_dart_opaque(
    int port_,
    ffi.Pointer<wire_DartOpaqueNested> opaque,
  ) {
    return _wire_get_nested_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_get_nested_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DartOpaqueNested>)>>(
          'wire_get_nested_dart_opaque');
  late final _wire_get_nested_dart_opaque =
      _wire_get_nested_dart_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_DartOpaqueNested>)>();

  void wire_create_enum_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_create_enum_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_create_enum_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_create_enum_dart_opaque');
  late final _wire_create_enum_dart_opaque =
      _wire_create_enum_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_get_enum_dart_opaque(
    int port_,
    ffi.Pointer<wire_EnumDartOpaque> opaque,
  ) {
    return _wire_get_enum_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_get_enum_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_EnumDartOpaque>)>>(
          'wire_get_enum_dart_opaque');
  late final _wire_get_enum_dart_opaque =
      _wire_get_enum_dart_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_EnumDartOpaque>)>();

  void wire_set_static_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_set_static_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_set_static_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_set_static_dart_opaque');
  late final _wire_set_static_dart_opaque =
      _wire_set_static_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_drop_static_dart_opaque(
    int port_,
  ) {
    return _wire_drop_static_dart_opaque(
      port_,
    );
  }

  late final _wire_drop_static_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_drop_static_dart_opaque');
  late final _wire_drop_static_dart_opaque = _wire_drop_static_dart_opaquePtr.asFunction<void Function(int)>();

  void wire_unwrap_rust_opaque(
    int port_,
    wire_HideData opaque,
  ) {
    return _wire_unwrap_rust_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_unwrap_rust_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_HideData)>>('wire_unwrap_rust_opaque');
  late final _wire_unwrap_rust_opaque = _wire_unwrap_rust_opaquePtr.asFunction<void Function(int, wire_HideData)>();

  WireSyncReturn wire_return_non_droppable_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_return_non_droppable_dart_opaque(
      opaque,
    );
  }

  late final _wire_return_non_droppable_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_return_non_droppable_dart_opaque');
  late final _wire_return_non_droppable_dart_opaque =
      _wire_return_non_droppable_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  void wire_frb_generator_test(
    int port_,
  ) {
    return _wire_frb_generator_test(
      port_,
    );
  }

  late final _wire_frb_generator_testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_frb_generator_test');
  late final _wire_frb_generator_test = _wire_frb_generator_testPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_frb_sync_generator_test() {
    return _wire_frb_sync_generator_test();
  }

  late final _wire_frb_sync_generator_testPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_frb_sync_generator_test');
  late final _wire_frb_sync_generator_test = _wire_frb_sync_generator_testPtr.asFunction<WireSyncReturn Function()>();

  void wire_handle_type_alias_id(
    int port_,
    int input,
  ) {
    return _wire_handle_type_alias_id(
      port_,
      input,
    );
  }

  late final _wire_handle_type_alias_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>('wire_handle_type_alias_id');
  late final _wire_handle_type_alias_id = _wire_handle_type_alias_idPtr.asFunction<void Function(int, int)>();

  void wire_handle_type_nest_alias_id(
    int port_,
    int input,
  ) {
    return _wire_handle_type_nest_alias_id(
      port_,
      input,
    );
  }

  late final _wire_handle_type_nest_alias_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>('wire_handle_type_nest_alias_id');
  late final _wire_handle_type_nest_alias_id = _wire_handle_type_nest_alias_idPtr.asFunction<void Function(int, int)>();

  void wire_handle_type_alias_model(
    int port_,
    int input,
  ) {
    return _wire_handle_type_alias_model(
      port_,
      input,
    );
  }

  late final _wire_handle_type_alias_modelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>('wire_handle_type_alias_model');
  late final _wire_handle_type_alias_model = _wire_handle_type_alias_modelPtr.asFunction<void Function(int, int)>();

  void wire_empty_struct(
    int port_,
    ffi.Pointer<wire_Empty> empty,
  ) {
    return _wire_empty_struct(
      port_,
      empty,
    );
  }

  late final _wire_empty_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Empty>)>>('wire_empty_struct');
  late final _wire_empty_struct = _wire_empty_structPtr.asFunction<void Function(int, ffi.Pointer<wire_Empty>)>();

  void wire_return_dart_dynamic(
    int port_,
  ) {
    return _wire_return_dart_dynamic(
      port_,
    );
  }

  late final _wire_return_dart_dynamicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_dart_dynamic');
  late final _wire_return_dart_dynamic = _wire_return_dart_dynamicPtr.asFunction<void Function(int)>();

  void wire_test_raw_string_item_struct(
    int port_,
  ) {
    return _wire_test_raw_string_item_struct(
      port_,
    );
  }

  late final _wire_test_raw_string_item_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_raw_string_item_struct');
  late final _wire_test_raw_string_item_struct = _wire_test_raw_string_item_structPtr.asFunction<void Function(int)>();

  void wire_list_of_primitive_enums(
    int port_,
    ffi.Pointer<wire_list_weekdays> weekdays,
  ) {
    return _wire_list_of_primitive_enums(
      port_,
      weekdays,
    );
  }

  late final _wire_list_of_primitive_enumsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_weekdays>)>>(
          'wire_list_of_primitive_enums');
  late final _wire_list_of_primitive_enums =
      _wire_list_of_primitive_enumsPtr.asFunction<void Function(int, ffi.Pointer<wire_list_weekdays>)>();

  void wire_sum__method__SumWith(
    int port_,
    ffi.Pointer<wire_SumWith> that,
    int y,
    int z,
  ) {
    return _wire_sum__method__SumWith(
      port_,
      that,
      y,
      z,
    );
  }

  late final _wire_sum__method__SumWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SumWith>, ffi.Uint32, ffi.Uint32)>>(
          'wire_sum__method__SumWith');
  late final _wire_sum__method__SumWith =
      _wire_sum__method__SumWithPtr.asFunction<void Function(int, ffi.Pointer<wire_SumWith>, int, int)>();

  void wire_new__static_method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_uint_8_list> a,
  ) {
    return _wire_new__static_method__ConcatenateWith(
      port_,
      a,
    );
  }

  late final _wire_new__static_method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_new__static_method__ConcatenateWith');
  late final _wire_new__static_method__ConcatenateWith =
      _wire_new__static_method__ConcatenateWithPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_concatenate__method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_ConcatenateWith> that,
    ffi.Pointer<wire_uint_8_list> b,
  ) {
    return _wire_concatenate__method__ConcatenateWith(
      port_,
      that,
      b,
    );
  }

  late final _wire_concatenate__method__ConcatenateWithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConcatenateWith>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_concatenate__method__ConcatenateWith');
  late final _wire_concatenate__method__ConcatenateWith = _wire_concatenate__method__ConcatenateWithPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ConcatenateWith>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_concatenate_static__static_method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_uint_8_list> a,
    ffi.Pointer<wire_uint_8_list> b,
  ) {
    return _wire_concatenate_static__static_method__ConcatenateWith(
      port_,
      a,
      b,
    );
  }

  late final _wire_concatenate_static__static_method__ConcatenateWithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_concatenate_static__static_method__ConcatenateWith');
  late final _wire_concatenate_static__static_method__ConcatenateWith =
      _wire_concatenate_static__static_method__ConcatenateWithPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_some_stream_sink__method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_ConcatenateWith> that,
    int key,
    int max,
  ) {
    return _wire_handle_some_stream_sink__method__ConcatenateWith(
      port_,
      that,
      key,
      max,
    );
  }

  late final _wire_handle_some_stream_sink__method__ConcatenateWithPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConcatenateWith>, ffi.Uint32, ffi.Uint32)>>(
      'wire_handle_some_stream_sink__method__ConcatenateWith');
  late final _wire_handle_some_stream_sink__method__ConcatenateWith =
      _wire_handle_some_stream_sink__method__ConcatenateWithPtr
          .asFunction<void Function(int, ffi.Pointer<wire_ConcatenateWith>, int, int)>();

  void wire_handle_some_stream_sink_at_1__method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_ConcatenateWith> that,
  ) {
    return _wire_handle_some_stream_sink_at_1__method__ConcatenateWith(
      port_,
      that,
    );
  }

  late final _wire_handle_some_stream_sink_at_1__method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConcatenateWith>)>>(
          'wire_handle_some_stream_sink_at_1__method__ConcatenateWith');
  late final _wire_handle_some_stream_sink_at_1__method__ConcatenateWith =
      _wire_handle_some_stream_sink_at_1__method__ConcatenateWithPtr
          .asFunction<void Function(int, ffi.Pointer<wire_ConcatenateWith>)>();

  void wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_some_static_stream_sink__static_method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>(
          'wire_handle_some_static_stream_sink__static_method__ConcatenateWith');
  late final _wire_handle_some_static_stream_sink__static_method__ConcatenateWith =
      _wire_handle_some_static_stream_sink__static_method__ConcatenateWithPtr
          .asFunction<void Function(int, int, int)>();

  void wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(
    int port_,
  ) {
    return _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(
      port_,
    );
  }

  late final _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith');
  late final _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith =
      _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWithPtr
          .asFunction<void Function(int)>();

  wire_BoxDartDebug new_BoxDartDebug() {
    return _new_BoxDartDebug();
  }

  late final _new_BoxDartDebugPtr = _lookup<ffi.NativeFunction<wire_BoxDartDebug Function()>>('new_BoxDartDebug');
  late final _new_BoxDartDebug = _new_BoxDartDebugPtr.asFunction<wire_BoxDartDebug Function()>();

  wire_DartOpaque new_DartOpaque() {
    return _new_DartOpaque();
  }

  late final _new_DartOpaquePtr = _lookup<ffi.NativeFunction<wire_DartOpaque Function()>>('new_DartOpaque');
  late final _new_DartOpaque = _new_DartOpaquePtr.asFunction<wire_DartOpaque Function()>();

  wire_HideData new_HideData() {
    return _new_HideData();
  }

  late final _new_HideDataPtr = _lookup<ffi.NativeFunction<wire_HideData Function()>>('new_HideData');
  late final _new_HideData = _new_HideDataPtr.asFunction<wire_HideData Function()>();

  wire_I32 new_I32() {
    return _new_I32();
  }

  late final _new_I32Ptr = _lookup<ffi.NativeFunction<wire_I32 Function()>>('new_I32');
  late final _new_I32 = _new_I32Ptr.asFunction<wire_I32 Function()>();

  wire_MutexHideData new_MutexHideData() {
    return _new_MutexHideData();
  }

  late final _new_MutexHideDataPtr = _lookup<ffi.NativeFunction<wire_MutexHideData Function()>>('new_MutexHideData');
  late final _new_MutexHideData = _new_MutexHideDataPtr.asFunction<wire_MutexHideData Function()>();

  wire_NonSendHideData new_NonSendHideData() {
    return _new_NonSendHideData();
  }

  late final _new_NonSendHideDataPtr =
      _lookup<ffi.NativeFunction<wire_NonSendHideData Function()>>('new_NonSendHideData');
  late final _new_NonSendHideData = _new_NonSendHideDataPtr.asFunction<wire_NonSendHideData Function()>();

  wire_RwLockHideData new_RwLockHideData() {
    return _new_RwLockHideData();
  }

  late final _new_RwLockHideDataPtr = _lookup<ffi.NativeFunction<wire_RwLockHideData Function()>>('new_RwLockHideData');
  late final _new_RwLockHideData = _new_RwLockHideDataPtr.asFunction<wire_RwLockHideData Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>('new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr.asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_ApplicationEnv> new_box_application_env_0() {
    return _new_box_application_env_0();
  }

  late final _new_box_application_env_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ApplicationEnv> Function()>>('new_box_application_env_0');
  late final _new_box_application_env_0 =
      _new_box_application_env_0Ptr.asFunction<ffi.Pointer<wire_ApplicationEnv> Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_Chrono_Utc_0(
    int value,
  ) {
    return _new_box_autoadd_Chrono_Utc_0(
      value,
    );
  }

  late final _new_box_autoadd_Chrono_Utc_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_Chrono_Utc_0');
  late final _new_box_autoadd_Chrono_Utc_0 =
      _new_box_autoadd_Chrono_Utc_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_DartOpaque> new_box_autoadd_DartOpaque_0() {
    return _new_box_autoadd_DartOpaque_0();
  }

  late final _new_box_autoadd_DartOpaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DartOpaque> Function()>>('new_box_autoadd_DartOpaque_0');
  late final _new_box_autoadd_DartOpaque_0 =
      _new_box_autoadd_DartOpaque_0Ptr.asFunction<ffi.Pointer<wire_DartOpaque> Function()>();

  ffi.Pointer<wire_HideData> new_box_autoadd_HideData_0() {
    return _new_box_autoadd_HideData_0();
  }

  late final _new_box_autoadd_HideData_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_HideData> Function()>>('new_box_autoadd_HideData_0');
  late final _new_box_autoadd_HideData_0 =
      _new_box_autoadd_HideData_0Ptr.asFunction<ffi.Pointer<wire_HideData> Function()>();

  ffi.Pointer<wire_ApplicationEnv> new_box_autoadd_application_env_0() {
    return _new_box_autoadd_application_env_0();
  }

  late final _new_box_autoadd_application_env_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ApplicationEnv> Function()>>('new_box_autoadd_application_env_0');
  late final _new_box_autoadd_application_env_0 =
      _new_box_autoadd_application_env_0Ptr.asFunction<ffi.Pointer<wire_ApplicationEnv> Function()>();

  ffi.Pointer<wire_ApplicationSettings> new_box_autoadd_application_settings_0() {
    return _new_box_autoadd_application_settings_0();
  }

  late final _new_box_autoadd_application_settings_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ApplicationSettings> Function()>>(
          'new_box_autoadd_application_settings_0');
  late final _new_box_autoadd_application_settings_0 =
      _new_box_autoadd_application_settings_0Ptr.asFunction<ffi.Pointer<wire_ApplicationSettings> Function()>();

  ffi.Pointer<wire_Attribute> new_box_autoadd_attribute_0() {
    return _new_box_autoadd_attribute_0();
  }

  late final _new_box_autoadd_attribute_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Attribute> Function()>>('new_box_autoadd_attribute_0');
  late final _new_box_autoadd_attribute_0 =
      _new_box_autoadd_attribute_0Ptr.asFunction<ffi.Pointer<wire_Attribute> Function()>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>('new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_ConcatenateWith> new_box_autoadd_concatenate_with_0() {
    return _new_box_autoadd_concatenate_with_0();
  }

  late final _new_box_autoadd_concatenate_with_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ConcatenateWith> Function()>>('new_box_autoadd_concatenate_with_0');
  late final _new_box_autoadd_concatenate_with_0 =
      _new_box_autoadd_concatenate_with_0Ptr.asFunction<ffi.Pointer<wire_ConcatenateWith> Function()>();

  ffi.Pointer<wire_Customized> new_box_autoadd_customized_0() {
    return _new_box_autoadd_customized_0();
  }

  late final _new_box_autoadd_customized_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Customized> Function()>>('new_box_autoadd_customized_0');
  late final _new_box_autoadd_customized_0 =
      _new_box_autoadd_customized_0Ptr.asFunction<ffi.Pointer<wire_Customized> Function()>();

  ffi.Pointer<wire_DartOpaqueNested> new_box_autoadd_dart_opaque_nested_0() {
    return _new_box_autoadd_dart_opaque_nested_0();
  }

  late final _new_box_autoadd_dart_opaque_nested_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DartOpaqueNested> Function()>>(
          'new_box_autoadd_dart_opaque_nested_0');
  late final _new_box_autoadd_dart_opaque_nested_0 =
      _new_box_autoadd_dart_opaque_nested_0Ptr.asFunction<ffi.Pointer<wire_DartOpaqueNested> Function()>();

  ffi.Pointer<wire_Empty> new_box_autoadd_empty_0() {
    return _new_box_autoadd_empty_0();
  }

  late final _new_box_autoadd_empty_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Empty> Function()>>('new_box_autoadd_empty_0');
  late final _new_box_autoadd_empty_0 = _new_box_autoadd_empty_0Ptr.asFunction<ffi.Pointer<wire_Empty> Function()>();

  ffi.Pointer<wire_EnumDartOpaque> new_box_autoadd_enum_dart_opaque_0() {
    return _new_box_autoadd_enum_dart_opaque_0();
  }

  late final _new_box_autoadd_enum_dart_opaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_EnumDartOpaque> Function()>>('new_box_autoadd_enum_dart_opaque_0');
  late final _new_box_autoadd_enum_dart_opaque_0 =
      _new_box_autoadd_enum_dart_opaque_0Ptr.asFunction<ffi.Pointer<wire_EnumDartOpaque> Function()>();

  ffi.Pointer<wire_EnumOpaque> new_box_autoadd_enum_opaque_0() {
    return _new_box_autoadd_enum_opaque_0();
  }

  late final _new_box_autoadd_enum_opaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_EnumOpaque> Function()>>('new_box_autoadd_enum_opaque_0');
  late final _new_box_autoadd_enum_opaque_0 =
      _new_box_autoadd_enum_opaque_0Ptr.asFunction<ffi.Pointer<wire_EnumOpaque> Function()>();

  ffi.Pointer<wire_ExoticOptionals> new_box_autoadd_exotic_optionals_0() {
    return _new_box_autoadd_exotic_optionals_0();
  }

  late final _new_box_autoadd_exotic_optionals_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ExoticOptionals> Function()>>('new_box_autoadd_exotic_optionals_0');
  late final _new_box_autoadd_exotic_optionals_0 =
      _new_box_autoadd_exotic_optionals_0Ptr.asFunction<ffi.Pointer<wire_ExoticOptionals> Function()>();

  ffi.Pointer<ffi.Double> new_box_autoadd_f64_0(
    double value,
  ) {
    return _new_box_autoadd_f64_0(
      value,
    );
  }

  late final _new_box_autoadd_f64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>('new_box_autoadd_f64_0');
  late final _new_box_autoadd_f64_0 = _new_box_autoadd_f64_0Ptr.asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<wire_FeatureChrono> new_box_autoadd_feature_chrono_0() {
    return _new_box_autoadd_feature_chrono_0();
  }

  late final _new_box_autoadd_feature_chrono_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FeatureChrono> Function()>>('new_box_autoadd_feature_chrono_0');
  late final _new_box_autoadd_feature_chrono_0 =
      _new_box_autoadd_feature_chrono_0Ptr.asFunction<ffi.Pointer<wire_FeatureChrono> Function()>();

  ffi.Pointer<wire_FeatureUuid> new_box_autoadd_feature_uuid_0() {
    return _new_box_autoadd_feature_uuid_0();
  }

  late final _new_box_autoadd_feature_uuid_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FeatureUuid> Function()>>('new_box_autoadd_feature_uuid_0');
  late final _new_box_autoadd_feature_uuid_0 =
      _new_box_autoadd_feature_uuid_0Ptr.asFunction<ffi.Pointer<wire_FeatureUuid> Function()>();

  ffi.Pointer<wire_FeedId> new_box_autoadd_feed_id_0() {
    return _new_box_autoadd_feed_id_0();
  }

  late final _new_box_autoadd_feed_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FeedId> Function()>>('new_box_autoadd_feed_id_0');
  late final _new_box_autoadd_feed_id_0 =
      _new_box_autoadd_feed_id_0Ptr.asFunction<ffi.Pointer<wire_FeedId> Function()>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_i32_0(
    int value,
  ) {
    return _new_box_autoadd_i32_0(
      value,
    );
  }

  late final _new_box_autoadd_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_autoadd_i32_0');
  late final _new_box_autoadd_i32_0 = _new_box_autoadd_i32_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_KitchenSink> new_box_autoadd_kitchen_sink_0() {
    return _new_box_autoadd_kitchen_sink_0();
  }

  late final _new_box_autoadd_kitchen_sink_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KitchenSink> Function()>>('new_box_autoadd_kitchen_sink_0');
  late final _new_box_autoadd_kitchen_sink_0 =
      _new_box_autoadd_kitchen_sink_0Ptr.asFunction<ffi.Pointer<wire_KitchenSink> Function()>();

  ffi.Pointer<wire_Measure> new_box_autoadd_measure_0() {
    return _new_box_autoadd_measure_0();
  }

  late final _new_box_autoadd_measure_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Measure> Function()>>('new_box_autoadd_measure_0');
  late final _new_box_autoadd_measure_0 =
      _new_box_autoadd_measure_0Ptr.asFunction<ffi.Pointer<wire_Measure> Function()>();

  ffi.Pointer<wire_MessageId> new_box_autoadd_message_id_0() {
    return _new_box_autoadd_message_id_0();
  }

  late final _new_box_autoadd_message_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MessageId> Function()>>('new_box_autoadd_message_id_0');
  late final _new_box_autoadd_message_id_0 =
      _new_box_autoadd_message_id_0Ptr.asFunction<ffi.Pointer<wire_MessageId> Function()>();

  ffi.Pointer<wire_MyNestedStruct> new_box_autoadd_my_nested_struct_0() {
    return _new_box_autoadd_my_nested_struct_0();
  }

  late final _new_box_autoadd_my_nested_struct_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyNestedStruct> Function()>>('new_box_autoadd_my_nested_struct_0');
  late final _new_box_autoadd_my_nested_struct_0 =
      _new_box_autoadd_my_nested_struct_0Ptr.asFunction<ffi.Pointer<wire_MyNestedStruct> Function()>();

  ffi.Pointer<wire_MySize> new_box_autoadd_my_size_0() {
    return _new_box_autoadd_my_size_0();
  }

  late final _new_box_autoadd_my_size_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_autoadd_my_size_0');
  late final _new_box_autoadd_my_size_0 =
      _new_box_autoadd_my_size_0Ptr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_MyStruct> new_box_autoadd_my_struct_0() {
    return _new_box_autoadd_my_struct_0();
  }

  late final _new_box_autoadd_my_struct_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyStruct> Function()>>('new_box_autoadd_my_struct_0');
  late final _new_box_autoadd_my_struct_0 =
      _new_box_autoadd_my_struct_0Ptr.asFunction<ffi.Pointer<wire_MyStruct> Function()>();

  ffi.Pointer<wire_MyTreeNode> new_box_autoadd_my_tree_node_0() {
    return _new_box_autoadd_my_tree_node_0();
  }

  late final _new_box_autoadd_my_tree_node_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyTreeNode> Function()>>('new_box_autoadd_my_tree_node_0');
  late final _new_box_autoadd_my_tree_node_0 =
      _new_box_autoadd_my_tree_node_0Ptr.asFunction<ffi.Pointer<wire_MyTreeNode> Function()>();

  ffi.Pointer<wire_NewTypeInt> new_box_autoadd_new_type_int_0() {
    return _new_box_autoadd_new_type_int_0();
  }

  late final _new_box_autoadd_new_type_int_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NewTypeInt> Function()>>('new_box_autoadd_new_type_int_0');
  late final _new_box_autoadd_new_type_int_0 =
      _new_box_autoadd_new_type_int_0Ptr.asFunction<ffi.Pointer<wire_NewTypeInt> Function()>();

  ffi.Pointer<wire_Note> new_box_autoadd_note_0() {
    return _new_box_autoadd_note_0();
  }

  late final _new_box_autoadd_note_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Note> Function()>>('new_box_autoadd_note_0');
  late final _new_box_autoadd_note_0 = _new_box_autoadd_note_0Ptr.asFunction<ffi.Pointer<wire_Note> Function()>();

  ffi.Pointer<wire_Numbers> new_box_autoadd_numbers_0() {
    return _new_box_autoadd_numbers_0();
  }

  late final _new_box_autoadd_numbers_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Numbers> Function()>>('new_box_autoadd_numbers_0');
  late final _new_box_autoadd_numbers_0 =
      _new_box_autoadd_numbers_0Ptr.asFunction<ffi.Pointer<wire_Numbers> Function()>();

  ffi.Pointer<wire_OpaqueNested> new_box_autoadd_opaque_nested_0() {
    return _new_box_autoadd_opaque_nested_0();
  }

  late final _new_box_autoadd_opaque_nested_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OpaqueNested> Function()>>('new_box_autoadd_opaque_nested_0');
  late final _new_box_autoadd_opaque_nested_0 =
      _new_box_autoadd_opaque_nested_0Ptr.asFunction<ffi.Pointer<wire_OpaqueNested> Function()>();

  ffi.Pointer<wire_Sequences> new_box_autoadd_sequences_0() {
    return _new_box_autoadd_sequences_0();
  }

  late final _new_box_autoadd_sequences_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Sequences> Function()>>('new_box_autoadd_sequences_0');
  late final _new_box_autoadd_sequences_0 =
      _new_box_autoadd_sequences_0Ptr.asFunction<ffi.Pointer<wire_Sequences> Function()>();

  ffi.Pointer<wire_SumWith> new_box_autoadd_sum_with_0() {
    return _new_box_autoadd_sum_with_0();
  }

  late final _new_box_autoadd_sum_with_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SumWith> Function()>>('new_box_autoadd_sum_with_0');
  late final _new_box_autoadd_sum_with_0 =
      _new_box_autoadd_sum_with_0Ptr.asFunction<ffi.Pointer<wire_SumWith> Function()>();

  ffi.Pointer<wire_TestId> new_box_autoadd_test_id_0() {
    return _new_box_autoadd_test_id_0();
  }

  late final _new_box_autoadd_test_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_TestId> Function()>>('new_box_autoadd_test_id_0');
  late final _new_box_autoadd_test_id_0 =
      _new_box_autoadd_test_id_0Ptr.asFunction<ffi.Pointer<wire_TestId> Function()>();

  ffi.Pointer<wire_UserId> new_box_autoadd_user_id_0() {
    return _new_box_autoadd_user_id_0();
  }

  late final _new_box_autoadd_user_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_UserId> Function()>>('new_box_autoadd_user_id_0');
  late final _new_box_autoadd_user_id_0 =
      _new_box_autoadd_user_id_0Ptr.asFunction<ffi.Pointer<wire_UserId> Function()>();

  ffi.Pointer<wire_Blob> new_box_blob_0() {
    return _new_box_blob_0();
  }

  late final _new_box_blob_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Blob> Function()>>('new_box_blob_0');
  late final _new_box_blob_0 = _new_box_blob_0Ptr.asFunction<ffi.Pointer<wire_Blob> Function()>();

  ffi.Pointer<ffi.Bool> new_box_bool_0(
    bool value,
  ) {
    return _new_box_bool_0(
      value,
    );
  }

  late final _new_box_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>('new_box_bool_0');
  late final _new_box_bool_0 = _new_box_bool_0Ptr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_Distance> new_box_distance_0() {
    return _new_box_distance_0();
  }

  late final _new_box_distance_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Distance> Function()>>('new_box_distance_0');
  late final _new_box_distance_0 = _new_box_distance_0Ptr.asFunction<ffi.Pointer<wire_Distance> Function()>();

  ffi.Pointer<wire_ExoticOptionals> new_box_exotic_optionals_0() {
    return _new_box_exotic_optionals_0();
  }

  late final _new_box_exotic_optionals_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ExoticOptionals> Function()>>('new_box_exotic_optionals_0');
  late final _new_box_exotic_optionals_0 =
      _new_box_exotic_optionals_0Ptr.asFunction<ffi.Pointer<wire_ExoticOptionals> Function()>();

  ffi.Pointer<ffi.Double> new_box_f64_0(
    double value,
  ) {
    return _new_box_f64_0(
      value,
    );
  }

  late final _new_box_f64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>('new_box_f64_0');
  late final _new_box_f64_0 = _new_box_f64_0Ptr.asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<ffi.Int32> new_box_i32_0(
    int value,
  ) {
    return _new_box_i32_0(
      value,
    );
  }

  late final _new_box_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_i32_0');
  late final _new_box_i32_0 = _new_box_i32_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> new_box_i64_0(
    int value,
  ) {
    return _new_box_i64_0(
      value,
    );
  }

  late final _new_box_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_i64_0');
  late final _new_box_i64_0 = _new_box_i64_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Int8> new_box_i8_0(
    int value,
  ) {
    return _new_box_i8_0(
      value,
    );
  }

  late final _new_box_i8_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int8)>>('new_box_i8_0');
  late final _new_box_i8_0 = _new_box_i8_0Ptr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<wire_KitchenSink> new_box_kitchen_sink_0() {
    return _new_box_kitchen_sink_0();
  }

  late final _new_box_kitchen_sink_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KitchenSink> Function()>>('new_box_kitchen_sink_0');
  late final _new_box_kitchen_sink_0 =
      _new_box_kitchen_sink_0Ptr.asFunction<ffi.Pointer<wire_KitchenSink> Function()>();

  ffi.Pointer<wire_MySize> new_box_my_size_0() {
    return _new_box_my_size_0();
  }

  late final _new_box_my_size_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_my_size_0');
  late final _new_box_my_size_0 = _new_box_my_size_0Ptr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_Speed> new_box_speed_0() {
    return _new_box_speed_0();
  }

  late final _new_box_speed_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Speed> Function()>>('new_box_speed_0');
  late final _new_box_speed_0 = _new_box_speed_0Ptr.asFunction<ffi.Pointer<wire_Speed> Function()>();

  ffi.Pointer<ffi.Uint8> new_box_u8_0(
    int value,
  ) {
    return _new_box_u8_0(
      value,
    );
  }

  late final _new_box_u8_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>('new_box_u8_0');
  late final _new_box_u8_0 = _new_box_u8_0Ptr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<ffi.Int32> new_box_weekdays_0(
    int value,
  ) {
    return _new_box_weekdays_0(
      value,
    );
  }

  late final _new_box_weekdays_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_weekdays_0');
  late final _new_box_weekdays_0 = _new_box_weekdays_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_float_32_list> new_float_32_list_0(
    int len,
  ) {
    return _new_float_32_list_0(
      len,
    );
  }

  late final _new_float_32_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_float_32_list> Function(ffi.Int32)>>('new_float_32_list_0');
  late final _new_float_32_list_0 = _new_float_32_list_0Ptr.asFunction<ffi.Pointer<wire_float_32_list> Function(int)>();

  ffi.Pointer<wire_float_64_list> new_float_64_list_0(
    int len,
  ) {
    return _new_float_64_list_0(
      len,
    );
  }

  late final _new_float_64_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_float_64_list> Function(ffi.Int32)>>('new_float_64_list_0');
  late final _new_float_64_list_0 = _new_float_64_list_0Ptr.asFunction<ffi.Pointer<wire_float_64_list> Function(int)>();

  ffi.Pointer<wire_int_32_list> new_int_32_list_0(
    int len,
  ) {
    return _new_int_32_list_0(
      len,
    );
  }

  late final _new_int_32_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_int_32_list> Function(ffi.Int32)>>('new_int_32_list_0');
  late final _new_int_32_list_0 = _new_int_32_list_0Ptr.asFunction<ffi.Pointer<wire_int_32_list> Function(int)>();

  ffi.Pointer<wire_int_64_list> new_int_64_list_0(
    int len,
  ) {
    return _new_int_64_list_0(
      len,
    );
  }

  late final _new_int_64_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_int_64_list> Function(ffi.Int32)>>('new_int_64_list_0');
  late final _new_int_64_list_0 = _new_int_64_list_0Ptr.asFunction<ffi.Pointer<wire_int_64_list> Function(int)>();

  ffi.Pointer<wire_int_8_list> new_int_8_list_0(
    int len,
  ) {
    return _new_int_8_list_0(
      len,
    );
  }

  late final _new_int_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_int_8_list> Function(ffi.Int32)>>('new_int_8_list_0');
  late final _new_int_8_list_0 = _new_int_8_list_0Ptr.asFunction<ffi.Pointer<wire_int_8_list> Function(int)>();

  ffi.Pointer<wire_list_DartOpaque> new_list_DartOpaque_0(
    int len,
  ) {
    return _new_list_DartOpaque_0(
      len,
    );
  }

  late final _new_list_DartOpaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_DartOpaque> Function(ffi.Int32)>>('new_list_DartOpaque_0');
  late final _new_list_DartOpaque_0 =
      _new_list_DartOpaque_0Ptr.asFunction<ffi.Pointer<wire_list_DartOpaque> Function(int)>();

  ffi.Pointer<wire_list_HideData> new_list_HideData_0(
    int len,
  ) {
    return _new_list_HideData_0(
      len,
    );
  }

  late final _new_list_HideData_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_HideData> Function(ffi.Int32)>>('new_list_HideData_0');
  late final _new_list_HideData_0 = _new_list_HideData_0Ptr.asFunction<ffi.Pointer<wire_list_HideData> Function(int)>();

  ffi.Pointer<wire_list_application_env_var> new_list_application_env_var_0(
    int len,
  ) {
    return _new_list_application_env_var_0(
      len,
    );
  }

  late final _new_list_application_env_var_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_application_env_var> Function(ffi.Int32)>>(
          'new_list_application_env_var_0');
  late final _new_list_application_env_var_0 =
      _new_list_application_env_var_0Ptr.asFunction<ffi.Pointer<wire_list_application_env_var> Function(int)>();

  ffi.Pointer<wire_list_attribute> new_list_attribute_0(
    int len,
  ) {
    return _new_list_attribute_0(
      len,
    );
  }

  late final _new_list_attribute_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_attribute> Function(ffi.Int32)>>('new_list_attribute_0');
  late final _new_list_attribute_0 =
      _new_list_attribute_0Ptr.asFunction<ffi.Pointer<wire_list_attribute> Function(int)>();

  ffi.Pointer<wire_list_my_size> new_list_my_size_0(
    int len,
  ) {
    return _new_list_my_size_0(
      len,
    );
  }

  late final _new_list_my_size_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_size> Function(ffi.Int32)>>('new_list_my_size_0');
  late final _new_list_my_size_0 = _new_list_my_size_0Ptr.asFunction<ffi.Pointer<wire_list_my_size> Function(int)>();

  ffi.Pointer<wire_list_my_tree_node> new_list_my_tree_node_0(
    int len,
  ) {
    return _new_list_my_tree_node_0(
      len,
    );
  }

  late final _new_list_my_tree_node_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_tree_node> Function(ffi.Int32)>>('new_list_my_tree_node_0');
  late final _new_list_my_tree_node_0 =
      _new_list_my_tree_node_0Ptr.asFunction<ffi.Pointer<wire_list_my_tree_node> Function(int)>();

  ffi.Pointer<wire_list_opt_box_autoadd_attribute> new_list_opt_box_autoadd_attribute_0(
    int len,
  ) {
    return _new_list_opt_box_autoadd_attribute_0(
      len,
    );
  }

  late final _new_list_opt_box_autoadd_attribute_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_opt_box_autoadd_attribute> Function(ffi.Int32)>>(
          'new_list_opt_box_autoadd_attribute_0');
  late final _new_list_opt_box_autoadd_attribute_0 = _new_list_opt_box_autoadd_attribute_0Ptr
      .asFunction<ffi.Pointer<wire_list_opt_box_autoadd_attribute> Function(int)>();

  ffi.Pointer<wire_list_test_id> new_list_test_id_0(
    int len,
  ) {
    return _new_list_test_id_0(
      len,
    );
  }

  late final _new_list_test_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_test_id> Function(ffi.Int32)>>('new_list_test_id_0');
  late final _new_list_test_id_0 = _new_list_test_id_0Ptr.asFunction<ffi.Pointer<wire_list_test_id> Function(int)>();

  ffi.Pointer<wire_list_weekdays> new_list_weekdays_0(
    int len,
  ) {
    return _new_list_weekdays_0(
      len,
    );
  }

  late final _new_list_weekdays_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_weekdays> Function(ffi.Int32)>>('new_list_weekdays_0');
  late final _new_list_weekdays_0 = _new_list_weekdays_0Ptr.asFunction<ffi.Pointer<wire_list_weekdays> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_BoxDartDebug(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_BoxDartDebug(
      ptr,
    );
  }

  late final _drop_opaque_BoxDartDebugPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_BoxDartDebug');
  late final _drop_opaque_BoxDartDebug =
      _drop_opaque_BoxDartDebugPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_BoxDartDebug(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_BoxDartDebug(
      ptr,
    );
  }

  late final _share_opaque_BoxDartDebugPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_BoxDartDebug');
  late final _share_opaque_BoxDartDebug =
      _share_opaque_BoxDartDebugPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FrbOpaqueReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FrbOpaqueReturn(
      ptr,
    );
  }

  late final _drop_opaque_FrbOpaqueReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_FrbOpaqueReturn');
  late final _drop_opaque_FrbOpaqueReturn =
      _drop_opaque_FrbOpaqueReturnPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FrbOpaqueReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FrbOpaqueReturn(
      ptr,
    );
  }

  late final _share_opaque_FrbOpaqueReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_FrbOpaqueReturn');
  late final _share_opaque_FrbOpaqueReturn =
      _share_opaque_FrbOpaqueReturnPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FrbOpaqueSyncReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FrbOpaqueSyncReturn(
      ptr,
    );
  }

  late final _drop_opaque_FrbOpaqueSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_FrbOpaqueSyncReturn');
  late final _drop_opaque_FrbOpaqueSyncReturn =
      _drop_opaque_FrbOpaqueSyncReturnPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FrbOpaqueSyncReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FrbOpaqueSyncReturn(
      ptr,
    );
  }

  late final _share_opaque_FrbOpaqueSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_FrbOpaqueSyncReturn');
  late final _share_opaque_FrbOpaqueSyncReturn =
      _share_opaque_FrbOpaqueSyncReturnPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_HideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_HideData(
      ptr,
    );
  }

  late final _drop_opaque_HideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_HideData');
  late final _drop_opaque_HideData = _drop_opaque_HideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_HideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_HideData(
      ptr,
    );
  }

  late final _share_opaque_HideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_HideData');
  late final _share_opaque_HideData =
      _share_opaque_HideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_I32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_I32(
      ptr,
    );
  }

  late final _drop_opaque_I32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_I32');
  late final _drop_opaque_I32 = _drop_opaque_I32Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_I32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_I32(
      ptr,
    );
  }

  late final _share_opaque_I32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_I32');
  late final _share_opaque_I32 =
      _share_opaque_I32Ptr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexHideData(
      ptr,
    );
  }

  late final _drop_opaque_MutexHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexHideData');
  late final _drop_opaque_MutexHideData =
      _drop_opaque_MutexHideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexHideData(
      ptr,
    );
  }

  late final _share_opaque_MutexHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexHideData');
  late final _share_opaque_MutexHideData =
      _share_opaque_MutexHideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_NonSendHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_NonSendHideData(
      ptr,
    );
  }

  late final _drop_opaque_NonSendHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_NonSendHideData');
  late final _drop_opaque_NonSendHideData =
      _drop_opaque_NonSendHideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_NonSendHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_NonSendHideData(
      ptr,
    );
  }

  late final _share_opaque_NonSendHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_NonSendHideData');
  late final _share_opaque_NonSendHideData =
      _share_opaque_NonSendHideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockHideData(
      ptr,
    );
  }

  late final _drop_opaque_RwLockHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_RwLockHideData');
  late final _drop_opaque_RwLockHideData =
      _drop_opaque_RwLockHideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockHideData(
      ptr,
    );
  }

  late final _share_opaque_RwLockHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockHideData');
  late final _share_opaque_RwLockHideData =
      _share_opaque_RwLockHideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<DistanceKind> inflate_Distance_Map() {
    return _inflate_Distance_Map();
  }

  late final _inflate_Distance_MapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DistanceKind> Function()>>('inflate_Distance_Map');
  late final _inflate_Distance_Map = _inflate_Distance_MapPtr.asFunction<ffi.Pointer<DistanceKind> Function()>();

  ffi.Pointer<EnumDartOpaqueKind> inflate_EnumDartOpaque_Primitive() {
    return _inflate_EnumDartOpaque_Primitive();
  }

  late final _inflate_EnumDartOpaque_PrimitivePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>>('inflate_EnumDartOpaque_Primitive');
  late final _inflate_EnumDartOpaque_Primitive =
      _inflate_EnumDartOpaque_PrimitivePtr.asFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>();

  ffi.Pointer<EnumDartOpaqueKind> inflate_EnumDartOpaque_Opaque() {
    return _inflate_EnumDartOpaque_Opaque();
  }

  late final _inflate_EnumDartOpaque_OpaquePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>>('inflate_EnumDartOpaque_Opaque');
  late final _inflate_EnumDartOpaque_Opaque =
      _inflate_EnumDartOpaque_OpaquePtr.asFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_Struct() {
    return _inflate_EnumOpaque_Struct();
  }

  late final _inflate_EnumOpaque_StructPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_Struct');
  late final _inflate_EnumOpaque_Struct =
      _inflate_EnumOpaque_StructPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_Primitive() {
    return _inflate_EnumOpaque_Primitive();
  }

  late final _inflate_EnumOpaque_PrimitivePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_Primitive');
  late final _inflate_EnumOpaque_Primitive =
      _inflate_EnumOpaque_PrimitivePtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_TraitObj() {
    return _inflate_EnumOpaque_TraitObj();
  }

  late final _inflate_EnumOpaque_TraitObjPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_TraitObj');
  late final _inflate_EnumOpaque_TraitObj =
      _inflate_EnumOpaque_TraitObjPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_Mutex() {
    return _inflate_EnumOpaque_Mutex();
  }

  late final _inflate_EnumOpaque_MutexPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_Mutex');
  late final _inflate_EnumOpaque_Mutex =
      _inflate_EnumOpaque_MutexPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_RwLock() {
    return _inflate_EnumOpaque_RwLock();
  }

  late final _inflate_EnumOpaque_RwLockPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_RwLock');
  late final _inflate_EnumOpaque_RwLock =
      _inflate_EnumOpaque_RwLockPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Primitives() {
    return _inflate_KitchenSink_Primitives();
  }

  late final _inflate_KitchenSink_PrimitivesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Primitives');
  late final _inflate_KitchenSink_Primitives =
      _inflate_KitchenSink_PrimitivesPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Nested() {
    return _inflate_KitchenSink_Nested();
  }

  late final _inflate_KitchenSink_NestedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Nested');
  late final _inflate_KitchenSink_Nested =
      _inflate_KitchenSink_NestedPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Optional() {
    return _inflate_KitchenSink_Optional();
  }

  late final _inflate_KitchenSink_OptionalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Optional');
  late final _inflate_KitchenSink_Optional =
      _inflate_KitchenSink_OptionalPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Buffer() {
    return _inflate_KitchenSink_Buffer();
  }

  late final _inflate_KitchenSink_BufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Buffer');
  late final _inflate_KitchenSink_Buffer =
      _inflate_KitchenSink_BufferPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Enums() {
    return _inflate_KitchenSink_Enums();
  }

  late final _inflate_KitchenSink_EnumsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Enums');
  late final _inflate_KitchenSink_Enums =
      _inflate_KitchenSink_EnumsPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<MeasureKind> inflate_Measure_Speed() {
    return _inflate_Measure_Speed();
  }

  late final _inflate_Measure_SpeedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MeasureKind> Function()>>('inflate_Measure_Speed');
  late final _inflate_Measure_Speed = _inflate_Measure_SpeedPtr.asFunction<ffi.Pointer<MeasureKind> Function()>();

  ffi.Pointer<MeasureKind> inflate_Measure_Distance() {
    return _inflate_Measure_Distance();
  }

  late final _inflate_Measure_DistancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MeasureKind> Function()>>('inflate_Measure_Distance');
  late final _inflate_Measure_Distance = _inflate_Measure_DistancePtr.asFunction<ffi.Pointer<MeasureKind> Function()>();

  ffi.Pointer<SpeedKind> inflate_Speed_GPS() {
    return _inflate_Speed_GPS();
  }

  late final _inflate_Speed_GPSPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SpeedKind> Function()>>('inflate_Speed_GPS');
  late final _inflate_Speed_GPS = _inflate_Speed_GPSPtr.asFunction<ffi.Pointer<SpeedKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MySize extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class wire_NewTypeInt extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

class wire_list_my_size extends ffi.Struct {
  external ffi.Pointer<wire_MySize> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_my_tree_node extends ffi.Struct {
  external ffi.Pointer<wire_MyTreeNode> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MyTreeNode extends ffi.Struct {
  @ffi.Int32()
  external int value_i32;

  external ffi.Pointer<wire_uint_8_list> value_vec_u8;

  @ffi.Bool()
  external bool value_boolean;

  external ffi.Pointer<wire_list_my_tree_node> children;
}

class wire_MyNestedStruct extends ffi.Struct {
  external wire_MyTreeNode tree_node;

  @ffi.Int32()
  external int weekday;
}

class wire_int_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_int_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

class wire_float_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Float> ptr;

  @ffi.Int32()
  external int len;
}

class wire_float_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Attribute extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_list_attribute extends ffi.Struct {
  external ffi.Pointer<wire_Attribute> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_opt_box_autoadd_attribute extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_Attribute>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ExoticOptionals extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> int32;

  external ffi.Pointer<ffi.Int64> int64;

  external ffi.Pointer<ffi.Double> float64;

  external ffi.Pointer<ffi.Bool> boolean;

  external ffi.Pointer<wire_uint_8_list> zerocopy;

  external ffi.Pointer<wire_int_8_list> int8list;

  external ffi.Pointer<wire_uint_8_list> uint8list;

  external ffi.Pointer<wire_int_32_list> int32list;

  external ffi.Pointer<wire_float_32_list> float32list;

  external ffi.Pointer<wire_float_64_list> float64list;

  external ffi.Pointer<wire_list_attribute> attributes;

  external ffi.Pointer<wire_list_opt_box_autoadd_attribute> attributes_nullable;

  external ffi.Pointer<wire_list_opt_box_autoadd_attribute> nullable_attributes;

  external ffi.Pointer<wire_NewTypeInt> newtypeint;
}

class wire_Note extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> day;

  external ffi.Pointer<wire_uint_8_list> body;
}

class wire_Customized extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> final_field;

  external ffi.Pointer<wire_uint_8_list> non_final_field;
}

class wire_KitchenSink_Empty extends ffi.Opaque {}

class wire_KitchenSink_Primitives extends ffi.Struct {
  @ffi.Int32()
  external int int32;

  @ffi.Double()
  external double float64;

  @ffi.Bool()
  external bool boolean;
}

class wire_KitchenSink_Nested extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_KitchenSink> field1;
}

class wire_KitchenSink extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<KitchenSinkKind> kind;
}

class KitchenSinkKind extends ffi.Union {
  external ffi.Pointer<wire_KitchenSink_Empty> Empty;

  external ffi.Pointer<wire_KitchenSink_Primitives> Primitives;

  external ffi.Pointer<wire_KitchenSink_Nested> Nested;

  external ffi.Pointer<wire_KitchenSink_Optional> Optional;

  external ffi.Pointer<wire_KitchenSink_Buffer> Buffer;

  external ffi.Pointer<wire_KitchenSink_Enums> Enums;
}

class wire_KitchenSink_Optional extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> field0;

  external ffi.Pointer<ffi.Int32> field1;
}

class wire_KitchenSink_Buffer extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_KitchenSink_Enums extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_MyStruct extends ffi.Struct {
  @ffi.Bool()
  external bool content;
}

class wire_ApplicationEnvVar extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  @ffi.Bool()
  external bool field1;
}

class wire_list_application_env_var extends ffi.Struct {
  external ffi.Pointer<wire_ApplicationEnvVar> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ApplicationEnv extends ffi.Struct {
  external ffi.Pointer<wire_list_application_env_var> vars;
}

class wire_ApplicationSettings extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> version;

  @ffi.Int32()
  external int mode;

  external ffi.Pointer<wire_ApplicationEnv> env;

  external ffi.Pointer<wire_ApplicationEnv> env_optional;
}

class wire_Numbers extends ffi.Struct {
  external ffi.Pointer<wire_int_32_list> field0;
}

class wire_Sequences extends ffi.Struct {
  external ffi.Pointer<wire_int_32_list> field0;
}

class wire_UserId extends ffi.Struct {
  @ffi.Uint32()
  external int value;
}

class wire_Speed_Unknown extends ffi.Opaque {}

class wire_Speed_GPS extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

class SpeedKind extends ffi.Union {
  external ffi.Pointer<wire_Speed_Unknown> Unknown;

  external ffi.Pointer<wire_Speed_GPS> GPS;
}

class wire_Speed extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SpeedKind> kind;
}

class wire_Measure_Speed extends ffi.Struct {
  external ffi.Pointer<wire_Speed> field0;
}

class wire_Distance_Unknown extends ffi.Opaque {}

class wire_Distance_Map extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

class DistanceKind extends ffi.Union {
  external ffi.Pointer<wire_Distance_Unknown> Unknown;

  external ffi.Pointer<wire_Distance_Map> Map;
}

class wire_Distance extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DistanceKind> kind;
}

class wire_Measure_Distance extends ffi.Struct {
  external ffi.Pointer<wire_Distance> field0;
}

class MeasureKind extends ffi.Union {
  external ffi.Pointer<wire_Measure_Speed> Speed;

  external ffi.Pointer<wire_Measure_Distance> Distance;
}

class wire_Measure extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<MeasureKind> kind;
}

class wire_int_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @ffi.Int32()
  external int len;
}

class wire_FeatureChrono extends ffi.Struct {
  @ffi.Int64()
  external int utc;

  @ffi.Int64()
  external int local;

  @ffi.Int64()
  external int duration;

  @ffi.Int64()
  external int naive;
}

class wire_FeatureUuid extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> one;

  external ffi.Pointer<wire_uint_8_list> many;
}

class wire_MessageId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_Blob extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_FeedId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_TestId extends ffi.Struct {
  external ffi.Pointer<wire_int_32_list> field0;
}

class wire_list_test_id extends ffi.Struct {
  external ffi.Pointer<wire_TestId> ptr;

  @ffi.Int32()
  external int len;
}

class wire_DartOpaque extends ffi.Struct {
  @ffi.Int64()
  external int port;

  @ffi.UintPtr()
  external int handle;
}

class wire_list_DartOpaque extends ffi.Struct {
  external ffi.Pointer<wire_DartOpaque> ptr;

  @ffi.Int32()
  external int len;
}

class wire_HideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_EnumOpaque_Struct extends ffi.Struct {
  external wire_HideData field0;
}

class wire_I32 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_EnumOpaque_Primitive extends ffi.Struct {
  external wire_I32 field0;
}

class wire_BoxDartDebug extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_EnumOpaque_TraitObj extends ffi.Struct {
  external wire_BoxDartDebug field0;
}

class wire_MutexHideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_EnumOpaque_Mutex extends ffi.Struct {
  external wire_MutexHideData field0;
}

class wire_RwLockHideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_EnumOpaque_RwLock extends ffi.Struct {
  external wire_RwLockHideData field0;
}

class EnumOpaqueKind extends ffi.Union {
  external ffi.Pointer<wire_EnumOpaque_Struct> Struct;

  external ffi.Pointer<wire_EnumOpaque_Primitive> Primitive;

  external ffi.Pointer<wire_EnumOpaque_TraitObj> TraitObj;

  external ffi.Pointer<wire_EnumOpaque_Mutex> Mutex;

  external ffi.Pointer<wire_EnumOpaque_RwLock> RwLock;
}

class wire_EnumOpaque extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<EnumOpaqueKind> kind;
}

class wire_NonSendHideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_list_HideData extends ffi.Struct {
  external ffi.Pointer<wire_HideData> ptr;

  @ffi.Int32()
  external int len;
}

class wire_OpaqueNested extends ffi.Struct {
  external wire_HideData first;

  external wire_HideData second;
}

class wire_DartOpaqueNested extends ffi.Struct {
  external wire_DartOpaque first;

  external wire_DartOpaque second;
}

class wire_EnumDartOpaque_Primitive extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_EnumDartOpaque_Opaque extends ffi.Struct {
  external wire_DartOpaque field0;
}

class EnumDartOpaqueKind extends ffi.Union {
  external ffi.Pointer<wire_EnumDartOpaque_Primitive> Primitive;

  external ffi.Pointer<wire_EnumDartOpaque_Opaque> Opaque;
}

class wire_EnumDartOpaque extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<EnumDartOpaqueKind> kind;
}

class wire_Empty extends ffi.Opaque {}

class wire_list_weekdays extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

class wire_SumWith extends ffi.Struct {
  @ffi.Uint32()
  external int x;
}

class wire_ConcatenateWith extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> a;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
