// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class FlutterRustBridgeExampleSingleBlockTest {
  Future<TestOpaque> handleOpaqueAaa({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueAaaConstMeta;

  Future<BoxRwLockWtffi> magic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMagicConstMeta;

  Future<String> handleMagic({required BoxRwLockWtffi magic, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleMagicConstMeta;

  Future<String> handleOpaqueBbb({TestOpaque? value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueBbbConstMeta;

  Future<OpaqueBag> handleOpaque({OpaqueBag? value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueConstMeta;

  Future<String?> handleOpaqueRepr({required RwLockI32 value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueReprConstMeta;
}

@sealed
class BoxDartDebug extends FrbOpaque {
  BoxDartDebug.MYC(int? ptr, int drop, int lend)
      : super.unsafe(ptr, drop, lend);
}

@sealed
class BoxRwLockWtffi extends FrbOpaque {
  BoxRwLockWtffi.MYC(int? ptr, int drop, int lend)
      : super.unsafe(ptr, drop, lend);
}

@sealed
class BoxWtffi extends FrbOpaque {
  BoxWtffi.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

@sealed
class RwLockI32 extends FrbOpaque {
  RwLockI32.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

@sealed
class RwLockIsize10 extends FrbOpaque {
  RwLockIsize10.MYC(int? ptr, int drop, int lend)
      : super.unsafe(ptr, drop, lend);
}

@sealed
class Str extends FrbOpaque {
  Str.MYC(int? ptr, int drop, int lend) : super.unsafe(ptr, drop, lend);
}

class OpaqueBag {
  final RwLockI32 primitive;
  final RwLockIsize10 array;
  final Str lifetime;
  final BoxDartDebug traitObj;

  OpaqueBag({
    required this.primitive,
    required this.array,
    required this.lifetime,
    required this.traitObj,
  });
}

class TestOpaque {
  final BoxWtffi magic;

  TestOpaque({
    required this.magic,
  });
}

class FlutterRustBridgeExampleSingleBlockTestImpl
    implements FlutterRustBridgeExampleSingleBlockTest {
  final FlutterRustBridgeExampleSingleBlockTestPlatform _platform;
  factory FlutterRustBridgeExampleSingleBlockTestImpl(ExternalLibrary dylib) =>
      FlutterRustBridgeExampleSingleBlockTestImpl.raw(
          FlutterRustBridgeExampleSingleBlockTestPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FlutterRustBridgeExampleSingleBlockTestImpl.wasm(
          FutureOr<WasmModule> module) =>
      FlutterRustBridgeExampleSingleBlockTestImpl(module as ExternalLibrary);
  FlutterRustBridgeExampleSingleBlockTestImpl.raw(this._platform);
  Future<TestOpaque> handleOpaqueAaa({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_handle_opaque_aaa(port_),
        parseSuccessData: _wire2api_test_opaque,
        constMeta: kHandleOpaqueAaaConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueAaaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque_aaa",
        argNames: [],
      );

  Future<BoxRwLockWtffi> magic({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_magic(port_),
        parseSuccessData: _wire2api_BoxRwLockWtffi,
        constMeta: kMagicConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMagicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "magic",
        argNames: [],
      );

  Future<String> handleMagic({required BoxRwLockWtffi magic, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_handle_magic(port_, _platform.api2wire_BoxRwLockWtffi(magic)),
        parseSuccessData: _wire2api_String,
        constMeta: kHandleMagicConstMeta,
        argValues: [magic],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleMagicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_magic",
        argNames: ["magic"],
      );

  Future<String> handleOpaqueBbb({TestOpaque? value, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_handle_opaque_bbb(
            port_, _platform.api2wire_opt_box_autoadd_test_opaque(value)),
        parseSuccessData: _wire2api_String,
        constMeta: kHandleOpaqueBbbConstMeta,
        argValues: [value],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueBbbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque_bbb",
        argNames: ["value"],
      );

  Future<OpaqueBag> handleOpaque({OpaqueBag? value, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_handle_opaque(
            port_, _platform.api2wire_opt_box_autoadd_opaque_bag(value)),
        parseSuccessData: _wire2api_opaque_bag,
        constMeta: kHandleOpaqueConstMeta,
        argValues: [value],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque",
        argNames: ["value"],
      );

  Future<String?> handleOpaqueRepr({required RwLockI32 value, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_handle_opaque_repr(
            port_, _platform.api2wire_RwLockI32(value)),
        parseSuccessData: _wire2api_opt_String,
        constMeta: kHandleOpaqueReprConstMeta,
        argValues: [value],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOpaqueReprConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_opaque_repr",
        argNames: ["value"],
      );
}

// Section: api2wire

// Section: wire2api

BoxDartDebug _wire2api_BoxDartDebug(dynamic raw) {
  return BoxDartDebug.MYC(raw[0], raw[1], raw[2]);
}

BoxRwLockWtffi _wire2api_BoxRwLockWtffi(dynamic raw) {
  return BoxRwLockWtffi.MYC(raw[0], raw[1], raw[2]);
}

BoxWtffi _wire2api_BoxWtffi(dynamic raw) {
  return BoxWtffi.MYC(raw[0], raw[1], raw[2]);
}

RwLockI32 _wire2api_RwLockI32(dynamic raw) {
  return RwLockI32.MYC(raw[0], raw[1], raw[2]);
}

RwLockIsize10 _wire2api_RwLockIsize10(dynamic raw) {
  return RwLockIsize10.MYC(raw[0], raw[1], raw[2]);
}

Str _wire2api_Str(dynamic raw) {
  return Str.MYC(raw[0], raw[1], raw[2]);
}

String _wire2api_String(dynamic raw) {
  return raw as String;
}

OpaqueBag _wire2api_opaque_bag(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return OpaqueBag(
    primitive: _wire2api_RwLockI32(arr[0]),
    array: _wire2api_RwLockIsize10(arr[1]),
    lifetime: _wire2api_Str(arr[2]),
    traitObj: _wire2api_BoxDartDebug(arr[3]),
  );
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

TestOpaque _wire2api_test_opaque(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return TestOpaque(
    magic: _wire2api_BoxWtffi(arr[0]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

class FlutterRustBridgeExampleSingleBlockTestPlatform
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleSingleBlockTestWire> {
  FlutterRustBridgeExampleSingleBlockTestPlatform(ffi.DynamicLibrary dylib)
      : super(FlutterRustBridgeExampleSingleBlockTestWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_BoxDartDebug> api2wire_BoxDartDebug(BoxDartDebug raw) {
    final ptr = inner.new_BoxDartDebug();
    _api_fill_to_wire_BoxDartDebug(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_BoxRwLockWtffi> api2wire_BoxRwLockWtffi(BoxRwLockWtffi raw) {
    final ptr = inner.new_BoxRwLockWtffi();
    _api_fill_to_wire_BoxRwLockWtffi(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_BoxWtffi> api2wire_BoxWtffi(BoxWtffi raw) {
    final ptr = inner.new_BoxWtffi();
    _api_fill_to_wire_BoxWtffi(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RwLockI32> api2wire_RwLockI32(RwLockI32 raw) {
    final ptr = inner.new_RwLockI32();
    _api_fill_to_wire_RwLockI32(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RwLockIsize10> api2wire_RwLockIsize10(RwLockIsize10 raw) {
    final ptr = inner.new_RwLockIsize10();
    _api_fill_to_wire_RwLockIsize10(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Str> api2wire_Str(Str raw) {
    final ptr = inner.new_Str();
    _api_fill_to_wire_Str(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OpaqueBag> api2wire_box_autoadd_opaque_bag(OpaqueBag raw) {
    final ptr = inner.new_box_autoadd_opaque_bag_0();
    _api_fill_to_wire_opaque_bag(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_TestOpaque> api2wire_box_autoadd_test_opaque(
      TestOpaque raw) {
    final ptr = inner.new_box_autoadd_test_opaque_0();
    _api_fill_to_wire_test_opaque(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OpaqueBag> api2wire_opt_box_autoadd_opaque_bag(
      OpaqueBag? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_opaque_bag(raw);
  }

  @protected
  ffi.Pointer<wire_TestOpaque> api2wire_opt_box_autoadd_test_opaque(
      TestOpaque? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_test_opaque(raw);
  }

// Section: api_fill_to_wire

  void _api_fill_to_wire_BoxDartDebug(
      BoxDartDebug apiObj, ffi.Pointer<wire_BoxDartDebug> wireObj) {
    wireObj.ref.ptr = FrbOpaque.lend(apiObj).cast();
  }

  void _api_fill_to_wire_BoxRwLockWtffi(
      BoxRwLockWtffi apiObj, ffi.Pointer<wire_BoxRwLockWtffi> wireObj) {
    wireObj.ref.ptr = FrbOpaque.lend(apiObj).cast();
  }

  void _api_fill_to_wire_BoxWtffi(
      BoxWtffi apiObj, ffi.Pointer<wire_BoxWtffi> wireObj) {
    wireObj.ref.ptr = FrbOpaque.lend(apiObj).cast();
  }

  void _api_fill_to_wire_RwLockI32(
      RwLockI32 apiObj, ffi.Pointer<wire_RwLockI32> wireObj) {
    wireObj.ref.ptr = FrbOpaque.lend(apiObj).cast();
  }

  void _api_fill_to_wire_RwLockIsize10(
      RwLockIsize10 apiObj, ffi.Pointer<wire_RwLockIsize10> wireObj) {
    wireObj.ref.ptr = FrbOpaque.lend(apiObj).cast();
  }

  void _api_fill_to_wire_Str(Str apiObj, ffi.Pointer<wire_Str> wireObj) {
    wireObj.ref.ptr = FrbOpaque.lend(apiObj).cast();
  }

  void _api_fill_to_wire_box_autoadd_opaque_bag(
      OpaqueBag apiObj, ffi.Pointer<wire_OpaqueBag> wireObj) {
    _api_fill_to_wire_opaque_bag(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_test_opaque(
      TestOpaque apiObj, ffi.Pointer<wire_TestOpaque> wireObj) {
    _api_fill_to_wire_test_opaque(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_opaque_bag(OpaqueBag apiObj, wire_OpaqueBag wireObj) {
    wireObj.primitive = api2wire_RwLockI32(apiObj.primitive);
    wireObj.array = api2wire_RwLockIsize10(apiObj.array);
    wireObj.lifetime = api2wire_Str(apiObj.lifetime);
    wireObj.trait_obj = api2wire_BoxDartDebug(apiObj.traitObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_opaque_bag(
      OpaqueBag? apiObj, ffi.Pointer<wire_OpaqueBag> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_opaque_bag(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_test_opaque(
      TestOpaque? apiObj, ffi.Pointer<wire_TestOpaque> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_test_opaque(apiObj, wireObj);
  }

  void _api_fill_to_wire_test_opaque(
      TestOpaque apiObj, wire_TestOpaque wireObj) {
    wireObj.magic = api2wire_BoxWtffi(apiObj.magic);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleSingleBlockTestWire
    implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleSingleBlockTestWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleSingleBlockTestWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_handle_opaque_aaa(
    int port_,
  ) {
    return _wire_handle_opaque_aaa(
      port_,
    );
  }

  late final _wire_handle_opaque_aaaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_handle_opaque_aaa');
  late final _wire_handle_opaque_aaa =
      _wire_handle_opaque_aaaPtr.asFunction<void Function(int)>();

  void wire_magic(
    int port_,
  ) {
    return _wire_magic(
      port_,
    );
  }

  late final _wire_magicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_magic');
  late final _wire_magic = _wire_magicPtr.asFunction<void Function(int)>();

  void wire_handle_magic(
    int port_,
    ffi.Pointer<wire_BoxRwLockWtffi> magic,
  ) {
    return _wire_handle_magic(
      port_,
      magic,
    );
  }

  late final _wire_handle_magicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_BoxRwLockWtffi>)>>('wire_handle_magic');
  late final _wire_handle_magic = _wire_handle_magicPtr
      .asFunction<void Function(int, ffi.Pointer<wire_BoxRwLockWtffi>)>();

  void wire_handle_opaque_bbb(
    int port_,
    ffi.Pointer<wire_TestOpaque> value,
  ) {
    return _wire_handle_opaque_bbb(
      port_,
      value,
    );
  }

  late final _wire_handle_opaque_bbbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_TestOpaque>)>>('wire_handle_opaque_bbb');
  late final _wire_handle_opaque_bbb = _wire_handle_opaque_bbbPtr
      .asFunction<void Function(int, ffi.Pointer<wire_TestOpaque>)>();

  void wire_handle_opaque(
    int port_,
    ffi.Pointer<wire_OpaqueBag> value,
  ) {
    return _wire_handle_opaque(
      port_,
      value,
    );
  }

  late final _wire_handle_opaquePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_OpaqueBag>)>>('wire_handle_opaque');
  late final _wire_handle_opaque = _wire_handle_opaquePtr
      .asFunction<void Function(int, ffi.Pointer<wire_OpaqueBag>)>();

  void wire_handle_opaque_repr(
    int port_,
    ffi.Pointer<wire_RwLockI32> value,
  ) {
    return _wire_handle_opaque_repr(
      port_,
      value,
    );
  }

  late final _wire_handle_opaque_reprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_RwLockI32>)>>('wire_handle_opaque_repr');
  late final _wire_handle_opaque_repr = _wire_handle_opaque_reprPtr
      .asFunction<void Function(int, ffi.Pointer<wire_RwLockI32>)>();

  ffi.Pointer<wire_BoxDartDebug> new_BoxDartDebug() {
    return _new_BoxDartDebug();
  }

  late final _new_BoxDartDebugPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BoxDartDebug> Function()>>(
          'new_BoxDartDebug');
  late final _new_BoxDartDebug = _new_BoxDartDebugPtr
      .asFunction<ffi.Pointer<wire_BoxDartDebug> Function()>();

  ffi.Pointer<wire_BoxRwLockWtffi> new_BoxRwLockWtffi() {
    return _new_BoxRwLockWtffi();
  }

  late final _new_BoxRwLockWtffiPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BoxRwLockWtffi> Function()>>(
          'new_BoxRwLockWtffi');
  late final _new_BoxRwLockWtffi = _new_BoxRwLockWtffiPtr
      .asFunction<ffi.Pointer<wire_BoxRwLockWtffi> Function()>();

  ffi.Pointer<wire_BoxWtffi> new_BoxWtffi() {
    return _new_BoxWtffi();
  }

  late final _new_BoxWtffiPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BoxWtffi> Function()>>(
          'new_BoxWtffi');
  late final _new_BoxWtffi =
      _new_BoxWtffiPtr.asFunction<ffi.Pointer<wire_BoxWtffi> Function()>();

  ffi.Pointer<wire_RwLockI32> new_RwLockI32() {
    return _new_RwLockI32();
  }

  late final _new_RwLockI32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RwLockI32> Function()>>(
          'new_RwLockI32');
  late final _new_RwLockI32 =
      _new_RwLockI32Ptr.asFunction<ffi.Pointer<wire_RwLockI32> Function()>();

  ffi.Pointer<wire_RwLockIsize10> new_RwLockIsize10() {
    return _new_RwLockIsize10();
  }

  late final _new_RwLockIsize10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RwLockIsize10> Function()>>(
          'new_RwLockIsize10');
  late final _new_RwLockIsize10 = _new_RwLockIsize10Ptr
      .asFunction<ffi.Pointer<wire_RwLockIsize10> Function()>();

  ffi.Pointer<wire_Str> new_Str() {
    return _new_Str();
  }

  late final _new_StrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Str> Function()>>('new_Str');
  late final _new_Str =
      _new_StrPtr.asFunction<ffi.Pointer<wire_Str> Function()>();

  ffi.Pointer<wire_OpaqueBag> new_box_autoadd_opaque_bag_0() {
    return _new_box_autoadd_opaque_bag_0();
  }

  late final _new_box_autoadd_opaque_bag_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OpaqueBag> Function()>>(
          'new_box_autoadd_opaque_bag_0');
  late final _new_box_autoadd_opaque_bag_0 = _new_box_autoadd_opaque_bag_0Ptr
      .asFunction<ffi.Pointer<wire_OpaqueBag> Function()>();

  ffi.Pointer<wire_TestOpaque> new_box_autoadd_test_opaque_0() {
    return _new_box_autoadd_test_opaque_0();
  }

  late final _new_box_autoadd_test_opaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_TestOpaque> Function()>>(
          'new_box_autoadd_test_opaque_0');
  late final _new_box_autoadd_test_opaque_0 = _new_box_autoadd_test_opaque_0Ptr
      .asFunction<ffi.Pointer<wire_TestOpaque> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_BoxRwLockWtffi extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_BoxWtffi extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_TestOpaque extends ffi.Struct {
  external ffi.Pointer<wire_BoxWtffi> magic;
}

class wire_RwLockI32 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RwLockIsize10 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_Str extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_BoxDartDebug extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_OpaqueBag extends ffi.Struct {
  external ffi.Pointer<wire_RwLockI32> primitive;

  external ffi.Pointer<wire_RwLockIsize10> array;

  external ffi.Pointer<wire_Str> lifetime;

  external ffi.Pointer<wire_BoxDartDebug> trait_obj;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
