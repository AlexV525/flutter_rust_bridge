// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: invalid_use_of_internal_member, unused_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> rustCallDartSimple(
        {required void Function() callback, dynamic hint}) =>
    RustLib.instance.api.rustCallDartSimple(callback: callback, hint: hint);

Future<void> rustCallDartOneArg(
        {required void Function(String) callback, dynamic hint}) =>
    RustLib.instance.api.rustCallDartOneArg(callback: callback, hint: hint);

Future<void> rustCallDartTwoArgs(
        {required void Function(String, DemoStructForRustCallDart) callback,
        dynamic hint}) =>
    RustLib.instance.api.rustCallDartTwoArgs(callback: callback, hint: hint);

Future<void> rustCallDartReturn(
        {required String Function() callback, dynamic hint}) =>
    RustLib.instance.api.rustCallDartReturn(callback: callback, hint: hint);

Future<void> rustCallDartLoopback(
        {required DemoStructForRustCallDart Function(DemoStructForRustCallDart)
            callback,
        dynamic hint}) =>
    RustLib.instance.api.rustCallDartLoopback(callback: callback, hint: hint);

Future<void> rustCallDartWithDartOpaqueArg(
        {required Object input,
        required void Function(Object) callback,
        dynamic hint}) =>
    RustLib.instance.api.rustCallDartWithDartOpaqueArg(
        input: input, callback: callback, hint: hint);

Future<Object> rustCallDartWithDartOpaqueResult(
        {required Object Function() callback, dynamic hint}) =>
    RustLib.instance.api
        .rustCallDartWithDartOpaqueResult(callback: callback, hint: hint);

class DemoStructForRustCallDart {
  final String name;

  const DemoStructForRustCallDart({
    required this.name,
  });

  @override
  int get hashCode => name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DemoStructForRustCallDart &&
          runtimeType == other.runtimeType &&
          name == other.name;
}
