// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DroppableTwinSyncSse>>
@sealed
class DroppableTwinSyncSse extends RustOpaque {
  // Not to be used by end users
  DroppableTwinSyncSse.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DroppableTwinSyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DroppableTwinSyncSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DroppableTwinSyncSse,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DroppableTwinSyncSsePtr,
  );

  Stream<int> createStreamTwinSyncSse() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDroppableTwinSyncSseCreateStreamTwinSyncSse(
        that: this,
      );

  Future<void> drop() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDroppableTwinSyncSseDrop(
        that: this,
      );

  static int getDropCountTwinSyncSse() => RustLib.instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDroppableTwinSyncSseGetDropCountTwinSyncSse();

  static DroppableTwinSyncSse newTwinSyncSse() => RustLib.instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDroppableTwinSyncSseNewTwinSyncSse();

  void simpleMethodTwinSyncSse() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDroppableTwinSyncSseSimpleMethodTwinSyncSse(
        that: this,
      );
}

class DROP_COUNT {
  final void privateField;

  const DROP_COUNT({
    required this.privateField,
  });

  Future<void> deref() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDropCountDeref(
        that: this,
      );

  Future<void> deref() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDropCountDeref(
        that: this,
      );

  Future<void> deref() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDropCountDeref(
        that: this,
      );

  Future<void> deref() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDropCountDeref(
        that: this,
      );

  Future<void> deref() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDropCountDeref(
        that: this,
      );

  Future<void> deref() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncSseDropCountDeref(
        that: this,
      );

  static Future<void> initialize({required DROP_COUNT lazy}) => RustLib
      .instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDropCountInitialize(lazy: lazy);

  static Future<void> initialize({required DROP_COUNT lazy}) => RustLib
      .instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDropCountInitialize(lazy: lazy);

  static Future<void> initialize({required DROP_COUNT lazy}) => RustLib
      .instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDropCountInitialize(lazy: lazy);

  static Future<void> initialize({required DROP_COUNT lazy}) => RustLib
      .instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDropCountInitialize(lazy: lazy);

  static Future<void> initialize({required DROP_COUNT lazy}) => RustLib
      .instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDropCountInitialize(lazy: lazy);

  static Future<void> initialize({required DROP_COUNT lazy}) => RustLib
      .instance.api
      .crateApiPseudoManualDroppingTwinSyncSseDropCountInitialize(lazy: lazy);

  @override
  int get hashCode => privateField.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DROP_COUNT &&
          runtimeType == other.runtimeType &&
          privateField == other.privateField;
}
