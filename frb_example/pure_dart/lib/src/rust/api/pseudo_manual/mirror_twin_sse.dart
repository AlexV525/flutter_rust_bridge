// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.30.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'mirror_twin_sync_sse.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `MirrorStructTwinSse` is not used by any `pub` functions, thus it is ignored.

Future<ApplicationSettings> getAppSettingsTwinSse({dynamic hint}) =>
    RustLib.instance.api.getAppSettingsTwinSse(hint: hint);

Future<ApplicationSettings> getFallibleAppSettingsTwinSse({dynamic hint}) =>
    RustLib.instance.api.getFallibleAppSettingsTwinSse(hint: hint);

Future<bool> isAppEmbeddedTwinSse(
        {required ApplicationSettings appSettings, dynamic hint}) =>
    RustLib.instance.api
        .isAppEmbeddedTwinSse(appSettings: appSettings, hint: hint);

Future<void> appSettingsStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.appSettingsStreamTwinSse(sink: sink, hint: hint);

Future<void> appSettingsVecStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.appSettingsVecStreamTwinSse(sink: sink, hint: hint);

Future<void> mirrorStructStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorStructStreamTwinSse(sink: sink, hint: hint);

Future<void> mirrorTupleStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorTupleStreamTwinSse(sink: sink, hint: hint);

Future<ApplicationMessage> getMessageTwinSse({dynamic hint}) =>
    RustLib.instance.api.getMessageTwinSse(hint: hint);

Future<Numbers> repeatNumberTwinSse(
        {required int num, required int times, dynamic hint}) =>
    RustLib.instance.api
        .repeatNumberTwinSse(num: num, times: times, hint: hint);

Future<Sequences> repeatSequenceTwinSse(
        {required int seq, required int times, dynamic hint}) =>
    RustLib.instance.api
        .repeatSequenceTwinSse(seq: seq, times: times, hint: hint);

Future<int?> firstNumberTwinSse({required Numbers nums, dynamic hint}) =>
    RustLib.instance.api.firstNumberTwinSse(nums: nums, hint: hint);

Future<int?> firstSequenceTwinSse({required Sequences seqs, dynamic hint}) =>
    RustLib.instance.api.firstSequenceTwinSse(seqs: seqs, hint: hint);

Future<RawStringMirrored> testRawStringMirroredTwinSse({dynamic hint}) =>
    RustLib.instance.api.testRawStringMirroredTwinSse(hint: hint);

Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api.testNestedRawStringMirroredTwinSse(hint: hint);

Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinSse(
        {required bool nested, dynamic hint}) =>
    RustLib.instance.api
        .testRawStringEnumMirroredTwinSse(nested: nested, hint: hint);

Future<ListOfNestedRawStringMirrored> testListOfRawNestedStringMirroredTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api.testListOfRawNestedStringMirroredTwinSse(hint: hint);

Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api.testFallibleOfRawStringMirroredTwinSse(hint: hint);

Future<List<RawStringEnumMirrored>> testListOfNestedEnumsMirroredTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api.testListOfNestedEnumsMirroredTwinSse(hint: hint);

Future<ContainsMirroredSubStructTwinSse> testContainsMirroredSubStructTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api.testContainsMirroredSubStructTwinSse(hint: hint);

Future<StructWithHashMap> testHashmapWithMirroredValueTwinSse({dynamic hint}) =>
    RustLib.instance.api.testHashmapWithMirroredValueTwinSse(hint: hint);

Future<void> mirrorEnumStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorEnumStreamTwinSse(sink: sink, hint: hint);

Future<void> mirrorOptionEnumStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorOptionEnumStreamTwinSse(sink: sink, hint: hint);

Future<void> mirrorVecEnumStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorVecEnumStreamTwinSse(sink: sink, hint: hint);

Future<void> mirrorMapEnumStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorMapEnumStreamTwinSse(sink: sink, hint: hint);

Future<void> mirrorSetEnumStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorSetEnumStreamTwinSse(sink: sink, hint: hint);

Future<void> mirrorArrayEnumStreamTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.mirrorArrayEnumStreamTwinSse(sink: sink, hint: hint);

class AnotherTwinSse {
  final String a;

  const AnotherTwinSse({
    required this.a,
  });

  @override
  int get hashCode => a.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AnotherTwinSse &&
          runtimeType == other.runtimeType &&
          a == other.a;
}

class ContainsMirroredSubStructTwinSse {
  final RawStringMirrored test;
  final AnotherTwinSse test2;

  const ContainsMirroredSubStructTwinSse({
    required this.test,
    required this.test2,
  });

  @override
  int get hashCode => test.hashCode ^ test2.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ContainsMirroredSubStructTwinSse &&
          runtimeType == other.runtimeType &&
          test == other.test &&
          test2 == other.test2;
}
