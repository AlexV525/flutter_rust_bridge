// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.18.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleOptionalBasicTypeI8TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI8TwinNormal(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI16TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI16TwinNormal(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI32TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI32TwinNormal(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI64TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI64TwinNormal(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU8TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU8TwinNormal(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU16TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU16TwinNormal(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU32TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU32TwinNormal(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU64TwinNormal({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU64TwinNormal(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF32TwinNormal(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF32TwinNormal(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF64TwinNormal(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF64TwinNormal(arg: arg, hint: hint);

Future<bool?> exampleOptionalBasicTypeBoolTwinNormal(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeBoolTwinNormal(arg: arg, hint: hint);
