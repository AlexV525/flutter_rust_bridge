// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.18.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleOptionalBasicTypeI8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI8TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI16TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI32TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI64TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI64TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU8TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU16TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU32TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU64TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU64TwinRustAsync(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF32TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF32TwinRustAsync(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF64TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF64TwinRustAsync(arg: arg, hint: hint);

Future<bool?> exampleOptionalBasicTypeBoolTwinRustAsync(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeBoolTwinRustAsync(arg: arg, hint: hint);
