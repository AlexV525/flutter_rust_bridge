// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.18.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleOptionalBasicTypeI8TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI8TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI16TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI16TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI32TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI32TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI64TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI64TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU8TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU8TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU16TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU16TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU32TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU32TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU64TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU64TwinRustAsyncSse(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF32TwinRustAsyncSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF32TwinRustAsyncSse(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF64TwinRustAsyncSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF64TwinRustAsyncSse(arg: arg, hint: hint);

Future<bool?> exampleOptionalBasicTypeBoolTwinRustAsyncSse(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeBoolTwinRustAsyncSse(arg: arg, hint: hint);
