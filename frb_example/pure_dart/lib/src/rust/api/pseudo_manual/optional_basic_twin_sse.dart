// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.18.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleOptionalBasicTypeI8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI8TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI16TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI32TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeI64TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeI64TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU8TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU16TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU32TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalBasicTypeU64TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeU64TwinSse(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF32TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF32TwinSse(arg: arg, hint: hint);

Future<double?> exampleOptionalBasicTypeF64TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeF64TwinSse(arg: arg, hint: hint);

Future<bool?> exampleOptionalBasicTypeBoolTwinSse({bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalBasicTypeBoolTwinSse(arg: arg, hint: hint);
