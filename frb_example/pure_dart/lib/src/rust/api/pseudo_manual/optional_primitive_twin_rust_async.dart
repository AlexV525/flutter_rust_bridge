// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.6.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleOptionalPrimitiveTypeI8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI8TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI16TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI32TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI64TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI64TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU8TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU16TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU32TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU64TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU64TwinRustAsync(arg: arg, hint: hint);

Future<double?> exampleOptionalPrimitiveTypeF32TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeF32TwinRustAsync(arg: arg, hint: hint);

Future<double?> exampleOptionalPrimitiveTypeF64TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeF64TwinRustAsync(arg: arg, hint: hint);

Future<bool?> exampleOptionalPrimitiveTypeBoolTwinRustAsync(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeBoolTwinRustAsync(arg: arg, hint: hint);
