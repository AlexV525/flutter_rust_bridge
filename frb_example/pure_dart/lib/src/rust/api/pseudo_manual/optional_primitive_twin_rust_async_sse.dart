// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.6.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleOptionalPrimitiveTypeI8TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI8TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI16TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI16TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI32TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI32TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI64TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI64TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU8TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU8TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU16TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU16TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU32TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU32TwinRustAsyncSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU64TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU64TwinRustAsyncSse(arg: arg, hint: hint);

Future<double?> exampleOptionalPrimitiveTypeF32TwinRustAsyncSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeF32TwinRustAsyncSse(arg: arg, hint: hint);

Future<double?> exampleOptionalPrimitiveTypeF64TwinRustAsyncSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeF64TwinRustAsyncSse(arg: arg, hint: hint);

Future<bool?> exampleOptionalPrimitiveTypeBoolTwinRustAsyncSse(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeBoolTwinRustAsyncSse(arg: arg, hint: hint);
