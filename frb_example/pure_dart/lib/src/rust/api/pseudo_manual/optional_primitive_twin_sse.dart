// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.8.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleOptionalPrimitiveTypeI8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI8TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI16TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI32TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeI64TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeI64TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU8TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU16TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU32TwinSse(arg: arg, hint: hint);

Future<int?> exampleOptionalPrimitiveTypeU64TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeU64TwinSse(arg: arg, hint: hint);

Future<double?> exampleOptionalPrimitiveTypeF32TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeF32TwinSse(arg: arg, hint: hint);

Future<double?> exampleOptionalPrimitiveTypeF64TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeF64TwinSse(arg: arg, hint: hint);

Future<bool?> exampleOptionalPrimitiveTypeBoolTwinSse(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleOptionalPrimitiveTypeBoolTwinSse(arg: arg, hint: hint);
