// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.8.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int> examplePrimitiveTypeI8TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api.examplePrimitiveTypeI8TwinNormal(arg: arg, hint: hint);

Future<int> examplePrimitiveTypeI16TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeI16TwinNormal(arg: arg, hint: hint);

Future<int> examplePrimitiveTypeI32TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeI32TwinNormal(arg: arg, hint: hint);

Future<int> examplePrimitiveTypeI64TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeI64TwinNormal(arg: arg, hint: hint);

Future<int> examplePrimitiveTypeU8TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api.examplePrimitiveTypeU8TwinNormal(arg: arg, hint: hint);

Future<int> examplePrimitiveTypeU16TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeU16TwinNormal(arg: arg, hint: hint);

Future<int> examplePrimitiveTypeU32TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeU32TwinNormal(arg: arg, hint: hint);

Future<int> examplePrimitiveTypeU64TwinNormal(
        {required int arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeU64TwinNormal(arg: arg, hint: hint);

Future<double> examplePrimitiveTypeF32TwinNormal(
        {required double arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeF32TwinNormal(arg: arg, hint: hint);

Future<double> examplePrimitiveTypeF64TwinNormal(
        {required double arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeF64TwinNormal(arg: arg, hint: hint);

Future<bool> examplePrimitiveTypeBoolTwinNormal(
        {required bool arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveTypeBoolTwinNormal(arg: arg, hint: hint);
