// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<Int8List> examplePrimitiveListTypeI8TwinSse(
        {required Int8List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeI8TwinSse(arg: arg, hint: hint);

Future<Int16List> examplePrimitiveListTypeI16TwinSse(
        {required Int16List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeI16TwinSse(arg: arg, hint: hint);

Future<Int32List> examplePrimitiveListTypeI32TwinSse(
        {required Int32List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeI32TwinSse(arg: arg, hint: hint);

Future<Int64List> examplePrimitiveListTypeI64TwinSse(
        {required Int64List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeI64TwinSse(arg: arg, hint: hint);

Future<Uint8List> examplePrimitiveListTypeU8TwinSse(
        {required Uint8List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeU8TwinSse(arg: arg, hint: hint);

Future<Uint16List> examplePrimitiveListTypeU16TwinSse(
        {required Uint16List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeU16TwinSse(arg: arg, hint: hint);

Future<Uint32List> examplePrimitiveListTypeU32TwinSse(
        {required Uint32List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeU32TwinSse(arg: arg, hint: hint);

Future<Uint64List> examplePrimitiveListTypeU64TwinSse(
        {required Uint64List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeU64TwinSse(arg: arg, hint: hint);

Future<Float32List> examplePrimitiveListTypeF32TwinSse(
        {required Float32List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeF32TwinSse(arg: arg, hint: hint);

Future<Float64List> examplePrimitiveListTypeF64TwinSse(
        {required Float64List arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeF64TwinSse(arg: arg, hint: hint);

Future<List<bool>> examplePrimitiveListTypeBoolTwinSse(
        {required List<bool> arg, dynamic hint}) =>
    RustLib.instance.api
        .examplePrimitiveListTypeBoolTwinSse(arg: arg, hint: hint);
