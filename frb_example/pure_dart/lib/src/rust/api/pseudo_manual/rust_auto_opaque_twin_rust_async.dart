// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: invalid_use_of_internal_member, unused_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> rustAutoOpaqueArgOwnTwinRustAsync(
        {required RwLockNonCloneSimpleTwinRustAsync arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgOwnTwinRustAsync(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgBorrowTwinRustAsync(
        {required RwLockNonCloneSimpleTwinRustAsync arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgBorrowTwinRustAsync(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsync(
        {required RwLockNonCloneSimpleTwinRustAsync arg,
        required int expect,
        required int adder,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgMutBorrowTwinRustAsync(
        arg: arg, expect: expect, adder: adder, hint: hint);

Future<RwLockNonCloneSimpleTwinRustAsync> rustAutoOpaqueReturnOwnTwinRustAsync(
        {required int initial, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueReturnOwnTwinRustAsync(initial: initial, hint: hint);

Future<RwLockNonCloneSimpleTwinRustAsync>
    rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
            {required RwLockNonCloneSimpleTwinRustAsync arg, dynamic hint}) =>
        RustLib.instance.api.rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
            arg: arg, hint: hint);

Future<void> rustAutoOpaqueTwoArgsTwinRustAsync(
        {required RwLockNonCloneSimpleTwinRustAsync a,
        required RwLockNonCloneSimpleTwinRustAsync b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTwoArgsTwinRustAsync(a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
        {required RwLockNonCloneSimpleTwinRustAsync a,
        required String b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(a: a, b: b, hint: hint);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinRustAsync(
        {required RwLockBoxMyTraitTwinRustAsync arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaquePlusSignArgTwinRustAsync(arg: arg, hint: hint);

Future<RwLockBoxMyTraitTwinRustAsync> rustAutoOpaquePlusSignReturnTwinRustAsync(
        {dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaquePlusSignReturnTwinRustAsync(hint: hint);

Future<void> rustAutoOpaqueCallableArgTwinRustAsync(
        {required RwLockBoxFnStringString arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableArgTwinRustAsync(arg: arg, hint: hint);

Future<RwLockBoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsync(
        {dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueCallableReturnTwinRustAsync(hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
        {required RwLockBoxHelloTraitTwinRustAsync arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
        {required RwLockBoxHelloTraitTwinRustAsync arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
        {required RwLockBoxHelloTraitTwinRustAsync arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
        arg: arg, expect: expect, hint: hint);

Future<RwLockBoxHelloTraitTwinRustAsync>
    rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync(hint: hint);

Future<RwLockBoxHelloTraitTwinRustAsync>
    rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync(hint: hint);

Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
        {required RwLockStructWithGoodAndOpaqueFieldTwinRustAsync arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
            arg: arg, hint: hint);

Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsync(
        {required RwLockStructWithGoodAndOpaqueFieldTwinRustAsync arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsync(
            arg: arg, hint: hint);

Future<
    void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsync(
        {required RwLockStructWithGoodAndOpaqueFieldTwinRustAsync arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsync(
            arg: arg, hint: hint);

Future<RwLockStructWithGoodAndOpaqueFieldTwinRustAsync>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync(
                hint: hint);

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn Fn (String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>>>
@sealed
class RwLockBoxFnStringString extends RustOpaque {
  RwLockBoxFnStringString.fromWire(dynamic wire)
      : super.fromWire(wire, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_RwLockBoxFnStringString,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_RwLockBoxFnStringString,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxFnStringStringPtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinRustAsync>>>
@sealed
class RwLockBoxHelloTraitTwinRustAsync extends RustOpaque {
  RwLockBoxHelloTraitTwinRustAsync.fromWire(dynamic wire)
      : super.fromWire(wire, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinRustAsyncPtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinRustAsync + Send + Sync>>>
@sealed
class RwLockBoxMyTraitTwinRustAsync extends RustOpaque {
  RwLockBoxMyTraitTwinRustAsync.fromWire(dynamic wire)
      : super.fromWire(wire, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockBoxMyTraitTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinRustAsyncPtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinRustAsync>>
@sealed
class RwLockNonCloneSimpleTwinRustAsync extends RustOpaque {
  RwLockNonCloneSimpleTwinRustAsync.fromWire(dynamic wire)
      : super.fromWire(wire, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinRustAsyncPtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsync({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinRustAsync({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinRustAsync({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
        that: this,
      );

  Future<RwLockNonCloneSimpleTwinRustAsync>
      instanceMethodReturnOwnTwinRustAsync({dynamic hint}) =>
          RustLib.instance.api
              .nonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
            that: this,
          );

  /// named constructor
  static Future<RwLockNonCloneSimpleTwinRustAsync> newCustomNameTwinRustAsync(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync(hint: hint);

  /// unnamed constructor
  static Future<RwLockNonCloneSimpleTwinRustAsync> newTwinRustAsync(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncNewTwinRustAsync(hint: hint);

  static Future<void> staticMethodArgBorrowTwinRustAsync(
          {required RwLockNonCloneSimpleTwinRustAsync arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgMutBorrowTwinRustAsync(
          {required RwLockNonCloneSimpleTwinRustAsync arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgOwnTwinRustAsync(
          {required RwLockNonCloneSimpleTwinRustAsync arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
              arg: arg, hint: hint);

  static Future<RwLockNonCloneSimpleTwinRustAsync>
      staticMethodReturnOwnTwinRustAsync({dynamic hint}) => RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync(
              hint: hint);
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinRustAsync>>
@sealed
class RwLockStructWithGoodAndOpaqueFieldTwinRustAsync extends RustOpaque {
  RwLockStructWithGoodAndOpaqueFieldTwinRustAsync.fromWire(dynamic wire)
      : super.fromWire(wire, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinRustAsyncPtr,
  );
}
