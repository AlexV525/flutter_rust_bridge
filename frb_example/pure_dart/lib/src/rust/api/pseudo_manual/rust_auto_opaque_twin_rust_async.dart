// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'rust_auto_opaque_twin_moi.dart';
part 'rust_auto_opaque_twin_rust_async.freezed.dart';

// The type `HelloOneStructTwinRustAsync` is not used by any `pub` functions, thus it is ignored.
// The type `HelloTwoEnumTwinRustAsync` is not used by any `pub` functions, thus it is ignored.
// The functions `f`, `func_hello`, `func_hello` are not `pub`, thus are ignored.

Future<void> rustAutoOpaqueArgOwnTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync arg, required int expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsync(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueArgBorrowTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync arg, required int expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsync(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync arg,
        required int expect,
        required int adder}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsync(
            arg: arg, expect: expect, adder: adder);

Future<NonCloneSimpleTwinRustAsync> rustAutoOpaqueReturnOwnTwinRustAsync(
        {required int initial}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsync(
            initial: initial);

Future<
    NonCloneSimpleTwinRustAsync> rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
            arg: arg);

Future<void> rustAutoOpaqueTwoArgsTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync a,
        required NonCloneSimpleTwinRustAsync b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsync(
            a: a, b: b);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync a, required String b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
            a: a, b: b);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinRustAsync(
        {required BoxMyTraitTwinRustAsync arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsync(
            arg: arg);

Future<BoxMyTraitTwinRustAsync> rustAutoOpaquePlusSignReturnTwinRustAsync() =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsync();

Future<void> rustAutoOpaqueCallableArgTwinRustAsync(
        {required BoxFnStringString arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsync(
            arg: arg);

Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsync() => RustLib
    .instance.api
    .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsync();

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
        {required BoxHelloTraitTwinRustAsync arg, required String expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
        {required BoxHelloTraitTwinRustAsync arg, required String expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
        {required BoxHelloTraitTwinRustAsync arg, required String expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
            arg: arg, expect: expect);

Future<BoxHelloTraitTwinRustAsync>
    rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync();

Future<BoxHelloTraitTwinRustAsync>
    rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync();

Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
        {required StructWithGoodAndOpaqueFieldTwinRustAsync arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
            arg: arg);

Future<StructWithGoodAndOpaqueFieldTwinRustAsync>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync();

Future<void> rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsync(
        {required EnumWithGoodAndOpaqueTwinRustAsync arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsync(
            arg: arg);

Future<EnumWithGoodAndOpaqueTwinRustAsync>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsync() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsync();

Future<EnumWithGoodAndOpaqueTwinRustAsync>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsync() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsync();

Future<void> rustAutoOpaqueDummyTwinRustAsync(
        {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync a,
        required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsync(
            a: a, b: b);

Future<void> rustAutoOpaqueEnumArgBorrowTwinRustAsync(
        {required NonCloneSimpleEnumTwinRustAsync arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsync(
            arg: arg);

Future<NonCloneSimpleEnumTwinRustAsync>
    rustAutoOpaqueEnumReturnOwnTwinRustAsync() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsync();

Stream<NonCloneSimpleTwinRustAsync> rustAutoOpaqueStreamSinkTwinRustAsync() =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsync();

Future<void> rustAutoOpaqueArgVecOwnTwinRustAsync(
        {required List<NonCloneSimpleTwinRustAsync> arg,
        required List<int> expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsync(
            arg: arg, expect: expect);

Future<List<NonCloneSimpleTwinRustAsync>>
    rustAutoOpaqueReturnVecOwnTwinRustAsync() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsync();

Future<void> rustAutoOpaqueExplicitArgTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync arg, required int expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsync(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueExplicitStructTwinRustAsync(
        {required StructWithExplicitAutoOpaqueFieldTwinRustAsync arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsync(
            arg: arg);

Future<StructWithExplicitAutoOpaqueFieldTwinRustAsync>
    rustAutoOpaqueExplicitReturnStructTwinRustAsync() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnStructTwinRustAsync();

Future<NonCloneSimpleTwinRustAsync> rustAutoOpaqueExplicitReturnTwinRustAsync(
        {required int initial}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsync(
            initial: initial);

Future<int> rustAutoOpaqueSleepTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync apple,
        required NonCloneSimpleTwinRustAsync orange}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsync(
            apple: apple, orange: orange);

Future<(OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync)>
    rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync();

Future<OpaqueTwoTwinRustAsync> rustAutoOpaqueReturnOpaqueTwoTwinRustAsync() =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsync();

Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync borrow,
        required NonCloneSimpleTwinRustAsync mutBorrow}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
            borrow: borrow, mutBorrow: mutBorrow);

Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsync(
        {required NonCloneSimpleTwinRustAsync a,
        required NonCloneSimpleTwinRustAsync b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsync(
            a: a, b: b);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn HelloTraitTwinRustAsync >>>
@sealed
class BoxHelloTraitTwinRustAsync extends RustOpaque {
  // Not to be used by end users
  BoxHelloTraitTwinRustAsync.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxHelloTraitTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncPtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn MyTraitTwinRustAsync + Send + Sync >>>
@sealed
class BoxMyTraitTwinRustAsync extends RustOpaque {
  // Not to be used by end users
  BoxMyTraitTwinRustAsync.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxMyTraitTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncPtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync>>
@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync extends RustOpaque {
  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncPtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleEnumTwinRustAsync>>
@sealed
class NonCloneSimpleEnumTwinRustAsync extends RustOpaque {
  // Not to be used by end users
  NonCloneSimpleEnumTwinRustAsync.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleEnumTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncPtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleTwinRustAsync>>
@sealed
class NonCloneSimpleTwinRustAsync extends RustOpaque {
  // Not to be used by end users
  NonCloneSimpleTwinRustAsync.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncPtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
        that: this,
      );

  Future<int> get instanceMethodGetterTwinRustAsync => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
        that: this,
      );

  Future<NonCloneSimpleTwinRustAsync> instanceMethodReturnOwnTwinRustAsync() =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
        that: this,
      );

  /// named constructor
  static Future<NonCloneSimpleTwinRustAsync> newCustomNameTwinRustAsync() =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync();

  /// unnamed constructor
  static Future<NonCloneSimpleTwinRustAsync> newTwinRustAsync() => RustLib
      .instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsync();

  /// constructor with Result
  static Future<NonCloneSimpleTwinRustAsync> newWithResultTwinRustAsync() =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsync();

  static Future<void> staticMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
              arg: arg);

  static Future<void> staticMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
              arg: arg);

  static Future<void> staticMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
              arg: arg);

  static Future<NonCloneSimpleTwinRustAsync>
      staticMethodReturnOwnTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueOneTwinRustAsync>>
@sealed
class OpaqueOneTwinRustAsync extends RustOpaque {
  // Not to be used by end users
  OpaqueOneTwinRustAsync.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueOneTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueOneTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncPtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueTwoTwinRustAsync>>
@sealed
class OpaqueTwoTwinRustAsync extends RustOpaque {
  // Not to be used by end users
  OpaqueTwoTwinRustAsync.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueTwoTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncPtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync>>
@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
    extends RustOpaque {
  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncPtr,
  );

  String get good => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncGetGood(
        that: this,
      );

  void set good(String good) => RustLib.instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSetGood(
          that: this, good: good);
}

@freezed
sealed class EnumWithGoodAndOpaqueTwinRustAsync
    with _$EnumWithGoodAndOpaqueTwinRustAsync {
  const EnumWithGoodAndOpaqueTwinRustAsync._();

  const factory EnumWithGoodAndOpaqueTwinRustAsync.good(
    String field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsync_Good;
  const factory EnumWithGoodAndOpaqueTwinRustAsync.opaque(
    NonCloneSimpleTwinRustAsync field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsync_Opaque;
}

class StructWithExplicitAutoOpaqueFieldTwinRustAsync {
  final NonCloneSimpleTwinRustAsync autoOpaque;
  final int normal;

  const StructWithExplicitAutoOpaqueFieldTwinRustAsync({
    required this.autoOpaque,
    required this.normal,
  });

  @override
  int get hashCode => autoOpaque.hashCode ^ normal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithExplicitAutoOpaqueFieldTwinRustAsync &&
          runtimeType == other.runtimeType &&
          autoOpaque == other.autoOpaque &&
          normal == other.normal;
}

class StructWithGoodAndOpaqueFieldTwinRustAsync {
  final String good;
  final NonCloneSimpleTwinRustAsync opaque;
  final NonCloneSimpleTwinRustAsync? optionOpaque;

  const StructWithGoodAndOpaqueFieldTwinRustAsync({
    required this.good,
    required this.opaque,
    this.optionOpaque,
  });

  @override
  int get hashCode => good.hashCode ^ opaque.hashCode ^ optionOpaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithGoodAndOpaqueFieldTwinRustAsync &&
          runtimeType == other.runtimeType &&
          good == other.good &&
          opaque == other.opaque &&
          optionOpaque == other.optionOpaque;
}
