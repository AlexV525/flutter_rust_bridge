// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'rust_auto_opaque_twin_rust_async.dart';

Future<void> rustAutoOpaqueArgOwnTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgOwnTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        required int adder,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgMutBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, adder: adder, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSse> rustAutoOpaqueReturnOwnTwinRustAsyncSse(
        {required int initial, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueReturnOwnTwinRustAsyncSse(initial: initial, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSse>
    rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSse(
            {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
        RustLib.instance.api.rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<void> rustAutoOpaqueTwoArgsTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a,
        required NonCloneSimpleTwinRustAsyncSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTwoArgsTwinRustAsyncSse(a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a,
        required String b,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSse(
        a: a, b: b, hint: hint);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinRustAsyncSse(
        {required BoxMyTraitTwinRustAsyncSse arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaquePlusSignArgTwinRustAsyncSse(arg: arg, hint: hint);

Future<BoxMyTraitTwinRustAsyncSse> rustAutoOpaquePlusSignReturnTwinRustAsyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaquePlusSignReturnTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueCallableArgTwinRustAsyncSse(
        {required BoxFnStringString arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableArgTwinRustAsyncSse(arg: arg, hint: hint);

Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableReturnTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<BoxHelloTraitTwinRustAsyncSse>
    rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSse(hint: hint);

Future<BoxHelloTraitTwinRustAsyncSse>
    rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSse(
        {required StructWithGoodAndOpaqueFieldTwinRustAsyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<
    void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncSse(
        {required StructWithGoodAndOpaqueFieldTwinRustAsyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<
    void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncSse(
        {required StructWithGoodAndOpaqueFieldTwinRustAsyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<StructWithGoodAndOpaqueFieldTwinRustAsyncSse>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSse(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSse(
                hint: hint);

Future<OpaqueOneTwinRustAsyncSseOpaqueTwoTwinRustAsyncSse>
    rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSse(hint: hint);

Future<OpaqueTwoTwinRustAsyncSse> rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSse(hint: hint);

// Rust type: flutter_rust_bridge::RustOpaque<flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncSse>>, StdArc<_>>
@sealed
class BoxHelloTraitTwinRustAsyncSse extends RustOpaque {
  BoxHelloTraitTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxHelloTraitTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSsePtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>>, StdArc<_>>
@sealed
class BoxMyTraitTwinRustAsyncSse extends RustOpaque {
  BoxMyTraitTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxMyTraitTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxMyTraitTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSsePtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>, StdArc<_>>
@sealed
class NonCloneSimpleTwinRustAsyncSse extends RustOpaque {
  NonCloneSimpleTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSsePtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodArgBorrowTwinRustAsyncSse(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinRustAsyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodArgMutBorrowTwinRustAsyncSse(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinRustAsyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodArgOwnTwinRustAsyncSse(
        that: this,
      );

  Future<int> get instanceMethodGetterTwinRustAsyncSse => RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodGetterTwinRustAsyncSse(
        that: this,
      );

  Future<
      NonCloneSimpleTwinRustAsyncSse> instanceMethodReturnOwnTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodReturnOwnTwinRustAsyncSse(
        that: this,
      );

  /// named constructor
  static Future<NonCloneSimpleTwinRustAsyncSse> newCustomNameTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseNewCustomNameTwinRustAsyncSse(
              hint: hint);

  /// unnamed constructor
  static Future<NonCloneSimpleTwinRustAsyncSse> newTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseNewTwinRustAsyncSse(hint: hint);

  /// constructor with Result
  static Future<NonCloneSimpleTwinRustAsyncSse> newWithResultTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseNewWithResultTwinRustAsyncSse(
              hint: hint);

  static Future<void> staticMethodArgBorrowTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodArgBorrowTwinRustAsyncSse(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgMutBorrowTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodArgMutBorrowTwinRustAsyncSse(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgOwnTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodArgOwnTwinRustAsyncSse(
              arg: arg, hint: hint);

  static Future<NonCloneSimpleTwinRustAsyncSse>
      staticMethodReturnOwnTwinRustAsyncSse({dynamic hint}) => RustLib
          .instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodReturnOwnTwinRustAsyncSse(
              hint: hint);
}

// Rust type: flutter_rust_bridge::RustOpaque<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinRustAsyncSse>, StdArc<_>>
@sealed
class StructWithGoodAndOpaqueFieldTwinRustAsyncSse extends RustOpaque {
  StructWithGoodAndOpaqueFieldTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  StructWithGoodAndOpaqueFieldTwinRustAsyncSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncSsePtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueOneTwinRustAsyncSse,crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueTwoTwinRustAsyncSse,)>, StdArc<_>>
@sealed
class OpaqueOneTwinRustAsyncSseOpaqueTwoTwinRustAsyncSse extends RustOpaque {
  OpaqueOneTwinRustAsyncSseOpaqueTwoTwinRustAsyncSse.dcoDecode(
      List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueOneTwinRustAsyncSseOpaqueTwoTwinRustAsyncSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncSseOpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSseOpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSseOpaqueTwoTwinRustAsyncSsePtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueTwoTwinRustAsyncSse>, StdArc<_>>
@sealed
class OpaqueTwoTwinRustAsyncSse extends RustOpaque {
  OpaqueTwoTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueTwoTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSsePtr,
  );
}
