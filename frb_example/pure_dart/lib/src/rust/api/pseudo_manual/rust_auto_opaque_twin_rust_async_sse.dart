// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'rust_auto_opaque_twin_moi.dart';
part 'rust_auto_opaque_twin_rust_async_sse.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `f`, `func_hello`, `func_hello`
// These types are ignored because they are not used by any `pub` functions: `HelloOneStructTwinRustAsyncSse`, `HelloTwoEnumTwinRustAsyncSse`

Future<void> rustAutoOpaqueArgOwnTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg, required int expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueArgOwnTwinRustAsyncSse(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueArgBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg, required int expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueArgBorrowTwinRustAsyncSse(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        required int adder}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueArgMutBorrowTwinRustAsyncSse(
            arg: arg, expect: expect, adder: adder);

Future<NonCloneSimpleTwinRustAsyncSse> rustAutoOpaqueReturnOwnTwinRustAsyncSse(
        {required int initial}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueReturnOwnTwinRustAsyncSse(
            initial: initial);

Future<NonCloneSimpleTwinRustAsyncSse>
    rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSse(
            {required NonCloneSimpleTwinRustAsyncSse arg}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSse(
                arg: arg);

Future<void> rustAutoOpaqueTwoArgsTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a,
        required NonCloneSimpleTwinRustAsyncSse b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueTwoArgsTwinRustAsyncSse(
            a: a, b: b);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a, required String b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSse(
            a: a, b: b);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinRustAsyncSse(
        {required BoxMyTraitTwinRustAsyncSse arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaquePlusSignArgTwinRustAsyncSse(
            arg: arg);

Future<BoxMyTraitTwinRustAsyncSse>
    rustAutoOpaquePlusSignReturnTwinRustAsyncSse() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaquePlusSignReturnTwinRustAsyncSse();

Future<void> rustAutoOpaqueCallableArgTwinRustAsyncSse(
        {required BoxFnStringString arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueCallableArgTwinRustAsyncSse(
            arg: arg);

Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsyncSse() => RustLib
    .instance.api
    .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueCallableReturnTwinRustAsyncSse();

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg, required String expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSse(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg, required String expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSse(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg, required String expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSse(
            arg: arg, expect: expect);

Future<BoxHelloTraitTwinRustAsyncSse>
    rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSse() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSse();

Future<BoxHelloTraitTwinRustAsyncSse>
    rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSse() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSse();

Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSse(
        {required StructWithGoodAndOpaqueFieldTwinRustAsyncSse arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSse(
            arg: arg);

Future<StructWithGoodAndOpaqueFieldTwinRustAsyncSse>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSse() =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSse();

Future<void> rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSse(
        {required EnumWithGoodAndOpaqueTwinRustAsyncSse arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSse(
            arg: arg);

Future<EnumWithGoodAndOpaqueTwinRustAsyncSse>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSse() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSse();

Future<EnumWithGoodAndOpaqueTwinRustAsyncSse>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSse() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSse();

Future<void> rustAutoOpaqueDummyTwinRustAsyncSse(
        {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse a,
        required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueDummyTwinRustAsyncSse(
            a: a, b: b);

Future<void> rustAutoOpaqueEnumArgBorrowTwinRustAsyncSse(
        {required NonCloneSimpleEnumTwinRustAsyncSse arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueEnumArgBorrowTwinRustAsyncSse(
            arg: arg);

Future<NonCloneSimpleEnumTwinRustAsyncSse>
    rustAutoOpaqueEnumReturnOwnTwinRustAsyncSse() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueEnumReturnOwnTwinRustAsyncSse();

Stream<NonCloneSimpleTwinRustAsyncSse>
    rustAutoOpaqueStreamSinkTwinRustAsyncSse() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueStreamSinkTwinRustAsyncSse();

Future<void> rustAutoOpaqueArgVecOwnTwinRustAsyncSse(
        {required List<NonCloneSimpleTwinRustAsyncSse> arg,
        required List<int> expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueArgVecOwnTwinRustAsyncSse(
            arg: arg, expect: expect);

Future<List<NonCloneSimpleTwinRustAsyncSse>>
    rustAutoOpaqueReturnVecOwnTwinRustAsyncSse() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueReturnVecOwnTwinRustAsyncSse();

Future<void> rustAutoOpaqueExplicitArgTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg, required int expect}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueExplicitArgTwinRustAsyncSse(
            arg: arg, expect: expect);

Future<void> rustAutoOpaqueExplicitStructTwinRustAsyncSse(
        {required StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse arg}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueExplicitStructTwinRustAsyncSse(
            arg: arg);

Future<StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse>
    rustAutoOpaqueExplicitReturnStructTwinRustAsyncSse() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueExplicitReturnStructTwinRustAsyncSse();

Future<
    NonCloneSimpleTwinRustAsyncSse> rustAutoOpaqueExplicitReturnTwinRustAsyncSse(
        {required int initial}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueExplicitReturnTwinRustAsyncSse(
            initial: initial);

Future<int> rustAutoOpaqueSleepTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse apple,
        required NonCloneSimpleTwinRustAsyncSse orange}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueSleepTwinRustAsyncSse(
            apple: apple, orange: orange);

Future<(OpaqueOneTwinRustAsyncSse, OpaqueTwoTwinRustAsyncSse)>
    rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSse() => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSse();

Future<OpaqueTwoTwinRustAsyncSse>
    rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSse() => RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSse();

Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse borrow,
        required NonCloneSimpleTwinRustAsyncSse mutBorrow}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSse(
            borrow: borrow, mutBorrow: mutBorrow);

Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a,
        required NonCloneSimpleTwinRustAsyncSse b}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseRustAutoOpaqueBorrowAndBorrowTwinRustAsyncSse(
            a: a, b: b);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn HelloTraitTwinRustAsyncSse >>>
@sealed
class BoxHelloTraitTwinRustAsyncSse extends RustOpaque {
  // Not to be used by end users
  BoxHelloTraitTwinRustAsyncSse.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxHelloTraitTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn MyTraitTwinRustAsyncSse + Send + Sync >>>
@sealed
class BoxMyTraitTwinRustAsyncSse extends RustOpaque {
  // Not to be used by end users
  BoxMyTraitTwinRustAsyncSse.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxMyTraitTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxMyTraitTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse>>
@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse extends RustOpaque {
  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleEnumTwinRustAsyncSse>>
@sealed
class NonCloneSimpleEnumTwinRustAsyncSse extends RustOpaque {
  // Not to be used by end users
  NonCloneSimpleEnumTwinRustAsyncSse.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleEnumTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleTwinRustAsyncSse>>
@sealed
class NonCloneSimpleTwinRustAsyncSse extends RustOpaque {
  // Not to be used by end users
  NonCloneSimpleTwinRustAsyncSse.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSsePtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsyncSse() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseInstanceMethodArgBorrowTwinRustAsyncSse(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinRustAsyncSse() =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseInstanceMethodArgMutBorrowTwinRustAsyncSse(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinRustAsyncSse() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseInstanceMethodArgOwnTwinRustAsyncSse(
        that: this,
      );

  Future<int> get instanceMethodGetterTwinRustAsyncSse => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseInstanceMethodGetterTwinRustAsyncSse(
        that: this,
      );

  Future<NonCloneSimpleTwinRustAsyncSse>
      instanceMethodReturnOwnTwinRustAsyncSse() => RustLib.instance.api
              .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseInstanceMethodReturnOwnTwinRustAsyncSse(
            that: this,
          );

  /// named constructor
  static Future<NonCloneSimpleTwinRustAsyncSse>
      newCustomNameTwinRustAsyncSse() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseNewCustomNameTwinRustAsyncSse();

  /// unnamed constructor
  static Future<NonCloneSimpleTwinRustAsyncSse> newTwinRustAsyncSse() => RustLib
      .instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseNewTwinRustAsyncSse();

  /// constructor with Result
  static Future<NonCloneSimpleTwinRustAsyncSse>
      newWithResultTwinRustAsyncSse() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseNewWithResultTwinRustAsyncSse();

  static Future<void> staticMethodArgBorrowTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseStaticMethodArgBorrowTwinRustAsyncSse(
              arg: arg);

  static Future<void> staticMethodArgMutBorrowTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseStaticMethodArgMutBorrowTwinRustAsyncSse(
              arg: arg);

  static Future<void> staticMethodArgOwnTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseStaticMethodArgOwnTwinRustAsyncSse(
              arg: arg);

  static Future<NonCloneSimpleTwinRustAsyncSse>
      staticMethodReturnOwnTwinRustAsyncSse() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseNonCloneSimpleTwinRustAsyncSseStaticMethodReturnOwnTwinRustAsyncSse();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueOneTwinRustAsyncSse>>
@sealed
class OpaqueOneTwinRustAsyncSse extends RustOpaque {
  // Not to be used by end users
  OpaqueOneTwinRustAsyncSse.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueOneTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueTwoTwinRustAsyncSse>>
@sealed
class OpaqueTwoTwinRustAsyncSse extends RustOpaque {
  // Not to be used by end users
  OpaqueTwoTwinRustAsyncSse.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueTwoTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse>>
@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse
    extends RustOpaque {
  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSsePtr,
  );

  String get good => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseGetGood(
        that: this,
      );

  void set good(String good) => RustLib.instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseSetGood(
          that: this, good: good);
}

@freezed
sealed class EnumWithGoodAndOpaqueTwinRustAsyncSse
    with _$EnumWithGoodAndOpaqueTwinRustAsyncSse {
  const EnumWithGoodAndOpaqueTwinRustAsyncSse._();

  const factory EnumWithGoodAndOpaqueTwinRustAsyncSse.good(
    String field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSse_Good;
  const factory EnumWithGoodAndOpaqueTwinRustAsyncSse.opaque(
    NonCloneSimpleTwinRustAsyncSse field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSse_Opaque;
}

class StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {
  final NonCloneSimpleTwinRustAsyncSse autoOpaque;
  final int normal;

  const StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse({
    required this.autoOpaque,
    required this.normal,
  });

  @override
  int get hashCode => autoOpaque.hashCode ^ normal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse &&
          runtimeType == other.runtimeType &&
          autoOpaque == other.autoOpaque &&
          normal == other.normal;
}

class StructWithGoodAndOpaqueFieldTwinRustAsyncSse {
  final String good;
  final NonCloneSimpleTwinRustAsyncSse opaque;
  final NonCloneSimpleTwinRustAsyncSse? optionOpaque;

  const StructWithGoodAndOpaqueFieldTwinRustAsyncSse({
    required this.good,
    required this.opaque,
    this.optionOpaque,
  });

  @override
  int get hashCode => good.hashCode ^ opaque.hashCode ^ optionOpaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithGoodAndOpaqueFieldTwinRustAsyncSse &&
          runtimeType == other.runtimeType &&
          good == other.good &&
          opaque == other.opaque &&
          optionOpaque == other.optionOpaque;
}
