// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'rust_auto_opaque_twin_sse.dart';

void rustAutoOpaqueArgOwnTwinSyncSse(
        {required RwLockNonCloneSimpleTwinSyncSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueArgOwnTwinSyncSse(arg: arg, expect: expect, hint: hint);

void rustAutoOpaqueArgBorrowTwinSyncSse(
        {required RwLockNonCloneSimpleTwinSyncSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgBorrowTwinSyncSse(
        arg: arg, expect: expect, hint: hint);

void rustAutoOpaqueArgMutBorrowTwinSyncSse(
        {required RwLockNonCloneSimpleTwinSyncSse arg,
        required int expect,
        required int adder,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgMutBorrowTwinSyncSse(
        arg: arg, expect: expect, adder: adder, hint: hint);

RwLockNonCloneSimpleTwinSyncSse rustAutoOpaqueReturnOwnTwinSyncSse(
        {required int initial, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueReturnOwnTwinSyncSse(initial: initial, hint: hint);

RwLockNonCloneSimpleTwinSyncSse rustAutoOpaqueArgOwnAndReturnOwnTwinSyncSse(
        {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueArgOwnAndReturnOwnTwinSyncSse(arg: arg, hint: hint);

void rustAutoOpaqueTwoArgsTwinSyncSse(
        {required RwLockNonCloneSimpleTwinSyncSse a,
        required RwLockNonCloneSimpleTwinSyncSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTwoArgsTwinSyncSse(a: a, b: b, hint: hint);

void rustAutoOpaqueNormalAndOpaqueArgTwinSyncSse(
        {required RwLockNonCloneSimpleTwinSyncSse a,
        required String b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueNormalAndOpaqueArgTwinSyncSse(a: a, b: b, hint: hint);

/// "+" inside the type signature
void rustAutoOpaquePlusSignArgTwinSyncSse(
        {required RwLockBoxMyTraitTwinSyncSse arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaquePlusSignArgTwinSyncSse(arg: arg, hint: hint);

RwLockBoxMyTraitTwinSyncSse rustAutoOpaquePlusSignReturnTwinSyncSse(
        {dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaquePlusSignReturnTwinSyncSse(hint: hint);

void rustAutoOpaqueCallableArgTwinSyncSse(
        {required RwLockBoxFnStringString arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableArgTwinSyncSse(arg: arg, hint: hint);

RwLockBoxFnStringString rustAutoOpaqueCallableReturnTwinSyncSse(
        {dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueCallableReturnTwinSyncSse(hint: hint);

void rustAutoOpaqueTraitObjectArgOwnTwinSyncSse(
        {required RwLockBoxHelloTraitTwinSyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgOwnTwinSyncSse(
        arg: arg, expect: expect, hint: hint);

void rustAutoOpaqueTraitObjectArgBorrowTwinSyncSse(
        {required RwLockBoxHelloTraitTwinSyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgBorrowTwinSyncSse(
        arg: arg, expect: expect, hint: hint);

void rustAutoOpaqueTraitObjectArgMutBorrowTwinSyncSse(
        {required RwLockBoxHelloTraitTwinSyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgMutBorrowTwinSyncSse(
        arg: arg, expect: expect, hint: hint);

RwLockBoxHelloTraitTwinSyncSse rustAutoOpaqueTraitObjectReturnOwnOneTwinSyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTraitObjectReturnOwnOneTwinSyncSse(hint: hint);

RwLockBoxHelloTraitTwinSyncSse rustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncSse(hint: hint);

void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncSse(
        {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncSse(
            arg: arg, hint: hint);

void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncSse(
        {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncSse(
            arg: arg, hint: hint);

void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncSse(
        {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncSse(
            arg: arg, hint: hint);

RwLockStructWithGoodAndOpaqueFieldTwinSyncSse
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncSse(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncSse(
                hint: hint);

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSyncSse>>>
@sealed
class RwLockBoxHelloTraitTwinSyncSse extends RustOpaque {
  RwLockBoxHelloTraitTwinSyncSse.dcoDecode(dynamic wire)
      : super.dcoDecode(wire, _kStaticData);

  RwLockBoxHelloTraitTwinSyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinSyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncSsePtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSyncSse + Send + Sync>>>
@sealed
class RwLockBoxMyTraitTwinSyncSse extends RustOpaque {
  RwLockBoxMyTraitTwinSyncSse.dcoDecode(dynamic wire)
      : super.dcoDecode(wire, _kStaticData);

  RwLockBoxMyTraitTwinSyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockBoxMyTraitTwinSyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncSsePtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSyncSse>>
@sealed
class RwLockNonCloneSimpleTwinSyncSse extends RustOpaque {
  RwLockNonCloneSimpleTwinSyncSse.dcoDecode(dynamic wire)
      : super.dcoDecode(wire, _kStaticData);

  RwLockNonCloneSimpleTwinSyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinSyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncSsePtr,
  );

  void instanceMethodArgBorrowTwinSyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseInstanceMethodArgBorrowTwinSyncSse(
        that: this,
      );

  void instanceMethodArgMutBorrowTwinSyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseInstanceMethodArgMutBorrowTwinSyncSse(
        that: this,
      );

  void instanceMethodArgOwnTwinSyncSse({dynamic hint}) => RustLib.instance.api
          .nonCloneSimpleTwinSyncSseInstanceMethodArgOwnTwinSyncSse(
        that: this,
      );

  RwLockNonCloneSimpleTwinSyncSse instanceMethodReturnOwnTwinSyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseInstanceMethodReturnOwnTwinSyncSse(
        that: this,
      );

  /// named constructor
  static RwLockNonCloneSimpleTwinSyncSse newCustomNameTwinSyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseNewCustomNameTwinSyncSse(hint: hint);

  /// unnamed constructor
  static RwLockNonCloneSimpleTwinSyncSse newTwinSyncSse({dynamic hint}) =>
      RustLib.instance.api.nonCloneSimpleTwinSyncSseNewTwinSyncSse(hint: hint);

  static void staticMethodArgBorrowTwinSyncSse(
          {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseStaticMethodArgBorrowTwinSyncSse(
              arg: arg, hint: hint);

  static void staticMethodArgMutBorrowTwinSyncSse(
          {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseStaticMethodArgMutBorrowTwinSyncSse(
              arg: arg, hint: hint);

  static void staticMethodArgOwnTwinSyncSse(
          {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseStaticMethodArgOwnTwinSyncSse(
              arg: arg, hint: hint);

  static RwLockNonCloneSimpleTwinSyncSse staticMethodReturnOwnTwinSyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinSyncSseStaticMethodReturnOwnTwinSyncSse(
              hint: hint);
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSse>>
@sealed
class RwLockStructWithGoodAndOpaqueFieldTwinSyncSse extends RustOpaque {
  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse.dcoDecode(dynamic wire)
      : super.dcoDecode(wire, _kStaticData);

  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSsePtr,
  );
}
