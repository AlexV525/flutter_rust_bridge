// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.30.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `LogTwinSse` is not used by any `pub` functions, thus it is ignored.
// The type `MyStreamEntryTwinSse` is not used by any `pub` functions, thus it is ignored.

Future<void> funcStreamReturnErrorTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.funcStreamReturnErrorTwinSse(sink: sink, hint: hint);

Future<void> funcStreamReturnPanicTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.funcStreamReturnPanicTwinSse(sink: sink, hint: hint);

Future<void> funcStreamSinkArgPositionTwinSse(
        {required int a,
        required int b,
        required StreamSink c,
        dynamic hint}) =>
    RustLib.instance.api
        .funcStreamSinkArgPositionTwinSse(a: a, b: b, c: c, hint: hint);

Future<void> handleStreamOfStructTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api.handleStreamOfStructTwinSse(sink: sink, hint: hint);

Future<void> handleStreamSinkAt1TwinSse(
        {required int key,
        required int max,
        required StreamSink sink,
        dynamic hint}) =>
    RustLib.instance.api
        .handleStreamSinkAt1TwinSse(key: key, max: max, sink: sink, hint: hint);

Future<void> handleStreamSinkAt2TwinSse(
        {required int key,
        required StreamSink sink,
        required int max,
        dynamic hint}) =>
    RustLib.instance.api
        .handleStreamSinkAt2TwinSse(key: key, sink: sink, max: max, hint: hint);

Future<void> handleStreamSinkAt3TwinSse(
        {required StreamSink sink,
        required int key,
        required int max,
        dynamic hint}) =>
    RustLib.instance.api
        .handleStreamSinkAt3TwinSse(sink: sink, key: key, max: max, hint: hint);

Future<void> streamSinkFixedSizedPrimitiveArrayTwinSse(
        {required StreamSink sink, dynamic hint}) =>
    RustLib.instance.api
        .streamSinkFixedSizedPrimitiveArrayTwinSse(sink: sink, hint: hint);
