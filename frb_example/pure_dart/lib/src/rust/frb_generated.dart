// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: unused_import, unused_element, duplicate_ignore, invalid_use_of_internal_member

import 'api/array.dart';
import 'api/async_misc.dart';
import 'api/attribute.dart';
import 'api/benchmark_api.dart';
import 'api/chrono_type.dart';
import 'api/comment.dart';
import 'api/dart_dynamic.dart';
import 'api/dart_fn.dart';
import 'api/dart_opaque.dart';
import 'api/dart_opaque_sync.dart';
import 'api/enumeration.dart';
import 'api/event_listener.dart';
import 'api/exception.dart';
import 'api/external_type_in_crate.dart';
import 'api/inside_macro.dart';
import 'api/method.dart';
import 'api/mirror.dart';
import 'api/misc_example.dart';
import 'api/misc_type.dart';
import 'api/newtype_pattern.dart';
import 'api/optional.dart';
import 'api/optional_primitive_misc.dart';
import 'api/primitive_list_misc.dart';
import 'api/primitive_misc.dart';
import 'api/pseudo_manual/array_twin_rust_async.dart';
import 'api/pseudo_manual/array_twin_rust_async_sse.dart';
import 'api/pseudo_manual/array_twin_sse.dart';
import 'api/pseudo_manual/array_twin_sync.dart';
import 'api/pseudo_manual/array_twin_sync_sse.dart';
import 'api/pseudo_manual/async_misc_twin_sse.dart';
import 'api/pseudo_manual/attribute_twin_rust_async.dart';
import 'api/pseudo_manual/attribute_twin_rust_async_sse.dart';
import 'api/pseudo_manual/attribute_twin_sse.dart';
import 'api/pseudo_manual/attribute_twin_sync.dart';
import 'api/pseudo_manual/attribute_twin_sync_sse.dart';
import 'api/pseudo_manual/benchmark_api_twin_rust_async.dart';
import 'api/pseudo_manual/benchmark_api_twin_rust_async_sse.dart';
import 'api/pseudo_manual/benchmark_api_twin_sse.dart';
import 'api/pseudo_manual/benchmark_api_twin_sync.dart';
import 'api/pseudo_manual/benchmark_api_twin_sync_sse.dart';
import 'api/pseudo_manual/chrono_type_twin_rust_async.dart';
import 'api/pseudo_manual/chrono_type_twin_sync.dart';
import 'api/pseudo_manual/comment_twin_rust_async.dart';
import 'api/pseudo_manual/comment_twin_rust_async_sse.dart';
import 'api/pseudo_manual/comment_twin_sse.dart';
import 'api/pseudo_manual/comment_twin_sync.dart';
import 'api/pseudo_manual/comment_twin_sync_sse.dart';
import 'api/pseudo_manual/dart_dynamic_twin_rust_async.dart';
import 'api/pseudo_manual/dart_dynamic_twin_rust_async_sse.dart';
import 'api/pseudo_manual/dart_dynamic_twin_sse.dart';
import 'api/pseudo_manual/dart_dynamic_twin_sync.dart';
import 'api/pseudo_manual/dart_dynamic_twin_sync_sse.dart';
import 'api/pseudo_manual/dart_fn_twin_sse.dart';
import 'api/pseudo_manual/dart_opaque_sync_twin_sse.dart';
import 'api/pseudo_manual/dart_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_rust_async_sse.dart';
import 'api/pseudo_manual/dart_opaque_twin_sse.dart';
import 'api/pseudo_manual/dart_opaque_twin_sync.dart';
import 'api/pseudo_manual/dart_opaque_twin_sync_sse.dart';
import 'api/pseudo_manual/enumeration_twin_rust_async.dart';
import 'api/pseudo_manual/enumeration_twin_rust_async_sse.dart';
import 'api/pseudo_manual/enumeration_twin_sse.dart';
import 'api/pseudo_manual/enumeration_twin_sync.dart';
import 'api/pseudo_manual/enumeration_twin_sync_sse.dart';
import 'api/pseudo_manual/event_listener_twin_rust_async.dart';
import 'api/pseudo_manual/event_listener_twin_rust_async_sse.dart';
import 'api/pseudo_manual/event_listener_twin_sse.dart';
import 'api/pseudo_manual/exception_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_rust_async_sse.dart';
import 'api/pseudo_manual/exception_twin_sse.dart';
import 'api/pseudo_manual/exception_twin_sync.dart';
import 'api/pseudo_manual/exception_twin_sync_sse.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_rust_async.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_rust_async_sse.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sse.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sync.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sync_sse.dart';
import 'api/pseudo_manual/inside_macro_twin_sse.dart';
import 'api/pseudo_manual/method_twin_rust_async.dart';
import 'api/pseudo_manual/method_twin_rust_async_sse.dart';
import 'api/pseudo_manual/method_twin_sse.dart';
import 'api/pseudo_manual/method_twin_sync.dart';
import 'api/pseudo_manual/method_twin_sync_sse.dart';
import 'api/pseudo_manual/mirror_twin_rust_async.dart';
import 'api/pseudo_manual/mirror_twin_rust_async_sse.dart';
import 'api/pseudo_manual/mirror_twin_sse.dart';
import 'api/pseudo_manual/mirror_twin_sync.dart';
import 'api/pseudo_manual/mirror_twin_sync_sse.dart';
import 'api/pseudo_manual/misc_example_twin_rust_async.dart';
import 'api/pseudo_manual/misc_example_twin_rust_async_sse.dart';
import 'api/pseudo_manual/misc_example_twin_sse.dart';
import 'api/pseudo_manual/misc_example_twin_sync.dart';
import 'api/pseudo_manual/misc_example_twin_sync_sse.dart';
import 'api/pseudo_manual/misc_type_twin_rust_async.dart';
import 'api/pseudo_manual/misc_type_twin_rust_async_sse.dart';
import 'api/pseudo_manual/misc_type_twin_sse.dart';
import 'api/pseudo_manual/misc_type_twin_sync.dart';
import 'api/pseudo_manual/misc_type_twin_sync_sse.dart';
import 'api/pseudo_manual/newtype_pattern_twin_rust_async.dart';
import 'api/pseudo_manual/newtype_pattern_twin_rust_async_sse.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sse.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sync.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sync_sse.dart';
import 'api/pseudo_manual/optional_primitive.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_rust_async_sse.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sse.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sync_sse.dart';
import 'api/pseudo_manual/optional_primitive_twin_rust_async.dart';
import 'api/pseudo_manual/optional_primitive_twin_rust_async_sse.dart';
import 'api/pseudo_manual/optional_primitive_twin_sse.dart';
import 'api/pseudo_manual/optional_primitive_twin_sync.dart';
import 'api/pseudo_manual/optional_primitive_twin_sync_sse.dart';
import 'api/pseudo_manual/optional_twin_rust_async.dart';
import 'api/pseudo_manual/optional_twin_rust_async_sse.dart';
import 'api/pseudo_manual/optional_twin_sse.dart';
import 'api/pseudo_manual/optional_twin_sync.dart';
import 'api/pseudo_manual/optional_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive.dart';
import 'api/pseudo_manual/primitive_list.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sse.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sync.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive_list_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_list_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_list_twin_sse.dart';
import 'api/pseudo_manual/primitive_list_twin_sync.dart';
import 'api/pseudo_manual/primitive_list_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_misc_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_misc_twin_sse.dart';
import 'api/pseudo_manual/primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/primitive_misc_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_twin_sse.dart';
import 'api/pseudo_manual/primitive_twin_sync.dart';
import 'api/pseudo_manual/primitive_twin_sync_sse.dart';
import 'api/pseudo_manual/raw_string_twin_rust_async.dart';
import 'api/pseudo_manual/raw_string_twin_rust_async_sse.dart';
import 'api/pseudo_manual/raw_string_twin_sse.dart';
import 'api/pseudo_manual/raw_string_twin_sync.dart';
import 'api/pseudo_manual/raw_string_twin_sync_sse.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sse.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync_sse.dart';
import 'api/pseudo_manual/rust_opaque_sync_twin_sse.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async_sse.dart';
import 'api/pseudo_manual/rust_opaque_twin_sse.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync_sse.dart';
import 'api/pseudo_manual/simple_twin_rust_async.dart';
import 'api/pseudo_manual/simple_twin_rust_async_sse.dart';
import 'api/pseudo_manual/simple_twin_sse.dart';
import 'api/pseudo_manual/simple_twin_sync.dart';
import 'api/pseudo_manual/simple_twin_sync_sse.dart';
import 'api/pseudo_manual/stream_misc_twin_sse.dart';
import 'api/pseudo_manual/stream_twin_rust_async.dart';
import 'api/pseudo_manual/stream_twin_rust_async_sse.dart';
import 'api/pseudo_manual/stream_twin_sse.dart';
import 'api/pseudo_manual/structure_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_rust_async_sse.dart';
import 'api/pseudo_manual/structure_twin_sse.dart';
import 'api/pseudo_manual/structure_twin_sync.dart';
import 'api/pseudo_manual/structure_twin_sync_sse.dart';
import 'api/pseudo_manual/tuple_twin_rust_async.dart';
import 'api/pseudo_manual/tuple_twin_rust_async_sse.dart';
import 'api/pseudo_manual/tuple_twin_sse.dart';
import 'api/pseudo_manual/tuple_twin_sync.dart';
import 'api/pseudo_manual/tuple_twin_sync_sse.dart';
import 'api/pseudo_manual/type_alias_twin_rust_async.dart';
import 'api/pseudo_manual/type_alias_twin_rust_async_sse.dart';
import 'api/pseudo_manual/type_alias_twin_sse.dart';
import 'api/pseudo_manual/type_alias_twin_sync.dart';
import 'api/pseudo_manual/type_alias_twin_sync_sse.dart';
import 'api/pseudo_manual/uuid_type_twin_rust_async.dart';
import 'api/pseudo_manual/uuid_type_twin_sync.dart';
import 'api/raw_string.dart';
import 'api/rust_auto_opaque.dart';
import 'api/rust_opaque.dart';
import 'api/rust_opaque_sync.dart';
import 'api/simple.dart';
import 'api/stream.dart';
import 'api/stream_misc.dart';
import 'api/structure.dart';
import 'api/tuple.dart';
import 'api/type_alias.dart';
import 'api/uuid_type.dart';
import 'auxiliary/new_module_system/sub_module.dart';
import 'auxiliary/old_module_system/sub_module.dart';
import 'auxiliary/sample_types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'frb_example_pure_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BlobTwinNormal> boxedBlobTwinNormal(
      {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinNormal> funcTestIdTwinNormal(
      {required TestIdTwinNormal id, dynamic hint});

  Future<U8Array5> getArrayTwinNormal({dynamic hint});

  Future<PointTwinNormalArray2> getComplexArrayTwinNormal({dynamic hint});

  Future<double> lastNumberTwinNormal(
      {required F64Array16 array, dynamic hint});

  Future<TestIdTwinNormalArray2> nestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id, dynamic hint});

  Future<MessageIdTwinNormal> newMsgidTwinNormal(
      {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinNormal> returnBoxedFeedIdTwinNormal(
      {required U8Array8 id, dynamic hint});

  Future<U8Array8> returnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id, dynamic hint});

  Future<U8Array1600> useBoxedBlobTwinNormal(
      {required BlobTwinNormal blob, dynamic hint});

  Future<U8Array32> useMsgidTwinNormal(
      {required MessageIdTwinNormal id, dynamic hint});

  Future<int> funcAsyncSimpleAdd(
      {required int a, required int b, dynamic hint});

  Future<void> funcAsyncVoid({dynamic hint});

  Future<void> handleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val, dynamic hint});

  Future<UserIdTwinNormal> nextUserIdTwinNormal(
      {required UserIdTwinNormal userId, dynamic hint});

  Future<int> benchmarkInputBytesTwinNormal(
      {required Uint8List bytes, dynamic hint});

  Future<Uint8List> benchmarkOutputBytesTwinNormal(
      {required int size, dynamic hint});

  Future<void> benchmarkVoidTwinNormal({dynamic hint});

  Future<DateTime> datetimeLocalTwinNormal({required DateTime d, dynamic hint});

  Future<DateTime> datetimeUtcTwinNormal({required DateTime d, dynamic hint});

  Future<Duration> durationTwinNormal({required Duration d, dynamic hint});

  Future<List<DateTime>> handleDurationsTwinNormal(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint});

  Future<List<Duration>> handleTimestampsTwinNormal(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint});

  Future<Duration> howLongDoesItTakeTwinNormal(
      {required FeatureChronoTwinNormal mine, dynamic hint});

  Future<DateTime> naivedatetimeTwinNormal({required DateTime d, dynamic hint});

  Future<DateTime?> optionalEmptyDatetimeUtcTwinNormal(
      {DateTime? d, dynamic hint});

  Future<TestChronoTwinNormal> testChronoTwinNormal({dynamic hint});

  Future<TestChronoTwinNormal> testPreciseChronoTwinNormal({dynamic hint});

  Future<void> structWithCommentsTwinNormalInstanceMethodTwinNormal(
      {required StructWithCommentsTwinNormal that, dynamic hint});

  Future<void> structWithCommentsTwinNormalStaticMethodTwinNormal(
      {dynamic hint});

  Future<void> functionWithCommentsSlashStarStarTwinNormal({dynamic hint});

  Future<void> functionWithCommentsTripleSlashMultiLineTwinNormal(
      {dynamic hint});

  Future<void> functionWithCommentsTripleSlashSingleLineTwinNormal(
      {dynamic hint});

  Future<dynamic> returnDartDynamicTwinNormal({dynamic hint});

  Future<void> rustCallDartSimple(
      {required void Function() callback, dynamic hint});

  Future<String> asyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<List<Object>> cloneDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinNormal> createEnumDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinNormal> createNestedDartOpaqueTwinNormal(
      {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void> dropStaticDartOpaqueTwinNormal({required int id, dynamic hint});

  Future<void> getEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque, dynamic hint});

  Future<void> getNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque, dynamic hint});

  Future<void> loopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1> loopBackArrayTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> loopBackOptionGetTwinNormal({Object? opaque, dynamic hint});

  Future<Object?> loopBackOptionTwinNormal(
      {required Object opaque, dynamic hint});

  Future<Object> loopBackTwinNormal({required Object opaque, dynamic hint});

  Future<void> loopBackVecGetTwinNormal(
      {required List<Object> opaque, dynamic hint});

  Future<List<Object>> loopBackVecTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> panicUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> setStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque, dynamic hint});

  String syncAcceptDartOpaqueTwinNormal({required Object opaque, dynamic hint});

  Object syncLoopbackTwinNormal({required Object opaque, dynamic hint});

  Object? syncOptionDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Object? syncOptionLoopbackTwinNormal({Object? opaque, dynamic hint});

  String unwrapDartOpaqueTwinNormal({required Object opaque, dynamic hint});

  Future<EnumSimpleTwinNormal> funcEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg, dynamic hint});

  Future<EnumWithItemMixedTwinNormal> funcEnumWithItemMixedTwinNormal(
      {required EnumWithItemMixedTwinNormal arg, dynamic hint});

  Future<EnumWithItemStructTwinNormal> funcEnumWithItemStructTwinNormal(
      {required EnumWithItemStructTwinNormal arg, dynamic hint});

  Future<EnumWithItemTupleTwinNormal> funcEnumWithItemTupleTwinNormal(
      {required EnumWithItemTupleTwinNormal arg, dynamic hint});

  Future<WeekdaysTwinNormal> handleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday, dynamic hint});

  Future<KitchenSinkTwinNormal> handleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val, dynamic hint});

  Future<WeekdaysTwinNormal?> handleReturnEnumTwinNormal(
      {required String input, dynamic hint});

  Future<MeasureTwinNormal?> multiplyByTenTwinNormal(
      {required MeasureTwinNormal measure, dynamic hint});

  Future<Uint8List> printNoteTwinNormal(
      {required NoteTwinNormal note, dynamic hint});

  Future<String> eventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that, dynamic hint});

  Future<void> closeEventListenerTwinNormal({dynamic hint});

  Future<void> createEventTwinNormal(
      {required String address, required String payload, dynamic hint});

  Stream<EventTwinNormal> registerEventListenerTwinNormal({dynamic hint});

  Future<CustomStructTwinNormal> customStructTwinNormalNewTwinNormal(
      {required String message, dynamic hint});

  Future<void> customStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint});

  Future<int> customStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint});

  Future<void> customStructTwinNormalStaticReturnCustomStructErrorTwinNormal(
      {dynamic hint});

  Future<int> customStructTwinNormalStaticReturnCustomStructOkTwinNormal(
      {dynamic hint});

  Future<SomeStructTwinNormal> someStructTwinNormalNewTwinNormal(
      {required int value, dynamic hint});

  Future<int> someStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint});

  Future<int> someStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint});

  Future<int> someStructTwinNormalStaticReturnErrCustomErrorTwinNormal(
      {dynamic hint});

  Future<int> someStructTwinNormalStaticReturnOkCustomErrorTwinNormal(
      {dynamic hint});

  Future<void> customEnumErrorPanicTwinNormal({dynamic hint});

  Future<int> customEnumErrorReturnErrorTwinNormal({dynamic hint});

  Future<int> customEnumErrorReturnOkTwinNormal(
      {required int arg, dynamic hint});

  Future<void> customNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg, dynamic hint});

  Future<void> customStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg, dynamic hint});

  Future<int> funcReturnErrorTwinNormal({dynamic hint});

  Future<int> funcTypeFalliblePanicTwinNormal({dynamic hint});

  Future<int> funcTypeInfalliblePanicTwinNormal({dynamic hint});

  Future<void> panicWithCustomResultTwinNormal({dynamic hint});

  Future<void> returnCustomNestedError1TwinNormal({dynamic hint});

  Future<void> returnCustomNestedError1Variant1TwinNormal({dynamic hint});

  Future<void> returnCustomNestedError2TwinNormal({dynamic hint});

  Future<void> returnCustomStructErrorTwinNormal({dynamic hint});

  Future<int> returnCustomStructOkTwinNormal({dynamic hint});

  Future<int> returnErrCustomErrorTwinNormal({dynamic hint});

  Future<int> returnErrorVariantTwinNormal(
      {required int variant, dynamic hint});

  Future<int> returnOkCustomErrorTwinNormal({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinNormal({dynamic hint});

  Future<void> throwAnyhowTwinNormal({dynamic hint});

  Future<NewSimpleStruct> callNewModuleSystemTwinNormal({dynamic hint});

  Future<OldSimpleStruct> callOldModuleSystemTwinNormal({dynamic hint});

  Future<bool> useImportedEnumTwinNormal(
      {required MyEnum myEnum, dynamic hint});

  Future<bool> useImportedStructTwinNormal(
      {required MyStruct myStruct, dynamic hint});

  Future<AnotherMacroStructTwinNormal> anotherMacroStructTwinNormal(
      {dynamic hint});

  Future<MacroStruct> funcMacroStructTwinNormal(
      {required MacroStruct arg, dynamic hint});

  Future<String> concatenateWithTwinNormalConcatenateStaticTwinNormal(
      {required String a, required String b, dynamic hint});

  Future<String> concatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that,
      required String b,
      dynamic hint});

  Stream<int>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal(
          {dynamic hint});

  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint});

  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max,
          dynamic hint});

  Future<ConcatenateWithTwinNormal> concatenateWithTwinNormalNewTwinNormal(
      {required String a, dynamic hint});

  Future<int> sumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that,
      required int y,
      required int z,
      dynamic hint});

  Future<SumWithTwinNormalArray3> getSumArrayTwinNormal(
      {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinNormal> getSumStructTwinNormal({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinNormal({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinNormal(
      {dynamic hint});

  Future<int?> firstNumberTwinNormal({required Numbers nums, dynamic hint});

  Future<int?> firstSequenceTwinNormal({required Sequences seqs, dynamic hint});

  Future<ApplicationSettings> getAppSettingsTwinNormal({dynamic hint});

  Future<ApplicationSettings> getFallibleAppSettingsTwinNormal({dynamic hint});

  Future<ApplicationMessage> getMessageTwinNormal({dynamic hint});

  Future<bool> isAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinNormal> mirrorStructStreamTwinNormal({dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinNormal({dynamic hint});

  Future<Numbers> repeatNumberTwinNormal(
      {required int num, required int times, dynamic hint});

  Future<Sequences> repeatSequenceTwinNormal(
      {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinNormal>
      testContainsMirroredSubStructTwinNormal({dynamic hint});

  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinNormal(
      {dynamic hint});

  Future<List<RawStringEnumMirrored>> testListOfNestedEnumsMirroredTwinNormal(
      {dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinNormal({dynamic hint});

  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinNormal(
      {dynamic hint});

  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinNormal(
      {required bool nested, dynamic hint});

  Future<RawStringMirrored> testRawStringMirroredTwinNormal({dynamic hint});

  Future<BigBuffersTwinNormal> handleBigBuffersTwinNormal({dynamic hint});

  Future<MyTreeNodeTwinNormal> handleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s, dynamic hint});

  Future<MyNestedStructTwinNormal> handleNestedStructTwinNormal(
      {required MyNestedStructTwinNormal s, dynamic hint});

  Future<String> handleStringTwinNormal({required String s, dynamic hint});

  Future<MySize> handleStructTwinNormal(
      {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List> handleVecU8TwinNormal({required Uint8List v, dynamic hint});

  Future<List<WeekdaysTwinNormal>> listOfPrimitiveEnumsTwinNormal(
      {required List<WeekdaysTwinNormal> weekdays, dynamic hint});

  Future<AbcTwinNormal> testAbcEnumTwinNormal(
      {required AbcTwinNormal abc, dynamic hint});

  Future<StructWithEnumTwinNormal> testStructWithEnumTwinNormal(
      {required StructWithEnumTwinNormal se, dynamic hint});

  Future<EmptyTwinNormal> emptyStructTwinNormal(
      {required EmptyTwinNormal empty, dynamic hint});

  Future<void> funcReturnUnitTwinNormal({dynamic hint});

  Future<String> funcStringTwinNormal({required String arg, dynamic hint});

  Future<List<MySize>> handleListOfStructTwinNormal(
      {required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringListTwinNormal(
      {required List<String> names, dynamic hint});

  Future<NewTypeIntTwinNormal> handleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg, dynamic hint});

  Future<double> handleIncrementBoxedOptionalTwinNormal(
      {double? opt, dynamic hint});

  Future<String> handleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox,
      dynamic hint});

  Future<ExoticOptionalsTwinNormal?> handleOptionalIncrementTwinNormal(
      {ExoticOptionalsTwinNormal? opt, dynamic hint});

  Future<double?> handleOptionalReturnTwinNormal(
      {required double left, required double right, dynamic hint});

  Future<ElementTwinNormal?> handleOptionalStructTwinNormal(
      {String? document, dynamic hint});

  Future<OptVecsTwinNormal> handleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt, dynamic hint});

  Future<int?> primitiveOptionalTypesTwinNormal(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<VecOfPrimitivePackTwinNormal> handleVecOfPrimitiveTwinNormal(
      {required int n, dynamic hint});

  Future<int> primitiveTypesTwinNormal(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  Future<int> primitiveU32TwinNormal({required int myU32, dynamic hint});

  Future<BlobTwinRustAsync> boxedBlobTwinRustAsync(
      {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinRustAsync> funcTestIdTwinRustAsync(
      {required TestIdTwinRustAsync id, dynamic hint});

  Future<U8Array5> getArrayTwinRustAsync({dynamic hint});

  Future<PointTwinRustAsyncArray2> getComplexArrayTwinRustAsync({dynamic hint});

  Future<double> lastNumberTwinRustAsync(
      {required F64Array16 array, dynamic hint});

  Future<TestIdTwinRustAsyncArray2> nestedIdTwinRustAsync(
      {required TestIdTwinRustAsyncArray4 id, dynamic hint});

  Future<MessageIdTwinRustAsync> newMsgidTwinRustAsync(
      {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinRustAsync> returnBoxedFeedIdTwinRustAsync(
      {required U8Array8 id, dynamic hint});

  Future<U8Array8> returnBoxedRawFeedIdTwinRustAsync(
      {required FeedIdTwinRustAsync id, dynamic hint});

  Future<U8Array1600> useBoxedBlobTwinRustAsync(
      {required BlobTwinRustAsync blob, dynamic hint});

  Future<U8Array32> useMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id, dynamic hint});

  Future<BlobTwinRustAsyncSse> boxedBlobTwinRustAsyncSse(
      {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinRustAsyncSse> funcTestIdTwinRustAsyncSse(
      {required TestIdTwinRustAsyncSse id, dynamic hint});

  Future<U8Array5> getArrayTwinRustAsyncSse({dynamic hint});

  Future<PointTwinRustAsyncSseArray2> getComplexArrayTwinRustAsyncSse(
      {dynamic hint});

  Future<double> lastNumberTwinRustAsyncSse(
      {required F64Array16 array, dynamic hint});

  Future<TestIdTwinRustAsyncSseArray2> nestedIdTwinRustAsyncSse(
      {required TestIdTwinRustAsyncSseArray4 id, dynamic hint});

  Future<MessageIdTwinRustAsyncSse> newMsgidTwinRustAsyncSse(
      {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinRustAsyncSse> returnBoxedFeedIdTwinRustAsyncSse(
      {required U8Array8 id, dynamic hint});

  Future<U8Array8> returnBoxedRawFeedIdTwinRustAsyncSse(
      {required FeedIdTwinRustAsyncSse id, dynamic hint});

  Future<U8Array1600> useBoxedBlobTwinRustAsyncSse(
      {required BlobTwinRustAsyncSse blob, dynamic hint});

  Future<U8Array32> useMsgidTwinRustAsyncSse(
      {required MessageIdTwinRustAsyncSse id, dynamic hint});

  Future<BlobTwinSse> boxedBlobTwinSse(
      {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinSse> funcTestIdTwinSse(
      {required TestIdTwinSse id, dynamic hint});

  Future<U8Array5> getArrayTwinSse({dynamic hint});

  Future<PointTwinSseArray2> getComplexArrayTwinSse({dynamic hint});

  Future<double> lastNumberTwinSse({required F64Array16 array, dynamic hint});

  Future<TestIdTwinSseArray2> nestedIdTwinSse(
      {required TestIdTwinSseArray4 id, dynamic hint});

  Future<MessageIdTwinSse> newMsgidTwinSse(
      {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinSse> returnBoxedFeedIdTwinSse(
      {required U8Array8 id, dynamic hint});

  Future<U8Array8> returnBoxedRawFeedIdTwinSse(
      {required FeedIdTwinSse id, dynamic hint});

  Future<U8Array1600> useBoxedBlobTwinSse(
      {required BlobTwinSse blob, dynamic hint});

  Future<U8Array32> useMsgidTwinSse(
      {required MessageIdTwinSse id, dynamic hint});

  BlobTwinSync boxedBlobTwinSync({required U8Array1600 blob, dynamic hint});

  TestIdTwinSync funcTestIdTwinSync({required TestIdTwinSync id, dynamic hint});

  U8Array5 getArrayTwinSync({dynamic hint});

  PointTwinSyncArray2 getComplexArrayTwinSync({dynamic hint});

  double lastNumberTwinSync({required F64Array16 array, dynamic hint});

  TestIdTwinSyncArray2 nestedIdTwinSync(
      {required TestIdTwinSyncArray4 id, dynamic hint});

  MessageIdTwinSync newMsgidTwinSync({required U8Array32 id, dynamic hint});

  FeedIdTwinSync returnBoxedFeedIdTwinSync(
      {required U8Array8 id, dynamic hint});

  U8Array8 returnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id, dynamic hint});

  U8Array1600 useBoxedBlobTwinSync({required BlobTwinSync blob, dynamic hint});

  U8Array32 useMsgidTwinSync({required MessageIdTwinSync id, dynamic hint});

  BlobTwinSyncSse boxedBlobTwinSyncSse(
      {required U8Array1600 blob, dynamic hint});

  TestIdTwinSyncSse funcTestIdTwinSyncSse(
      {required TestIdTwinSyncSse id, dynamic hint});

  U8Array5 getArrayTwinSyncSse({dynamic hint});

  PointTwinSyncSseArray2 getComplexArrayTwinSyncSse({dynamic hint});

  double lastNumberTwinSyncSse({required F64Array16 array, dynamic hint});

  TestIdTwinSyncSseArray2 nestedIdTwinSyncSse(
      {required TestIdTwinSyncSseArray4 id, dynamic hint});

  MessageIdTwinSyncSse newMsgidTwinSyncSse(
      {required U8Array32 id, dynamic hint});

  FeedIdTwinSyncSse returnBoxedFeedIdTwinSyncSse(
      {required U8Array8 id, dynamic hint});

  U8Array8 returnBoxedRawFeedIdTwinSyncSse(
      {required FeedIdTwinSyncSse id, dynamic hint});

  U8Array1600 useBoxedBlobTwinSyncSse(
      {required BlobTwinSyncSse blob, dynamic hint});

  U8Array32 useMsgidTwinSyncSse(
      {required MessageIdTwinSyncSse id, dynamic hint});

  Future<int> funcAsyncSimpleAdd(
      {required int a, required int b, dynamic hint});

  Future<void> funcAsyncVoid({dynamic hint});

  Future<void> handleCustomizedStructTwinRustAsync(
      {required CustomizedTwinRustAsync val, dynamic hint});

  Future<UserIdTwinRustAsync> nextUserIdTwinRustAsync(
      {required UserIdTwinRustAsync userId, dynamic hint});

  Future<void> handleCustomizedStructTwinRustAsyncSse(
      {required CustomizedTwinRustAsyncSse val, dynamic hint});

  Future<UserIdTwinRustAsyncSse> nextUserIdTwinRustAsyncSse(
      {required UserIdTwinRustAsyncSse userId, dynamic hint});

  Future<void> handleCustomizedStructTwinSse(
      {required CustomizedTwinSse val, dynamic hint});

  Future<UserIdTwinSse> nextUserIdTwinSse(
      {required UserIdTwinSse userId, dynamic hint});

  void handleCustomizedStructTwinSync(
      {required CustomizedTwinSync val, dynamic hint});

  UserIdTwinSync nextUserIdTwinSync(
      {required UserIdTwinSync userId, dynamic hint});

  void handleCustomizedStructTwinSyncSse(
      {required CustomizedTwinSyncSse val, dynamic hint});

  UserIdTwinSyncSse nextUserIdTwinSyncSse(
      {required UserIdTwinSyncSse userId, dynamic hint});

  Future<int> benchmarkInputBytesTwinRustAsync(
      {required Uint8List bytes, dynamic hint});

  Future<Uint8List> benchmarkOutputBytesTwinRustAsync(
      {required int size, dynamic hint});

  Future<void> benchmarkVoidTwinRustAsync({dynamic hint});

  Future<int> benchmarkInputBytesTwinRustAsyncSse(
      {required Uint8List bytes, dynamic hint});

  Future<Uint8List> benchmarkOutputBytesTwinRustAsyncSse(
      {required int size, dynamic hint});

  Future<void> benchmarkVoidTwinRustAsyncSse({dynamic hint});

  Future<int> benchmarkInputBytesTwinSse(
      {required Uint8List bytes, dynamic hint});

  Future<Uint8List> benchmarkOutputBytesTwinSse(
      {required int size, dynamic hint});

  Future<void> benchmarkVoidTwinSse({dynamic hint});

  int benchmarkInputBytesTwinSync({required Uint8List bytes, dynamic hint});

  Uint8List benchmarkOutputBytesTwinSync({required int size, dynamic hint});

  void benchmarkVoidTwinSync({dynamic hint});

  int benchmarkInputBytesTwinSyncSse({required Uint8List bytes, dynamic hint});

  Uint8List benchmarkOutputBytesTwinSyncSse({required int size, dynamic hint});

  void benchmarkVoidTwinSyncSse({dynamic hint});

  Future<DateTime> datetimeLocalTwinRustAsync(
      {required DateTime d, dynamic hint});

  Future<DateTime> datetimeUtcTwinRustAsync(
      {required DateTime d, dynamic hint});

  Future<Duration> durationTwinRustAsync({required Duration d, dynamic hint});

  Future<List<DateTime>> handleDurationsTwinRustAsync(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint});

  Future<List<Duration>> handleTimestampsTwinRustAsync(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint});

  Future<Duration> howLongDoesItTakeTwinRustAsync(
      {required FeatureChronoTwinRustAsync mine, dynamic hint});

  Future<DateTime> naivedatetimeTwinRustAsync(
      {required DateTime d, dynamic hint});

  Future<DateTime?> optionalEmptyDatetimeUtcTwinRustAsync(
      {DateTime? d, dynamic hint});

  Future<TestChronoTwinRustAsync> testChronoTwinRustAsync({dynamic hint});

  Future<TestChronoTwinRustAsync> testPreciseChronoTwinRustAsync(
      {dynamic hint});

  DateTime datetimeLocalTwinSync({required DateTime d, dynamic hint});

  DateTime datetimeUtcTwinSync({required DateTime d, dynamic hint});

  Duration durationTwinSync({required Duration d, dynamic hint});

  List<DateTime> handleDurationsTwinSync(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint});

  List<Duration> handleTimestampsTwinSync(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint});

  Duration howLongDoesItTakeTwinSync(
      {required FeatureChronoTwinSync mine, dynamic hint});

  DateTime naivedatetimeTwinSync({required DateTime d, dynamic hint});

  DateTime? optionalEmptyDatetimeUtcTwinSync({DateTime? d, dynamic hint});

  TestChronoTwinSync testChronoTwinSync({dynamic hint});

  TestChronoTwinSync testPreciseChronoTwinSync({dynamic hint});

  Future<void> structWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
      {required StructWithCommentsTwinRustAsync that, dynamic hint});

  Future<void> structWithCommentsTwinRustAsyncStaticMethodTwinRustAsync(
      {dynamic hint});

  Future<void> functionWithCommentsSlashStarStarTwinRustAsync({dynamic hint});

  Future<void> functionWithCommentsTripleSlashMultiLineTwinRustAsync(
      {dynamic hint});

  Future<void> functionWithCommentsTripleSlashSingleLineTwinRustAsync(
      {dynamic hint});

  Future<void> structWithCommentsTwinRustAsyncSseInstanceMethodTwinRustAsyncSse(
      {required StructWithCommentsTwinRustAsyncSse that, dynamic hint});

  Future<void> structWithCommentsTwinRustAsyncSseStaticMethodTwinRustAsyncSse(
      {dynamic hint});

  Future<void> functionWithCommentsSlashStarStarTwinRustAsyncSse(
      {dynamic hint});

  Future<void> functionWithCommentsTripleSlashMultiLineTwinRustAsyncSse(
      {dynamic hint});

  Future<void> functionWithCommentsTripleSlashSingleLineTwinRustAsyncSse(
      {dynamic hint});

  Future<void> structWithCommentsTwinSseInstanceMethodTwinSse(
      {required StructWithCommentsTwinSse that, dynamic hint});

  Future<void> structWithCommentsTwinSseStaticMethodTwinSse({dynamic hint});

  Future<void> functionWithCommentsSlashStarStarTwinSse({dynamic hint});

  Future<void> functionWithCommentsTripleSlashMultiLineTwinSse({dynamic hint});

  Future<void> functionWithCommentsTripleSlashSingleLineTwinSse({dynamic hint});

  void structWithCommentsTwinSyncInstanceMethodTwinSync(
      {required StructWithCommentsTwinSync that, dynamic hint});

  void structWithCommentsTwinSyncStaticMethodTwinSync({dynamic hint});

  void functionWithCommentsSlashStarStarTwinSync({dynamic hint});

  void functionWithCommentsTripleSlashMultiLineTwinSync({dynamic hint});

  void functionWithCommentsTripleSlashSingleLineTwinSync({dynamic hint});

  void structWithCommentsTwinSyncSseInstanceMethodTwinSyncSse(
      {required StructWithCommentsTwinSyncSse that, dynamic hint});

  void structWithCommentsTwinSyncSseStaticMethodTwinSyncSse({dynamic hint});

  void functionWithCommentsSlashStarStarTwinSyncSse({dynamic hint});

  void functionWithCommentsTripleSlashMultiLineTwinSyncSse({dynamic hint});

  void functionWithCommentsTripleSlashSingleLineTwinSyncSse({dynamic hint});

  Future<dynamic> returnDartDynamicTwinRustAsync({dynamic hint});

  Future<dynamic> returnDartDynamicTwinRustAsyncSse({dynamic hint});

  Future<dynamic> returnDartDynamicTwinSse({dynamic hint});

  dynamic returnDartDynamicTwinSync({dynamic hint});

  dynamic returnDartDynamicTwinSyncSse({dynamic hint});

  Future<void> rustCallDartSimple(
      {required void Function() callback, dynamic hint});

  String syncAcceptDartOpaqueTwinSse({required Object opaque, dynamic hint});

  Object syncLoopbackTwinSse({required Object opaque, dynamic hint});

  Object? syncOptionDartOpaqueTwinSse({required Object opaque, dynamic hint});

  Object? syncOptionLoopbackTwinSse({Object? opaque, dynamic hint});

  String unwrapDartOpaqueTwinSse({required Object opaque, dynamic hint});

  Future<String> asyncAcceptDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<List<Object>> cloneDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinRustAsync> createEnumDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinRustAsync> createNestedDartOpaqueTwinRustAsync(
      {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void> dropStaticDartOpaqueTwinRustAsync(
      {required int id, dynamic hint});

  Future<void> getEnumDartOpaqueTwinRustAsync(
      {required EnumDartOpaqueTwinRustAsync opaque, dynamic hint});

  Future<void> getNestedDartOpaqueTwinRustAsync(
      {required DartOpaqueNestedTwinRustAsync opaque, dynamic hint});

  Future<void> loopBackArrayGetTwinRustAsync(
      {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1> loopBackArrayTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<void> loopBackOptionGetTwinRustAsync({Object? opaque, dynamic hint});

  Future<Object?> loopBackOptionTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<Object> loopBackTwinRustAsync({required Object opaque, dynamic hint});

  Future<void> loopBackVecGetTwinRustAsync(
      {required List<Object> opaque, dynamic hint});

  Future<List<Object>> loopBackVecTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<void> panicUnwrapDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<void> setStaticDartOpaqueTwinRustAsync(
      {required int id, required Object opaque, dynamic hint});

  Future<String> asyncAcceptDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<List<Object>> cloneDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinRustAsyncSse> createEnumDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinRustAsyncSse>
      createNestedDartOpaqueTwinRustAsyncSse(
          {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void> dropStaticDartOpaqueTwinRustAsyncSse(
      {required int id, dynamic hint});

  Future<void> getEnumDartOpaqueTwinRustAsyncSse(
      {required EnumDartOpaqueTwinRustAsyncSse opaque, dynamic hint});

  Future<void> getNestedDartOpaqueTwinRustAsyncSse(
      {required DartOpaqueNestedTwinRustAsyncSse opaque, dynamic hint});

  Future<void> loopBackArrayGetTwinRustAsyncSse(
      {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1> loopBackArrayTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<void> loopBackOptionGetTwinRustAsyncSse(
      {Object? opaque, dynamic hint});

  Future<Object?> loopBackOptionTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<Object> loopBackTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<void> loopBackVecGetTwinRustAsyncSse(
      {required List<Object> opaque, dynamic hint});

  Future<List<Object>> loopBackVecTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<void> panicUnwrapDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint});

  Future<void> setStaticDartOpaqueTwinRustAsyncSse(
      {required int id, required Object opaque, dynamic hint});

  Future<String> asyncAcceptDartOpaqueTwinSse(
      {required Object opaque, dynamic hint});

  Future<List<Object>> cloneDartOpaqueTwinSse(
      {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinSse> createEnumDartOpaqueTwinSse(
      {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinSse> createNestedDartOpaqueTwinSse(
      {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void> dropStaticDartOpaqueTwinSse({required int id, dynamic hint});

  Future<void> getEnumDartOpaqueTwinSse(
      {required EnumDartOpaqueTwinSse opaque, dynamic hint});

  Future<void> getNestedDartOpaqueTwinSse(
      {required DartOpaqueNestedTwinSse opaque, dynamic hint});

  Future<void> loopBackArrayGetTwinSse(
      {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1> loopBackArrayTwinSse(
      {required Object opaque, dynamic hint});

  Future<void> loopBackOptionGetTwinSse({Object? opaque, dynamic hint});

  Future<Object?> loopBackOptionTwinSse({required Object opaque, dynamic hint});

  Future<Object> loopBackTwinSse({required Object opaque, dynamic hint});

  Future<void> loopBackVecGetTwinSse(
      {required List<Object> opaque, dynamic hint});

  Future<List<Object>> loopBackVecTwinSse(
      {required Object opaque, dynamic hint});

  Future<void> panicUnwrapDartOpaqueTwinSse(
      {required Object opaque, dynamic hint});

  Future<void> setStaticDartOpaqueTwinSse(
      {required int id, required Object opaque, dynamic hint});

  String asyncAcceptDartOpaqueTwinSync({required Object opaque, dynamic hint});

  List<Object> cloneDartOpaqueTwinSync({required Object opaque, dynamic hint});

  EnumDartOpaqueTwinSync createEnumDartOpaqueTwinSync(
      {required Object opaque, dynamic hint});

  DartOpaqueNestedTwinSync createNestedDartOpaqueTwinSync(
      {required Object opaque1, required Object opaque2, dynamic hint});

  void dropStaticDartOpaqueTwinSync({required int id, dynamic hint});

  void getEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque, dynamic hint});

  void getNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque, dynamic hint});

  void loopBackArrayGetTwinSync({required ObjectArray1 opaque, dynamic hint});

  ObjectArray1 loopBackArrayTwinSync({required Object opaque, dynamic hint});

  void loopBackOptionGetTwinSync({Object? opaque, dynamic hint});

  Object? loopBackOptionTwinSync({required Object opaque, dynamic hint});

  Object loopBackTwinSync({required Object opaque, dynamic hint});

  void loopBackVecGetTwinSync({required List<Object> opaque, dynamic hint});

  List<Object> loopBackVecTwinSync({required Object opaque, dynamic hint});

  void panicUnwrapDartOpaqueTwinSync({required Object opaque, dynamic hint});

  void setStaticDartOpaqueTwinSync(
      {required int id, required Object opaque, dynamic hint});

  String asyncAcceptDartOpaqueTwinSyncSse(
      {required Object opaque, dynamic hint});

  List<Object> cloneDartOpaqueTwinSyncSse(
      {required Object opaque, dynamic hint});

  EnumDartOpaqueTwinSyncSse createEnumDartOpaqueTwinSyncSse(
      {required Object opaque, dynamic hint});

  DartOpaqueNestedTwinSyncSse createNestedDartOpaqueTwinSyncSse(
      {required Object opaque1, required Object opaque2, dynamic hint});

  void dropStaticDartOpaqueTwinSyncSse({required int id, dynamic hint});

  void getEnumDartOpaqueTwinSyncSse(
      {required EnumDartOpaqueTwinSyncSse opaque, dynamic hint});

  void getNestedDartOpaqueTwinSyncSse(
      {required DartOpaqueNestedTwinSyncSse opaque, dynamic hint});

  void loopBackArrayGetTwinSyncSse(
      {required ObjectArray1 opaque, dynamic hint});

  ObjectArray1 loopBackArrayTwinSyncSse({required Object opaque, dynamic hint});

  void loopBackOptionGetTwinSyncSse({Object? opaque, dynamic hint});

  Object? loopBackOptionTwinSyncSse({required Object opaque, dynamic hint});

  Object loopBackTwinSyncSse({required Object opaque, dynamic hint});

  void loopBackVecGetTwinSyncSse({required List<Object> opaque, dynamic hint});

  List<Object> loopBackVecTwinSyncSse({required Object opaque, dynamic hint});

  void panicUnwrapDartOpaqueTwinSyncSse({required Object opaque, dynamic hint});

  void setStaticDartOpaqueTwinSyncSse(
      {required int id, required Object opaque, dynamic hint});

  Future<EnumSimpleTwinRustAsync> funcEnumSimpleTwinRustAsync(
      {required EnumSimpleTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemMixedTwinRustAsync> funcEnumWithItemMixedTwinRustAsync(
      {required EnumWithItemMixedTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemStructTwinRustAsync> funcEnumWithItemStructTwinRustAsync(
      {required EnumWithItemStructTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemTupleTwinRustAsync> funcEnumWithItemTupleTwinRustAsync(
      {required EnumWithItemTupleTwinRustAsync arg, dynamic hint});

  Future<WeekdaysTwinRustAsync> handleEnumParameterTwinRustAsync(
      {required WeekdaysTwinRustAsync weekday, dynamic hint});

  Future<KitchenSinkTwinRustAsync> handleEnumStructTwinRustAsync(
      {required KitchenSinkTwinRustAsync val, dynamic hint});

  Future<WeekdaysTwinRustAsync?> handleReturnEnumTwinRustAsync(
      {required String input, dynamic hint});

  Future<MeasureTwinRustAsync?> multiplyByTenTwinRustAsync(
      {required MeasureTwinRustAsync measure, dynamic hint});

  Future<Uint8List> printNoteTwinRustAsync(
      {required NoteTwinRustAsync note, dynamic hint});

  Future<EnumSimpleTwinRustAsyncSse> funcEnumSimpleTwinRustAsyncSse(
      {required EnumSimpleTwinRustAsyncSse arg, dynamic hint});

  Future<EnumWithItemMixedTwinRustAsyncSse>
      funcEnumWithItemMixedTwinRustAsyncSse(
          {required EnumWithItemMixedTwinRustAsyncSse arg, dynamic hint});

  Future<EnumWithItemStructTwinRustAsyncSse>
      funcEnumWithItemStructTwinRustAsyncSse(
          {required EnumWithItemStructTwinRustAsyncSse arg, dynamic hint});

  Future<EnumWithItemTupleTwinRustAsyncSse>
      funcEnumWithItemTupleTwinRustAsyncSse(
          {required EnumWithItemTupleTwinRustAsyncSse arg, dynamic hint});

  Future<WeekdaysTwinRustAsyncSse> handleEnumParameterTwinRustAsyncSse(
      {required WeekdaysTwinRustAsyncSse weekday, dynamic hint});

  Future<KitchenSinkTwinRustAsyncSse> handleEnumStructTwinRustAsyncSse(
      {required KitchenSinkTwinRustAsyncSse val, dynamic hint});

  Future<WeekdaysTwinRustAsyncSse?> handleReturnEnumTwinRustAsyncSse(
      {required String input, dynamic hint});

  Future<MeasureTwinRustAsyncSse?> multiplyByTenTwinRustAsyncSse(
      {required MeasureTwinRustAsyncSse measure, dynamic hint});

  Future<Uint8List> printNoteTwinRustAsyncSse(
      {required NoteTwinRustAsyncSse note, dynamic hint});

  Future<EnumSimpleTwinSse> funcEnumSimpleTwinSse(
      {required EnumSimpleTwinSse arg, dynamic hint});

  Future<EnumWithItemMixedTwinSse> funcEnumWithItemMixedTwinSse(
      {required EnumWithItemMixedTwinSse arg, dynamic hint});

  Future<EnumWithItemStructTwinSse> funcEnumWithItemStructTwinSse(
      {required EnumWithItemStructTwinSse arg, dynamic hint});

  Future<EnumWithItemTupleTwinSse> funcEnumWithItemTupleTwinSse(
      {required EnumWithItemTupleTwinSse arg, dynamic hint});

  Future<WeekdaysTwinSse> handleEnumParameterTwinSse(
      {required WeekdaysTwinSse weekday, dynamic hint});

  Future<KitchenSinkTwinSse> handleEnumStructTwinSse(
      {required KitchenSinkTwinSse val, dynamic hint});

  Future<WeekdaysTwinSse?> handleReturnEnumTwinSse(
      {required String input, dynamic hint});

  Future<MeasureTwinSse?> multiplyByTenTwinSse(
      {required MeasureTwinSse measure, dynamic hint});

  Future<Uint8List> printNoteTwinSse({required NoteTwinSse note, dynamic hint});

  EnumSimpleTwinSync funcEnumSimpleTwinSync(
      {required EnumSimpleTwinSync arg, dynamic hint});

  EnumWithItemMixedTwinSync funcEnumWithItemMixedTwinSync(
      {required EnumWithItemMixedTwinSync arg, dynamic hint});

  EnumWithItemStructTwinSync funcEnumWithItemStructTwinSync(
      {required EnumWithItemStructTwinSync arg, dynamic hint});

  EnumWithItemTupleTwinSync funcEnumWithItemTupleTwinSync(
      {required EnumWithItemTupleTwinSync arg, dynamic hint});

  WeekdaysTwinSync handleEnumParameterTwinSync(
      {required WeekdaysTwinSync weekday, dynamic hint});

  KitchenSinkTwinSync handleEnumStructTwinSync(
      {required KitchenSinkTwinSync val, dynamic hint});

  WeekdaysTwinSync? handleReturnEnumTwinSync(
      {required String input, dynamic hint});

  MeasureTwinSync? multiplyByTenTwinSync(
      {required MeasureTwinSync measure, dynamic hint});

  Uint8List printNoteTwinSync({required NoteTwinSync note, dynamic hint});

  EnumSimpleTwinSyncSse funcEnumSimpleTwinSyncSse(
      {required EnumSimpleTwinSyncSse arg, dynamic hint});

  EnumWithItemMixedTwinSyncSse funcEnumWithItemMixedTwinSyncSse(
      {required EnumWithItemMixedTwinSyncSse arg, dynamic hint});

  EnumWithItemStructTwinSyncSse funcEnumWithItemStructTwinSyncSse(
      {required EnumWithItemStructTwinSyncSse arg, dynamic hint});

  EnumWithItemTupleTwinSyncSse funcEnumWithItemTupleTwinSyncSse(
      {required EnumWithItemTupleTwinSyncSse arg, dynamic hint});

  WeekdaysTwinSyncSse handleEnumParameterTwinSyncSse(
      {required WeekdaysTwinSyncSse weekday, dynamic hint});

  KitchenSinkTwinSyncSse handleEnumStructTwinSyncSse(
      {required KitchenSinkTwinSyncSse val, dynamic hint});

  WeekdaysTwinSyncSse? handleReturnEnumTwinSyncSse(
      {required String input, dynamic hint});

  MeasureTwinSyncSse? multiplyByTenTwinSyncSse(
      {required MeasureTwinSyncSse measure, dynamic hint});

  Uint8List printNoteTwinSyncSse({required NoteTwinSyncSse note, dynamic hint});

  Future<String> eventTwinRustAsyncAsStringTwinRustAsync(
      {required EventTwinRustAsync that, dynamic hint});

  Future<void> closeEventListenerTwinRustAsync({dynamic hint});

  Future<void> createEventTwinRustAsync(
      {required String address, required String payload, dynamic hint});

  Stream<EventTwinRustAsync> registerEventListenerTwinRustAsync({dynamic hint});

  Future<String> eventTwinRustAsyncSseAsStringTwinRustAsyncSse(
      {required EventTwinRustAsyncSse that, dynamic hint});

  Future<void> closeEventListenerTwinRustAsyncSse({dynamic hint});

  Future<void> createEventTwinRustAsyncSse(
      {required String address, required String payload, dynamic hint});

  Stream<EventTwinRustAsyncSse> registerEventListenerTwinRustAsyncSse(
      {dynamic hint});

  Future<String> eventTwinSseAsStringTwinSse(
      {required EventTwinSse that, dynamic hint});

  Future<void> closeEventListenerTwinSse({dynamic hint});

  Future<void> createEventTwinSse(
      {required String address, required String payload, dynamic hint});

  Stream<EventTwinSse> registerEventListenerTwinSse({dynamic hint});

  Future<CustomStructTwinRustAsync> customStructTwinRustAsyncNewTwinRustAsync(
      {required String message, dynamic hint});

  Future<void>
      customStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint});

  Future<int>
      customStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint});

  Future<void>
      customStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync(
          {dynamic hint});

  Future<int> customStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync(
      {dynamic hint});

  Future<SomeStructTwinRustAsync> someStructTwinRustAsyncNewTwinRustAsync(
      {required int value, dynamic hint});

  Future<int> someStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint});

  Future<int> someStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint});

  Future<int> someStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync(
      {dynamic hint});

  Future<int> someStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync(
      {dynamic hint});

  Future<void> customEnumErrorPanicTwinRustAsync({dynamic hint});

  Future<int> customEnumErrorReturnErrorTwinRustAsync({dynamic hint});

  Future<int> customEnumErrorReturnOkTwinRustAsync(
      {required int arg, dynamic hint});

  Future<void> customNestedErrorReturnErrorTwinRustAsync(
      {required CustomNestedErrorOuterTwinRustAsync arg, dynamic hint});

  Future<void> customStructErrorReturnErrorTwinRustAsync(
      {required CustomStructErrorTwinRustAsync arg, dynamic hint});

  Future<int> funcReturnErrorTwinRustAsync({dynamic hint});

  Future<int> funcTypeFalliblePanicTwinRustAsync({dynamic hint});

  Future<int> funcTypeInfalliblePanicTwinRustAsync({dynamic hint});

  Future<void> panicWithCustomResultTwinRustAsync({dynamic hint});

  Future<void> returnCustomNestedError1TwinRustAsync({dynamic hint});

  Future<void> returnCustomNestedError1Variant1TwinRustAsync({dynamic hint});

  Future<void> returnCustomNestedError2TwinRustAsync({dynamic hint});

  Future<void> returnCustomStructErrorTwinRustAsync({dynamic hint});

  Future<int> returnCustomStructOkTwinRustAsync({dynamic hint});

  Future<int> returnErrCustomErrorTwinRustAsync({dynamic hint});

  Future<int> returnErrorVariantTwinRustAsync(
      {required int variant, dynamic hint});

  Future<int> returnOkCustomErrorTwinRustAsync({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinRustAsync({dynamic hint});

  Future<void> throwAnyhowTwinRustAsync({dynamic hint});

  Future<CustomStructTwinRustAsyncSse>
      customStructTwinRustAsyncSseNewTwinRustAsyncSse(
          {required String message, dynamic hint});

  Future<void>
      customStructTwinRustAsyncSseNonstaticReturnCustomStructErrorTwinRustAsyncSse(
          {required CustomStructTwinRustAsyncSse that, dynamic hint});

  Future<int>
      customStructTwinRustAsyncSseNonstaticReturnCustomStructOkTwinRustAsyncSse(
          {required CustomStructTwinRustAsyncSse that, dynamic hint});

  Future<void>
      customStructTwinRustAsyncSseStaticReturnCustomStructErrorTwinRustAsyncSse(
          {dynamic hint});

  Future<int>
      customStructTwinRustAsyncSseStaticReturnCustomStructOkTwinRustAsyncSse(
          {dynamic hint});

  Future<SomeStructTwinRustAsyncSse>
      someStructTwinRustAsyncSseNewTwinRustAsyncSse(
          {required int value, dynamic hint});

  Future<int>
      someStructTwinRustAsyncSseNonStaticReturnErrCustomErrorTwinRustAsyncSse(
          {required SomeStructTwinRustAsyncSse that, dynamic hint});

  Future<int>
      someStructTwinRustAsyncSseNonStaticReturnOkCustomErrorTwinRustAsyncSse(
          {required SomeStructTwinRustAsyncSse that, dynamic hint});

  Future<int>
      someStructTwinRustAsyncSseStaticReturnErrCustomErrorTwinRustAsyncSse(
          {dynamic hint});

  Future<int>
      someStructTwinRustAsyncSseStaticReturnOkCustomErrorTwinRustAsyncSse(
          {dynamic hint});

  Future<void> customEnumErrorPanicTwinRustAsyncSse({dynamic hint});

  Future<int> customEnumErrorReturnErrorTwinRustAsyncSse({dynamic hint});

  Future<int> customEnumErrorReturnOkTwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<void> customNestedErrorReturnErrorTwinRustAsyncSse(
      {required CustomNestedErrorOuterTwinRustAsyncSse arg, dynamic hint});

  Future<void> customStructErrorReturnErrorTwinRustAsyncSse(
      {required CustomStructErrorTwinRustAsyncSse arg, dynamic hint});

  Future<int> funcReturnErrorTwinRustAsyncSse({dynamic hint});

  Future<int> funcTypeFalliblePanicTwinRustAsyncSse({dynamic hint});

  Future<int> funcTypeInfalliblePanicTwinRustAsyncSse({dynamic hint});

  Future<void> panicWithCustomResultTwinRustAsyncSse({dynamic hint});

  Future<void> returnCustomNestedError1TwinRustAsyncSse({dynamic hint});

  Future<void> returnCustomNestedError1Variant1TwinRustAsyncSse({dynamic hint});

  Future<void> returnCustomNestedError2TwinRustAsyncSse({dynamic hint});

  Future<void> returnCustomStructErrorTwinRustAsyncSse({dynamic hint});

  Future<int> returnCustomStructOkTwinRustAsyncSse({dynamic hint});

  Future<int> returnErrCustomErrorTwinRustAsyncSse({dynamic hint});

  Future<int> returnErrorVariantTwinRustAsyncSse(
      {required int variant, dynamic hint});

  Future<int> returnOkCustomErrorTwinRustAsyncSse({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinRustAsyncSse({dynamic hint});

  Future<void> throwAnyhowTwinRustAsyncSse({dynamic hint});

  Future<CustomStructTwinSse> customStructTwinSseNewTwinSse(
      {required String message, dynamic hint});

  Future<void> customStructTwinSseNonstaticReturnCustomStructErrorTwinSse(
      {required CustomStructTwinSse that, dynamic hint});

  Future<int> customStructTwinSseNonstaticReturnCustomStructOkTwinSse(
      {required CustomStructTwinSse that, dynamic hint});

  Future<void> customStructTwinSseStaticReturnCustomStructErrorTwinSse(
      {dynamic hint});

  Future<int> customStructTwinSseStaticReturnCustomStructOkTwinSse(
      {dynamic hint});

  Future<SomeStructTwinSse> someStructTwinSseNewTwinSse(
      {required int value, dynamic hint});

  Future<int> someStructTwinSseNonStaticReturnErrCustomErrorTwinSse(
      {required SomeStructTwinSse that, dynamic hint});

  Future<int> someStructTwinSseNonStaticReturnOkCustomErrorTwinSse(
      {required SomeStructTwinSse that, dynamic hint});

  Future<int> someStructTwinSseStaticReturnErrCustomErrorTwinSse(
      {dynamic hint});

  Future<int> someStructTwinSseStaticReturnOkCustomErrorTwinSse({dynamic hint});

  Future<void> customEnumErrorPanicTwinSse({dynamic hint});

  Future<int> customEnumErrorReturnErrorTwinSse({dynamic hint});

  Future<int> customEnumErrorReturnOkTwinSse({required int arg, dynamic hint});

  Future<void> customNestedErrorReturnErrorTwinSse(
      {required CustomNestedErrorOuterTwinSse arg, dynamic hint});

  Future<void> customStructErrorReturnErrorTwinSse(
      {required CustomStructErrorTwinSse arg, dynamic hint});

  Future<int> funcReturnErrorTwinSse({dynamic hint});

  Future<int> funcTypeFalliblePanicTwinSse({dynamic hint});

  Future<int> funcTypeInfalliblePanicTwinSse({dynamic hint});

  Future<void> panicWithCustomResultTwinSse({dynamic hint});

  Future<void> returnCustomNestedError1TwinSse({dynamic hint});

  Future<void> returnCustomNestedError1Variant1TwinSse({dynamic hint});

  Future<void> returnCustomNestedError2TwinSse({dynamic hint});

  Future<void> returnCustomStructErrorTwinSse({dynamic hint});

  Future<int> returnCustomStructOkTwinSse({dynamic hint});

  Future<int> returnErrCustomErrorTwinSse({dynamic hint});

  Future<int> returnErrorVariantTwinSse({required int variant, dynamic hint});

  Future<int> returnOkCustomErrorTwinSse({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinSse({dynamic hint});

  Future<void> throwAnyhowTwinSse({dynamic hint});

  CustomStructTwinSync customStructTwinSyncNewTwinSync(
      {required String message, dynamic hint});

  void customStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
      {required CustomStructTwinSync that, dynamic hint});

  int customStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that, dynamic hint});

  void customStructTwinSyncStaticReturnCustomStructErrorTwinSync(
      {dynamic hint});

  int customStructTwinSyncStaticReturnCustomStructOkTwinSync({dynamic hint});

  SomeStructTwinSync someStructTwinSyncNewTwinSync(
      {required int value, dynamic hint});

  int someStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint});

  int someStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint});

  int someStructTwinSyncStaticReturnErrCustomErrorTwinSync({dynamic hint});

  int someStructTwinSyncStaticReturnOkCustomErrorTwinSync({dynamic hint});

  void customEnumErrorPanicTwinSync({dynamic hint});

  int customEnumErrorReturnErrorTwinSync({dynamic hint});

  int customEnumErrorReturnOkTwinSync({required int arg, dynamic hint});

  void customNestedErrorReturnErrorTwinSync(
      {required CustomNestedErrorOuterTwinSync arg, dynamic hint});

  void customStructErrorReturnErrorTwinSync(
      {required CustomStructErrorTwinSync arg, dynamic hint});

  int funcReturnErrorTwinSync({dynamic hint});

  int funcTypeFalliblePanicTwinSync({dynamic hint});

  int funcTypeInfalliblePanicTwinSync({dynamic hint});

  void panicWithCustomResultTwinSync({dynamic hint});

  void returnCustomNestedError1TwinSync({dynamic hint});

  void returnCustomNestedError1Variant1TwinSync({dynamic hint});

  void returnCustomNestedError2TwinSync({dynamic hint});

  void returnCustomStructErrorTwinSync({dynamic hint});

  int returnCustomStructOkTwinSync({dynamic hint});

  int returnErrCustomErrorTwinSync({dynamic hint});

  int returnErrorVariantTwinSync({required int variant, dynamic hint});

  int returnOkCustomErrorTwinSync({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinSync({dynamic hint});

  void throwAnyhowTwinSync({dynamic hint});

  CustomStructTwinSyncSse customStructTwinSyncSseNewTwinSyncSse(
      {required String message, dynamic hint});

  void customStructTwinSyncSseNonstaticReturnCustomStructErrorTwinSyncSse(
      {required CustomStructTwinSyncSse that, dynamic hint});

  int customStructTwinSyncSseNonstaticReturnCustomStructOkTwinSyncSse(
      {required CustomStructTwinSyncSse that, dynamic hint});

  void customStructTwinSyncSseStaticReturnCustomStructErrorTwinSyncSse(
      {dynamic hint});

  int customStructTwinSyncSseStaticReturnCustomStructOkTwinSyncSse(
      {dynamic hint});

  SomeStructTwinSyncSse someStructTwinSyncSseNewTwinSyncSse(
      {required int value, dynamic hint});

  int someStructTwinSyncSseNonStaticReturnErrCustomErrorTwinSyncSse(
      {required SomeStructTwinSyncSse that, dynamic hint});

  int someStructTwinSyncSseNonStaticReturnOkCustomErrorTwinSyncSse(
      {required SomeStructTwinSyncSse that, dynamic hint});

  int someStructTwinSyncSseStaticReturnErrCustomErrorTwinSyncSse(
      {dynamic hint});

  int someStructTwinSyncSseStaticReturnOkCustomErrorTwinSyncSse({dynamic hint});

  void customEnumErrorPanicTwinSyncSse({dynamic hint});

  int customEnumErrorReturnErrorTwinSyncSse({dynamic hint});

  int customEnumErrorReturnOkTwinSyncSse({required int arg, dynamic hint});

  void customNestedErrorReturnErrorTwinSyncSse(
      {required CustomNestedErrorOuterTwinSyncSse arg, dynamic hint});

  void customStructErrorReturnErrorTwinSyncSse(
      {required CustomStructErrorTwinSyncSse arg, dynamic hint});

  int funcReturnErrorTwinSyncSse({dynamic hint});

  int funcTypeFalliblePanicTwinSyncSse({dynamic hint});

  int funcTypeInfalliblePanicTwinSyncSse({dynamic hint});

  void panicWithCustomResultTwinSyncSse({dynamic hint});

  void returnCustomNestedError1TwinSyncSse({dynamic hint});

  void returnCustomNestedError1Variant1TwinSyncSse({dynamic hint});

  void returnCustomNestedError2TwinSyncSse({dynamic hint});

  void returnCustomStructErrorTwinSyncSse({dynamic hint});

  int returnCustomStructOkTwinSyncSse({dynamic hint});

  int returnErrCustomErrorTwinSyncSse({dynamic hint});

  int returnErrorVariantTwinSyncSse({required int variant, dynamic hint});

  int returnOkCustomErrorTwinSyncSse({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinSyncSse({dynamic hint});

  void throwAnyhowTwinSyncSse({dynamic hint});

  Future<NewSimpleStruct> callNewModuleSystemTwinRustAsync({dynamic hint});

  Future<OldSimpleStruct> callOldModuleSystemTwinRustAsync({dynamic hint});

  Future<bool> useImportedEnumTwinRustAsync(
      {required MyEnum myEnum, dynamic hint});

  Future<bool> useImportedStructTwinRustAsync(
      {required MyStruct myStruct, dynamic hint});

  Future<NewSimpleStruct> callNewModuleSystemTwinRustAsyncSse({dynamic hint});

  Future<OldSimpleStruct> callOldModuleSystemTwinRustAsyncSse({dynamic hint});

  Future<bool> useImportedEnumTwinRustAsyncSse(
      {required MyEnum myEnum, dynamic hint});

  Future<bool> useImportedStructTwinRustAsyncSse(
      {required MyStruct myStruct, dynamic hint});

  Future<NewSimpleStruct> callNewModuleSystemTwinSse({dynamic hint});

  Future<OldSimpleStruct> callOldModuleSystemTwinSse({dynamic hint});

  Future<bool> useImportedEnumTwinSse({required MyEnum myEnum, dynamic hint});

  Future<bool> useImportedStructTwinSse(
      {required MyStruct myStruct, dynamic hint});

  NewSimpleStruct callNewModuleSystemTwinSync({dynamic hint});

  OldSimpleStruct callOldModuleSystemTwinSync({dynamic hint});

  bool useImportedEnumTwinSync({required MyEnum myEnum, dynamic hint});

  bool useImportedStructTwinSync({required MyStruct myStruct, dynamic hint});

  NewSimpleStruct callNewModuleSystemTwinSyncSse({dynamic hint});

  OldSimpleStruct callOldModuleSystemTwinSyncSse({dynamic hint});

  bool useImportedEnumTwinSyncSse({required MyEnum myEnum, dynamic hint});

  bool useImportedStructTwinSyncSse({required MyStruct myStruct, dynamic hint});

  Future<AnotherMacroStructTwinSse> anotherMacroStructTwinSse({dynamic hint});

  Future<MacroStruct> funcMacroStructTwinSse(
      {required MacroStruct arg, dynamic hint});

  Future<String> concatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
      {required String a, required String b, dynamic hint});

  Future<String> concatenateWithTwinRustAsyncConcatenateTwinRustAsync(
      {required ConcatenateWithTwinRustAsync that,
      required String b,
      dynamic hint});

  Stream<int>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync(
          {dynamic hint});

  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
      {required ConcatenateWithTwinRustAsync that, dynamic hint});

  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max,
          dynamic hint});

  Future<ConcatenateWithTwinRustAsync>
      concatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a, dynamic hint});

  Future<int> sumWithTwinRustAsyncSumTwinRustAsync(
      {required SumWithTwinRustAsync that,
      required int y,
      required int z,
      dynamic hint});

  Future<SumWithTwinRustAsyncArray3> getSumArrayTwinRustAsync(
      {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinRustAsync> getSumStructTwinRustAsync({dynamic hint});

  Future<String>
      concatenateWithTwinRustAsyncSseConcatenateStaticTwinRustAsyncSse(
          {required String a, required String b, dynamic hint});

  Future<String> concatenateWithTwinRustAsyncSseConcatenateTwinRustAsyncSse(
      {required ConcatenateWithTwinRustAsyncSse that,
      required String b,
      dynamic hint});

  Stream<int>
      concatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkSingleArgTwinRustAsyncSse(
          {dynamic hint});

  Stream<Log2TwinRustAsyncSse>
      concatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkTwinRustAsyncSse(
          {required int key, required int max, dynamic hint});

  Stream<int>
      concatenateWithTwinRustAsyncSseHandleSomeStreamSinkAt1TwinRustAsyncSse(
          {required ConcatenateWithTwinRustAsyncSse that, dynamic hint});

  Stream<Log2TwinRustAsyncSse>
      concatenateWithTwinRustAsyncSseHandleSomeStreamSinkTwinRustAsyncSse(
          {required ConcatenateWithTwinRustAsyncSse that,
          required int key,
          required int max,
          dynamic hint});

  Future<ConcatenateWithTwinRustAsyncSse>
      concatenateWithTwinRustAsyncSseNewTwinRustAsyncSse(
          {required String a, dynamic hint});

  Future<int> sumWithTwinRustAsyncSseSumTwinRustAsyncSse(
      {required SumWithTwinRustAsyncSse that,
      required int y,
      required int z,
      dynamic hint});

  Future<SumWithTwinRustAsyncSseArray3> getSumArrayTwinRustAsyncSse(
      {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinRustAsyncSse> getSumStructTwinRustAsyncSse({dynamic hint});

  Future<String> concatenateWithTwinSseConcatenateStaticTwinSse(
      {required String a, required String b, dynamic hint});

  Future<String> concatenateWithTwinSseConcatenateTwinSse(
      {required ConcatenateWithTwinSse that, required String b, dynamic hint});

  Stream<int> concatenateWithTwinSseHandleSomeStaticStreamSinkSingleArgTwinSse(
      {dynamic hint});

  Stream<Log2TwinSse> concatenateWithTwinSseHandleSomeStaticStreamSinkTwinSse(
      {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinSseHandleSomeStreamSinkAt1TwinSse(
      {required ConcatenateWithTwinSse that, dynamic hint});

  Stream<Log2TwinSse> concatenateWithTwinSseHandleSomeStreamSinkTwinSse(
      {required ConcatenateWithTwinSse that,
      required int key,
      required int max,
      dynamic hint});

  Future<ConcatenateWithTwinSse> concatenateWithTwinSseNewTwinSse(
      {required String a, dynamic hint});

  Future<int> sumWithTwinSseSumTwinSse(
      {required SumWithTwinSse that,
      required int y,
      required int z,
      dynamic hint});

  Future<SumWithTwinSseArray3> getSumArrayTwinSse(
      {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinSse> getSumStructTwinSse({dynamic hint});

  String concatenateWithTwinSyncConcatenateStaticTwinSync(
      {required String a, required String b, dynamic hint});

  String concatenateWithTwinSyncConcatenateTwinSync(
      {required ConcatenateWithTwinSync that, required String b, dynamic hint});

  Stream<int>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync(
          {dynamic hint});

  Stream<Log2TwinSync>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
      {required ConcatenateWithTwinSync that, dynamic hint});

  Stream<Log2TwinSync> concatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
      {required ConcatenateWithTwinSync that,
      required int key,
      required int max,
      dynamic hint});

  ConcatenateWithTwinSync concatenateWithTwinSyncNewTwinSync(
      {required String a, dynamic hint});

  int sumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that,
      required int y,
      required int z,
      dynamic hint});

  SumWithTwinSyncArray3 getSumArrayTwinSync(
      {required int a, required int b, required int c, dynamic hint});

  SumWithTwinSync getSumStructTwinSync({dynamic hint});

  String concatenateWithTwinSyncSseConcatenateStaticTwinSyncSse(
      {required String a, required String b, dynamic hint});

  String concatenateWithTwinSyncSseConcatenateTwinSyncSse(
      {required ConcatenateWithTwinSyncSse that,
      required String b,
      dynamic hint});

  Stream<int>
      concatenateWithTwinSyncSseHandleSomeStaticStreamSinkSingleArgTwinSyncSse(
          {dynamic hint});

  Stream<Log2TwinSyncSse>
      concatenateWithTwinSyncSseHandleSomeStaticStreamSinkTwinSyncSse(
          {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinSyncSseHandleSomeStreamSinkAt1TwinSyncSse(
      {required ConcatenateWithTwinSyncSse that, dynamic hint});

  Stream<Log2TwinSyncSse>
      concatenateWithTwinSyncSseHandleSomeStreamSinkTwinSyncSse(
          {required ConcatenateWithTwinSyncSse that,
          required int key,
          required int max,
          dynamic hint});

  ConcatenateWithTwinSyncSse concatenateWithTwinSyncSseNewTwinSyncSse(
      {required String a, dynamic hint});

  int sumWithTwinSyncSseSumTwinSyncSse(
      {required SumWithTwinSyncSse that,
      required int y,
      required int z,
      dynamic hint});

  SumWithTwinSyncSseArray3 getSumArrayTwinSyncSse(
      {required int a, required int b, required int c, dynamic hint});

  SumWithTwinSyncSse getSumStructTwinSyncSse({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinRustAsync({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinRustAsync(
      {dynamic hint});

  Future<int?> firstNumberTwinRustAsync({required Numbers nums, dynamic hint});

  Future<int?> firstSequenceTwinRustAsync(
      {required Sequences seqs, dynamic hint});

  Future<ApplicationSettings> getAppSettingsTwinRustAsync({dynamic hint});

  Future<ApplicationSettings> getFallibleAppSettingsTwinRustAsync(
      {dynamic hint});

  Future<ApplicationMessage> getMessageTwinRustAsync({dynamic hint});

  Future<bool> isAppEmbeddedTwinRustAsync(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinRustAsync> mirrorStructStreamTwinRustAsync(
      {dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinRustAsync({dynamic hint});

  Future<Numbers> repeatNumberTwinRustAsync(
      {required int num, required int times, dynamic hint});

  Future<Sequences> repeatSequenceTwinRustAsync(
      {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinRustAsync>
      testContainsMirroredSubStructTwinRustAsync({dynamic hint});

  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinRustAsync(
      {dynamic hint});

  Future<List<RawStringEnumMirrored>>
      testListOfNestedEnumsMirroredTwinRustAsync({dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinRustAsync({dynamic hint});

  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinRustAsync(
      {dynamic hint});

  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinRustAsync(
      {required bool nested, dynamic hint});

  Future<RawStringMirrored> testRawStringMirroredTwinRustAsync({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinRustAsyncSse({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinRustAsyncSse(
      {dynamic hint});

  Future<int?> firstNumberTwinRustAsyncSse(
      {required Numbers nums, dynamic hint});

  Future<int?> firstSequenceTwinRustAsyncSse(
      {required Sequences seqs, dynamic hint});

  Future<ApplicationSettings> getAppSettingsTwinRustAsyncSse({dynamic hint});

  Future<ApplicationSettings> getFallibleAppSettingsTwinRustAsyncSse(
      {dynamic hint});

  Future<ApplicationMessage> getMessageTwinRustAsyncSse({dynamic hint});

  Future<bool> isAppEmbeddedTwinRustAsyncSse(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinRustAsyncSse> mirrorStructStreamTwinRustAsyncSse(
      {dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinRustAsyncSse({dynamic hint});

  Future<Numbers> repeatNumberTwinRustAsyncSse(
      {required int num, required int times, dynamic hint});

  Future<Sequences> repeatSequenceTwinRustAsyncSse(
      {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinRustAsyncSse>
      testContainsMirroredSubStructTwinRustAsyncSse({dynamic hint});

  Future<List<RawStringMirrored>>
      testFallibleOfRawStringMirroredTwinRustAsyncSse({dynamic hint});

  Future<List<RawStringEnumMirrored>>
      testListOfNestedEnumsMirroredTwinRustAsyncSse({dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinRustAsyncSse({dynamic hint});

  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinRustAsyncSse(
      {dynamic hint});

  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinRustAsyncSse(
      {required bool nested, dynamic hint});

  Future<RawStringMirrored> testRawStringMirroredTwinRustAsyncSse(
      {dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinSse({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSse({dynamic hint});

  Future<int?> firstNumberTwinSse({required Numbers nums, dynamic hint});

  Future<int?> firstSequenceTwinSse({required Sequences seqs, dynamic hint});

  Future<ApplicationSettings> getAppSettingsTwinSse({dynamic hint});

  Future<ApplicationSettings> getFallibleAppSettingsTwinSse({dynamic hint});

  Future<ApplicationMessage> getMessageTwinSse({dynamic hint});

  Future<bool> isAppEmbeddedTwinSse(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinSse> mirrorStructStreamTwinSse({dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)> mirrorTupleStreamTwinSse(
      {dynamic hint});

  Future<Numbers> repeatNumberTwinSse(
      {required int num, required int times, dynamic hint});

  Future<Sequences> repeatSequenceTwinSse(
      {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinSse> testContainsMirroredSubStructTwinSse(
      {dynamic hint});

  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinSse(
      {dynamic hint});

  Future<List<RawStringEnumMirrored>> testListOfNestedEnumsMirroredTwinSse(
      {dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinSse({dynamic hint});

  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinSse(
      {dynamic hint});

  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinSse(
      {required bool nested, dynamic hint});

  Future<RawStringMirrored> testRawStringMirroredTwinSse({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinSync({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSync(
      {dynamic hint});

  int? firstNumberTwinSync({required Numbers nums, dynamic hint});

  int? firstSequenceTwinSync({required Sequences seqs, dynamic hint});

  ApplicationSettings getAppSettingsTwinSync({dynamic hint});

  ApplicationSettings getFallibleAppSettingsTwinSync({dynamic hint});

  ApplicationMessage getMessageTwinSync({dynamic hint});

  bool isAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinSync> mirrorStructStreamTwinSync({dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinSync({dynamic hint});

  Numbers repeatNumberTwinSync(
      {required int num, required int times, dynamic hint});

  Sequences repeatSequenceTwinSync(
      {required int seq, required int times, dynamic hint});

  ContainsMirroredSubStructTwinSync testContainsMirroredSubStructTwinSync(
      {dynamic hint});

  List<RawStringMirrored> testFallibleOfRawStringMirroredTwinSync(
      {dynamic hint});

  List<RawStringEnumMirrored> testListOfNestedEnumsMirroredTwinSync(
      {dynamic hint});

  ListOfNestedRawStringMirrored testListOfRawNestedStringMirroredTwinSync(
      {dynamic hint});

  NestedRawStringMirrored testNestedRawStringMirroredTwinSync({dynamic hint});

  RawStringEnumMirrored testRawStringEnumMirroredTwinSync(
      {required bool nested, dynamic hint});

  RawStringMirrored testRawStringMirroredTwinSync({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinSyncSse({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSyncSse(
      {dynamic hint});

  int? firstNumberTwinSyncSse({required Numbers nums, dynamic hint});

  int? firstSequenceTwinSyncSse({required Sequences seqs, dynamic hint});

  ApplicationSettings getAppSettingsTwinSyncSse({dynamic hint});

  ApplicationSettings getFallibleAppSettingsTwinSyncSse({dynamic hint});

  ApplicationMessage getMessageTwinSyncSse({dynamic hint});

  bool isAppEmbeddedTwinSyncSse(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinSyncSse> mirrorStructStreamTwinSyncSse({dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinSyncSse({dynamic hint});

  Numbers repeatNumberTwinSyncSse(
      {required int num, required int times, dynamic hint});

  Sequences repeatSequenceTwinSyncSse(
      {required int seq, required int times, dynamic hint});

  ContainsMirroredSubStructTwinSyncSse testContainsMirroredSubStructTwinSyncSse(
      {dynamic hint});

  List<RawStringMirrored> testFallibleOfRawStringMirroredTwinSyncSse(
      {dynamic hint});

  List<RawStringEnumMirrored> testListOfNestedEnumsMirroredTwinSyncSse(
      {dynamic hint});

  ListOfNestedRawStringMirrored testListOfRawNestedStringMirroredTwinSyncSse(
      {dynamic hint});

  NestedRawStringMirrored testNestedRawStringMirroredTwinSyncSse(
      {dynamic hint});

  RawStringEnumMirrored testRawStringEnumMirroredTwinSyncSse(
      {required bool nested, dynamic hint});

  RawStringMirrored testRawStringMirroredTwinSyncSse({dynamic hint});

  Future<BigBuffersTwinRustAsync> handleBigBuffersTwinRustAsync({dynamic hint});

  Future<MyTreeNodeTwinRustAsync> handleComplexStructTwinRustAsync(
      {required MyTreeNodeTwinRustAsync s, dynamic hint});

  Future<MyNestedStructTwinRustAsync> handleNestedStructTwinRustAsync(
      {required MyNestedStructTwinRustAsync s, dynamic hint});

  Future<String> handleStringTwinRustAsync({required String s, dynamic hint});

  Future<MySize> handleStructTwinRustAsync(
      {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List> handleVecU8TwinRustAsync(
      {required Uint8List v, dynamic hint});

  Future<List<WeekdaysTwinRustAsync>> listOfPrimitiveEnumsTwinRustAsync(
      {required List<WeekdaysTwinRustAsync> weekdays, dynamic hint});

  Future<AbcTwinRustAsync> testAbcEnumTwinRustAsync(
      {required AbcTwinRustAsync abc, dynamic hint});

  Future<StructWithEnumTwinRustAsync> testStructWithEnumTwinRustAsync(
      {required StructWithEnumTwinRustAsync se, dynamic hint});

  Future<BigBuffersTwinRustAsyncSse> handleBigBuffersTwinRustAsyncSse(
      {dynamic hint});

  Future<MyTreeNodeTwinRustAsyncSse> handleComplexStructTwinRustAsyncSse(
      {required MyTreeNodeTwinRustAsyncSse s, dynamic hint});

  Future<MyNestedStructTwinRustAsyncSse> handleNestedStructTwinRustAsyncSse(
      {required MyNestedStructTwinRustAsyncSse s, dynamic hint});

  Future<String> handleStringTwinRustAsyncSse(
      {required String s, dynamic hint});

  Future<MySize> handleStructTwinRustAsyncSse(
      {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List> handleVecU8TwinRustAsyncSse(
      {required Uint8List v, dynamic hint});

  Future<List<WeekdaysTwinRustAsyncSse>> listOfPrimitiveEnumsTwinRustAsyncSse(
      {required List<WeekdaysTwinRustAsyncSse> weekdays, dynamic hint});

  Future<AbcTwinRustAsyncSse> testAbcEnumTwinRustAsyncSse(
      {required AbcTwinRustAsyncSse abc, dynamic hint});

  Future<StructWithEnumTwinRustAsyncSse> testStructWithEnumTwinRustAsyncSse(
      {required StructWithEnumTwinRustAsyncSse se, dynamic hint});

  Future<BigBuffersTwinSse> handleBigBuffersTwinSse({dynamic hint});

  Future<MyTreeNodeTwinSse> handleComplexStructTwinSse(
      {required MyTreeNodeTwinSse s, dynamic hint});

  Future<MyNestedStructTwinSse> handleNestedStructTwinSse(
      {required MyNestedStructTwinSse s, dynamic hint});

  Future<String> handleStringTwinSse({required String s, dynamic hint});

  Future<MySize> handleStructTwinSse(
      {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List> handleVecU8TwinSse({required Uint8List v, dynamic hint});

  Future<List<WeekdaysTwinSse>> listOfPrimitiveEnumsTwinSse(
      {required List<WeekdaysTwinSse> weekdays, dynamic hint});

  Future<AbcTwinSse> testAbcEnumTwinSse(
      {required AbcTwinSse abc, dynamic hint});

  Future<StructWithEnumTwinSse> testStructWithEnumTwinSse(
      {required StructWithEnumTwinSse se, dynamic hint});

  BigBuffersTwinSync handleBigBuffersTwinSync({dynamic hint});

  MyTreeNodeTwinSync handleComplexStructTwinSync(
      {required MyTreeNodeTwinSync s, dynamic hint});

  MyNestedStructTwinSync handleNestedStructTwinSync(
      {required MyNestedStructTwinSync s, dynamic hint});

  String handleStringTwinSync({required String s, dynamic hint});

  MySize handleStructTwinSync(
      {required MySize arg, required MySize boxed, dynamic hint});

  Uint8List handleVecU8TwinSync({required Uint8List v, dynamic hint});

  List<WeekdaysTwinSync> listOfPrimitiveEnumsTwinSync(
      {required List<WeekdaysTwinSync> weekdays, dynamic hint});

  AbcTwinSync testAbcEnumTwinSync({required AbcTwinSync abc, dynamic hint});

  StructWithEnumTwinSync testStructWithEnumTwinSync(
      {required StructWithEnumTwinSync se, dynamic hint});

  BigBuffersTwinSyncSse handleBigBuffersTwinSyncSse({dynamic hint});

  MyTreeNodeTwinSyncSse handleComplexStructTwinSyncSse(
      {required MyTreeNodeTwinSyncSse s, dynamic hint});

  MyNestedStructTwinSyncSse handleNestedStructTwinSyncSse(
      {required MyNestedStructTwinSyncSse s, dynamic hint});

  String handleStringTwinSyncSse({required String s, dynamic hint});

  MySize handleStructTwinSyncSse(
      {required MySize arg, required MySize boxed, dynamic hint});

  Uint8List handleVecU8TwinSyncSse({required Uint8List v, dynamic hint});

  List<WeekdaysTwinSyncSse> listOfPrimitiveEnumsTwinSyncSse(
      {required List<WeekdaysTwinSyncSse> weekdays, dynamic hint});

  AbcTwinSyncSse testAbcEnumTwinSyncSse(
      {required AbcTwinSyncSse abc, dynamic hint});

  StructWithEnumTwinSyncSse testStructWithEnumTwinSyncSse(
      {required StructWithEnumTwinSyncSse se, dynamic hint});

  Future<EmptyTwinRustAsync> emptyStructTwinRustAsync(
      {required EmptyTwinRustAsync empty, dynamic hint});

  Future<void> funcReturnUnitTwinRustAsync({dynamic hint});

  Future<String> funcStringTwinRustAsync({required String arg, dynamic hint});

  Future<List<MySize>> handleListOfStructTwinRustAsync(
      {required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringListTwinRustAsync(
      {required List<String> names, dynamic hint});

  Future<EmptyTwinRustAsyncSse> emptyStructTwinRustAsyncSse(
      {required EmptyTwinRustAsyncSse empty, dynamic hint});

  Future<void> funcReturnUnitTwinRustAsyncSse({dynamic hint});

  Future<String> funcStringTwinRustAsyncSse(
      {required String arg, dynamic hint});

  Future<List<MySize>> handleListOfStructTwinRustAsyncSse(
      {required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringListTwinRustAsyncSse(
      {required List<String> names, dynamic hint});

  Future<EmptyTwinSse> emptyStructTwinSse(
      {required EmptyTwinSse empty, dynamic hint});

  Future<void> funcReturnUnitTwinSse({dynamic hint});

  Future<String> funcStringTwinSse({required String arg, dynamic hint});

  Future<List<MySize>> handleListOfStructTwinSse(
      {required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringListTwinSse(
      {required List<String> names, dynamic hint});

  EmptyTwinSync emptyStructTwinSync(
      {required EmptyTwinSync empty, dynamic hint});

  void funcReturnUnitTwinSync({dynamic hint});

  String funcStringTwinSync({required String arg, dynamic hint});

  List<MySize> handleListOfStructTwinSync(
      {required List<MySize> l, dynamic hint});

  List<String> handleStringListTwinSync(
      {required List<String> names, dynamic hint});

  EmptyTwinSyncSse emptyStructTwinSyncSse(
      {required EmptyTwinSyncSse empty, dynamic hint});

  void funcReturnUnitTwinSyncSse({dynamic hint});

  String funcStringTwinSyncSse({required String arg, dynamic hint});

  List<MySize> handleListOfStructTwinSyncSse(
      {required List<MySize> l, dynamic hint});

  List<String> handleStringListTwinSyncSse(
      {required List<String> names, dynamic hint});

  Future<NewTypeIntTwinRustAsync> handleNewtypeTwinRustAsync(
      {required NewTypeIntTwinRustAsync arg, dynamic hint});

  Future<NewTypeIntTwinRustAsyncSse> handleNewtypeTwinRustAsyncSse(
      {required NewTypeIntTwinRustAsyncSse arg, dynamic hint});

  Future<NewTypeIntTwinSse> handleNewtypeTwinSse(
      {required NewTypeIntTwinSse arg, dynamic hint});

  NewTypeIntTwinSync handleNewtypeTwinSync(
      {required NewTypeIntTwinSync arg, dynamic hint});

  NewTypeIntTwinSyncSse handleNewtypeTwinSyncSse(
      {required NewTypeIntTwinSyncSse arg, dynamic hint});

  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinNormal(
      {bool? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF32TwinNormal(
      {double? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF64TwinNormal(
      {double? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI16TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI32TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI64TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI8TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU16TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU32TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU64TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU8TwinNormal(
      {int? arg, dynamic hint});

  Future<int?> primitiveOptionalTypesTwinRustAsync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<int?> primitiveOptionalTypesTwinRustAsyncSse(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<int?> primitiveOptionalTypesTwinSse(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  int? primitiveOptionalTypesTwinSync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  int? primitiveOptionalTypesTwinSyncSse(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinRustAsync(
      {bool? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF32TwinRustAsync(
      {double? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF64TwinRustAsync(
      {double? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI16TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI32TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI64TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI8TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU16TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU32TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU64TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU8TwinRustAsync(
      {int? arg, dynamic hint});

  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinRustAsyncSse(
      {bool? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF32TwinRustAsyncSse(
      {double? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF64TwinRustAsyncSse(
      {double? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI16TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI32TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI64TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI8TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU16TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU32TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU64TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU8TwinRustAsyncSse(
      {int? arg, dynamic hint});

  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinSse(
      {bool? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF32TwinSse(
      {double? arg, dynamic hint});

  Future<double?> exampleOptionalPrimitiveTypeF64TwinSse(
      {double? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI16TwinSse({int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI32TwinSse({int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI64TwinSse({int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeI8TwinSse({int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU16TwinSse({int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU32TwinSse({int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU64TwinSse({int? arg, dynamic hint});

  Future<int?> exampleOptionalPrimitiveTypeU8TwinSse({int? arg, dynamic hint});

  bool? exampleOptionalPrimitiveTypeBoolTwinSync({bool? arg, dynamic hint});

  double? exampleOptionalPrimitiveTypeF32TwinSync({double? arg, dynamic hint});

  double? exampleOptionalPrimitiveTypeF64TwinSync({double? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI16TwinSync({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI32TwinSync({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI64TwinSync({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI8TwinSync({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU16TwinSync({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU32TwinSync({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU64TwinSync({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU8TwinSync({int? arg, dynamic hint});

  bool? exampleOptionalPrimitiveTypeBoolTwinSyncSse({bool? arg, dynamic hint});

  double? exampleOptionalPrimitiveTypeF32TwinSyncSse(
      {double? arg, dynamic hint});

  double? exampleOptionalPrimitiveTypeF64TwinSyncSse(
      {double? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI16TwinSyncSse({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI32TwinSyncSse({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI64TwinSyncSse({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeI8TwinSyncSse({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU16TwinSyncSse({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU32TwinSyncSse({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU64TwinSyncSse({int? arg, dynamic hint});

  int? exampleOptionalPrimitiveTypeU8TwinSyncSse({int? arg, dynamic hint});

  Future<double> handleIncrementBoxedOptionalTwinRustAsync(
      {double? opt, dynamic hint});

  Future<String> handleOptionBoxArgumentsTwinRustAsync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinRustAsync? structbox,
      dynamic hint});

  Future<ExoticOptionalsTwinRustAsync?> handleOptionalIncrementTwinRustAsync(
      {ExoticOptionalsTwinRustAsync? opt, dynamic hint});

  Future<double?> handleOptionalReturnTwinRustAsync(
      {required double left, required double right, dynamic hint});

  Future<ElementTwinRustAsync?> handleOptionalStructTwinRustAsync(
      {String? document, dynamic hint});

  Future<OptVecsTwinRustAsync> handleVecOfOptsTwinRustAsync(
      {required OptVecsTwinRustAsync opt, dynamic hint});

  Future<double> handleIncrementBoxedOptionalTwinRustAsyncSse(
      {double? opt, dynamic hint});

  Future<String> handleOptionBoxArgumentsTwinRustAsyncSse(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinRustAsyncSse? structbox,
      dynamic hint});

  Future<ExoticOptionalsTwinRustAsyncSse?>
      handleOptionalIncrementTwinRustAsyncSse(
          {ExoticOptionalsTwinRustAsyncSse? opt, dynamic hint});

  Future<double?> handleOptionalReturnTwinRustAsyncSse(
      {required double left, required double right, dynamic hint});

  Future<ElementTwinRustAsyncSse?> handleOptionalStructTwinRustAsyncSse(
      {String? document, dynamic hint});

  Future<OptVecsTwinRustAsyncSse> handleVecOfOptsTwinRustAsyncSse(
      {required OptVecsTwinRustAsyncSse opt, dynamic hint});

  Future<double> handleIncrementBoxedOptionalTwinSse(
      {double? opt, dynamic hint});

  Future<String> handleOptionBoxArgumentsTwinSse(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSse? structbox,
      dynamic hint});

  Future<ExoticOptionalsTwinSse?> handleOptionalIncrementTwinSse(
      {ExoticOptionalsTwinSse? opt, dynamic hint});

  Future<double?> handleOptionalReturnTwinSse(
      {required double left, required double right, dynamic hint});

  Future<ElementTwinSse?> handleOptionalStructTwinSse(
      {String? document, dynamic hint});

  Future<OptVecsTwinSse> handleVecOfOptsTwinSse(
      {required OptVecsTwinSse opt, dynamic hint});

  double handleIncrementBoxedOptionalTwinSync({double? opt, dynamic hint});

  String handleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox,
      dynamic hint});

  ExoticOptionalsTwinSync? handleOptionalIncrementTwinSync(
      {ExoticOptionalsTwinSync? opt, dynamic hint});

  double? handleOptionalReturnTwinSync(
      {required double left, required double right, dynamic hint});

  ElementTwinSync? handleOptionalStructTwinSync(
      {String? document, dynamic hint});

  OptVecsTwinSync handleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt, dynamic hint});

  double handleIncrementBoxedOptionalTwinSyncSse({double? opt, dynamic hint});

  String handleOptionBoxArgumentsTwinSyncSse(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSyncSse? structbox,
      dynamic hint});

  ExoticOptionalsTwinSyncSse? handleOptionalIncrementTwinSyncSse(
      {ExoticOptionalsTwinSyncSse? opt, dynamic hint});

  double? handleOptionalReturnTwinSyncSse(
      {required double left, required double right, dynamic hint});

  ElementTwinSyncSse? handleOptionalStructTwinSyncSse(
      {String? document, dynamic hint});

  OptVecsTwinSyncSse handleVecOfOptsTwinSyncSse(
      {required OptVecsTwinSyncSse opt, dynamic hint});

  Future<bool> examplePrimitiveTypeBoolTwinNormal(
      {required bool arg, dynamic hint});

  Future<double> examplePrimitiveTypeF32TwinNormal(
      {required double arg, dynamic hint});

  Future<double> examplePrimitiveTypeF64TwinNormal(
      {required double arg, dynamic hint});

  Future<int> examplePrimitiveTypeI16TwinNormal(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI32TwinNormal(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI64TwinNormal(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI8TwinNormal(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU16TwinNormal(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU32TwinNormal(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU64TwinNormal(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU8TwinNormal(
      {required int arg, dynamic hint});

  Future<List<bool>> examplePrimitiveListTypeBoolTwinNormal(
      {required List<bool> arg, dynamic hint});

  Future<Float32List> examplePrimitiveListTypeF32TwinNormal(
      {required Float32List arg, dynamic hint});

  Future<Float64List> examplePrimitiveListTypeF64TwinNormal(
      {required Float64List arg, dynamic hint});

  Future<Int16List> examplePrimitiveListTypeI16TwinNormal(
      {required Int16List arg, dynamic hint});

  Future<Int32List> examplePrimitiveListTypeI32TwinNormal(
      {required Int32List arg, dynamic hint});

  Future<Int64List> examplePrimitiveListTypeI64TwinNormal(
      {required Int64List arg, dynamic hint});

  Future<Int8List> examplePrimitiveListTypeI8TwinNormal(
      {required Int8List arg, dynamic hint});

  Future<Uint16List> examplePrimitiveListTypeU16TwinNormal(
      {required Uint16List arg, dynamic hint});

  Future<Uint32List> examplePrimitiveListTypeU32TwinNormal(
      {required Uint32List arg, dynamic hint});

  Future<Uint64List> examplePrimitiveListTypeU64TwinNormal(
      {required Uint64List arg, dynamic hint});

  Future<Uint8List> examplePrimitiveListTypeU8TwinNormal(
      {required Uint8List arg, dynamic hint});

  Future<VecOfPrimitivePackTwinRustAsync> handleVecOfPrimitiveTwinRustAsync(
      {required int n, dynamic hint});

  Future<VecOfPrimitivePackTwinRustAsyncSse>
      handleVecOfPrimitiveTwinRustAsyncSse({required int n, dynamic hint});

  Future<VecOfPrimitivePackTwinSse> handleVecOfPrimitiveTwinSse(
      {required int n, dynamic hint});

  VecOfPrimitivePackTwinSync handleVecOfPrimitiveTwinSync(
      {required int n, dynamic hint});

  VecOfPrimitivePackTwinSyncSse handleVecOfPrimitiveTwinSyncSse(
      {required int n, dynamic hint});

  Future<List<bool>> examplePrimitiveListTypeBoolTwinRustAsync(
      {required List<bool> arg, dynamic hint});

  Future<Float32List> examplePrimitiveListTypeF32TwinRustAsync(
      {required Float32List arg, dynamic hint});

  Future<Float64List> examplePrimitiveListTypeF64TwinRustAsync(
      {required Float64List arg, dynamic hint});

  Future<Int16List> examplePrimitiveListTypeI16TwinRustAsync(
      {required Int16List arg, dynamic hint});

  Future<Int32List> examplePrimitiveListTypeI32TwinRustAsync(
      {required Int32List arg, dynamic hint});

  Future<Int64List> examplePrimitiveListTypeI64TwinRustAsync(
      {required Int64List arg, dynamic hint});

  Future<Int8List> examplePrimitiveListTypeI8TwinRustAsync(
      {required Int8List arg, dynamic hint});

  Future<Uint16List> examplePrimitiveListTypeU16TwinRustAsync(
      {required Uint16List arg, dynamic hint});

  Future<Uint32List> examplePrimitiveListTypeU32TwinRustAsync(
      {required Uint32List arg, dynamic hint});

  Future<Uint64List> examplePrimitiveListTypeU64TwinRustAsync(
      {required Uint64List arg, dynamic hint});

  Future<Uint8List> examplePrimitiveListTypeU8TwinRustAsync(
      {required Uint8List arg, dynamic hint});

  Future<List<bool>> examplePrimitiveListTypeBoolTwinRustAsyncSse(
      {required List<bool> arg, dynamic hint});

  Future<Float32List> examplePrimitiveListTypeF32TwinRustAsyncSse(
      {required Float32List arg, dynamic hint});

  Future<Float64List> examplePrimitiveListTypeF64TwinRustAsyncSse(
      {required Float64List arg, dynamic hint});

  Future<Int16List> examplePrimitiveListTypeI16TwinRustAsyncSse(
      {required Int16List arg, dynamic hint});

  Future<Int32List> examplePrimitiveListTypeI32TwinRustAsyncSse(
      {required Int32List arg, dynamic hint});

  Future<Int64List> examplePrimitiveListTypeI64TwinRustAsyncSse(
      {required Int64List arg, dynamic hint});

  Future<Int8List> examplePrimitiveListTypeI8TwinRustAsyncSse(
      {required Int8List arg, dynamic hint});

  Future<Uint16List> examplePrimitiveListTypeU16TwinRustAsyncSse(
      {required Uint16List arg, dynamic hint});

  Future<Uint32List> examplePrimitiveListTypeU32TwinRustAsyncSse(
      {required Uint32List arg, dynamic hint});

  Future<Uint64List> examplePrimitiveListTypeU64TwinRustAsyncSse(
      {required Uint64List arg, dynamic hint});

  Future<Uint8List> examplePrimitiveListTypeU8TwinRustAsyncSse(
      {required Uint8List arg, dynamic hint});

  Future<List<bool>> examplePrimitiveListTypeBoolTwinSse(
      {required List<bool> arg, dynamic hint});

  Future<Float32List> examplePrimitiveListTypeF32TwinSse(
      {required Float32List arg, dynamic hint});

  Future<Float64List> examplePrimitiveListTypeF64TwinSse(
      {required Float64List arg, dynamic hint});

  Future<Int16List> examplePrimitiveListTypeI16TwinSse(
      {required Int16List arg, dynamic hint});

  Future<Int32List> examplePrimitiveListTypeI32TwinSse(
      {required Int32List arg, dynamic hint});

  Future<Int64List> examplePrimitiveListTypeI64TwinSse(
      {required Int64List arg, dynamic hint});

  Future<Int8List> examplePrimitiveListTypeI8TwinSse(
      {required Int8List arg, dynamic hint});

  Future<Uint16List> examplePrimitiveListTypeU16TwinSse(
      {required Uint16List arg, dynamic hint});

  Future<Uint32List> examplePrimitiveListTypeU32TwinSse(
      {required Uint32List arg, dynamic hint});

  Future<Uint64List> examplePrimitiveListTypeU64TwinSse(
      {required Uint64List arg, dynamic hint});

  Future<Uint8List> examplePrimitiveListTypeU8TwinSse(
      {required Uint8List arg, dynamic hint});

  List<bool> examplePrimitiveListTypeBoolTwinSync(
      {required List<bool> arg, dynamic hint});

  Float32List examplePrimitiveListTypeF32TwinSync(
      {required Float32List arg, dynamic hint});

  Float64List examplePrimitiveListTypeF64TwinSync(
      {required Float64List arg, dynamic hint});

  Int16List examplePrimitiveListTypeI16TwinSync(
      {required Int16List arg, dynamic hint});

  Int32List examplePrimitiveListTypeI32TwinSync(
      {required Int32List arg, dynamic hint});

  Int64List examplePrimitiveListTypeI64TwinSync(
      {required Int64List arg, dynamic hint});

  Int8List examplePrimitiveListTypeI8TwinSync(
      {required Int8List arg, dynamic hint});

  Uint16List examplePrimitiveListTypeU16TwinSync(
      {required Uint16List arg, dynamic hint});

  Uint32List examplePrimitiveListTypeU32TwinSync(
      {required Uint32List arg, dynamic hint});

  Uint64List examplePrimitiveListTypeU64TwinSync(
      {required Uint64List arg, dynamic hint});

  Uint8List examplePrimitiveListTypeU8TwinSync(
      {required Uint8List arg, dynamic hint});

  List<bool> examplePrimitiveListTypeBoolTwinSyncSse(
      {required List<bool> arg, dynamic hint});

  Float32List examplePrimitiveListTypeF32TwinSyncSse(
      {required Float32List arg, dynamic hint});

  Float64List examplePrimitiveListTypeF64TwinSyncSse(
      {required Float64List arg, dynamic hint});

  Int16List examplePrimitiveListTypeI16TwinSyncSse(
      {required Int16List arg, dynamic hint});

  Int32List examplePrimitiveListTypeI32TwinSyncSse(
      {required Int32List arg, dynamic hint});

  Int64List examplePrimitiveListTypeI64TwinSyncSse(
      {required Int64List arg, dynamic hint});

  Int8List examplePrimitiveListTypeI8TwinSyncSse(
      {required Int8List arg, dynamic hint});

  Uint16List examplePrimitiveListTypeU16TwinSyncSse(
      {required Uint16List arg, dynamic hint});

  Uint32List examplePrimitiveListTypeU32TwinSyncSse(
      {required Uint32List arg, dynamic hint});

  Uint64List examplePrimitiveListTypeU64TwinSyncSse(
      {required Uint64List arg, dynamic hint});

  Uint8List examplePrimitiveListTypeU8TwinSyncSse(
      {required Uint8List arg, dynamic hint});

  Future<int> primitiveTypesTwinRustAsync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  Future<int> primitiveU32TwinRustAsync({required int myU32, dynamic hint});

  Future<int> primitiveTypesTwinRustAsyncSse(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  Future<int> primitiveU32TwinRustAsyncSse({required int myU32, dynamic hint});

  Future<int> primitiveTypesTwinSse(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  Future<int> primitiveU32TwinSse({required int myU32, dynamic hint});

  int primitiveTypesTwinSync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  int primitiveU32TwinSync({required int myU32, dynamic hint});

  int primitiveTypesTwinSyncSse(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  int primitiveU32TwinSyncSse({required int myU32, dynamic hint});

  Future<bool> examplePrimitiveTypeBoolTwinRustAsync(
      {required bool arg, dynamic hint});

  Future<double> examplePrimitiveTypeF32TwinRustAsync(
      {required double arg, dynamic hint});

  Future<double> examplePrimitiveTypeF64TwinRustAsync(
      {required double arg, dynamic hint});

  Future<int> examplePrimitiveTypeI16TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI32TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI64TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI8TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU16TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU32TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU64TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU8TwinRustAsync(
      {required int arg, dynamic hint});

  Future<bool> examplePrimitiveTypeBoolTwinRustAsyncSse(
      {required bool arg, dynamic hint});

  Future<double> examplePrimitiveTypeF32TwinRustAsyncSse(
      {required double arg, dynamic hint});

  Future<double> examplePrimitiveTypeF64TwinRustAsyncSse(
      {required double arg, dynamic hint});

  Future<int> examplePrimitiveTypeI16TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI32TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI64TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI8TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU16TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU32TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU64TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU8TwinRustAsyncSse(
      {required int arg, dynamic hint});

  Future<bool> examplePrimitiveTypeBoolTwinSse(
      {required bool arg, dynamic hint});

  Future<double> examplePrimitiveTypeF32TwinSse(
      {required double arg, dynamic hint});

  Future<double> examplePrimitiveTypeF64TwinSse(
      {required double arg, dynamic hint});

  Future<int> examplePrimitiveTypeI16TwinSse({required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI32TwinSse({required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI64TwinSse({required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeI8TwinSse({required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU16TwinSse({required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU32TwinSse({required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU64TwinSse({required int arg, dynamic hint});

  Future<int> examplePrimitiveTypeU8TwinSse({required int arg, dynamic hint});

  bool examplePrimitiveTypeBoolTwinSync({required bool arg, dynamic hint});

  double examplePrimitiveTypeF32TwinSync({required double arg, dynamic hint});

  double examplePrimitiveTypeF64TwinSync({required double arg, dynamic hint});

  int examplePrimitiveTypeI16TwinSync({required int arg, dynamic hint});

  int examplePrimitiveTypeI32TwinSync({required int arg, dynamic hint});

  int examplePrimitiveTypeI64TwinSync({required int arg, dynamic hint});

  int examplePrimitiveTypeI8TwinSync({required int arg, dynamic hint});

  int examplePrimitiveTypeU16TwinSync({required int arg, dynamic hint});

  int examplePrimitiveTypeU32TwinSync({required int arg, dynamic hint});

  int examplePrimitiveTypeU64TwinSync({required int arg, dynamic hint});

  int examplePrimitiveTypeU8TwinSync({required int arg, dynamic hint});

  bool examplePrimitiveTypeBoolTwinSyncSse({required bool arg, dynamic hint});

  double examplePrimitiveTypeF32TwinSyncSse(
      {required double arg, dynamic hint});

  double examplePrimitiveTypeF64TwinSyncSse(
      {required double arg, dynamic hint});

  int examplePrimitiveTypeI16TwinSyncSse({required int arg, dynamic hint});

  int examplePrimitiveTypeI32TwinSyncSse({required int arg, dynamic hint});

  int examplePrimitiveTypeI64TwinSyncSse({required int arg, dynamic hint});

  int examplePrimitiveTypeI8TwinSyncSse({required int arg, dynamic hint});

  int examplePrimitiveTypeU16TwinSyncSse({required int arg, dynamic hint});

  int examplePrimitiveTypeU32TwinSyncSse({required int arg, dynamic hint});

  int examplePrimitiveTypeU64TwinSyncSse({required int arg, dynamic hint});

  int examplePrimitiveTypeU8TwinSyncSse({required int arg, dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      testMoreThanJustOneRawStringStructTwinRustAsync({dynamic hint});

  Future<RawStringItemStructTwinRustAsync> testRawStringItemStructTwinRustAsync(
      {dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinRustAsyncSse>
      testMoreThanJustOneRawStringStructTwinRustAsyncSse({dynamic hint});

  Future<RawStringItemStructTwinRustAsyncSse>
      testRawStringItemStructTwinRustAsyncSse({dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinSse>
      testMoreThanJustOneRawStringStructTwinSse({dynamic hint});

  Future<RawStringItemStructTwinSse> testRawStringItemStructTwinSse(
      {dynamic hint});

  MoreThanJustOneRawStringStructTwinSync
      testMoreThanJustOneRawStringStructTwinSync({dynamic hint});

  RawStringItemStructTwinSync testRawStringItemStructTwinSync({dynamic hint});

  MoreThanJustOneRawStringStructTwinSyncSse
      testMoreThanJustOneRawStringStructTwinSyncSse({dynamic hint});

  RawStringItemStructTwinSyncSse testRawStringItemStructTwinSyncSse(
      {dynamic hint});

  Future<void> nonCloneSimpleTwinSseInstanceMethodArgBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse that, dynamic hint});

  Future<void> nonCloneSimpleTwinSseInstanceMethodArgMutBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse that, dynamic hint});

  Future<void> nonCloneSimpleTwinSseInstanceMethodArgOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse that, dynamic hint});

  Future<RwLockNonCloneSimpleTwinSse>
      nonCloneSimpleTwinSseInstanceMethodReturnOwnTwinSse(
          {required RwLockNonCloneSimpleTwinSse that, dynamic hint});

  Future<RwLockNonCloneSimpleTwinSse> nonCloneSimpleTwinSseNewCustomNameTwinSse(
      {dynamic hint});

  Future<RwLockNonCloneSimpleTwinSse> nonCloneSimpleTwinSseNewTwinSse(
      {dynamic hint});

  Future<void> nonCloneSimpleTwinSseStaticMethodArgBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint});

  Future<void> nonCloneSimpleTwinSseStaticMethodArgMutBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint});

  Future<void> nonCloneSimpleTwinSseStaticMethodArgOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint});

  Future<RwLockNonCloneSimpleTwinSse>
      nonCloneSimpleTwinSseStaticMethodReturnOwnTwinSse({dynamic hint});

  Future<void> rustAutoOpaqueArgBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg,
      required int expect,
      dynamic hint});

  Future<void> rustAutoOpaqueArgMutBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg,
      required int expect,
      required int adder,
      dynamic hint});

  Future<RwLockNonCloneSimpleTwinSse> rustAutoOpaqueArgOwnAndReturnOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint});

  Future<void> rustAutoOpaqueArgOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg,
      required int expect,
      dynamic hint});

  Future<void> rustAutoOpaqueCallableArgTwinSse(
      {required RwLockBoxFnStringString arg, dynamic hint});

  Future<RwLockBoxFnStringString> rustAutoOpaqueCallableReturnTwinSse(
      {dynamic hint});

  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinSse(
      {required RwLockNonCloneSimpleTwinSse a,
      required String b,
      dynamic hint});

  Future<void> rustAutoOpaquePlusSignArgTwinSse(
      {required RwLockBoxMyTraitTwinSse arg, dynamic hint});

  Future<RwLockBoxMyTraitTwinSse> rustAutoOpaquePlusSignReturnTwinSse(
      {dynamic hint});

  Future<RwLockNonCloneSimpleTwinSse> rustAutoOpaqueReturnOwnTwinSse(
      {required int initial, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSse arg, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSse arg, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSse arg, dynamic hint});

  Future<RwLockStructWithGoodAndOpaqueFieldTwinSse>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSse(
          {dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinSse(
      {required RwLockBoxHelloTraitTwinSse arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinSse(
      {required RwLockBoxHelloTraitTwinSse arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinSse(
      {required RwLockBoxHelloTraitTwinSse arg,
      required String expect,
      dynamic hint});

  Future<RwLockBoxHelloTraitTwinSse>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinSse({dynamic hint});

  Future<RwLockBoxHelloTraitTwinSse>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinSse({dynamic hint});

  Future<void> rustAutoOpaqueTwoArgsTwinSse(
      {required RwLockNonCloneSimpleTwinSse a,
      required RwLockNonCloneSimpleTwinSse b,
      dynamic hint});

  void nonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync that, dynamic hint});

  void nonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync that, dynamic hint});

  void nonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync that, dynamic hint});

  RwLockNonCloneSimpleTwinSync
      nonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
          {required RwLockNonCloneSimpleTwinSync that, dynamic hint});

  RwLockNonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewCustomNameTwinSync(
      {dynamic hint});

  RwLockNonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewTwinSync(
      {dynamic hint});

  void nonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint});

  void nonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint});

  void nonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint});

  RwLockNonCloneSimpleTwinSync
      nonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync({dynamic hint});

  void rustAutoOpaqueArgBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg,
      required int expect,
      dynamic hint});

  void rustAutoOpaqueArgMutBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg,
      required int expect,
      required int adder,
      dynamic hint});

  RwLockNonCloneSimpleTwinSync rustAutoOpaqueArgOwnAndReturnOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint});

  void rustAutoOpaqueArgOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg,
      required int expect,
      dynamic hint});

  void rustAutoOpaqueCallableArgTwinSync(
      {required RwLockBoxFnStringString arg, dynamic hint});

  RwLockBoxFnStringString rustAutoOpaqueCallableReturnTwinSync({dynamic hint});

  void rustAutoOpaqueNormalAndOpaqueArgTwinSync(
      {required RwLockNonCloneSimpleTwinSync a,
      required String b,
      dynamic hint});

  void rustAutoOpaquePlusSignArgTwinSync(
      {required RwLockBoxMyTraitTwinSync arg, dynamic hint});

  RwLockBoxMyTraitTwinSync rustAutoOpaquePlusSignReturnTwinSync({dynamic hint});

  RwLockNonCloneSimpleTwinSync rustAutoOpaqueReturnOwnTwinSync(
      {required int initial, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSync(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSync(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint});

  RwLockStructWithGoodAndOpaqueFieldTwinSync
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync(
          {dynamic hint});

  void rustAutoOpaqueTraitObjectArgBorrowTwinSync(
      {required RwLockBoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSync(
      {required RwLockBoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgOwnTwinSync(
      {required RwLockBoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint});

  RwLockBoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnOneTwinSync(
      {dynamic hint});

  RwLockBoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnTwoTwinSync(
      {dynamic hint});

  void rustAutoOpaqueTwoArgsTwinSync(
      {required RwLockNonCloneSimpleTwinSync a,
      required RwLockNonCloneSimpleTwinSync b,
      dynamic hint});

  void nonCloneSimpleTwinSyncSseInstanceMethodArgBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint});

  void nonCloneSimpleTwinSyncSseInstanceMethodArgMutBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint});

  void nonCloneSimpleTwinSyncSseInstanceMethodArgOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint});

  RwLockNonCloneSimpleTwinSyncSse
      nonCloneSimpleTwinSyncSseInstanceMethodReturnOwnTwinSyncSse(
          {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint});

  RwLockNonCloneSimpleTwinSyncSse
      nonCloneSimpleTwinSyncSseNewCustomNameTwinSyncSse({dynamic hint});

  RwLockNonCloneSimpleTwinSyncSse nonCloneSimpleTwinSyncSseNewTwinSyncSse(
      {dynamic hint});

  void nonCloneSimpleTwinSyncSseStaticMethodArgBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint});

  void nonCloneSimpleTwinSyncSseStaticMethodArgMutBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint});

  void nonCloneSimpleTwinSyncSseStaticMethodArgOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint});

  RwLockNonCloneSimpleTwinSyncSse
      nonCloneSimpleTwinSyncSseStaticMethodReturnOwnTwinSyncSse({dynamic hint});

  void rustAutoOpaqueArgBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg,
      required int expect,
      dynamic hint});

  void rustAutoOpaqueArgMutBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg,
      required int expect,
      required int adder,
      dynamic hint});

  RwLockNonCloneSimpleTwinSyncSse rustAutoOpaqueArgOwnAndReturnOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint});

  void rustAutoOpaqueArgOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg,
      required int expect,
      dynamic hint});

  void rustAutoOpaqueCallableArgTwinSyncSse(
      {required RwLockBoxFnStringString arg, dynamic hint});

  RwLockBoxFnStringString rustAutoOpaqueCallableReturnTwinSyncSse(
      {dynamic hint});

  void rustAutoOpaqueNormalAndOpaqueArgTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse a,
      required String b,
      dynamic hint});

  void rustAutoOpaquePlusSignArgTwinSyncSse(
      {required RwLockBoxMyTraitTwinSyncSse arg, dynamic hint});

  RwLockBoxMyTraitTwinSyncSse rustAutoOpaquePlusSignReturnTwinSyncSse(
      {dynamic hint});

  RwLockNonCloneSimpleTwinSyncSse rustAutoOpaqueReturnOwnTwinSyncSse(
      {required int initial, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
      dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
      dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
      dynamic hint});

  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncSse(
          {dynamic hint});

  void rustAutoOpaqueTraitObjectArgBorrowTwinSyncSse(
      {required RwLockBoxHelloTraitTwinSyncSse arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSyncSse(
      {required RwLockBoxHelloTraitTwinSyncSse arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgOwnTwinSyncSse(
      {required RwLockBoxHelloTraitTwinSyncSse arg,
      required String expect,
      dynamic hint});

  RwLockBoxHelloTraitTwinSyncSse
      rustAutoOpaqueTraitObjectReturnOwnOneTwinSyncSse({dynamic hint});

  RwLockBoxHelloTraitTwinSyncSse
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncSse({dynamic hint});

  void rustAutoOpaqueTwoArgsTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse a,
      required RwLockNonCloneSimpleTwinSyncSse b,
      dynamic hint});

  FrbOpaqueSyncReturn frbSyncGeneratorTestTwinSse({dynamic hint});

  NonCloneData syncCreateNonCloneTwinSse({dynamic hint});

  HideData syncCreateOpaqueTwinSse({dynamic hint});

  NonSendHideData syncCreateSyncOpaqueTwinSse({dynamic hint});

  HideData? syncOptionRustOpaqueTwinSse({dynamic hint});

  String syncRunOpaqueTwinSse({required NonSendHideData opaque, dynamic hint});

  Future<EnumOpaqueTwinRustAsyncArray5> createArrayOpaqueEnumTwinRustAsync(
      {dynamic hint});

  Future<OpaqueNestedTwinRustAsync> createNestedOpaqueTwinRustAsync(
      {dynamic hint});

  Future<HideData> createOpaqueTwinRustAsync({dynamic hint});

  Future<HideData?> createOptionOpaqueTwinRustAsync(
      {HideData? opaque, dynamic hint});

  Future<NonSendHideData> createSyncOpaqueTwinRustAsync({dynamic hint});

  Future<FrbOpaqueReturn> frbGeneratorTestTwinRustAsync({dynamic hint});

  Future<void> opaqueArrayRunTwinRustAsync(
      {required HideDataArray2 data, dynamic hint});

  Future<HideDataArray2> opaqueArrayTwinRustAsync({dynamic hint});

  Future<void> opaqueVecRunTwinRustAsync(
      {required List<HideData> data, dynamic hint});

  Future<List<HideData>> opaqueVecTwinRustAsync({dynamic hint});

  Future<String> runEnumOpaqueTwinRustAsync(
      {required EnumOpaqueTwinRustAsync opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinRustAsync(
      {required OpaqueNestedTwinRustAsync opaque, dynamic hint});

  Future<String> runNonCloneTwinRustAsync(
      {required NonCloneData clone, dynamic hint});

  Future<String> runOpaqueTwinRustAsync(
      {required HideData opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinRustAsync(
      {required HideData opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinRustAsync(
      {required HideData opaque, dynamic hint});

  Future<EnumOpaqueTwinRustAsyncSseArray5>
      createArrayOpaqueEnumTwinRustAsyncSse({dynamic hint});

  Future<OpaqueNestedTwinRustAsyncSse> createNestedOpaqueTwinRustAsyncSse(
      {dynamic hint});

  Future<HideData> createOpaqueTwinRustAsyncSse({dynamic hint});

  Future<HideData?> createOptionOpaqueTwinRustAsyncSse(
      {HideData? opaque, dynamic hint});

  Future<NonSendHideData> createSyncOpaqueTwinRustAsyncSse({dynamic hint});

  Future<FrbOpaqueReturn> frbGeneratorTestTwinRustAsyncSse({dynamic hint});

  Future<void> opaqueArrayRunTwinRustAsyncSse(
      {required HideDataArray2 data, dynamic hint});

  Future<HideDataArray2> opaqueArrayTwinRustAsyncSse({dynamic hint});

  Future<void> opaqueVecRunTwinRustAsyncSse(
      {required List<HideData> data, dynamic hint});

  Future<List<HideData>> opaqueVecTwinRustAsyncSse({dynamic hint});

  Future<String> runEnumOpaqueTwinRustAsyncSse(
      {required EnumOpaqueTwinRustAsyncSse opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinRustAsyncSse(
      {required OpaqueNestedTwinRustAsyncSse opaque, dynamic hint});

  Future<String> runNonCloneTwinRustAsyncSse(
      {required NonCloneData clone, dynamic hint});

  Future<String> runOpaqueTwinRustAsyncSse(
      {required HideData opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinRustAsyncSse(
      {required HideData opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinRustAsyncSse(
      {required HideData opaque, dynamic hint});

  Future<EnumOpaqueTwinSseArray5> createArrayOpaqueEnumTwinSse({dynamic hint});

  Future<OpaqueNestedTwinSse> createNestedOpaqueTwinSse({dynamic hint});

  Future<HideData> createOpaqueTwinSse({dynamic hint});

  Future<HideData?> createOptionOpaqueTwinSse({HideData? opaque, dynamic hint});

  Future<NonSendHideData> createSyncOpaqueTwinSse({dynamic hint});

  Future<FrbOpaqueReturn> frbGeneratorTestTwinSse({dynamic hint});

  Future<void> opaqueArrayRunTwinSse(
      {required HideDataArray2 data, dynamic hint});

  Future<HideDataArray2> opaqueArrayTwinSse({dynamic hint});

  Future<void> opaqueVecRunTwinSse(
      {required List<HideData> data, dynamic hint});

  Future<List<HideData>> opaqueVecTwinSse({dynamic hint});

  Future<String> runEnumOpaqueTwinSse(
      {required EnumOpaqueTwinSse opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinSse(
      {required OpaqueNestedTwinSse opaque, dynamic hint});

  Future<String> runNonCloneTwinSse(
      {required NonCloneData clone, dynamic hint});

  Future<String> runOpaqueTwinSse({required HideData opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinSse(
      {required HideData opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinSse(
      {required HideData opaque, dynamic hint});

  EnumOpaqueTwinSyncArray5 createArrayOpaqueEnumTwinSync({dynamic hint});

  OpaqueNestedTwinSync createNestedOpaqueTwinSync({dynamic hint});

  HideData createOpaqueTwinSync({dynamic hint});

  HideData? createOptionOpaqueTwinSync({HideData? opaque, dynamic hint});

  NonSendHideData createSyncOpaqueTwinSync({dynamic hint});

  FrbOpaqueReturn frbGeneratorTestTwinSync({dynamic hint});

  void opaqueArrayRunTwinSync({required HideDataArray2 data, dynamic hint});

  HideDataArray2 opaqueArrayTwinSync({dynamic hint});

  void opaqueVecRunTwinSync({required List<HideData> data, dynamic hint});

  List<HideData> opaqueVecTwinSync({dynamic hint});

  String runEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque, dynamic hint});

  void runNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque, dynamic hint});

  String runNonCloneTwinSync({required NonCloneData clone, dynamic hint});

  String runOpaqueTwinSync({required HideData opaque, dynamic hint});

  String runOpaqueWithDelayTwinSync({required HideData opaque, dynamic hint});

  String unwrapRustOpaqueTwinSync({required HideData opaque, dynamic hint});

  EnumOpaqueTwinSyncSseArray5 createArrayOpaqueEnumTwinSyncSse({dynamic hint});

  OpaqueNestedTwinSyncSse createNestedOpaqueTwinSyncSse({dynamic hint});

  HideData createOpaqueTwinSyncSse({dynamic hint});

  HideData? createOptionOpaqueTwinSyncSse({HideData? opaque, dynamic hint});

  NonSendHideData createSyncOpaqueTwinSyncSse({dynamic hint});

  FrbOpaqueReturn frbGeneratorTestTwinSyncSse({dynamic hint});

  void opaqueArrayRunTwinSyncSse({required HideDataArray2 data, dynamic hint});

  HideDataArray2 opaqueArrayTwinSyncSse({dynamic hint});

  void opaqueVecRunTwinSyncSse({required List<HideData> data, dynamic hint});

  List<HideData> opaqueVecTwinSyncSse({dynamic hint});

  String runEnumOpaqueTwinSyncSse(
      {required EnumOpaqueTwinSyncSse opaque, dynamic hint});

  void runNestedOpaqueTwinSyncSse(
      {required OpaqueNestedTwinSyncSse opaque, dynamic hint});

  String runNonCloneTwinSyncSse({required NonCloneData clone, dynamic hint});

  String runOpaqueTwinSyncSse({required HideData opaque, dynamic hint});

  String runOpaqueWithDelayTwinSyncSse(
      {required HideData opaque, dynamic hint});

  String unwrapRustOpaqueTwinSyncSse({required HideData opaque, dynamic hint});

  Future<int> simpleAdderTwinRustAsync(
      {required int a, required int b, dynamic hint});

  Future<int> simpleAdderTwinRustAsyncSse(
      {required int a, required int b, dynamic hint});

  Future<int> simpleAdderTwinSse(
      {required int a, required int b, dynamic hint});

  int simpleAdderTwinSync({required int a, required int b, dynamic hint});

  int simpleAdderTwinSyncSse({required int a, required int b, dynamic hint});

  Stream<String> funcStreamRealisticTwinSse(
      {required String arg, dynamic hint});

  Stream<String> funcStreamReturnErrorTwinRustAsync({dynamic hint});

  Stream<String> funcStreamReturnPanicTwinRustAsync({dynamic hint});

  Stream<int> funcStreamSinkArgPositionTwinRustAsync(
      {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinRustAsync> handleStreamOfStructTwinRustAsync(
      {dynamic hint});

  Stream<LogTwinRustAsync> handleStreamSinkAt1TwinRustAsync(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsync> handleStreamSinkAt2TwinRustAsync(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsync> handleStreamSinkAt3TwinRustAsync(
      {required int key, required int max, dynamic hint});

  Stream<String> funcStreamReturnErrorTwinRustAsyncSse({dynamic hint});

  Stream<String> funcStreamReturnPanicTwinRustAsyncSse({dynamic hint});

  Stream<int> funcStreamSinkArgPositionTwinRustAsyncSse(
      {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinRustAsyncSse> handleStreamOfStructTwinRustAsyncSse(
      {dynamic hint});

  Stream<LogTwinRustAsyncSse> handleStreamSinkAt1TwinRustAsyncSse(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsyncSse> handleStreamSinkAt2TwinRustAsyncSse(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsyncSse> handleStreamSinkAt3TwinRustAsyncSse(
      {required int key, required int max, dynamic hint});

  Stream<String> funcStreamReturnErrorTwinSse({dynamic hint});

  Stream<String> funcStreamReturnPanicTwinSse({dynamic hint});

  Stream<int> funcStreamSinkArgPositionTwinSse(
      {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinSse> handleStreamOfStructTwinSse({dynamic hint});

  Stream<LogTwinSse> handleStreamSinkAt1TwinSse(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinSse> handleStreamSinkAt2TwinSse(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinSse> handleStreamSinkAt3TwinSse(
      {required int key, required int max, dynamic hint});

  Future<StructWithOneFieldTwinRustAsync> funcStructWithOneFieldTwinRustAsync(
      {required StructWithOneFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithTwoFieldTwinRustAsync> funcStructWithTwoFieldTwinRustAsync(
      {required StructWithTwoFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithZeroFieldTwinRustAsync> funcStructWithZeroFieldTwinRustAsync(
      {required StructWithZeroFieldTwinRustAsync arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinRustAsync>
      funcTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinRustAsync>
      funcTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithOneFieldTwinRustAsyncSse>
      funcStructWithOneFieldTwinRustAsyncSse(
          {required StructWithOneFieldTwinRustAsyncSse arg, dynamic hint});

  Future<StructWithTwoFieldTwinRustAsyncSse>
      funcStructWithTwoFieldTwinRustAsyncSse(
          {required StructWithTwoFieldTwinRustAsyncSse arg, dynamic hint});

  Future<StructWithZeroFieldTwinRustAsyncSse>
      funcStructWithZeroFieldTwinRustAsyncSse(
          {required StructWithZeroFieldTwinRustAsyncSse arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinRustAsyncSse>
      funcTupleStructWithOneFieldTwinRustAsyncSse(
          {required TupleStructWithOneFieldTwinRustAsyncSse arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinRustAsyncSse>
      funcTupleStructWithTwoFieldTwinRustAsyncSse(
          {required TupleStructWithTwoFieldTwinRustAsyncSse arg, dynamic hint});

  Future<StructWithOneFieldTwinSse> funcStructWithOneFieldTwinSse(
      {required StructWithOneFieldTwinSse arg, dynamic hint});

  Future<StructWithTwoFieldTwinSse> funcStructWithTwoFieldTwinSse(
      {required StructWithTwoFieldTwinSse arg, dynamic hint});

  Future<StructWithZeroFieldTwinSse> funcStructWithZeroFieldTwinSse(
      {required StructWithZeroFieldTwinSse arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinSse> funcTupleStructWithOneFieldTwinSse(
      {required TupleStructWithOneFieldTwinSse arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinSse> funcTupleStructWithTwoFieldTwinSse(
      {required TupleStructWithTwoFieldTwinSse arg, dynamic hint});

  StructWithOneFieldTwinSync funcStructWithOneFieldTwinSync(
      {required StructWithOneFieldTwinSync arg, dynamic hint});

  StructWithTwoFieldTwinSync funcStructWithTwoFieldTwinSync(
      {required StructWithTwoFieldTwinSync arg, dynamic hint});

  StructWithZeroFieldTwinSync funcStructWithZeroFieldTwinSync(
      {required StructWithZeroFieldTwinSync arg, dynamic hint});

  TupleStructWithOneFieldTwinSync funcTupleStructWithOneFieldTwinSync(
      {required TupleStructWithOneFieldTwinSync arg, dynamic hint});

  TupleStructWithTwoFieldTwinSync funcTupleStructWithTwoFieldTwinSync(
      {required TupleStructWithTwoFieldTwinSync arg, dynamic hint});

  StructWithOneFieldTwinSyncSse funcStructWithOneFieldTwinSyncSse(
      {required StructWithOneFieldTwinSyncSse arg, dynamic hint});

  StructWithTwoFieldTwinSyncSse funcStructWithTwoFieldTwinSyncSse(
      {required StructWithTwoFieldTwinSyncSse arg, dynamic hint});

  StructWithZeroFieldTwinSyncSse funcStructWithZeroFieldTwinSyncSse(
      {required StructWithZeroFieldTwinSyncSse arg, dynamic hint});

  TupleStructWithOneFieldTwinSyncSse funcTupleStructWithOneFieldTwinSyncSse(
      {required TupleStructWithOneFieldTwinSyncSse arg, dynamic hint});

  TupleStructWithTwoFieldTwinSyncSse funcTupleStructWithTwoFieldTwinSyncSse(
      {required TupleStructWithTwoFieldTwinSyncSse arg, dynamic hint});

  Future<void> testTuple2TwinRustAsync(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)> testTupleTwinRustAsync(
      {(String, int)? value, dynamic hint});

  Future<void> testTuple2TwinRustAsyncSse(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)> testTupleTwinRustAsyncSse(
      {(String, int)? value, dynamic hint});

  Future<void> testTuple2TwinSse(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)> testTupleTwinSse({(String, int)? value, dynamic hint});

  void testTuple2TwinSync({required List<(String, int)> value, dynamic hint});

  (String, int) testTupleTwinSync({(String, int)? value, dynamic hint});

  void testTuple2TwinSyncSse(
      {required List<(String, int)> value, dynamic hint});

  (String, int) testTupleTwinSyncSse({(String, int)? value, dynamic hint});

  Future<int> handleTypeAliasIdTwinRustAsync(
      {required int input, dynamic hint});

  Future<TestModelTwinRustAsync> handleTypeAliasModelTwinRustAsync(
      {required int input, dynamic hint});

  Future<int> handleTypeNestAliasIdTwinRustAsync(
      {required int input, dynamic hint});

  Future<int> handleTypeAliasIdTwinRustAsyncSse(
      {required int input, dynamic hint});

  Future<TestModelTwinRustAsyncSse> handleTypeAliasModelTwinRustAsyncSse(
      {required int input, dynamic hint});

  Future<int> handleTypeNestAliasIdTwinRustAsyncSse(
      {required int input, dynamic hint});

  Future<int> handleTypeAliasIdTwinSse({required int input, dynamic hint});

  Future<TestModelTwinSse> handleTypeAliasModelTwinSse(
      {required int input, dynamic hint});

  Future<int> handleTypeNestAliasIdTwinSse({required int input, dynamic hint});

  int handleTypeAliasIdTwinSync({required int input, dynamic hint});

  TestModelTwinSync handleTypeAliasModelTwinSync(
      {required int input, dynamic hint});

  int handleTypeNestAliasIdTwinSync({required int input, dynamic hint});

  int handleTypeAliasIdTwinSyncSse({required int input, dynamic hint});

  TestModelTwinSyncSse handleTypeAliasModelTwinSyncSse(
      {required int input, dynamic hint});

  int handleTypeNestAliasIdTwinSyncSse({required int input, dynamic hint});

  Future<FeatureUuidTwinRustAsync> handleNestedUuidsTwinRustAsync(
      {required FeatureUuidTwinRustAsync ids, dynamic hint});

  Future<UuidValue> handleUuidTwinRustAsync(
      {required UuidValue id, dynamic hint});

  FeatureUuidTwinSync handleNestedUuidsTwinSync(
      {required FeatureUuidTwinSync ids, dynamic hint});

  UuidValue handleUuidTwinSync({required UuidValue id, dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinNormal>
      testMoreThanJustOneRawStringStructTwinNormal({dynamic hint});

  Future<RawStringItemStructTwinNormal> testRawStringItemStructTwinNormal(
      {dynamic hint});

  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal that, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal that, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal that, dynamic hint});

  Future<RwLockNonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required RwLockNonCloneSimpleTwinNormal that, dynamic hint});

  Future<RwLockNonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalNewCustomNameTwinNormal({dynamic hint});

  Future<RwLockNonCloneSimpleTwinNormal> nonCloneSimpleTwinNormalNewTwinNormal(
      {dynamic hint});

  Future<void> nonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint});

  Future<RwLockNonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal({dynamic hint});

  Future<void> rustAutoOpaqueArgBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint});

  Future<void> rustAutoOpaqueArgMutBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder,
      dynamic hint});

  Future<RwLockNonCloneSimpleTwinNormal>
      rustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
          {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void> rustAutoOpaqueArgOwnTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint});

  Future<void> rustAutoOpaqueCallableArgTwinNormal(
      {required RwLockBoxFnStringString arg, dynamic hint});

  Future<RwLockBoxFnStringString> rustAutoOpaqueCallableReturnTwinNormal(
      {dynamic hint});

  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal a,
      required String b,
      dynamic hint});

  Future<void> rustAutoOpaquePlusSignArgTwinNormal(
      {required RwLockBoxMyTraitTwinNormal arg, dynamic hint});

  Future<RwLockBoxMyTraitTwinNormal> rustAutoOpaquePlusSignReturnTwinNormal(
      {dynamic hint});

  Future<RwLockNonCloneSimpleTwinNormal> rustAutoOpaqueReturnOwnTwinNormal(
      {required int initial, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormal(
      {required RwLockStructWithGoodAndOpaqueFieldTwinNormal arg,
      dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormal(
      {required RwLockStructWithGoodAndOpaqueFieldTwinNormal arg,
      dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
      {required RwLockStructWithGoodAndOpaqueFieldTwinNormal arg,
      dynamic hint});

  Future<RwLockStructWithGoodAndOpaqueFieldTwinNormal>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal(
          {dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinNormal(
      {required RwLockBoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinNormal(
      {required RwLockBoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinNormal(
      {required RwLockBoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint});

  Future<RwLockBoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinNormal({dynamic hint});

  Future<RwLockBoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinNormal({dynamic hint});

  Future<void> rustAutoOpaqueTwoArgsTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal a,
      required RwLockNonCloneSimpleTwinNormal b,
      dynamic hint});

  Future<EnumOpaqueTwinNormalArray5> createArrayOpaqueEnumTwinNormal(
      {dynamic hint});

  Future<OpaqueNestedTwinNormal> createNestedOpaqueTwinNormal({dynamic hint});

  Future<HideData> createOpaqueTwinNormal({dynamic hint});

  Future<HideData?> createOptionOpaqueTwinNormal(
      {HideData? opaque, dynamic hint});

  Future<NonSendHideData> createSyncOpaqueTwinNormal({dynamic hint});

  Future<FrbOpaqueReturn> frbGeneratorTestTwinNormal({dynamic hint});

  Future<void> opaqueArrayRunTwinNormal(
      {required HideDataArray2 data, dynamic hint});

  Future<HideDataArray2> opaqueArrayTwinNormal({dynamic hint});

  Future<void> opaqueVecRunTwinNormal(
      {required List<HideData> data, dynamic hint});

  Future<List<HideData>> opaqueVecTwinNormal({dynamic hint});

  Future<String> runEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque, dynamic hint});

  Future<String> runNonCloneTwinNormal(
      {required NonCloneData clone, dynamic hint});

  Future<String> runOpaqueTwinNormal({required HideData opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinNormal(
      {required HideData opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinNormal(
      {required HideData opaque, dynamic hint});

  FrbOpaqueSyncReturn frbSyncGeneratorTestTwinNormal({dynamic hint});

  NonCloneData syncCreateNonCloneTwinNormal({dynamic hint});

  HideData syncCreateOpaqueTwinNormal({dynamic hint});

  NonSendHideData syncCreateSyncOpaqueTwinNormal({dynamic hint});

  HideData? syncOptionRustOpaqueTwinNormal({dynamic hint});

  String syncRunOpaqueTwinNormal(
      {required NonSendHideData opaque, dynamic hint});

  Future<int> simpleAdderTwinNormal(
      {required int a, required int b, dynamic hint});

  Stream<String> funcStreamReturnErrorTwinNormal({dynamic hint});

  Stream<String> funcStreamReturnPanicTwinNormal({dynamic hint});

  Stream<int> funcStreamSinkArgPositionTwinNormal(
      {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinNormal> handleStreamOfStructTwinNormal(
      {dynamic hint});

  Stream<LogTwinNormal> handleStreamSinkAt1TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinNormal> handleStreamSinkAt2TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinNormal> handleStreamSinkAt3TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<String> funcStreamRealisticTwinNormal(
      {required String arg, dynamic hint});

  Future<StructWithOneFieldTwinNormal> funcStructWithOneFieldTwinNormal(
      {required StructWithOneFieldTwinNormal arg, dynamic hint});

  Future<StructWithTwoFieldTwinNormal> funcStructWithTwoFieldTwinNormal(
      {required StructWithTwoFieldTwinNormal arg, dynamic hint});

  Future<StructWithZeroFieldTwinNormal> funcStructWithZeroFieldTwinNormal(
      {required StructWithZeroFieldTwinNormal arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinNormal>
      funcTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinNormal>
      funcTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg, dynamic hint});

  Future<void> testTuple2TwinNormal(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)> testTupleTwinNormal(
      {(String, int)? value, dynamic hint});

  Future<int> handleTypeAliasIdTwinNormal({required int input, dynamic hint});

  Future<TestModelTwinNormal> handleTypeAliasModelTwinNormal(
      {required int input, dynamic hint});

  Future<int> handleTypeNestAliasIdTwinNormal(
      {required int input, dynamic hint});

  Future<FeatureUuidTwinNormal> handleNestedUuidsTwinNormal(
      {required FeatureUuidTwinNormal ids, dynamic hint});

  Future<UuidValue> handleUuidTwinNormal({required UuidValue id, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturn;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturn;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideData;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_HideDataPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_I32Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneData;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NonCloneDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonSendHideData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonSendHideData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonSendHideDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxFnStringString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxFnStringString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxFnStringStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSsePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BlobTwinNormal> boxedBlobTwinNormal(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_u_8_array_1600(blob);
        return wire.wire_boxed_blob_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_blob_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinNormalConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<TestIdTwinNormal> funcTestIdTwinNormal(
      {required TestIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_test_id_twin_normal(id);
        return wire.wire_func_test_id_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array5> getArrayTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_array_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_normal",
        argNames: [],
      );

  @override
  Future<PointTwinNormalArray2> getComplexArrayTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_complex_array_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_point_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_complex_array_twin_normal",
        argNames: [],
      );

  @override
  Future<double> lastNumberTwinNormal(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_64_array_16(array);
        return wire.wire_last_number_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinNormalConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinNormalConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_normal",
        argNames: ["array"],
      );

  @override
  Future<TestIdTwinNormalArray2> nestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_test_id_twin_normal_array_4(id);
        return wire.wire_nested_id_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_id_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinNormalConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinNormal> newMsgidTwinNormal(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_8_array_32(id);
        return wire.wire_new_msgid_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_message_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinNormal> returnBoxedFeedIdTwinNormal(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_8_array_8(id);
        return wire.wire_return_boxed_feed_id_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_box_feed_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array8> returnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_feed_id_twin_normal(id);
        return wire.wire_return_boxed_raw_feed_id_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array1600> useBoxedBlobTwinNormal(
      {required BlobTwinNormal blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_blob_twin_normal(blob);
        return wire.wire_use_boxed_blob_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinNormalConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<U8Array32> useMsgidTwinNormal(
      {required MessageIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_message_id_twin_normal(id);
        return wire.wire_use_msgid_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<int> funcAsyncSimpleAdd(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(a);
        var arg1 = cst_encode_i_32(b);
        return wire.wire_func_async_simple_add(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncAsyncSimpleAddConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncAsyncSimpleAddConstMeta => const TaskConstMeta(
        debugName: "func_async_simple_add",
        argNames: ["a", "b"],
      );

  @override
  Future<void> funcAsyncVoid({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_async_void(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncAsyncVoidConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncAsyncVoidConstMeta => const TaskConstMeta(
        debugName: "func_async_void",
        argNames: [],
      );

  @override
  Future<void> handleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_customized_twin_normal(val);
        return wire.wire_handle_customized_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_normal",
        argNames: ["val"],
      );

  @override
  Future<UserIdTwinNormal> nextUserIdTwinNormal(
      {required UserIdTwinNormal userId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_user_id_twin_normal(userId);
        return wire.wire_next_user_id_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_user_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinNormalConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinNormalConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_normal",
        argNames: ["userId"],
      );

  @override
  Future<int> benchmarkInputBytesTwinNormal(
      {required Uint8List bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8(bytes);
        return wire.wire_benchmark_input_bytes_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinNormalConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_normal",
        argNames: ["bytes"],
      );

  @override
  Future<Uint8List> benchmarkOutputBytesTwinNormal(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(size);
        return wire.wire_benchmark_output_bytes_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_normal",
        argNames: ["size"],
      );

  @override
  Future<void> benchmarkVoidTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_benchmark_void_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_normal",
        argNames: [],
      );

  @override
  Future<DateTime> datetimeLocalTwinNormal(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Local(d);
        return wire.wire_datetime_local_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kDatetimeLocalTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDatetimeLocalTwinNormalConstMeta => const TaskConstMeta(
        debugName: "datetime_local_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<DateTime> datetimeUtcTwinNormal({required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Utc(d);
        return wire.wire_datetime_utc_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kDatetimeUtcTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDatetimeUtcTwinNormalConstMeta => const TaskConstMeta(
        debugName: "datetime_utc_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<Duration> durationTwinNormal({required Duration d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Duration(d);
        return wire.wire_duration_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kDurationTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDurationTwinNormalConstMeta => const TaskConstMeta(
        debugName: "duration_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<List<DateTime>> handleDurationsTwinNormal(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_Chrono_Duration(durations);
        var arg1 = cst_encode_Chrono_Local(since);
        return wire.wire_handle_durations_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kHandleDurationsTwinNormalConstMeta,
      argValues: [durations, since],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleDurationsTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_durations_twin_normal",
        argNames: ["durations", "since"],
      );

  @override
  Future<List<Duration>> handleTimestampsTwinNormal(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_Chrono_Naive(timestamps);
        var arg1 = cst_encode_Chrono_Naive(epoch);
        return wire.wire_handle_timestamps_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kHandleTimestampsTwinNormalConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTimestampsTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_timestamps_twin_normal",
        argNames: ["timestamps", "epoch"],
      );

  @override
  Future<Duration> howLongDoesItTakeTwinNormal(
      {required FeatureChronoTwinNormal mine, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_feature_chrono_twin_normal(mine);
        return wire.wire_how_long_does_it_take_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Duration,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHowLongDoesItTakeTwinNormalConstMeta,
      argValues: [mine],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHowLongDoesItTakeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "how_long_does_it_take_twin_normal",
        argNames: ["mine"],
      );

  @override
  Future<DateTime> naivedatetimeTwinNormal(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Naive(d);
        return wire.wire_naivedatetime_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta: kNaivedatetimeTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNaivedatetimeTwinNormalConstMeta => const TaskConstMeta(
        debugName: "naivedatetime_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<DateTime?> optionalEmptyDatetimeUtcTwinNormal(
      {DateTime? d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_Chrono_Utc(d);
        return wire.wire_optional_empty_datetime_utc_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kOptionalEmptyDatetimeUtcTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOptionalEmptyDatetimeUtcTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "optional_empty_datetime_utc_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<TestChronoTwinNormal> testChronoTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_chrono_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_chrono_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestChronoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestChronoTwinNormalConstMeta => const TaskConstMeta(
        debugName: "test_chrono_twin_normal",
        argNames: [],
      );

  @override
  Future<TestChronoTwinNormal> testPreciseChronoTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_precise_chrono_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_chrono_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestPreciseChronoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestPreciseChronoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_precise_chrono_twin_normal",
        argNames: [],
      );

  @override
  Future<void> structWithCommentsTwinNormalInstanceMethodTwinNormal(
      {required StructWithCommentsTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_comments_twin_normal(that);
        return wire
            .wire_StructWithCommentsTwinNormal_instance_method_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinNormal_instance_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> structWithCommentsTwinNormalStaticMethodTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_StructWithCommentsTwinNormal_static_method_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithCommentsTwinNormal_static_method_twin_normal",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsSlashStarStarTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_function_with_comments_slash_star_star_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_normal",
        argNames: [],
      );

  @override
  Future<void> functionWithCommentsTripleSlashMultiLineTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_function_with_comments_triple_slash_multi_line_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_normal",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsTripleSlashSingleLineTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_function_with_comments_triple_slash_single_line_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_normal",
            argNames: [],
          );

  @override
  Future<dynamic> returnDartDynamicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_dart_dynamic_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kReturnDartDynamicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnDartDynamicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_dart_dynamic_twin_normal",
        argNames: [],
      );

  @override
  Future<void> rustCallDartSimple(
      {required void Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartFn_Inputs__Output_unit(callback);
        return wire.wire_rust_call_dart_simple(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartSimpleConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartSimpleConstMeta => const TaskConstMeta(
        debugName: "rust_call_dart_simple",
        argNames: ["callback"],
      );

  @override
  Future<String> asyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_async_accept_dart_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> cloneDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_clone_dart_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<EnumDartOpaqueTwinNormal> createEnumDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_create_enum_dart_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_dart_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<DartOpaqueNestedTwinNormal> createNestedDartOpaqueTwinNormal(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque1);
        var arg1 = cst_encode_DartOpaque(opaque2);
        return wire.wire_create_nested_dart_opaque_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_dart_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_normal",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  Future<void> dropStaticDartOpaqueTwinNormal({required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(id);
        return wire.wire_drop_static_dart_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<void> getEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enum_dart_opaque_twin_normal(opaque);
        return wire.wire_get_enum_dart_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> getNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_dart_opaque_nested_twin_normal(opaque);
        return wire.wire_get_nested_dart_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque_array_1(opaque);
        return wire.wire_loop_back_array_get_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1> loopBackArrayTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_array_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackOptionGetTwinNormal({Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_DartOpaque(opaque);
        return wire.wire_loop_back_option_get_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object?> loopBackOptionTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_option_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object> loopBackTwinNormal({required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackVecGetTwinNormal(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_DartOpaque(opaque);
        return wire.wire_loop_back_vec_get_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> loopBackVecTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_vec_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> panicUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_panic_unwrap_dart_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> setStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(id);
        var arg1 = cst_encode_DartOpaque(opaque);
        return wire.wire_set_static_dart_opaque_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_normal",
        argNames: ["id", "opaque"],
      );

  @override
  String syncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_sync_accept_dart_opaque_twin_normal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncAcceptDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_accept_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object syncLoopbackTwinNormal({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_sync_loopback_twin_normal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kSyncLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncLoopbackTwinNormalConstMeta => const TaskConstMeta(
        debugName: "sync_loopback_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object? syncOptionDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_sync_option_dart_opaque_twin_normal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kSyncOptionDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object? syncOptionLoopbackTwinNormal({Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_DartOpaque(opaque);
        return wire.wire_sync_option_loopback_twin_normal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kSyncOptionLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionLoopbackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_loopback_twin_normal",
        argNames: ["opaque"],
      );

  @override
  String unwrapDartOpaqueTwinNormal({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_unwrap_dart_opaque_twin_normal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapDartOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "unwrap_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<EnumSimpleTwinNormal> funcEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_enum_simple_twin_normal(arg);
        return wire.wire_func_enum_simple_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_simple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_enum_simple_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemMixedTwinNormal> funcEnumWithItemMixedTwinNormal(
      {required EnumWithItemMixedTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enum_with_item_mixed_twin_normal(arg);
        return wire.wire_func_enum_with_item_mixed_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_mixed_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemStructTwinNormal> funcEnumWithItemStructTwinNormal(
      {required EnumWithItemStructTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_enum_with_item_struct_twin_normal(arg);
        return wire.wire_func_enum_with_item_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemTupleTwinNormal> funcEnumWithItemTupleTwinNormal(
      {required EnumWithItemTupleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enum_with_item_tuple_twin_normal(arg);
        return wire.wire_func_enum_with_item_tuple_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_tuple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<WeekdaysTwinNormal> handleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_weekdays_twin_normal(weekday);
        return wire.wire_handle_enum_parameter_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinNormalConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_normal",
        argNames: ["weekday"],
      );

  @override
  Future<KitchenSinkTwinNormal> handleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_kitchen_sink_twin_normal(val);
        return wire.wire_handle_enum_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_kitchen_sink_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_enum_struct_twin_normal",
        argNames: ["val"],
      );

  @override
  Future<WeekdaysTwinNormal?> handleReturnEnumTwinNormal(
      {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(input);
        return wire.wire_handle_return_enum_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_return_enum_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<MeasureTwinNormal?> multiplyByTenTwinNormal(
      {required MeasureTwinNormal measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_measure_twin_normal(measure);
        return wire.wire_multiply_by_ten_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_measure_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinNormalConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinNormalConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_normal",
        argNames: ["measure"],
      );

  @override
  Future<Uint8List> printNoteTwinNormal(
      {required NoteTwinNormal note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_note_twin_normal(note);
        return wire.wire_print_note_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinNormalConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinNormalConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_normal",
        argNames: ["note"],
      );

  @override
  Future<String> eventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_event_twin_normal(that);
        return wire.wire_EventTwinNormal_as_string_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEventTwinNormalAsStringTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventTwinNormalAsStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "EventTwinNormal_as_string_twin_normal",
        argNames: ["that"],
      );

  @override
  Future<void> closeEventListenerTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_close_event_listener_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCloseEventListenerTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloseEventListenerTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "close_event_listener_twin_normal",
        argNames: [],
      );

  @override
  Future<void> createEventTwinNormal(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(address);
        var arg1 = cst_encode_String(payload);
        return wire.wire_create_event_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCreateEventTwinNormalConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEventTwinNormalConstMeta => const TaskConstMeta(
        debugName: "create_event_twin_normal",
        argNames: ["address", "payload"],
      );

  @override
  Stream<EventTwinNormal> registerEventListenerTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_register_event_listener_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_event_twin_normal,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kRegisterEventListenerTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRegisterEventListenerTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "register_event_listener_twin_normal",
        argNames: [],
      );

  @override
  Future<CustomStructTwinNormal> customStructTwinNormalNewTwinNormal(
      {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(message);
        return wire.wire_CustomStructTwinNormal_new_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_custom_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinNormalNewTwinNormalConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinNormal_new_twin_normal",
        argNames: ["message"],
      );

  @override
  Future<void> customStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_custom_struct_twin_normal(that);
        return wire
            .wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> customStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_custom_struct_twin_normal(that);
        return wire
            .wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> customStructTwinNormalStaticReturnCustomStructErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_static_return_custom_struct_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int> customStructTwinNormalStaticReturnCustomStructOkTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal",
            argNames: [],
          );

  @override
  Future<SomeStructTwinNormal> someStructTwinNormalNewTwinNormal(
      {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(value);
        return wire.wire_SomeStructTwinNormal_new_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_some_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinNormalNewTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinNormal_new_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<int> someStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_some_struct_twin_normal(that);
        return wire
            .wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_some_struct_twin_normal(that);
        return wire
            .wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinNormalStaticReturnErrCustomErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_static_return_err_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int> someStructTwinNormalStaticReturnOkCustomErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_static_return_ok_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<void> customEnumErrorPanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_custom_enum_error_panic_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCustomEnumErrorPanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_custom_enum_error_return_error_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnOkTwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(arg);
        return wire.wire_custom_enum_error_return_ok_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> customNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_custom_nested_error_outer_twin_normal(arg);
        return wire.wire_custom_nested_error_return_error_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_outer_twin_normal,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> customStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_custom_struct_error_twin_normal(arg);
        return wire.wire_custom_struct_error_return_error_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_twin_normal,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> funcReturnErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_return_error_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_return_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> funcTypeFalliblePanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_type_fallible_panic_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<int> funcTypeInfalliblePanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_type_infallible_panic_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<void> panicWithCustomResultTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_panic_with_custom_result_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta: kPanicWithCustomResultTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1TwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_nested_error_1_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta: kReturnCustomNestedError1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1Variant1TwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_return_custom_nested_error_1_variant1_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError2TwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_nested_error_2_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_2_twin_normal,
      ),
      constMeta: kReturnCustomNestedError2TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomStructErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_struct_error_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> returnCustomStructOkTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_struct_ok_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_normal",
        argNames: [],
      );

  @override
  Future<int> returnErrCustomErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_err_custom_error_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta: kReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> returnErrorVariantTwinNormal(
      {required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(variant);
        return wire.wire_return_error_variant_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta: kReturnErrorVariantTwinNormalConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_normal",
        argNames: ["variant"],
      );

  @override
  Future<int> returnOkCustomErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_ok_custom_error_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_normal,
      ),
      constMeta: kReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_stream_sink_throw_anyhow_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_normal",
        argNames: [],
      );

  @override
  Future<void> throwAnyhowTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_throw_anyhow_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinNormalConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_normal",
        argNames: [],
      );

  @override
  Future<NewSimpleStruct> callNewModuleSystemTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_call_new_module_system_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_normal",
        argNames: [],
      );

  @override
  Future<OldSimpleStruct> callOldModuleSystemTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_call_old_module_system_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_normal",
        argNames: [],
      );

  @override
  Future<bool> useImportedEnumTwinNormal(
      {required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_my_enum(myEnum);
        return wire.wire_use_imported_enum_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinNormalConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinNormalConstMeta => const TaskConstMeta(
        debugName: "use_imported_enum_twin_normal",
        argNames: ["myEnum"],
      );

  @override
  Future<bool> useImportedStructTwinNormal(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_struct(myStruct);
        return wire.wire_use_imported_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinNormalConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_struct_twin_normal",
        argNames: ["myStruct"],
      );

  @override
  Future<AnotherMacroStructTwinNormal> anotherMacroStructTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_another_macro_struct_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_another_macro_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kAnotherMacroStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAnotherMacroStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "another_macro_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<MacroStruct> funcMacroStructTwinNormal(
      {required MacroStruct arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_macro_struct(arg);
        return wire.wire_func_macro_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_macro_struct,
        decodeErrorData: null,
      ),
      constMeta: kFuncMacroStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncMacroStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_macro_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String> concatenateWithTwinNormalConcatenateStaticTwinNormal(
      {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(a);
        var arg1 = cst_encode_String(b);
        return wire
            .wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_concatenate_static_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<String> concatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_concatenate_with_twin_normal(that);
        var arg1 = cst_encode_String(b);
        return wire.wire_ConcatenateWithTwinNormal_concatenate_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinNormalConcatenateTwinNormalConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinNormalConcatenateTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinNormal_concatenate_twin_normal",
        argNames: ["that", "b"],
      );

  @override
  Stream<int>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire
            .wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal",
            argNames: [],
          );

  @override
  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire
            .wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_2_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_concatenate_with_twin_normal(that);
        return wire
            .wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max,
          dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_concatenate_with_twin_normal(that);
        var arg1 = cst_encode_u_32(key);
        var arg2 = cst_encode_u_32(max);
        return wire
            .wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_2_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal",
            argNames: ["that", "key", "max"],
          );

  @override
  Future<ConcatenateWithTwinNormal> concatenateWithTwinNormalNewTwinNormal(
      {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(a);
        return wire.wire_ConcatenateWithTwinNormal_new_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_concatenate_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinNormalNewTwinNormalConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinNormal_new_twin_normal",
        argNames: ["a"],
      );

  @override
  Future<int> sumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sum_with_twin_normal(that);
        var arg1 = cst_encode_u_32(y);
        var arg2 = cst_encode_u_32(z);
        return wire.wire_SumWithTwinNormal_sum_twin_normal(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinNormalSumTwinNormalConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinNormalSumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "SumWithTwinNormal_sum_twin_normal",
        argNames: ["that", "y", "z"],
      );

  @override
  Future<SumWithTwinNormalArray3> getSumArrayTwinNormal(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(a);
        var arg1 = cst_encode_u_32(b);
        var arg2 = cst_encode_u_32(c);
        return wire.wire_get_sum_array_twin_normal(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sum_with_twin_normal_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinNormalConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_normal",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinNormal> getSumStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_sum_struct_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sum_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_normal",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_app_settings_stream_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_normal",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinNormal(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_app_settings_vec_stream_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_normal",
        argNames: [],
      );

  @override
  Future<int?> firstNumberTwinNormal({required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_numbers(nums);
        return wire.wire_first_number_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinNormalConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinNormalConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_normal",
        argNames: ["nums"],
      );

  @override
  Future<int?> firstSequenceTwinNormal(
      {required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequences(seqs);
        return wire.wire_first_sequence_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinNormalConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinNormalConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_normal",
        argNames: ["seqs"],
      );

  @override
  Future<ApplicationSettings> getAppSettingsTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_app_settings_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationSettings> getFallibleAppSettingsTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_fallible_app_settings_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationMessage> getMessageTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_message_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_normal",
        argNames: [],
      );

  @override
  Future<bool> isAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_application_settings(appSettings);
        return wire.wire_is_app_embedded_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinNormalConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinNormalConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_normal",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinNormal> mirrorStructStreamTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_mirror_struct_stream_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_mirror_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_normal",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_mirror_tuple_stream_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_normal",
        argNames: [],
      );

  @override
  Future<Numbers> repeatNumberTwinNormal(
      {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(num);
        var arg1 = cst_encode_usize(times);
        return wire.wire_repeat_number_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinNormalConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinNormalConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_normal",
        argNames: ["num", "times"],
      );

  @override
  Future<Sequences> repeatSequenceTwinNormal(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(seq);
        var arg1 = cst_encode_usize(times);
        return wire.wire_repeat_sequence_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinNormalConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinNormalConstMeta => const TaskConstMeta(
        debugName: "repeat_sequence_twin_normal",
        argNames: ["seq", "times"],
      );

  @override
  Future<ContainsMirroredSubStructTwinNormal>
      testContainsMirroredSubStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_contains_mirrored_sub_struct_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_contains_mirrored_sub_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_fallible_of_raw_string_mirrored_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_raw_string_mirrored,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<List<RawStringEnumMirrored>> testListOfNestedEnumsMirroredTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_list_of_nested_enums_mirrored_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_list_of_raw_nested_string_mirrored_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_nested_raw_string_mirrored_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinNormal(
      {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(nested);
        return wire.wire_test_raw_string_enum_mirrored_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinNormalConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_normal",
        argNames: ["nested"],
      );

  @override
  Future<RawStringMirrored> testRawStringMirroredTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_raw_string_mirrored_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<BigBuffersTwinNormal> handleBigBuffersTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_handle_big_buffers_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_big_buffers_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_big_buffers_twin_normal",
        argNames: [],
      );

  @override
  Future<MyTreeNodeTwinNormal> handleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_tree_node_twin_normal(s);
        return wire.wire_handle_complex_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_tree_node_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<MyNestedStructTwinNormal> handleNestedStructTwinNormal(
      {required MyNestedStructTwinNormal s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_nested_struct_twin_normal(s);
        return wire.wire_handle_nested_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_nested_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<String> handleStringTwinNormal({required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(s);
        return wire.wire_handle_string_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<MySize> handleStructTwinNormal(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_size(arg);
        var arg1 = cst_encode_box_my_size(boxed);
        return wire.wire_handle_struct_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinNormalConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_normal",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<Uint8List> handleVecU8TwinNormal(
      {required Uint8List v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8(v);
        return wire.wire_handle_vec_u8_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinNormalConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_normal",
        argNames: ["v"],
      );

  @override
  Future<List<WeekdaysTwinNormal>> listOfPrimitiveEnumsTwinNormal(
      {required List<WeekdaysTwinNormal> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_weekdays_twin_normal(weekdays);
        return wire.wire_list_of_primitive_enums_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinNormalConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_normal",
        argNames: ["weekdays"],
      );

  @override
  Future<AbcTwinNormal> testAbcEnumTwinNormal(
      {required AbcTwinNormal abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_abc_twin_normal(abc);
        return wire.wire_test_abc_enum_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_abc_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinNormalConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinNormalConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_normal",
        argNames: ["abc"],
      );

  @override
  Future<StructWithEnumTwinNormal> testStructWithEnumTwinNormal(
      {required StructWithEnumTwinNormal se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_struct_with_enum_twin_normal(se);
        return wire.wire_test_struct_with_enum_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinNormalConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_normal",
        argNames: ["se"],
      );

  @override
  Future<EmptyTwinNormal> emptyStructTwinNormal(
      {required EmptyTwinNormal empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_empty_twin_normal(empty);
        return wire.wire_empty_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_empty_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinNormalConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_normal",
        argNames: ["empty"],
      );

  @override
  Future<void> funcReturnUnitTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_return_unit_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_return_unit_twin_normal",
        argNames: [],
      );

  @override
  Future<String> funcStringTwinNormal({required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(arg);
        return wire.wire_func_string_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStringTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<List<MySize>> handleListOfStructTwinNormal(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_my_size(l);
        return wire.wire_handle_list_of_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinNormalConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_normal",
        argNames: ["l"],
      );

  @override
  Future<List<String>> handleStringListTwinNormal(
      {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_String(names);
        return wire.wire_handle_string_list_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinNormalConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_string_list_twin_normal",
        argNames: ["names"],
      );

  @override
  Future<NewTypeIntTwinNormal> handleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_new_type_int_twin_normal(arg);
        return wire.wire_handle_newtype_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_new_type_int_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double> handleIncrementBoxedOptionalTwinNormal(
      {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_f_64(opt);
        return wire.wire_handle_increment_boxed_optional_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<String> handleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_i_8(i8Box);
        var arg1 = cst_encode_opt_box_u_8(u8Box);
        var arg2 = cst_encode_opt_box_i_32(i32Box);
        var arg3 = cst_encode_opt_box_i_64(i64Box);
        var arg4 = cst_encode_opt_box_f_64(f64Box);
        var arg5 = cst_encode_opt_box_bool(boolbox);
        var arg6 = cst_encode_opt_box_exotic_optionals_twin_normal(structbox);
        return wire.wire_handle_option_box_arguments_twin_normal(
            port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinNormalConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_normal",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  Future<ExoticOptionalsTwinNormal?> handleOptionalIncrementTwinNormal(
      {ExoticOptionalsTwinNormal? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_exotic_optionals_twin_normal(opt);
        return wire.wire_handle_optional_increment_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_opt_box_autoadd_exotic_optionals_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<double?> handleOptionalReturnTwinNormal(
      {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_64(left);
        var arg1 = cst_encode_f_64(right);
        return wire.wire_handle_optional_return_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinNormalConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_normal",
        argNames: ["left", "right"],
      );

  @override
  Future<ElementTwinNormal?> handleOptionalStructTwinNormal(
      {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_String(document);
        return wire.wire_handle_optional_struct_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_element_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinNormalConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_normal",
        argNames: ["document"],
      );

  @override
  Future<OptVecsTwinNormal> handleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_opt_vecs_twin_normal(opt);
        return wire.wire_handle_vec_of_opts_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_vecs_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<int?> primitiveOptionalTypesTwinNormal(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_32(myI32);
        var arg1 = cst_encode_opt_box_autoadd_i_64(myI64);
        var arg2 = cst_encode_opt_box_autoadd_f_64(myF64);
        var arg3 = cst_encode_opt_box_autoadd_bool(myBool);
        return wire.wire_primitive_optional_types_twin_normal(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_normal",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<VecOfPrimitivePackTwinNormal> handleVecOfPrimitiveTwinNormal(
      {required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(n);
        return wire.wire_handle_vec_of_primitive_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_vec_of_primitive_pack_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinNormalConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_normal",
        argNames: ["n"],
      );

  @override
  Future<int> primitiveTypesTwinNormal(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(myI32);
        var arg1 = cst_encode_i_64(myI64);
        var arg2 = cst_encode_f_64(myF64);
        var arg3 = cst_encode_bool(myBool);
        return wire.wire_primitive_types_twin_normal(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinNormalConstMeta => const TaskConstMeta(
        debugName: "primitive_types_twin_normal",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int> primitiveU32TwinNormal({required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(myU32);
        return wire.wire_primitive_u32_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinNormalConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinNormalConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_normal",
        argNames: ["myU32"],
      );

  @override
  Future<BlobTwinRustAsync> boxedBlobTwinRustAsync(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_u_8_array_1600(blob);
        return wire.wire_boxed_blob_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_blob_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_rust_async",
        argNames: ["blob"],
      );

  @override
  Future<TestIdTwinRustAsync> funcTestIdTwinRustAsync(
      {required TestIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_test_id_twin_rust_async(id);
        return wire.wire_func_test_id_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<U8Array5> getArrayTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_array_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_rust_async",
        argNames: [],
      );

  @override
  Future<PointTwinRustAsyncArray2> getComplexArrayTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_complex_array_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_point_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_complex_array_twin_rust_async",
        argNames: [],
      );

  @override
  Future<double> lastNumberTwinRustAsync(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_64_array_16(array);
        return wire.wire_last_number_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinRustAsyncConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_rust_async",
        argNames: ["array"],
      );

  @override
  Future<TestIdTwinRustAsyncArray2> nestedIdTwinRustAsync(
      {required TestIdTwinRustAsyncArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_test_id_twin_rust_async_array_4(id);
        return wire.wire_nested_id_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_id_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinRustAsync> newMsgidTwinRustAsync(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_8_array_32(id);
        return wire.wire_new_msgid_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_message_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinRustAsync> returnBoxedFeedIdTwinRustAsync(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_8_array_8(id);
        return wire.wire_return_boxed_feed_id_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_box_feed_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<U8Array8> returnBoxedRawFeedIdTwinRustAsync(
      {required FeedIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_feed_id_twin_rust_async(id);
        return wire.wire_return_boxed_raw_feed_id_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<U8Array1600> useBoxedBlobTwinRustAsync(
      {required BlobTwinRustAsync blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_blob_twin_rust_async(blob);
        return wire.wire_use_boxed_blob_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_rust_async",
        argNames: ["blob"],
      );

  @override
  Future<U8Array32> useMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_message_id_twin_rust_async(id);
        return wire.wire_use_msgid_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<BlobTwinRustAsyncSse> boxedBlobTwinRustAsyncSse(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_u_8_array_1600(blob, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_boxed_blob_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_blob_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinRustAsyncSseConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_rust_async_sse",
        argNames: ["blob"],
      );

  @override
  Future<TestIdTwinRustAsyncSse> funcTestIdTwinRustAsyncSse(
      {required TestIdTwinRustAsyncSse id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_test_id_twin_rust_async_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_test_id_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_id_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinRustAsyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_rust_async_sse",
        argNames: ["id"],
      );

  @override
  Future<U8Array5> getArrayTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_array_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<PointTwinRustAsyncSseArray2> getComplexArrayTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_complex_array_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_point_twin_rust_async_sse_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_complex_array_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<double> lastNumberTwinRustAsyncSse(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64_array_16(array, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_last_number_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinRustAsyncSseConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_rust_async_sse",
        argNames: ["array"],
      );

  @override
  Future<TestIdTwinRustAsyncSseArray2> nestedIdTwinRustAsyncSse(
      {required TestIdTwinRustAsyncSseArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_test_id_twin_rust_async_sse_array_4(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_nested_id_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_id_twin_rust_async_sse_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinRustAsyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_rust_async_sse",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinRustAsyncSse> newMsgidTwinRustAsyncSse(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8_array_32(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_new_msgid_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_message_id_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinRustAsyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_rust_async_sse",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinRustAsyncSse> returnBoxedFeedIdTwinRustAsyncSse(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8_array_8(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_boxed_feed_id_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_box_feed_id_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinRustAsyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_rust_async_sse",
        argNames: ["id"],
      );

  @override
  Future<U8Array8> returnBoxedRawFeedIdTwinRustAsyncSse(
      {required FeedIdTwinRustAsyncSse id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_feed_id_twin_rust_async_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_boxed_raw_feed_id_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinRustAsyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_rust_async_sse",
        argNames: ["id"],
      );

  @override
  Future<U8Array1600> useBoxedBlobTwinRustAsyncSse(
      {required BlobTwinRustAsyncSse blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_blob_twin_rust_async_sse(blob, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_boxed_blob_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinRustAsyncSseConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "use_boxed_blob_twin_rust_async_sse",
        argNames: ["blob"],
      );

  @override
  Future<U8Array32> useMsgidTwinRustAsyncSse(
      {required MessageIdTwinRustAsyncSse id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_message_id_twin_rust_async_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_msgid_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinRustAsyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_rust_async_sse",
        argNames: ["id"],
      );

  @override
  Future<BlobTwinSse> boxedBlobTwinSse(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_u_8_array_1600(blob, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_boxed_blob_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_blob_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinSseConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinSseConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_sse",
        argNames: ["blob"],
      );

  @override
  Future<TestIdTwinSse> funcTestIdTwinSse(
      {required TestIdTwinSse id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_test_id_twin_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_test_id_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_id_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinSseConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_sse",
        argNames: ["id"],
      );

  @override
  Future<U8Array5> getArrayTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_array_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_sse",
        argNames: [],
      );

  @override
  Future<PointTwinSseArray2> getComplexArrayTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_complex_array_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_point_twin_sse_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_complex_array_twin_sse",
        argNames: [],
      );

  @override
  Future<double> lastNumberTwinSse({required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64_array_16(array, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_last_number_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinSseConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinSseConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_sse",
        argNames: ["array"],
      );

  @override
  Future<TestIdTwinSseArray2> nestedIdTwinSse(
      {required TestIdTwinSseArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_test_id_twin_sse_array_4(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_nested_id_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_id_twin_sse_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinSseConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_sse",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinSse> newMsgidTwinSse(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8_array_32(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_new_msgid_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_message_id_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinSseConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_sse",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinSse> returnBoxedFeedIdTwinSse(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8_array_8(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_boxed_feed_id_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_box_feed_id_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinSseConstMeta => const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_sse",
        argNames: ["id"],
      );

  @override
  Future<U8Array8> returnBoxedRawFeedIdTwinSse(
      {required FeedIdTwinSse id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_feed_id_twin_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_boxed_raw_feed_id_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_sse",
        argNames: ["id"],
      );

  @override
  Future<U8Array1600> useBoxedBlobTwinSse(
      {required BlobTwinSse blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_blob_twin_sse(blob, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_boxed_blob_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinSseConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinSseConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_sse",
        argNames: ["blob"],
      );

  @override
  Future<U8Array32> useMsgidTwinSse(
      {required MessageIdTwinSse id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_message_id_twin_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_msgid_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinSseConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_sse",
        argNames: ["id"],
      );

  @override
  BlobTwinSync boxedBlobTwinSync({required U8Array1600 blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_u_8_array_1600(blob);
        return wire.wire_boxed_blob_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_blob_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinSyncConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_sync",
        argNames: ["blob"],
      );

  @override
  TestIdTwinSync funcTestIdTwinSync(
      {required TestIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_test_id_twin_sync(id);
        return wire.wire_func_test_id_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_sync",
        argNames: ["id"],
      );

  @override
  U8Array5 getArrayTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_get_array_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_sync",
        argNames: [],
      );

  @override
  PointTwinSyncArray2 getComplexArrayTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_get_complex_array_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_point_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_complex_array_twin_sync",
        argNames: [],
      );

  @override
  double lastNumberTwinSync({required F64Array16 array, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_f_64_array_16(array);
        return wire.wire_last_number_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinSyncConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinSyncConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_sync",
        argNames: ["array"],
      );

  @override
  TestIdTwinSyncArray2 nestedIdTwinSync(
      {required TestIdTwinSyncArray4 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_test_id_twin_sync_array_4(id);
        return wire.wire_nested_id_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_id_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_sync",
        argNames: ["id"],
      );

  @override
  MessageIdTwinSync newMsgidTwinSync({required U8Array32 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_32(id);
        return wire.wire_new_msgid_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_message_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinSyncConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_sync",
        argNames: ["id"],
      );

  @override
  FeedIdTwinSync returnBoxedFeedIdTwinSync(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_8(id);
        return wire.wire_return_boxed_feed_id_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_box_feed_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_sync",
        argNames: ["id"],
      );

  @override
  U8Array8 returnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_feed_id_twin_sync(id);
        return wire.wire_return_boxed_raw_feed_id_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_sync",
        argNames: ["id"],
      );

  @override
  U8Array1600 useBoxedBlobTwinSync({required BlobTwinSync blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_blob_twin_sync(blob);
        return wire.wire_use_boxed_blob_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_sync",
        argNames: ["blob"],
      );

  @override
  U8Array32 useMsgidTwinSync({required MessageIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_message_id_twin_sync(id);
        return wire.wire_use_msgid_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_sync",
        argNames: ["id"],
      );

  @override
  BlobTwinSyncSse boxedBlobTwinSyncSse(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_u_8_array_1600(blob, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_boxed_blob_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_blob_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinSyncSseConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_sync_sse",
        argNames: ["blob"],
      );

  @override
  TestIdTwinSyncSse funcTestIdTwinSyncSse(
      {required TestIdTwinSyncSse id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_test_id_twin_sync_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_test_id_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_id_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinSyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_sync_sse",
        argNames: ["id"],
      );

  @override
  U8Array5 getArrayTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_array_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_sync_sse",
        argNames: [],
      );

  @override
  PointTwinSyncSseArray2 getComplexArrayTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_complex_array_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_point_twin_sync_sse_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "get_complex_array_twin_sync_sse",
        argNames: [],
      );

  @override
  double lastNumberTwinSyncSse({required F64Array16 array, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64_array_16(array, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_last_number_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinSyncSseConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_sync_sse",
        argNames: ["array"],
      );

  @override
  TestIdTwinSyncSseArray2 nestedIdTwinSyncSse(
      {required TestIdTwinSyncSseArray4 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_test_id_twin_sync_sse_array_4(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_nested_id_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_id_twin_sync_sse_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinSyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_sync_sse",
        argNames: ["id"],
      );

  @override
  MessageIdTwinSyncSse newMsgidTwinSyncSse(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8_array_32(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_new_msgid_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_message_id_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinSyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_sync_sse",
        argNames: ["id"],
      );

  @override
  FeedIdTwinSyncSse returnBoxedFeedIdTwinSyncSse(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8_array_8(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_boxed_feed_id_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_box_feed_id_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinSyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_sync_sse",
        argNames: ["id"],
      );

  @override
  U8Array8 returnBoxedRawFeedIdTwinSyncSse(
      {required FeedIdTwinSyncSse id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_feed_id_twin_sync_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_boxed_raw_feed_id_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinSyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_sync_sse",
        argNames: ["id"],
      );

  @override
  U8Array1600 useBoxedBlobTwinSyncSse(
      {required BlobTwinSyncSse blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_blob_twin_sync_sse(blob, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_boxed_blob_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinSyncSseConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_sync_sse",
        argNames: ["blob"],
      );

  @override
  U8Array32 useMsgidTwinSyncSse(
      {required MessageIdTwinSyncSse id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_message_id_twin_sync_sse(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_msgid_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinSyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_sync_sse",
        argNames: ["id"],
      );

  @override
  Future<int> funcAsyncSimpleAdd(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(a);
        var arg1 = cst_encode_i_32(b);
        return wire.wire_func_async_simple_add(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncAsyncSimpleAddConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncAsyncSimpleAddConstMeta => const TaskConstMeta(
        debugName: "func_async_simple_add",
        argNames: ["a", "b"],
      );

  @override
  Future<void> funcAsyncVoid({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_async_void(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncAsyncVoidConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncAsyncVoidConstMeta => const TaskConstMeta(
        debugName: "func_async_void",
        argNames: [],
      );

  @override
  Future<void> handleCustomizedStructTwinRustAsync(
      {required CustomizedTwinRustAsync val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_customized_twin_rust_async(val);
        return wire.wire_handle_customized_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_rust_async",
        argNames: ["val"],
      );

  @override
  Future<UserIdTwinRustAsync> nextUserIdTwinRustAsync(
      {required UserIdTwinRustAsync userId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_user_id_twin_rust_async(userId);
        return wire.wire_next_user_id_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_user_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinRustAsyncConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_rust_async",
        argNames: ["userId"],
      );

  @override
  Future<void> handleCustomizedStructTwinRustAsyncSse(
      {required CustomizedTwinRustAsyncSse val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_customized_twin_rust_async_sse(val, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_customized_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinRustAsyncSseConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_rust_async_sse",
        argNames: ["val"],
      );

  @override
  Future<UserIdTwinRustAsyncSse> nextUserIdTwinRustAsyncSse(
      {required UserIdTwinRustAsyncSse userId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_user_id_twin_rust_async_sse(
            user_id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_next_user_id_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_user_id_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinRustAsyncSseConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_rust_async_sse",
        argNames: ["userId"],
      );

  @override
  Future<void> handleCustomizedStructTwinSse(
      {required CustomizedTwinSse val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_customized_twin_sse(val, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_customized_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinSseConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_sse",
        argNames: ["val"],
      );

  @override
  Future<UserIdTwinSse> nextUserIdTwinSse(
      {required UserIdTwinSse userId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_user_id_twin_sse(user_id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_next_user_id_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_user_id_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinSseConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinSseConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_sse",
        argNames: ["userId"],
      );

  @override
  void handleCustomizedStructTwinSync(
      {required CustomizedTwinSync val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_customized_twin_sync(val);
        return wire.wire_handle_customized_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_sync",
        argNames: ["val"],
      );

  @override
  UserIdTwinSync nextUserIdTwinSync(
      {required UserIdTwinSync userId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_user_id_twin_sync(userId);
        return wire.wire_next_user_id_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_user_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinSyncConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_sync",
        argNames: ["userId"],
      );

  @override
  void handleCustomizedStructTwinSyncSse(
      {required CustomizedTwinSyncSse val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_customized_twin_sync_sse(val, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_customized_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinSyncSseConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_sync_sse",
        argNames: ["val"],
      );

  @override
  UserIdTwinSyncSse nextUserIdTwinSyncSse(
      {required UserIdTwinSyncSse userId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_user_id_twin_sync_sse(user_id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_next_user_id_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_user_id_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinSyncSseConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_sync_sse",
        argNames: ["userId"],
      );

  @override
  Future<int> benchmarkInputBytesTwinRustAsync(
      {required Uint8List bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8(bytes);
        return wire.wire_benchmark_input_bytes_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinRustAsyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_rust_async",
        argNames: ["bytes"],
      );

  @override
  Future<Uint8List> benchmarkOutputBytesTwinRustAsync(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(size);
        return wire.wire_benchmark_output_bytes_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_rust_async",
        argNames: ["size"],
      );

  @override
  Future<void> benchmarkVoidTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_benchmark_void_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> benchmarkInputBytesTwinRustAsyncSse(
      {required Uint8List bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(bytes, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_input_bytes_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinRustAsyncSseConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_rust_async_sse",
        argNames: ["bytes"],
      );

  @override
  Future<Uint8List> benchmarkOutputBytesTwinRustAsyncSse(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(size, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_output_bytes_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinRustAsyncSseConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_rust_async_sse",
        argNames: ["size"],
      );

  @override
  Future<void> benchmarkVoidTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_void_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_void_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> benchmarkInputBytesTwinSse(
      {required Uint8List bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(bytes, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_input_bytes_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinSseConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinSseConstMeta => const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_sse",
        argNames: ["bytes"],
      );

  @override
  Future<Uint8List> benchmarkOutputBytesTwinSse(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(size, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_output_bytes_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinSseConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_sse",
        argNames: ["size"],
      );

  @override
  Future<void> benchmarkVoidTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_void_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinSseConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_sse",
        argNames: [],
      );

  @override
  int benchmarkInputBytesTwinSync({required Uint8List bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_8(bytes);
        return wire.wire_benchmark_input_bytes_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinSyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_sync",
        argNames: ["bytes"],
      );

  @override
  Uint8List benchmarkOutputBytesTwinSync({required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(size);
        return wire.wire_benchmark_output_bytes_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_sync",
        argNames: ["size"],
      );

  @override
  void benchmarkVoidTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_benchmark_void_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinSyncConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_sync",
        argNames: [],
      );

  @override
  int benchmarkInputBytesTwinSyncSse({required Uint8List bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(bytes, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_input_bytes_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinSyncSseConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_sync_sse",
        argNames: ["bytes"],
      );

  @override
  Uint8List benchmarkOutputBytesTwinSyncSse({required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(size, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_output_bytes_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinSyncSseConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_sync_sse",
        argNames: ["size"],
      );

  @override
  void benchmarkVoidTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_benchmark_void_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_sync_sse",
        argNames: [],
      );

  @override
  Future<DateTime> datetimeLocalTwinRustAsync(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Local(d);
        return wire.wire_datetime_local_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kDatetimeLocalTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDatetimeLocalTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "datetime_local_twin_rust_async",
        argNames: ["d"],
      );

  @override
  Future<DateTime> datetimeUtcTwinRustAsync(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Utc(d);
        return wire.wire_datetime_utc_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kDatetimeUtcTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDatetimeUtcTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "datetime_utc_twin_rust_async",
        argNames: ["d"],
      );

  @override
  Future<Duration> durationTwinRustAsync({required Duration d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Duration(d);
        return wire.wire_duration_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kDurationTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDurationTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "duration_twin_rust_async",
        argNames: ["d"],
      );

  @override
  Future<List<DateTime>> handleDurationsTwinRustAsync(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_Chrono_Duration(durations);
        var arg1 = cst_encode_Chrono_Local(since);
        return wire.wire_handle_durations_twin_rust_async(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kHandleDurationsTwinRustAsyncConstMeta,
      argValues: [durations, since],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleDurationsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_durations_twin_rust_async",
        argNames: ["durations", "since"],
      );

  @override
  Future<List<Duration>> handleTimestampsTwinRustAsync(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_Chrono_Naive(timestamps);
        var arg1 = cst_encode_Chrono_Naive(epoch);
        return wire.wire_handle_timestamps_twin_rust_async(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kHandleTimestampsTwinRustAsyncConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTimestampsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_timestamps_twin_rust_async",
        argNames: ["timestamps", "epoch"],
      );

  @override
  Future<Duration> howLongDoesItTakeTwinRustAsync(
      {required FeatureChronoTwinRustAsync mine, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_feature_chrono_twin_rust_async(mine);
        return wire.wire_how_long_does_it_take_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Duration,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHowLongDoesItTakeTwinRustAsyncConstMeta,
      argValues: [mine],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHowLongDoesItTakeTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "how_long_does_it_take_twin_rust_async",
        argNames: ["mine"],
      );

  @override
  Future<DateTime> naivedatetimeTwinRustAsync(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Chrono_Naive(d);
        return wire.wire_naivedatetime_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta: kNaivedatetimeTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNaivedatetimeTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "naivedatetime_twin_rust_async",
        argNames: ["d"],
      );

  @override
  Future<DateTime?> optionalEmptyDatetimeUtcTwinRustAsync(
      {DateTime? d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_Chrono_Utc(d);
        return wire.wire_optional_empty_datetime_utc_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kOptionalEmptyDatetimeUtcTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOptionalEmptyDatetimeUtcTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "optional_empty_datetime_utc_twin_rust_async",
        argNames: ["d"],
      );

  @override
  Future<TestChronoTwinRustAsync> testChronoTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_chrono_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_chrono_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestChronoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestChronoTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "test_chrono_twin_rust_async",
        argNames: [],
      );

  @override
  Future<TestChronoTwinRustAsync> testPreciseChronoTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_precise_chrono_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_chrono_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestPreciseChronoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestPreciseChronoTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_precise_chrono_twin_rust_async",
        argNames: [],
      );

  @override
  DateTime datetimeLocalTwinSync({required DateTime d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Chrono_Local(d);
        return wire.wire_datetime_local_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kDatetimeLocalTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDatetimeLocalTwinSyncConstMeta => const TaskConstMeta(
        debugName: "datetime_local_twin_sync",
        argNames: ["d"],
      );

  @override
  DateTime datetimeUtcTwinSync({required DateTime d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Chrono_Utc(d);
        return wire.wire_datetime_utc_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kDatetimeUtcTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDatetimeUtcTwinSyncConstMeta => const TaskConstMeta(
        debugName: "datetime_utc_twin_sync",
        argNames: ["d"],
      );

  @override
  Duration durationTwinSync({required Duration d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Chrono_Duration(d);
        return wire.wire_duration_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kDurationTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDurationTwinSyncConstMeta => const TaskConstMeta(
        debugName: "duration_twin_sync",
        argNames: ["d"],
      );

  @override
  List<DateTime> handleDurationsTwinSync(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_Chrono_Duration(durations);
        var arg1 = cst_encode_Chrono_Local(since);
        return wire.wire_handle_durations_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kHandleDurationsTwinSyncConstMeta,
      argValues: [durations, since],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleDurationsTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_durations_twin_sync",
        argNames: ["durations", "since"],
      );

  @override
  List<Duration> handleTimestampsTwinSync(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_Chrono_Naive(timestamps);
        var arg1 = cst_encode_Chrono_Naive(epoch);
        return wire.wire_handle_timestamps_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kHandleTimestampsTwinSyncConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTimestampsTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_timestamps_twin_sync",
        argNames: ["timestamps", "epoch"],
      );

  @override
  Duration howLongDoesItTakeTwinSync(
      {required FeatureChronoTwinSync mine, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_feature_chrono_twin_sync(mine);
        return wire.wire_how_long_does_it_take_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Duration,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHowLongDoesItTakeTwinSyncConstMeta,
      argValues: [mine],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHowLongDoesItTakeTwinSyncConstMeta => const TaskConstMeta(
        debugName: "how_long_does_it_take_twin_sync",
        argNames: ["mine"],
      );

  @override
  DateTime naivedatetimeTwinSync({required DateTime d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Chrono_Naive(d);
        return wire.wire_naivedatetime_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta: kNaivedatetimeTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNaivedatetimeTwinSyncConstMeta => const TaskConstMeta(
        debugName: "naivedatetime_twin_sync",
        argNames: ["d"],
      );

  @override
  DateTime? optionalEmptyDatetimeUtcTwinSync({DateTime? d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_Chrono_Utc(d);
        return wire.wire_optional_empty_datetime_utc_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kOptionalEmptyDatetimeUtcTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOptionalEmptyDatetimeUtcTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "optional_empty_datetime_utc_twin_sync",
        argNames: ["d"],
      );

  @override
  TestChronoTwinSync testChronoTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_chrono_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_chrono_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestChronoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestChronoTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_chrono_twin_sync",
        argNames: [],
      );

  @override
  TestChronoTwinSync testPreciseChronoTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_precise_chrono_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_chrono_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestPreciseChronoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestPreciseChronoTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_precise_chrono_twin_sync",
        argNames: [],
      );

  @override
  Future<void> structWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
      {required StructWithCommentsTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_comments_twin_rust_async(that);
        return wire
            .wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinRustAsync_instance_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void> structWithCommentsTwinRustAsyncStaticMethodTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinRustAsync_static_method_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsSlashStarStarTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_function_with_comments_slash_star_star_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> functionWithCommentsTripleSlashMultiLineTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_function_with_comments_triple_slash_multi_line_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsTripleSlashSingleLineTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_function_with_comments_triple_slash_single_line_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> structWithCommentsTwinRustAsyncSseInstanceMethodTwinRustAsyncSse(
      {required StructWithCommentsTwinRustAsyncSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_comments_twin_rust_async_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kStructWithCommentsTwinRustAsyncSseInstanceMethodTwinRustAsyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinRustAsyncSseInstanceMethodTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse",
            argNames: ["that"],
          );

  @override
  Future<void> structWithCommentsTwinRustAsyncSseStaticMethodTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kStructWithCommentsTwinRustAsyncSseStaticMethodTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinRustAsyncSseStaticMethodTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsSlashStarStarTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_function_with_comments_slash_star_star_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsSlashStarStarTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_slash_star_star_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsTripleSlashMultiLineTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsTripleSlashSingleLineTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<void> structWithCommentsTwinSseInstanceMethodTwinSse(
      {required StructWithCommentsTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_comments_twin_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_StructWithCommentsTwinSse_instance_method_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinSseInstanceMethodTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructWithCommentsTwinSseInstanceMethodTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "StructWithCommentsTwinSse_instance_method_twin_sse",
        argNames: ["that"],
      );

  @override
  Future<void> structWithCommentsTwinSseStaticMethodTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_StructWithCommentsTwinSse_static_method_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinSseStaticMethodTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructWithCommentsTwinSseStaticMethodTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "StructWithCommentsTwinSse_static_method_twin_sse",
        argNames: [],
      );

  @override
  Future<void> functionWithCommentsSlashStarStarTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_function_with_comments_slash_star_star_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_sse",
        argNames: [],
      );

  @override
  Future<void> functionWithCommentsTripleSlashMultiLineTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_function_with_comments_triple_slash_multi_line_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashMultiLineTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsTripleSlashMultiLineTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_triple_slash_multi_line_twin_sse",
        argNames: [],
      );

  @override
  Future<void> functionWithCommentsTripleSlashSingleLineTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_function_with_comments_triple_slash_single_line_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashSingleLineTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_sse",
            argNames: [],
          );

  @override
  void structWithCommentsTwinSyncInstanceMethodTwinSync(
      {required StructWithCommentsTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_struct_with_comments_twin_sync(that);
        return wire
            .wire_StructWithCommentsTwinSync_instance_method_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithCommentsTwinSync_instance_method_twin_sync",
            argNames: ["that"],
          );

  @override
  void structWithCommentsTwinSyncStaticMethodTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_StructWithCommentsTwinSync_static_method_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "StructWithCommentsTwinSync_static_method_twin_sync",
        argNames: [],
      );

  @override
  void functionWithCommentsSlashStarStarTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_function_with_comments_slash_star_star_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_sync",
        argNames: [],
      );

  @override
  void functionWithCommentsTripleSlashMultiLineTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_function_with_comments_triple_slash_multi_line_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_sync",
            argNames: [],
          );

  @override
  void functionWithCommentsTripleSlashSingleLineTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_function_with_comments_triple_slash_single_line_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_sync",
            argNames: [],
          );

  @override
  void structWithCommentsTwinSyncSseInstanceMethodTwinSyncSse(
      {required StructWithCommentsTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_comments_twin_sync_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kStructWithCommentsTwinSyncSseInstanceMethodTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinSyncSseInstanceMethodTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  void structWithCommentsTwinSyncSseStaticMethodTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinSyncSseStaticMethodTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinSyncSseStaticMethodTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinSyncSse_static_method_twin_sync_sse",
            argNames: [],
          );

  @override
  void functionWithCommentsSlashStarStarTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_function_with_comments_slash_star_star_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_sync_sse",
        argNames: [],
      );

  @override
  void functionWithCommentsTripleSlashMultiLineTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_function_with_comments_triple_slash_multi_line_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashMultiLineTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_sync_sse",
            argNames: [],
          );

  @override
  void functionWithCommentsTripleSlashSingleLineTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_function_with_comments_triple_slash_single_line_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashSingleLineTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_sync_sse",
            argNames: [],
          );

  @override
  Future<dynamic> returnDartDynamicTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_dart_dynamic_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kReturnDartDynamicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnDartDynamicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_dart_dynamic_twin_rust_async",
        argNames: [],
      );

  @override
  Future<dynamic> returnDartDynamicTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_dart_dynamic_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kReturnDartDynamicTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnDartDynamicTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_dart_dynamic_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<dynamic> returnDartDynamicTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_dart_dynamic_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kReturnDartDynamicTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnDartDynamicTwinSseConstMeta => const TaskConstMeta(
        debugName: "return_dart_dynamic_twin_sse",
        argNames: [],
      );

  @override
  dynamic returnDartDynamicTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_dart_dynamic_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kReturnDartDynamicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnDartDynamicTwinSyncConstMeta => const TaskConstMeta(
        debugName: "return_dart_dynamic_twin_sync",
        argNames: [],
      );

  @override
  dynamic returnDartDynamicTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_dart_dynamic_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kReturnDartDynamicTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnDartDynamicTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_dart_dynamic_twin_sync_sse",
        argNames: [],
      );

  @override
  Future<void> rustCallDartSimple(
      {required void Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartFn_Inputs__Output_unit(callback);
        return wire.wire_rust_call_dart_simple(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartSimpleConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartSimpleConstMeta => const TaskConstMeta(
        debugName: "rust_call_dart_simple",
        argNames: ["callback"],
      );

  @override
  String syncAcceptDartOpaqueTwinSse({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_sync_accept_dart_opaque_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSyncAcceptDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncAcceptDartOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "sync_accept_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Object syncLoopbackTwinSse({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_sync_loopback_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kSyncLoopbackTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncLoopbackTwinSseConstMeta => const TaskConstMeta(
        debugName: "sync_loopback_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Object? syncOptionDartOpaqueTwinSse({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_sync_option_dart_opaque_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kSyncOptionDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionDartOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Object? syncOptionLoopbackTwinSse({Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_sync_option_loopback_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kSyncOptionLoopbackTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionLoopbackTwinSseConstMeta => const TaskConstMeta(
        debugName: "sync_option_loopback_twin_sse",
        argNames: ["opaque"],
      );

  @override
  String unwrapDartOpaqueTwinSse({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_unwrap_dart_opaque_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kUnwrapDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapDartOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "unwrap_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<String> asyncAcceptDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_async_accept_dart_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> cloneDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_clone_dart_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<EnumDartOpaqueTwinRustAsync> createEnumDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_create_enum_dart_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_dart_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<DartOpaqueNestedTwinRustAsync> createNestedDartOpaqueTwinRustAsync(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque1);
        var arg1 = cst_encode_DartOpaque(opaque2);
        return wire.wire_create_nested_dart_opaque_twin_rust_async(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_dart_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_rust_async",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  Future<void> dropStaticDartOpaqueTwinRustAsync(
      {required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(id);
        return wire.wire_drop_static_dart_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<void> getEnumDartOpaqueTwinRustAsync(
      {required EnumDartOpaqueTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_enum_dart_opaque_twin_rust_async(opaque);
        return wire.wire_get_enum_dart_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> getNestedDartOpaqueTwinRustAsync(
      {required DartOpaqueNestedTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_dart_opaque_nested_twin_rust_async(opaque);
        return wire.wire_get_nested_dart_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackArrayGetTwinRustAsync(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque_array_1(opaque);
        return wire.wire_loop_back_array_get_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_get_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1> loopBackArrayTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_array_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackOptionGetTwinRustAsync({Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_DartOpaque(opaque);
        return wire.wire_loop_back_option_get_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<Object?> loopBackOptionTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_option_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<Object> loopBackTwinRustAsync({required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackVecGetTwinRustAsync(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_DartOpaque(opaque);
        return wire.wire_loop_back_vec_get_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> loopBackVecTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_vec_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> panicUnwrapDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_panic_unwrap_dart_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> setStaticDartOpaqueTwinRustAsync(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(id);
        var arg1 = cst_encode_DartOpaque(opaque);
        return wire.wire_set_static_dart_opaque_twin_rust_async(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_rust_async",
        argNames: ["id", "opaque"],
      );

  @override
  Future<String> asyncAcceptDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_async_accept_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> cloneDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_clone_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<EnumDartOpaqueTwinRustAsyncSse> createEnumDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_enum_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_dart_opaque_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<DartOpaqueNestedTwinRustAsyncSse>
      createNestedDartOpaqueTwinRustAsyncSse(
          {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque1, serializer);
        _sse_encode_DartOpaque(opaque2, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_nested_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_dart_opaque_nested_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_rust_async_sse",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  Future<void> dropStaticDartOpaqueTwinRustAsyncSse(
      {required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_drop_static_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_rust_async_sse",
        argNames: ["id"],
      );

  @override
  Future<void> getEnumDartOpaqueTwinRustAsyncSse(
      {required EnumDartOpaqueTwinRustAsyncSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async_sse(
            opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_enum_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> getNestedDartOpaqueTwinRustAsyncSse(
      {required DartOpaqueNestedTwinRustAsyncSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async_sse(
            opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_nested_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackArrayGetTwinRustAsyncSse(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque_array_1(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_array_get_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_get_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1> loopBackArrayTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_array_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackOptionGetTwinRustAsyncSse(
      {Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_option_get_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<Object?> loopBackOptionTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_option_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<Object> loopBackTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackVecGetTwinRustAsyncSse(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_vec_get_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> loopBackVecTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_vec_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> panicUnwrapDartOpaqueTwinRustAsyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_panic_unwrap_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> setStaticDartOpaqueTwinRustAsyncSse(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(id, serializer);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_set_static_dart_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinRustAsyncSseConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_rust_async_sse",
        argNames: ["id", "opaque"],
      );

  @override
  Future<String> asyncAcceptDartOpaqueTwinSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_async_accept_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> cloneDartOpaqueTwinSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_clone_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<EnumDartOpaqueTwinSse> createEnumDartOpaqueTwinSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_enum_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_dart_opaque_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<DartOpaqueNestedTwinSse> createNestedDartOpaqueTwinSse(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque1, serializer);
        _sse_encode_DartOpaque(opaque2, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_nested_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_dart_opaque_nested_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinSseConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_sse",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  Future<void> dropStaticDartOpaqueTwinSse({required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_drop_static_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_sse",
        argNames: ["id"],
      );

  @override
  Future<void> getEnumDartOpaqueTwinSse(
      {required EnumDartOpaqueTwinSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_dart_opaque_twin_sse(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_enum_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> getNestedDartOpaqueTwinSse(
      {required DartOpaqueNestedTwinSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_dart_opaque_nested_twin_sse(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_nested_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackArrayGetTwinSse(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque_array_1(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_array_get_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_get_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1> loopBackArrayTwinSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_array_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackOptionGetTwinSse({Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_option_get_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_get_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<Object?> loopBackOptionTwinSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_option_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<Object> loopBackTwinSse({required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackVecGetTwinSse(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_vec_get_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> loopBackVecTwinSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_vec_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> panicUnwrapDartOpaqueTwinSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_panic_unwrap_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> setStaticDartOpaqueTwinSse(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(id, serializer);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_set_static_dart_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinSseConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_sse",
        argNames: ["id", "opaque"],
      );

  @override
  String asyncAcceptDartOpaqueTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_async_accept_dart_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  List<Object> cloneDartOpaqueTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_clone_dart_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  EnumDartOpaqueTwinSync createEnumDartOpaqueTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_create_enum_dart_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_dart_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  DartOpaqueNestedTwinSync createNestedDartOpaqueTwinSync(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque1);
        var arg1 = cst_encode_DartOpaque(opaque2);
        return wire.wire_create_nested_dart_opaque_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_dart_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_sync",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  void dropStaticDartOpaqueTwinSync({required int id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(id);
        return wire.wire_drop_static_dart_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_sync",
        argNames: ["id"],
      );

  @override
  void getEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_enum_dart_opaque_twin_sync(opaque);
        return wire.wire_get_enum_dart_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void getNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_dart_opaque_nested_twin_sync(opaque);
        return wire.wire_get_nested_dart_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void loopBackArrayGetTwinSync({required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque_array_1(opaque);
        return wire.wire_loop_back_array_get_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_get_twin_sync",
        argNames: ["opaque"],
      );

  @override
  ObjectArray1 loopBackArrayTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_array_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void loopBackOptionGetTwinSync({Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_DartOpaque(opaque);
        return wire.wire_loop_back_option_get_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_get_twin_sync",
        argNames: ["opaque"],
      );

  @override
  Object? loopBackOptionTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_option_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_twin_sync",
        argNames: ["opaque"],
      );

  @override
  Object loopBackTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void loopBackVecGetTwinSync({required List<Object> opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_DartOpaque(opaque);
        return wire.wire_loop_back_vec_get_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_sync",
        argNames: ["opaque"],
      );

  @override
  List<Object> loopBackVecTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_loop_back_vec_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void panicUnwrapDartOpaqueTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_DartOpaque(opaque);
        return wire.wire_panic_unwrap_dart_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void setStaticDartOpaqueTwinSync(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(id);
        var arg1 = cst_encode_DartOpaque(opaque);
        return wire.wire_set_static_dart_opaque_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_sync",
        argNames: ["id", "opaque"],
      );

  @override
  String asyncAcceptDartOpaqueTwinSyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_async_accept_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  List<Object> cloneDartOpaqueTwinSyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_clone_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  EnumDartOpaqueTwinSyncSse createEnumDartOpaqueTwinSyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_enum_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_dart_opaque_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  DartOpaqueNestedTwinSyncSse createNestedDartOpaqueTwinSyncSse(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque1, serializer);
        _sse_encode_DartOpaque(opaque2, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_nested_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_dart_opaque_nested_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinSyncSseConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_sync_sse",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  void dropStaticDartOpaqueTwinSyncSse({required int id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(id, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_drop_static_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinSyncSseConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_sync_sse",
        argNames: ["id"],
      );

  @override
  void getEnumDartOpaqueTwinSyncSse(
      {required EnumDartOpaqueTwinSyncSse opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_dart_opaque_twin_sync_sse(
            opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_enum_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  void getNestedDartOpaqueTwinSyncSse(
      {required DartOpaqueNestedTwinSyncSse opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_dart_opaque_nested_twin_sync_sse(
            opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_nested_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  void loopBackArrayGetTwinSyncSse(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque_array_1(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_array_get_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_get_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  ObjectArray1 loopBackArrayTwinSyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_array_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  void loopBackOptionGetTwinSyncSse({Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_option_get_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  Object? loopBackOptionTwinSyncSse({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_option_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  Object loopBackTwinSyncSse({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  void loopBackVecGetTwinSyncSse({required List<Object> opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_vec_get_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  List<Object> loopBackVecTwinSyncSse({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_loop_back_vec_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  void panicUnwrapDartOpaqueTwinSyncSse(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_panic_unwrap_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  void setStaticDartOpaqueTwinSyncSse(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(id, serializer);
        _sse_encode_DartOpaque(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_set_static_dart_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinSyncSseConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_sync_sse",
        argNames: ["id", "opaque"],
      );

  @override
  Future<EnumSimpleTwinRustAsync> funcEnumSimpleTwinRustAsync(
      {required EnumSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_enum_simple_twin_rust_async(arg);
        return wire.wire_func_enum_simple_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_simple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_simple_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemMixedTwinRustAsync> funcEnumWithItemMixedTwinRustAsync(
      {required EnumWithItemMixedTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(arg);
        return wire.wire_func_enum_with_item_mixed_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_mixed_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemStructTwinRustAsync> funcEnumWithItemStructTwinRustAsync(
      {required EnumWithItemStructTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_enum_with_item_struct_twin_rust_async(arg);
        return wire.wire_func_enum_with_item_struct_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemTupleTwinRustAsync> funcEnumWithItemTupleTwinRustAsync(
      {required EnumWithItemTupleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(arg);
        return wire.wire_func_enum_with_item_tuple_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_tuple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<WeekdaysTwinRustAsync> handleEnumParameterTwinRustAsync(
      {required WeekdaysTwinRustAsync weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_weekdays_twin_rust_async(weekday);
        return wire.wire_handle_enum_parameter_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinRustAsyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_rust_async",
        argNames: ["weekday"],
      );

  @override
  Future<KitchenSinkTwinRustAsync> handleEnumStructTwinRustAsync(
      {required KitchenSinkTwinRustAsync val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_kitchen_sink_twin_rust_async(val);
        return wire.wire_handle_enum_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_kitchen_sink_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_struct_twin_rust_async",
        argNames: ["val"],
      );

  @override
  Future<WeekdaysTwinRustAsync?> handleReturnEnumTwinRustAsync(
      {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(input);
        return wire.wire_handle_return_enum_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_return_enum_twin_rust_async",
        argNames: ["input"],
      );

  @override
  Future<MeasureTwinRustAsync?> multiplyByTenTwinRustAsync(
      {required MeasureTwinRustAsync measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_measure_twin_rust_async(measure);
        return wire.wire_multiply_by_ten_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_measure_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinRustAsyncConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_rust_async",
        argNames: ["measure"],
      );

  @override
  Future<Uint8List> printNoteTwinRustAsync(
      {required NoteTwinRustAsync note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_note_twin_rust_async(note);
        return wire.wire_print_note_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinRustAsyncConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_rust_async",
        argNames: ["note"],
      );

  @override
  Future<EnumSimpleTwinRustAsyncSse> funcEnumSimpleTwinRustAsyncSse(
      {required EnumSimpleTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_enum_simple_twin_rust_async_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_simple_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_simple_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_simple_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemMixedTwinRustAsyncSse>
      funcEnumWithItemMixedTwinRustAsyncSse(
          {required EnumWithItemMixedTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_mixed_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_mixed_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemStructTwinRustAsyncSse>
      funcEnumWithItemStructTwinRustAsyncSse(
          {required EnumWithItemStructTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_enum_with_item_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemTupleTwinRustAsyncSse>
      funcEnumWithItemTupleTwinRustAsyncSse(
          {required EnumWithItemTupleTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_tuple_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_tuple_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<WeekdaysTwinRustAsyncSse> handleEnumParameterTwinRustAsyncSse(
      {required WeekdaysTwinRustAsyncSse weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_weekdays_twin_rust_async_sse(weekday, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_enum_parameter_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_weekdays_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinRustAsyncSseConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_rust_async_sse",
        argNames: ["weekday"],
      );

  @override
  Future<KitchenSinkTwinRustAsyncSse> handleEnumStructTwinRustAsyncSse(
      {required KitchenSinkTwinRustAsyncSse val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_kitchen_sink_twin_rust_async_sse(
            val, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_enum_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_kitchen_sink_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinRustAsyncSseConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_struct_twin_rust_async_sse",
        argNames: ["val"],
      );

  @override
  Future<WeekdaysTwinRustAsyncSse?> handleReturnEnumTwinRustAsyncSse(
      {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_return_enum_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_opt_box_autoadd_weekdays_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinRustAsyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_return_enum_twin_rust_async_sse",
        argNames: ["input"],
      );

  @override
  Future<MeasureTwinRustAsyncSse?> multiplyByTenTwinRustAsyncSse(
      {required MeasureTwinRustAsyncSse measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_measure_twin_rust_async_sse(
            measure, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_multiply_by_ten_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_opt_box_autoadd_measure_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinRustAsyncSseConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "multiply_by_ten_twin_rust_async_sse",
        argNames: ["measure"],
      );

  @override
  Future<Uint8List> printNoteTwinRustAsyncSse(
      {required NoteTwinRustAsyncSse note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_note_twin_rust_async_sse(note, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_print_note_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinRustAsyncSseConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_rust_async_sse",
        argNames: ["note"],
      );

  @override
  Future<EnumSimpleTwinSse> funcEnumSimpleTwinSse(
      {required EnumSimpleTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_enum_simple_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_simple_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_simple_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinSseConstMeta => const TaskConstMeta(
        debugName: "func_enum_simple_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemMixedTwinSse> funcEnumWithItemMixedTwinSse(
      {required EnumWithItemMixedTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_mixed_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_mixed_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_mixed_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemStructTwinSse> funcEnumWithItemStructTwinSse(
      {required EnumWithItemStructTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_struct_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemTupleTwinSse> funcEnumWithItemTupleTwinSse(
      {required EnumWithItemTupleTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_tuple_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_tuple_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_tuple_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<WeekdaysTwinSse> handleEnumParameterTwinSse(
      {required WeekdaysTwinSse weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_weekdays_twin_sse(weekday, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_enum_parameter_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_weekdays_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinSseConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_sse",
        argNames: ["weekday"],
      );

  @override
  Future<KitchenSinkTwinSse> handleEnumStructTwinSse(
      {required KitchenSinkTwinSse val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_kitchen_sink_twin_sse(val, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_enum_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_kitchen_sink_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinSseConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_enum_struct_twin_sse",
        argNames: ["val"],
      );

  @override
  Future<WeekdaysTwinSse?> handleReturnEnumTwinSse(
      {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_return_enum_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_weekdays_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_return_enum_twin_sse",
        argNames: ["input"],
      );

  @override
  Future<MeasureTwinSse?> multiplyByTenTwinSse(
      {required MeasureTwinSse measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_measure_twin_sse(measure, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_multiply_by_ten_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_measure_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinSseConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinSseConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_sse",
        argNames: ["measure"],
      );

  @override
  Future<Uint8List> printNoteTwinSse(
      {required NoteTwinSse note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_note_twin_sse(note, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_print_note_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinSseConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinSseConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_sse",
        argNames: ["note"],
      );

  @override
  EnumSimpleTwinSync funcEnumSimpleTwinSync(
      {required EnumSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_enum_simple_twin_sync(arg);
        return wire.wire_func_enum_simple_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_simple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_enum_simple_twin_sync",
        argNames: ["arg"],
      );

  @override
  EnumWithItemMixedTwinSync funcEnumWithItemMixedTwinSync(
      {required EnumWithItemMixedTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_enum_with_item_mixed_twin_sync(arg);
        return wire.wire_func_enum_with_item_mixed_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_mixed_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_sync",
        argNames: ["arg"],
      );

  @override
  EnumWithItemStructTwinSync funcEnumWithItemStructTwinSync(
      {required EnumWithItemStructTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_enum_with_item_struct_twin_sync(arg);
        return wire.wire_func_enum_with_item_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_sync",
        argNames: ["arg"],
      );

  @override
  EnumWithItemTupleTwinSync funcEnumWithItemTupleTwinSync(
      {required EnumWithItemTupleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_enum_with_item_tuple_twin_sync(arg);
        return wire.wire_func_enum_with_item_tuple_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_with_item_tuple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_sync",
        argNames: ["arg"],
      );

  @override
  WeekdaysTwinSync handleEnumParameterTwinSync(
      {required WeekdaysTwinSync weekday, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_weekdays_twin_sync(weekday);
        return wire.wire_handle_enum_parameter_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinSyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_sync",
        argNames: ["weekday"],
      );

  @override
  KitchenSinkTwinSync handleEnumStructTwinSync(
      {required KitchenSinkTwinSync val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_kitchen_sink_twin_sync(val);
        return wire.wire_handle_enum_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_kitchen_sink_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_enum_struct_twin_sync",
        argNames: ["val"],
      );

  @override
  WeekdaysTwinSync? handleReturnEnumTwinSync(
      {required String input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(input);
        return wire.wire_handle_return_enum_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_return_enum_twin_sync",
        argNames: ["input"],
      );

  @override
  MeasureTwinSync? multiplyByTenTwinSync(
      {required MeasureTwinSync measure, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_measure_twin_sync(measure);
        return wire.wire_multiply_by_ten_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_measure_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinSyncConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinSyncConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_sync",
        argNames: ["measure"],
      );

  @override
  Uint8List printNoteTwinSync({required NoteTwinSync note, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_note_twin_sync(note);
        return wire.wire_print_note_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinSyncConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinSyncConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_sync",
        argNames: ["note"],
      );

  @override
  EnumSimpleTwinSyncSse funcEnumSimpleTwinSyncSse(
      {required EnumSimpleTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_enum_simple_twin_sync_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_simple_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_simple_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "func_enum_simple_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  EnumWithItemMixedTwinSyncSse funcEnumWithItemMixedTwinSyncSse(
      {required EnumWithItemMixedTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_mixed_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_mixed_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_mixed_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  EnumWithItemStructTwinSyncSse funcEnumWithItemStructTwinSyncSse(
      {required EnumWithItemStructTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_struct_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  EnumWithItemTupleTwinSyncSse funcEnumWithItemTupleTwinSyncSse(
      {required EnumWithItemTupleTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_with_item_tuple_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_enum_with_item_tuple_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_with_item_tuple_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  WeekdaysTwinSyncSse handleEnumParameterTwinSyncSse(
      {required WeekdaysTwinSyncSse weekday, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_weekdays_twin_sync_sse(weekday, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_enum_parameter_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_weekdays_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinSyncSseConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_sync_sse",
        argNames: ["weekday"],
      );

  @override
  KitchenSinkTwinSyncSse handleEnumStructTwinSyncSse(
      {required KitchenSinkTwinSyncSse val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_kitchen_sink_twin_sync_sse(val, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_enum_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_kitchen_sink_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinSyncSseConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_struct_twin_sync_sse",
        argNames: ["val"],
      );

  @override
  WeekdaysTwinSyncSse? handleReturnEnumTwinSyncSse(
      {required String input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_return_enum_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_weekdays_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinSyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_return_enum_twin_sync_sse",
        argNames: ["input"],
      );

  @override
  MeasureTwinSyncSse? multiplyByTenTwinSyncSse(
      {required MeasureTwinSyncSse measure, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_measure_twin_sync_sse(measure, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_multiply_by_ten_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_measure_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinSyncSseConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_sync_sse",
        argNames: ["measure"],
      );

  @override
  Uint8List printNoteTwinSyncSse(
      {required NoteTwinSyncSse note, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_note_twin_sync_sse(note, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_print_note_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinSyncSseConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_sync_sse",
        argNames: ["note"],
      );

  @override
  Future<String> eventTwinRustAsyncAsStringTwinRustAsync(
      {required EventTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_event_twin_rust_async(that);
        return wire.wire_EventTwinRustAsync_as_string_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEventTwinRustAsyncAsStringTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventTwinRustAsyncAsStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "EventTwinRustAsync_as_string_twin_rust_async",
        argNames: ["that"],
      );

  @override
  Future<void> closeEventListenerTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_close_event_listener_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCloseEventListenerTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloseEventListenerTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "close_event_listener_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> createEventTwinRustAsync(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(address);
        var arg1 = cst_encode_String(payload);
        return wire.wire_create_event_twin_rust_async(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCreateEventTwinRustAsyncConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEventTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "create_event_twin_rust_async",
        argNames: ["address", "payload"],
      );

  @override
  Stream<EventTwinRustAsync> registerEventListenerTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_register_event_listener_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_event_twin_rust_async,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kRegisterEventListenerTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRegisterEventListenerTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "register_event_listener_twin_rust_async",
        argNames: [],
      );

  @override
  Future<String> eventTwinRustAsyncSseAsStringTwinRustAsyncSse(
      {required EventTwinRustAsyncSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_event_twin_rust_async_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEventTwinRustAsyncSseAsStringTwinRustAsyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventTwinRustAsyncSseAsStringTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "EventTwinRustAsyncSse_as_string_twin_rust_async_sse",
        argNames: ["that"],
      );

  @override
  Future<void> closeEventListenerTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_close_event_listener_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCloseEventListenerTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloseEventListenerTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "close_event_listener_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> createEventTwinRustAsyncSse(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(address, serializer);
        _sse_encode_String(payload, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_event_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCreateEventTwinRustAsyncSseConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEventTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_event_twin_rust_async_sse",
        argNames: ["address", "payload"],
      );

  @override
  Stream<EventTwinRustAsyncSse> registerEventListenerTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_register_event_listener_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_event_twin_rust_async_sse,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kRegisterEventListenerTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRegisterEventListenerTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "register_event_listener_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<String> eventTwinSseAsStringTwinSse(
      {required EventTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_event_twin_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_EventTwinSse_as_string_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEventTwinSseAsStringTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventTwinSseAsStringTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "EventTwinSse_as_string_twin_sse",
        argNames: ["that"],
      );

  @override
  Future<void> closeEventListenerTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_close_event_listener_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCloseEventListenerTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloseEventListenerTwinSseConstMeta => const TaskConstMeta(
        debugName: "close_event_listener_twin_sse",
        argNames: [],
      );

  @override
  Future<void> createEventTwinSse(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(address, serializer);
        _sse_encode_String(payload, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_event_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCreateEventTwinSseConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEventTwinSseConstMeta => const TaskConstMeta(
        debugName: "create_event_twin_sse",
        argNames: ["address", "payload"],
      );

  @override
  Stream<EventTwinSse> registerEventListenerTwinSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_register_event_listener_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_event_twin_sse,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kRegisterEventListenerTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRegisterEventListenerTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "register_event_listener_twin_sse",
        argNames: [],
      );

  @override
  Future<CustomStructTwinRustAsync> customStructTwinRustAsyncNewTwinRustAsync(
      {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(message);
        return wire.wire_CustomStructTwinRustAsync_new_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_custom_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinRustAsync_new_twin_rust_async",
        argNames: ["message"],
      );

  @override
  Future<void>
      customStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_custom_struct_twin_rust_async(that);
        return wire
            .wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData:
            _dco_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      customStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_custom_struct_twin_rust_async(that);
        return wire
            .wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData:
            _dco_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      customStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData:
            _dco_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int> customStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData:
            _dco_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async",
            argNames: [],
          );

  @override
  Future<SomeStructTwinRustAsync> someStructTwinRustAsyncNewTwinRustAsync(
      {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(value);
        return wire.wire_SomeStructTwinRustAsync_new_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_some_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinRustAsync_new_twin_rust_async",
        argNames: ["value"],
      );

  @override
  Future<int> someStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_some_struct_twin_rust_async(that);
        return wire
            .wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_some_struct_twin_rust_async(that);
        return wire
            .wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int> someStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> customEnumErrorPanicTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_custom_enum_error_panic_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta: kCustomEnumErrorPanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_custom_enum_error_return_error_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnOkTwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(arg);
        return wire.wire_custom_enum_error_return_ok_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<void> customNestedErrorReturnErrorTwinRustAsync(
      {required CustomNestedErrorOuterTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
                arg);
        return wire.wire_custom_nested_error_return_error_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_outer_twin_rust_async,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<void> customStructErrorReturnErrorTwinRustAsync(
      {required CustomStructErrorTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_custom_struct_error_twin_rust_async(arg);
        return wire.wire_custom_struct_error_return_error_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_twin_rust_async,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> funcReturnErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_return_error_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> funcTypeFalliblePanicTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_type_fallible_panic_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> funcTypeInfalliblePanicTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_type_infallible_panic_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> panicWithCustomResultTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_panic_with_custom_result_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta: kPanicWithCustomResultTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1TwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_nested_error_1_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta: kReturnCustomNestedError1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1Variant1TwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_return_custom_nested_error_1_variant1_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError2TwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_nested_error_2_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_2_twin_rust_async,
      ),
      constMeta: kReturnCustomNestedError2TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomStructErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_struct_error_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData:
            _dco_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta: kReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> returnCustomStructOkTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_custom_struct_ok_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData:
            _dco_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta: kReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> returnErrCustomErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_err_custom_error_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta: kReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> returnErrorVariantTwinRustAsync(
      {required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(variant);
        return wire.wire_return_error_variant_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta: kReturnErrorVariantTwinRustAsyncConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_rust_async",
        argNames: ["variant"],
      );

  @override
  Future<int> returnOkCustomErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_return_ok_custom_error_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_rust_async,
      ),
      constMeta: kReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_stream_sink_throw_anyhow_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> throwAnyhowTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_throw_anyhow_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_rust_async",
        argNames: [],
      );

  @override
  Future<CustomStructTwinRustAsyncSse>
      customStructTwinRustAsyncSseNewTwinRustAsyncSse(
          {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(message, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_custom_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinRustAsyncSseNewTwinRustAsyncSseConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinRustAsyncSseNewTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinRustAsyncSse_new_twin_rust_async_sse",
        argNames: ["message"],
      );

  @override
  Future<void>
      customStructTwinRustAsyncSseNonstaticReturnCustomStructErrorTwinRustAsyncSse(
          {required CustomStructTwinRustAsyncSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_twin_rust_async_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData:
            _sse_decode_custom_struct_error_another_twin_rust_async_sse,
      ),
      constMeta:
          kCustomStructTwinRustAsyncSseNonstaticReturnCustomStructErrorTwinRustAsyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncSseNonstaticReturnCustomStructErrorTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse",
            argNames: ["that"],
          );

  @override
  Future<int>
      customStructTwinRustAsyncSseNonstaticReturnCustomStructOkTwinRustAsyncSse(
          {required CustomStructTwinRustAsyncSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_twin_rust_async_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData:
            _sse_decode_custom_struct_error_another_twin_rust_async_sse,
      ),
      constMeta:
          kCustomStructTwinRustAsyncSseNonstaticReturnCustomStructOkTwinRustAsyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncSseNonstaticReturnCustomStructOkTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse",
            argNames: ["that"],
          );

  @override
  Future<void>
      customStructTwinRustAsyncSseStaticReturnCustomStructErrorTwinRustAsyncSse(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData:
            _sse_decode_custom_struct_error_another_twin_rust_async_sse,
      ),
      constMeta:
          kCustomStructTwinRustAsyncSseStaticReturnCustomStructErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncSseStaticReturnCustomStructErrorTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<int>
      customStructTwinRustAsyncSseStaticReturnCustomStructOkTwinRustAsyncSse(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData:
            _sse_decode_custom_struct_error_another_twin_rust_async_sse,
      ),
      constMeta:
          kCustomStructTwinRustAsyncSseStaticReturnCustomStructOkTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncSseStaticReturnCustomStructOkTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<SomeStructTwinRustAsyncSse>
      someStructTwinRustAsyncSseNewTwinRustAsyncSse(
          {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_some_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinRustAsyncSseNewTwinRustAsyncSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinRustAsyncSseNewTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinRustAsyncSse_new_twin_rust_async_sse",
        argNames: ["value"],
      );

  @override
  Future<int>
      someStructTwinRustAsyncSseNonStaticReturnErrCustomErrorTwinRustAsyncSse(
          {required SomeStructTwinRustAsyncSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_some_struct_twin_rust_async_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta:
          kSomeStructTwinRustAsyncSseNonStaticReturnErrCustomErrorTwinRustAsyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncSseNonStaticReturnErrCustomErrorTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse",
            argNames: ["that"],
          );

  @override
  Future<int>
      someStructTwinRustAsyncSseNonStaticReturnOkCustomErrorTwinRustAsyncSse(
          {required SomeStructTwinRustAsyncSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_some_struct_twin_rust_async_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta:
          kSomeStructTwinRustAsyncSseNonStaticReturnOkCustomErrorTwinRustAsyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncSseNonStaticReturnOkCustomErrorTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse",
            argNames: ["that"],
          );

  @override
  Future<int>
      someStructTwinRustAsyncSseStaticReturnErrCustomErrorTwinRustAsyncSse(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta:
          kSomeStructTwinRustAsyncSseStaticReturnErrCustomErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncSseStaticReturnErrCustomErrorTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<int>
      someStructTwinRustAsyncSseStaticReturnOkCustomErrorTwinRustAsyncSse(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta:
          kSomeStructTwinRustAsyncSseStaticReturnOkCustomErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncSseStaticReturnOkCustomErrorTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<void> customEnumErrorPanicTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_panic_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_enum_error_twin_rust_async_sse,
      ),
      constMeta: kCustomEnumErrorPanicTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnErrorTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_return_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_enum_error_twin_rust_async_sse,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnOkTwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_return_ok_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_enum_error_twin_rust_async_sse,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<void> customNestedErrorReturnErrorTwinRustAsyncSse(
      {required CustomNestedErrorOuterTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_nested_error_return_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData:
            _sse_decode_custom_nested_error_outer_twin_rust_async_sse,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<void> customStructErrorReturnErrorTwinRustAsyncSse(
      {required CustomStructErrorTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_error_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_struct_error_return_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_twin_rust_async_sse,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> funcReturnErrorTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_return_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_error_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> funcTypeFalliblePanicTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_type_fallible_panic_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> funcTypeInfalliblePanicTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_type_infallible_panic_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> panicWithCustomResultTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_panic_with_custom_result_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta: kPanicWithCustomResultTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1TwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_1_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_1_twin_rust_async_sse,
      ),
      constMeta: kReturnCustomNestedError1TwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1Variant1TwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_return_custom_nested_error_1_variant1_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_1_twin_rust_async_sse,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kReturnCustomNestedError1Variant1TwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "return_custom_nested_error_1_variant1_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<void> returnCustomNestedError2TwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_2_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_2_twin_rust_async_sse,
      ),
      constMeta: kReturnCustomNestedError2TwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> returnCustomStructErrorTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_struct_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData:
            _sse_decode_custom_struct_error_another_twin_rust_async_sse,
      ),
      constMeta: kReturnCustomStructErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> returnCustomStructOkTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_struct_ok_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData:
            _sse_decode_custom_struct_error_another_twin_rust_async_sse,
      ),
      constMeta: kReturnCustomStructOkTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> returnErrCustomErrorTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_err_custom_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta: kReturnErrCustomErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int> returnErrorVariantTwinRustAsyncSse(
      {required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(variant, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_error_variant_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta: kReturnErrorVariantTwinRustAsyncSseConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_rust_async_sse",
        argNames: ["variant"],
      );

  @override
  Future<int> returnOkCustomErrorTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_ok_custom_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_rust_async_sse,
      ),
      constMeta: kReturnOkCustomErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinRustAsyncSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_stream_sink_throw_anyhow_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> throwAnyhowTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_throw_anyhow_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "throw_anyhow_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<CustomStructTwinSse> customStructTwinSseNewTwinSse(
      {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(message, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_CustomStructTwinSse_new_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_custom_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinSseNewTwinSseConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinSseNewTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinSse_new_twin_sse",
        argNames: ["message"],
      );

  @override
  Future<void> customStructTwinSseNonstaticReturnCustomStructErrorTwinSse(
      {required CustomStructTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_twin_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sse,
      ),
      constMeta:
          kCustomStructTwinSseNonstaticReturnCustomStructErrorTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSseNonstaticReturnCustomStructErrorTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<int> customStructTwinSseNonstaticReturnCustomStructOkTwinSse(
      {required CustomStructTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_twin_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sse,
      ),
      constMeta:
          kCustomStructTwinSseNonstaticReturnCustomStructOkTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSseNonstaticReturnCustomStructOkTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<void> customStructTwinSseStaticReturnCustomStructErrorTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sse,
      ),
      constMeta:
          kCustomStructTwinSseStaticReturnCustomStructErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSseStaticReturnCustomStructErrorTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSse_static_return_custom_struct_error_twin_sse",
            argNames: [],
          );

  @override
  Future<int> customStructTwinSseStaticReturnCustomStructOkTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sse,
      ),
      constMeta: kCustomStructTwinSseStaticReturnCustomStructOkTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSseStaticReturnCustomStructOkTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSse_static_return_custom_struct_ok_twin_sse",
            argNames: [],
          );

  @override
  Future<SomeStructTwinSse> someStructTwinSseNewTwinSse(
      {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_SomeStructTwinSse_new_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_some_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinSseNewTwinSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinSseNewTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinSse_new_twin_sse",
        argNames: ["value"],
      );

  @override
  Future<int> someStructTwinSseNonStaticReturnErrCustomErrorTwinSse(
      {required SomeStructTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_some_struct_twin_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta:
          kSomeStructTwinSseNonStaticReturnErrCustomErrorTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSseNonStaticReturnErrCustomErrorTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSse_non_static_return_err_custom_error_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinSseNonStaticReturnOkCustomErrorTwinSse(
      {required SomeStructTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_some_struct_twin_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta: kSomeStructTwinSseNonStaticReturnOkCustomErrorTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSseNonStaticReturnOkCustomErrorTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinSseStaticReturnErrCustomErrorTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta: kSomeStructTwinSseStaticReturnErrCustomErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSseStaticReturnErrCustomErrorTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSse_static_return_err_custom_error_twin_sse",
            argNames: [],
          );

  @override
  Future<int> someStructTwinSseStaticReturnOkCustomErrorTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta: kSomeStructTwinSseStaticReturnOkCustomErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSseStaticReturnOkCustomErrorTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSse_static_return_ok_custom_error_twin_sse",
            argNames: [],
          );

  @override
  Future<void> customEnumErrorPanicTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_panic_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_enum_error_twin_sse,
      ),
      constMeta: kCustomEnumErrorPanicTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_sse",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnErrorTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_return_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_enum_error_twin_sse,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_sse",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnOkTwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_return_ok_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_enum_error_twin_sse,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<void> customNestedErrorReturnErrorTwinSse(
      {required CustomNestedErrorOuterTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_nested_error_outer_twin_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_nested_error_return_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_outer_twin_sse,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<void> customStructErrorReturnErrorTwinSse(
      {required CustomStructErrorTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_error_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_struct_error_return_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_twin_sse,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> funcReturnErrorTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_return_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinSseConstMeta => const TaskConstMeta(
        debugName: "func_return_error_twin_sse",
        argNames: [],
      );

  @override
  Future<int> funcTypeFalliblePanicTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_type_fallible_panic_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_sse",
        argNames: [],
      );

  @override
  Future<int> funcTypeInfalliblePanicTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_type_infallible_panic_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_sse",
        argNames: [],
      );

  @override
  Future<void> panicWithCustomResultTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_panic_with_custom_result_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta: kPanicWithCustomResultTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_sse",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1TwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_1_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_1_twin_sse,
      ),
      constMeta: kReturnCustomNestedError1TwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_sse",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1Variant1TwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_1_variant1_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_1_twin_sse,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_sse",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError2TwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_2_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_2_twin_sse,
      ),
      constMeta: kReturnCustomNestedError2TwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_sse",
        argNames: [],
      );

  @override
  Future<void> returnCustomStructErrorTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_struct_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sse,
      ),
      constMeta: kReturnCustomStructErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_sse",
        argNames: [],
      );

  @override
  Future<int> returnCustomStructOkTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_struct_ok_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sse,
      ),
      constMeta: kReturnCustomStructOkTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_sse",
        argNames: [],
      );

  @override
  Future<int> returnErrCustomErrorTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_err_custom_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta: kReturnErrCustomErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_sse",
        argNames: [],
      );

  @override
  Future<int> returnErrorVariantTwinSse({required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(variant, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_error_variant_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta: kReturnErrorVariantTwinSseConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinSseConstMeta => const TaskConstMeta(
        debugName: "return_error_variant_twin_sse",
        argNames: ["variant"],
      );

  @override
  Future<int> returnOkCustomErrorTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_ok_custom_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sse,
      ),
      constMeta: kReturnOkCustomErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinSseConstMeta => const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_sse",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_stream_sink_throw_anyhow_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_sse",
        argNames: [],
      );

  @override
  Future<void> throwAnyhowTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_throw_anyhow_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinSseConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_sse",
        argNames: [],
      );

  @override
  CustomStructTwinSync customStructTwinSyncNewTwinSync(
      {required String message, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(message);
        return wire.wire_CustomStructTwinSync_new_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_custom_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinSyncNewTwinSyncConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinSync_new_twin_sync",
        argNames: ["message"],
      );

  @override
  void customStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
      {required CustomStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_custom_struct_twin_sync(that);
        return wire
            .wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int customStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_custom_struct_twin_sync(that);
        return wire
            .wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync",
            argNames: ["that"],
          );

  @override
  void customStructTwinSyncStaticReturnCustomStructErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_static_return_custom_struct_error_twin_sync",
            argNames: [],
          );

  @override
  int customStructTwinSyncStaticReturnCustomStructOkTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_static_return_custom_struct_ok_twin_sync",
            argNames: [],
          );

  @override
  SomeStructTwinSync someStructTwinSyncNewTwinSync(
      {required int value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(value);
        return wire.wire_SomeStructTwinSync_new_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_some_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinSyncNewTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinSync_new_twin_sync",
        argNames: ["value"],
      );

  @override
  int someStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_some_struct_twin_sync(that);
        return wire
            .wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta:
          kSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_non_static_return_err_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int someStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_some_struct_twin_sync(that);
        return wire
            .wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta:
          kSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int someStructTwinSyncStaticReturnErrCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta: kSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_static_return_err_custom_error_twin_sync",
            argNames: [],
          );

  @override
  int someStructTwinSyncStaticReturnOkCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta: kSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_static_return_ok_custom_error_twin_sync",
            argNames: [],
          );

  @override
  void customEnumErrorPanicTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_custom_enum_error_panic_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_enum_error_twin_sync,
      ),
      constMeta: kCustomEnumErrorPanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_sync",
        argNames: [],
      );

  @override
  int customEnumErrorReturnErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_custom_enum_error_return_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_enum_error_twin_sync,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_sync",
        argNames: [],
      );

  @override
  int customEnumErrorReturnOkTwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(arg);
        return wire.wire_custom_enum_error_return_ok_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_enum_error_twin_sync,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_sync",
        argNames: ["arg"],
      );

  @override
  void customNestedErrorReturnErrorTwinSync(
      {required CustomNestedErrorOuterTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_box_autoadd_custom_nested_error_outer_twin_sync(arg);
        return wire.wire_custom_nested_error_return_error_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_outer_twin_sync,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_sync",
        argNames: ["arg"],
      );

  @override
  void customStructErrorReturnErrorTwinSync(
      {required CustomStructErrorTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_custom_struct_error_twin_sync(arg);
        return wire.wire_custom_struct_error_return_error_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_twin_sync,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_sync",
        argNames: ["arg"],
      );

  @override
  int funcReturnErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_func_return_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_return_error_twin_sync",
        argNames: [],
      );

  @override
  int funcTypeFalliblePanicTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_func_type_fallible_panic_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_sync",
        argNames: [],
      );

  @override
  int funcTypeInfalliblePanicTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_func_type_infallible_panic_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_sync",
        argNames: [],
      );

  @override
  void panicWithCustomResultTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_panic_with_custom_result_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta: kPanicWithCustomResultTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomNestedError1TwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_custom_nested_error_1_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta: kReturnCustomNestedError1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomNestedError1Variant1TwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_custom_nested_error_1_variant1_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomNestedError2TwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_custom_nested_error_2_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_nested_error_2_twin_sync,
      ),
      constMeta: kReturnCustomNestedError2TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomStructErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_custom_struct_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta: kReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_sync",
        argNames: [],
      );

  @override
  int returnCustomStructOkTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_custom_struct_ok_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta: kReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_sync",
        argNames: [],
      );

  @override
  int returnErrCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_err_custom_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta: kReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_sync",
        argNames: [],
      );

  @override
  int returnErrorVariantTwinSync({required int variant, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(variant);
        return wire.wire_return_error_variant_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta: kReturnErrorVariantTwinSyncConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinSyncConstMeta => const TaskConstMeta(
        debugName: "return_error_variant_twin_sync",
        argNames: ["variant"],
      );

  @override
  int returnOkCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_return_ok_custom_error_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: _dco_decode_custom_error_twin_sync,
      ),
      constMeta: kReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_sync",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_stream_sink_throw_anyhow_twin_sync(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_sync",
        argNames: [],
      );

  @override
  void throwAnyhowTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_throw_anyhow_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinSyncConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_sync",
        argNames: [],
      );

  @override
  CustomStructTwinSyncSse customStructTwinSyncSseNewTwinSyncSse(
      {required String message, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(message, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_CustomStructTwinSyncSse_new_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_custom_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinSyncSseNewTwinSyncSseConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinSyncSseNewTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinSyncSse_new_twin_sync_sse",
        argNames: ["message"],
      );

  @override
  void customStructTwinSyncSseNonstaticReturnCustomStructErrorTwinSyncSse(
      {required CustomStructTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_twin_sync_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sync_sse,
      ),
      constMeta:
          kCustomStructTwinSyncSseNonstaticReturnCustomStructErrorTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncSseNonstaticReturnCustomStructErrorTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  int customStructTwinSyncSseNonstaticReturnCustomStructOkTwinSyncSse(
      {required CustomStructTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_twin_sync_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sync_sse,
      ),
      constMeta:
          kCustomStructTwinSyncSseNonstaticReturnCustomStructOkTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncSseNonstaticReturnCustomStructOkTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  void customStructTwinSyncSseStaticReturnCustomStructErrorTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sync_sse,
      ),
      constMeta:
          kCustomStructTwinSyncSseStaticReturnCustomStructErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncSseStaticReturnCustomStructErrorTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse",
            argNames: [],
          );

  @override
  int customStructTwinSyncSseStaticReturnCustomStructOkTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sync_sse,
      ),
      constMeta:
          kCustomStructTwinSyncSseStaticReturnCustomStructOkTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncSseStaticReturnCustomStructOkTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse",
            argNames: [],
          );

  @override
  SomeStructTwinSyncSse someStructTwinSyncSseNewTwinSyncSse(
      {required int value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_SomeStructTwinSyncSse_new_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_some_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinSyncSseNewTwinSyncSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinSyncSseNewTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinSyncSse_new_twin_sync_sse",
        argNames: ["value"],
      );

  @override
  int someStructTwinSyncSseNonStaticReturnErrCustomErrorTwinSyncSse(
      {required SomeStructTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_some_struct_twin_sync_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta:
          kSomeStructTwinSyncSseNonStaticReturnErrCustomErrorTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncSseNonStaticReturnErrCustomErrorTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  int someStructTwinSyncSseNonStaticReturnOkCustomErrorTwinSyncSse(
      {required SomeStructTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_some_struct_twin_sync_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta:
          kSomeStructTwinSyncSseNonStaticReturnOkCustomErrorTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncSseNonStaticReturnOkCustomErrorTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  int someStructTwinSyncSseStaticReturnErrCustomErrorTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta:
          kSomeStructTwinSyncSseStaticReturnErrCustomErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncSseStaticReturnErrCustomErrorTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse",
            argNames: [],
          );

  @override
  int someStructTwinSyncSseStaticReturnOkCustomErrorTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta:
          kSomeStructTwinSyncSseStaticReturnOkCustomErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncSseStaticReturnOkCustomErrorTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse",
            argNames: [],
          );

  @override
  void customEnumErrorPanicTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_panic_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_enum_error_twin_sync_sse,
      ),
      constMeta: kCustomEnumErrorPanicTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_sync_sse",
        argNames: [],
      );

  @override
  int customEnumErrorReturnErrorTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_return_error_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_enum_error_twin_sync_sse,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_sync_sse",
        argNames: [],
      );

  @override
  int customEnumErrorReturnOkTwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_enum_error_return_ok_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_enum_error_twin_sync_sse,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  void customNestedErrorReturnErrorTwinSyncSse(
      {required CustomNestedErrorOuterTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_nested_error_outer_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_nested_error_return_error_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_outer_twin_sync_sse,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  void customStructErrorReturnErrorTwinSyncSse(
      {required CustomStructErrorTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_custom_struct_error_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_custom_struct_error_return_error_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_twin_sync_sse,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int funcReturnErrorTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_return_error_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "func_return_error_twin_sync_sse",
        argNames: [],
      );

  @override
  int funcTypeFalliblePanicTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_type_fallible_panic_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_sync_sse",
        argNames: [],
      );

  @override
  int funcTypeInfalliblePanicTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_type_infallible_panic_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_sync_sse",
        argNames: [],
      );

  @override
  void panicWithCustomResultTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_panic_with_custom_result_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta: kPanicWithCustomResultTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_sync_sse",
        argNames: [],
      );

  @override
  void returnCustomNestedError1TwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_1_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_1_twin_sync_sse,
      ),
      constMeta: kReturnCustomNestedError1TwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_sync_sse",
        argNames: [],
      );

  @override
  void returnCustomNestedError1Variant1TwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_1_variant1_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_1_twin_sync_sse,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_sync_sse",
        argNames: [],
      );

  @override
  void returnCustomNestedError2TwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_nested_error_2_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_nested_error_2_twin_sync_sse,
      ),
      constMeta: kReturnCustomNestedError2TwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_sync_sse",
        argNames: [],
      );

  @override
  void returnCustomStructErrorTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_struct_error_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sync_sse,
      ),
      constMeta: kReturnCustomStructErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_sync_sse",
        argNames: [],
      );

  @override
  int returnCustomStructOkTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_custom_struct_ok_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_struct_error_another_twin_sync_sse,
      ),
      constMeta: kReturnCustomStructOkTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_sync_sse",
        argNames: [],
      );

  @override
  int returnErrCustomErrorTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_err_custom_error_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta: kReturnErrCustomErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_sync_sse",
        argNames: [],
      );

  @override
  int returnErrorVariantTwinSyncSse({required int variant, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(variant, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_return_error_variant_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta: kReturnErrorVariantTwinSyncSseConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_sync_sse",
        argNames: ["variant"],
      );

  @override
  int returnOkCustomErrorTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_return_ok_custom_error_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: _sse_decode_custom_error_twin_sync_sse,
      ),
      constMeta: kReturnOkCustomErrorTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_sync_sse",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinSyncSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_stream_sink_throw_anyhow_twin_sync_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_sync_sse",
        argNames: [],
      );

  @override
  void throwAnyhowTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_throw_anyhow_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_sync_sse",
        argNames: [],
      );

  @override
  Future<NewSimpleStruct> callNewModuleSystemTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_call_new_module_system_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_rust_async",
        argNames: [],
      );

  @override
  Future<OldSimpleStruct> callOldModuleSystemTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_call_old_module_system_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_rust_async",
        argNames: [],
      );

  @override
  Future<bool> useImportedEnumTwinRustAsync(
      {required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_my_enum(myEnum);
        return wire.wire_use_imported_enum_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinRustAsyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_enum_twin_rust_async",
        argNames: ["myEnum"],
      );

  @override
  Future<bool> useImportedStructTwinRustAsync(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_struct(myStruct);
        return wire.wire_use_imported_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinRustAsyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_struct_twin_rust_async",
        argNames: ["myStruct"],
      );

  @override
  Future<NewSimpleStruct> callNewModuleSystemTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_call_new_module_system_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<OldSimpleStruct> callOldModuleSystemTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_call_old_module_system_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<bool> useImportedEnumTwinRustAsyncSse(
      {required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_my_enum(my_enum, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_imported_enum_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinRustAsyncSseConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_enum_twin_rust_async_sse",
        argNames: ["myEnum"],
      );

  @override
  Future<bool> useImportedStructTwinRustAsyncSse(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_struct(my_struct, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_imported_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinRustAsyncSseConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_struct_twin_rust_async_sse",
        argNames: ["myStruct"],
      );

  @override
  Future<NewSimpleStruct> callNewModuleSystemTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_call_new_module_system_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinSseConstMeta => const TaskConstMeta(
        debugName: "call_new_module_system_twin_sse",
        argNames: [],
      );

  @override
  Future<OldSimpleStruct> callOldModuleSystemTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_call_old_module_system_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinSseConstMeta => const TaskConstMeta(
        debugName: "call_old_module_system_twin_sse",
        argNames: [],
      );

  @override
  Future<bool> useImportedEnumTwinSse({required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_my_enum(my_enum, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_imported_enum_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinSseConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinSseConstMeta => const TaskConstMeta(
        debugName: "use_imported_enum_twin_sse",
        argNames: ["myEnum"],
      );

  @override
  Future<bool> useImportedStructTwinSse(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_struct(my_struct, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_imported_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinSseConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "use_imported_struct_twin_sse",
        argNames: ["myStruct"],
      );

  @override
  NewSimpleStruct callNewModuleSystemTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_call_new_module_system_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_sync",
        argNames: [],
      );

  @override
  OldSimpleStruct callOldModuleSystemTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_call_old_module_system_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_sync",
        argNames: [],
      );

  @override
  bool useImportedEnumTwinSync({required MyEnum myEnum, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_my_enum(myEnum);
        return wire.wire_use_imported_enum_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinSyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_imported_enum_twin_sync",
        argNames: ["myEnum"],
      );

  @override
  bool useImportedStructTwinSync({required MyStruct myStruct, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_my_struct(myStruct);
        return wire.wire_use_imported_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinSyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_imported_struct_twin_sync",
        argNames: ["myStruct"],
      );

  @override
  NewSimpleStruct callNewModuleSystemTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_call_new_module_system_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_sync_sse",
        argNames: [],
      );

  @override
  OldSimpleStruct callOldModuleSystemTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_call_old_module_system_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_sync_sse",
        argNames: [],
      );

  @override
  bool useImportedEnumTwinSyncSse({required MyEnum myEnum, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_my_enum(my_enum, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_imported_enum_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinSyncSseConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "use_imported_enum_twin_sync_sse",
        argNames: ["myEnum"],
      );

  @override
  bool useImportedStructTwinSyncSse(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_struct(my_struct, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_use_imported_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinSyncSseConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_struct_twin_sync_sse",
        argNames: ["myStruct"],
      );

  @override
  Future<AnotherMacroStructTwinSse> anotherMacroStructTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_another_macro_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_another_macro_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kAnotherMacroStructTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAnotherMacroStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "another_macro_struct_twin_sse",
        argNames: [],
      );

  @override
  Future<MacroStruct> funcMacroStructTwinSse(
      {required MacroStruct arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_macro_struct(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_macro_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_macro_struct,
        decodeErrorData: null,
      ),
      constMeta: kFuncMacroStructTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncMacroStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "func_macro_struct_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<String> concatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
      {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(a);
        var arg1 = cst_encode_String(b);
        return wire
            .wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<String> concatenateWithTwinRustAsyncConcatenateTwinRustAsync(
      {required ConcatenateWithTwinRustAsync that,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_concatenate_with_twin_rust_async(that);
        var arg1 = cst_encode_String(b);
        return wire
            .wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_concatenate_twin_rust_async",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire
            .wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async",
            argNames: [],
          );

  @override
  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire
            .wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_2_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
      {required ConcatenateWithTwinRustAsync that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_concatenate_with_twin_rust_async(that);
        return wire
            .wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max,
          dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_concatenate_with_twin_rust_async(that);
        var arg1 = cst_encode_u_32(key);
        var arg2 = cst_encode_u_32(max);
        return wire
            .wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_2_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async",
            argNames: ["that", "key", "max"],
          );

  @override
  Future<ConcatenateWithTwinRustAsync>
      concatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(a);
        return wire.wire_ConcatenateWithTwinRustAsync_new_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_concatenate_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinRustAsync_new_twin_rust_async",
        argNames: ["a"],
      );

  @override
  Future<int> sumWithTwinRustAsyncSumTwinRustAsync(
      {required SumWithTwinRustAsync that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sum_with_twin_rust_async(that);
        var arg1 = cst_encode_u_32(y);
        var arg2 = cst_encode_u_32(z);
        return wire.wire_SumWithTwinRustAsync_sum_twin_rust_async(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinRustAsyncSumTwinRustAsyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinRustAsyncSumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "SumWithTwinRustAsync_sum_twin_rust_async",
        argNames: ["that", "y", "z"],
      );

  @override
  Future<SumWithTwinRustAsyncArray3> getSumArrayTwinRustAsync(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(a);
        var arg1 = cst_encode_u_32(b);
        var arg2 = cst_encode_u_32(c);
        return wire.wire_get_sum_array_twin_rust_async(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sum_with_twin_rust_async_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinRustAsyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_rust_async",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinRustAsync> getSumStructTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_sum_struct_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sum_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Future<String>
      concatenateWithTwinRustAsyncSseConcatenateStaticTwinRustAsyncSse(
          {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(a, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncSseConcatenateStaticTwinRustAsyncSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSseConcatenateStaticTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse",
            argNames: ["a", "b"],
          );

  @override
  Future<String> concatenateWithTwinRustAsyncSseConcatenateTwinRustAsyncSse(
      {required ConcatenateWithTwinRustAsyncSse that,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_rust_async_sse(
            that, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncSseConcatenateTwinRustAsyncSseConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSseConcatenateTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      concatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkSingleArgTwinRustAsyncSse(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkSingleArgTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkSingleArgTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Stream<Log2TwinRustAsyncSse>
      concatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkTwinRustAsyncSse(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_2_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkTwinRustAsyncSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSseHandleSomeStaticStreamSinkTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse",
            argNames: ["key", "max"],
          );

  @override
  Stream<int>
      concatenateWithTwinRustAsyncSseHandleSomeStreamSinkAt1TwinRustAsyncSse(
          {required ConcatenateWithTwinRustAsyncSse that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_rust_async_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncSseHandleSomeStreamSinkAt1TwinRustAsyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSseHandleSomeStreamSinkAt1TwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinRustAsyncSse>
      concatenateWithTwinRustAsyncSseHandleSomeStreamSinkTwinRustAsyncSse(
          {required ConcatenateWithTwinRustAsyncSse that,
          required int key,
          required int max,
          dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_rust_async_sse(
            that, serializer);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_2_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncSseHandleSomeStreamSinkTwinRustAsyncSseConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSseHandleSomeStreamSinkTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse",
            argNames: ["that", "key", "max"],
          );

  @override
  Future<ConcatenateWithTwinRustAsyncSse>
      concatenateWithTwinRustAsyncSseNewTwinRustAsyncSse(
          {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(a, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_concatenate_with_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinRustAsyncSseNewTwinRustAsyncSseConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSseNewTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse",
            argNames: ["a"],
          );

  @override
  Future<int> sumWithTwinRustAsyncSseSumTwinRustAsyncSse(
      {required SumWithTwinRustAsyncSse that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_sum_with_twin_rust_async_sse(that, serializer);
        _sse_encode_u_32(y, serializer);
        _sse_encode_u_32(z, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinRustAsyncSseSumTwinRustAsyncSseConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinRustAsyncSseSumTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "SumWithTwinRustAsyncSse_sum_twin_rust_async_sse",
        argNames: ["that", "y", "z"],
      );

  @override
  Future<SumWithTwinRustAsyncSseArray3> getSumArrayTwinRustAsyncSse(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(a, serializer);
        _sse_encode_u_32(b, serializer);
        _sse_encode_u_32(c, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_sum_array_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sum_with_twin_rust_async_sse_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinRustAsyncSseConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_sum_array_twin_rust_async_sse",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinRustAsyncSse> getSumStructTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_sum_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sum_with_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_sum_struct_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<String> concatenateWithTwinSseConcatenateStaticTwinSse(
      {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(a, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_ConcatenateWithTwinSse_concatenate_static_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSseConcatenateStaticTwinSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSseConcatenateStaticTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSse_concatenate_static_twin_sse",
        argNames: ["a", "b"],
      );

  @override
  Future<String> concatenateWithTwinSseConcatenateTwinSse(
      {required ConcatenateWithTwinSse that, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_sse(that, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_ConcatenateWithTwinSse_concatenate_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSseConcatenateTwinSseConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSseConcatenateTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSse_concatenate_twin_sse",
        argNames: ["that", "b"],
      );

  @override
  Stream<int> concatenateWithTwinSseHandleSomeStaticStreamSinkSingleArgTwinSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSseHandleSomeStaticStreamSinkSingleArgTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSseHandleSomeStaticStreamSinkSingleArgTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse",
            argNames: [],
          );

  @override
  Stream<Log2TwinSse> concatenateWithTwinSseHandleSomeStaticStreamSinkTwinSse(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_2_twin_sse,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSseHandleSomeStaticStreamSinkTwinSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSseHandleSomeStaticStreamSinkTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinSseHandleSomeStreamSinkAt1TwinSse(
      {required ConcatenateWithTwinSse that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_sse(that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSseHandleSomeStreamSinkAt1TwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSseHandleSomeStreamSinkAt1TwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinSse> concatenateWithTwinSseHandleSomeStreamSinkTwinSse(
      {required ConcatenateWithTwinSse that,
      required int key,
      required int max,
      dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_sse(that, serializer);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_2_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSseHandleSomeStreamSinkTwinSseConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSseHandleSomeStreamSinkTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse",
            argNames: ["that", "key", "max"],
          );

  @override
  Future<ConcatenateWithTwinSse> concatenateWithTwinSseNewTwinSse(
      {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(a, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_ConcatenateWithTwinSse_new_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_concatenate_with_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSseNewTwinSseConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSseNewTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSse_new_twin_sse",
        argNames: ["a"],
      );

  @override
  Future<int> sumWithTwinSseSumTwinSse(
      {required SumWithTwinSse that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_sum_with_twin_sse(that, serializer);
        _sse_encode_u_32(y, serializer);
        _sse_encode_u_32(z, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_SumWithTwinSse_sum_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinSseSumTwinSseConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinSseSumTwinSseConstMeta => const TaskConstMeta(
        debugName: "SumWithTwinSse_sum_twin_sse",
        argNames: ["that", "y", "z"],
      );

  @override
  Future<SumWithTwinSseArray3> getSumArrayTwinSse(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(a, serializer);
        _sse_encode_u_32(b, serializer);
        _sse_encode_u_32(c, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_sum_array_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sum_with_twin_sse_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinSseConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_sse",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinSse> getSumStructTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_sum_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sum_with_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_sse",
        argNames: [],
      );

  @override
  String concatenateWithTwinSyncConcatenateStaticTwinSync(
      {required String a, required String b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(a);
        var arg1 = cst_encode_String(b);
        return wire.wire_ConcatenateWithTwinSync_concatenate_static_twin_sync(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "ConcatenateWithTwinSync_concatenate_static_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  String concatenateWithTwinSyncConcatenateTwinSync(
      {required ConcatenateWithTwinSync that,
      required String b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_concatenate_with_twin_sync(that);
        var arg1 = cst_encode_String(b);
        return wire.wire_ConcatenateWithTwinSync_concatenate_twin_sync(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncConcatenateTwinSyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSyncConcatenateTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSync_concatenate_twin_sync",
        argNames: ["that", "b"],
      );

  @override
  Stream<int>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire
            .wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync",
            argNames: [],
          );

  @override
  Stream<Log2TwinSync>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire
            .wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_2_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
      {required ConcatenateWithTwinSync that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_concatenate_with_twin_sync(that);
        return wire
            .wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinSync> concatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
      {required ConcatenateWithTwinSync that,
      required int key,
      required int max,
      dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_concatenate_with_twin_sync(that);
        var arg1 = cst_encode_u_32(key);
        var arg2 = cst_encode_u_32(max);
        return wire
            .wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_2_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync",
            argNames: ["that", "key", "max"],
          );

  @override
  ConcatenateWithTwinSync concatenateWithTwinSyncNewTwinSync(
      {required String a, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(a);
        return wire.wire_ConcatenateWithTwinSync_new_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_concatenate_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncNewTwinSyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSync_new_twin_sync",
        argNames: ["a"],
      );

  @override
  int sumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_sum_with_twin_sync(that);
        var arg1 = cst_encode_u_32(y);
        var arg2 = cst_encode_u_32(z);
        return wire.wire_SumWithTwinSync_sum_twin_sync(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinSyncSumTwinSyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinSyncSumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "SumWithTwinSync_sum_twin_sync",
        argNames: ["that", "y", "z"],
      );

  @override
  SumWithTwinSyncArray3 getSumArrayTwinSync(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(a);
        var arg1 = cst_encode_u_32(b);
        var arg2 = cst_encode_u_32(c);
        return wire.wire_get_sum_array_twin_sync(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sum_with_twin_sync_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinSyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_sync",
        argNames: ["a", "b", "c"],
      );

  @override
  SumWithTwinSync getSumStructTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_get_sum_struct_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sum_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_sync",
        argNames: [],
      );

  @override
  String concatenateWithTwinSyncSseConcatenateStaticTwinSyncSse(
      {required String a, required String b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(a, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncSseConcatenateStaticTwinSyncSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncSseConcatenateStaticTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse",
            argNames: ["a", "b"],
          );

  @override
  String concatenateWithTwinSyncSseConcatenateTwinSyncSse(
      {required ConcatenateWithTwinSyncSse that,
      required String b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_sync_sse(
            that, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncSseConcatenateTwinSyncSseConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncSseConcatenateTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName: "ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      concatenateWithTwinSyncSseHandleSomeStaticStreamSinkSingleArgTwinSyncSse(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncSseHandleSomeStaticStreamSinkSingleArgTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncSseHandleSomeStaticStreamSinkSingleArgTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse",
            argNames: [],
          );

  @override
  Stream<Log2TwinSyncSse>
      concatenateWithTwinSyncSseHandleSomeStaticStreamSinkTwinSyncSse(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_2_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncSseHandleSomeStaticStreamSinkTwinSyncSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncSseHandleSomeStaticStreamSinkTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinSyncSseHandleSomeStreamSinkAt1TwinSyncSse(
      {required ConcatenateWithTwinSyncSse that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_sync_sse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncSseHandleSomeStreamSinkAt1TwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncSseHandleSomeStreamSinkAt1TwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinSyncSse>
      concatenateWithTwinSyncSseHandleSomeStreamSinkTwinSyncSse(
          {required ConcatenateWithTwinSyncSse that,
          required int key,
          required int max,
          dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_concatenate_with_twin_sync_sse(
            that, serializer);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_2_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncSseHandleSomeStreamSinkTwinSyncSseConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncSseHandleSomeStreamSinkTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse",
            argNames: ["that", "key", "max"],
          );

  @override
  ConcatenateWithTwinSyncSse concatenateWithTwinSyncSseNewTwinSyncSse(
      {required String a, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(a, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_concatenate_with_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncSseNewTwinSyncSseConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSyncSseNewTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSyncSse_new_twin_sync_sse",
        argNames: ["a"],
      );

  @override
  int sumWithTwinSyncSseSumTwinSyncSse(
      {required SumWithTwinSyncSse that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_sum_with_twin_sync_sse(that, serializer);
        _sse_encode_u_32(y, serializer);
        _sse_encode_u_32(z, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_SumWithTwinSyncSse_sum_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinSyncSseSumTwinSyncSseConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinSyncSseSumTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "SumWithTwinSyncSse_sum_twin_sync_sse",
        argNames: ["that", "y", "z"],
      );

  @override
  SumWithTwinSyncSseArray3 getSumArrayTwinSyncSse(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(a, serializer);
        _sse_encode_u_32(b, serializer);
        _sse_encode_u_32(c, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_get_sum_array_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sum_with_twin_sync_sse_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinSyncSseConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_sync_sse",
        argNames: ["a", "b", "c"],
      );

  @override
  SumWithTwinSyncSse getSumStructTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_sum_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sum_with_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_sync_sse",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_app_settings_stream_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_app_settings_vec_stream_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int?> firstNumberTwinRustAsync({required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_numbers(nums);
        return wire.wire_first_number_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinRustAsyncConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_rust_async",
        argNames: ["nums"],
      );

  @override
  Future<int?> firstSequenceTwinRustAsync(
      {required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequences(seqs);
        return wire.wire_first_sequence_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinRustAsyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_rust_async",
        argNames: ["seqs"],
      );

  @override
  Future<ApplicationSettings> getAppSettingsTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_app_settings_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_app_settings_twin_rust_async",
        argNames: [],
      );

  @override
  Future<ApplicationSettings> getFallibleAppSettingsTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_fallible_app_settings_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_rust_async",
        argNames: [],
      );

  @override
  Future<ApplicationMessage> getMessageTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_message_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_rust_async",
        argNames: [],
      );

  @override
  Future<bool> isAppEmbeddedTwinRustAsync(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_application_settings(appSettings);
        return wire.wire_is_app_embedded_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinRustAsyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_rust_async",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinRustAsync> mirrorStructStreamTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_mirror_struct_stream_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_mirror_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_mirror_tuple_stream_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Future<Numbers> repeatNumberTwinRustAsync(
      {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(num);
        var arg1 = cst_encode_usize(times);
        return wire.wire_repeat_number_twin_rust_async(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinRustAsyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_rust_async",
        argNames: ["num", "times"],
      );

  @override
  Future<Sequences> repeatSequenceTwinRustAsync(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(seq);
        var arg1 = cst_encode_usize(times);
        return wire.wire_repeat_sequence_twin_rust_async(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinRustAsyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_sequence_twin_rust_async",
        argNames: ["seq", "times"],
      );

  @override
  Future<ContainsMirroredSubStructTwinRustAsync>
      testContainsMirroredSubStructTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_contains_mirrored_sub_struct_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_contains_mirrored_sub_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_fallible_of_raw_string_mirrored_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_raw_string_mirrored,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<List<RawStringEnumMirrored>>
      testListOfNestedEnumsMirroredTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_list_of_nested_enums_mirrored_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_list_of_raw_nested_string_mirrored_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_nested_raw_string_mirrored_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinRustAsync(
      {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(nested);
        return wire.wire_test_raw_string_enum_mirrored_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinRustAsyncConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_rust_async",
        argNames: ["nested"],
      );

  @override
  Future<RawStringMirrored> testRawStringMirroredTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_raw_string_mirrored_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_app_settings_stream_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_app_settings_vec_stream_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<int?> firstNumberTwinRustAsyncSse(
      {required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_numbers(nums, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_first_number_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinRustAsyncSseConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "first_number_twin_rust_async_sse",
        argNames: ["nums"],
      );

  @override
  Future<int?> firstSequenceTwinRustAsyncSse(
      {required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_sequences(seqs, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_first_sequence_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinRustAsyncSseConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "first_sequence_twin_rust_async_sse",
        argNames: ["seqs"],
      );

  @override
  Future<ApplicationSettings> getAppSettingsTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_app_settings_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_app_settings_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<ApplicationSettings> getFallibleAppSettingsTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_fallible_app_settings_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<ApplicationMessage> getMessageTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_message_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<bool> isAppEmbeddedTwinRustAsyncSse(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_application_settings(app_settings, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_is_app_embedded_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinRustAsyncSseConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "is_app_embedded_twin_rust_async_sse",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinRustAsyncSse> mirrorStructStreamTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_mirror_struct_stream_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_mirror_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinRustAsyncSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_mirror_tuple_stream_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<Numbers> repeatNumberTwinRustAsyncSse(
      {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(num, serializer);
        _sse_encode_usize(times, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_repeat_number_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinRustAsyncSseConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_number_twin_rust_async_sse",
        argNames: ["num", "times"],
      );

  @override
  Future<Sequences> repeatSequenceTwinRustAsyncSse(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(seq, serializer);
        _sse_encode_usize(times, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_repeat_sequence_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinRustAsyncSseConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_sequence_twin_rust_async_sse",
        argNames: ["seq", "times"],
      );

  @override
  Future<ContainsMirroredSubStructTwinRustAsyncSse>
      testContainsMirroredSubStructTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_contains_mirrored_sub_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_contains_mirrored_sub_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<List<RawStringMirrored>>
      testFallibleOfRawStringMirroredTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_raw_string_mirrored,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<List<RawStringEnumMirrored>>
      testListOfNestedEnumsMirroredTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kTestListOfRawNestedStringMirroredTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "test_list_of_raw_nested_string_mirrored_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_nested_raw_string_mirrored_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinRustAsyncSse(
      {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_bool(nested, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_enum_mirrored_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinRustAsyncSseConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_rust_async_sse",
        argNames: ["nested"],
      );

  @override
  Future<RawStringMirrored> testRawStringMirroredTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_mirrored_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_app_settings_stream_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinSseConstMeta => const TaskConstMeta(
        debugName: "app_settings_stream_twin_sse",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_app_settings_vec_stream_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_sse",
        argNames: [],
      );

  @override
  Future<int?> firstNumberTwinSse({required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_numbers(nums, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_first_number_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinSseConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinSseConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_sse",
        argNames: ["nums"],
      );

  @override
  Future<int?> firstSequenceTwinSse({required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_sequences(seqs, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_first_sequence_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinSseConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinSseConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_sse",
        argNames: ["seqs"],
      );

  @override
  Future<ApplicationSettings> getAppSettingsTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_app_settings_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_app_settings_twin_sse",
        argNames: [],
      );

  @override
  Future<ApplicationSettings> getFallibleAppSettingsTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_fallible_app_settings_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_sse",
        argNames: [],
      );

  @override
  Future<ApplicationMessage> getMessageTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_message_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinSseConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_sse",
        argNames: [],
      );

  @override
  Future<bool> isAppEmbeddedTwinSse(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_application_settings(app_settings, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_is_app_embedded_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinSseConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinSseConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_sse",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinSse> mirrorStructStreamTwinSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_mirror_struct_stream_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_mirror_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinSseConstMeta => const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_sse",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)> mirrorTupleStreamTwinSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_mirror_tuple_stream_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinSseConstMeta => const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_sse",
        argNames: [],
      );

  @override
  Future<Numbers> repeatNumberTwinSse(
      {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(num, serializer);
        _sse_encode_usize(times, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_repeat_number_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinSseConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinSseConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_sse",
        argNames: ["num", "times"],
      );

  @override
  Future<Sequences> repeatSequenceTwinSse(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(seq, serializer);
        _sse_encode_usize(times, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_repeat_sequence_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinSseConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinSseConstMeta => const TaskConstMeta(
        debugName: "repeat_sequence_twin_sse",
        argNames: ["seq", "times"],
      );

  @override
  Future<ContainsMirroredSubStructTwinSse> testContainsMirroredSubStructTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_contains_mirrored_sub_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_contains_mirrored_sub_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_sse",
        argNames: [],
      );

  @override
  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_fallible_of_raw_string_mirrored_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_raw_string_mirrored,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_sse",
        argNames: [],
      );

  @override
  Future<List<RawStringEnumMirrored>> testListOfNestedEnumsMirroredTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_list_of_nested_enums_mirrored_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_sse",
        argNames: [],
      );

  @override
  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_list_of_raw_nested_string_mirrored_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_sse",
        argNames: [],
      );

  @override
  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_nested_raw_string_mirrored_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_sse",
        argNames: [],
      );

  @override
  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinSse(
      {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_bool(nested, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_enum_mirrored_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinSseConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_sse",
        argNames: ["nested"],
      );

  @override
  Future<RawStringMirrored> testRawStringMirroredTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_mirrored_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_sse",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_app_settings_stream_twin_sync(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinSyncConstMeta => const TaskConstMeta(
        debugName: "app_settings_stream_twin_sync",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_app_settings_vec_stream_twin_sync(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_sync",
        argNames: [],
      );

  @override
  int? firstNumberTwinSync({required Numbers nums, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_numbers(nums);
        return wire.wire_first_number_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinSyncConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinSyncConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_sync",
        argNames: ["nums"],
      );

  @override
  int? firstSequenceTwinSync({required Sequences seqs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_sequences(seqs);
        return wire.wire_first_sequence_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinSyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinSyncConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_sync",
        argNames: ["seqs"],
      );

  @override
  ApplicationSettings getAppSettingsTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_get_app_settings_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_app_settings_twin_sync",
        argNames: [],
      );

  @override
  ApplicationSettings getFallibleAppSettingsTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_get_fallible_app_settings_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_settings,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_sync",
        argNames: [],
      );

  @override
  ApplicationMessage getMessageTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_get_message_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_sync",
        argNames: [],
      );

  @override
  bool isAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_application_settings(appSettings);
        return wire.wire_is_app_embedded_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinSyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinSyncConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_sync",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinSync> mirrorStructStreamTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_mirror_struct_stream_twin_sync(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_mirror_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinSyncConstMeta => const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_sync",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_mirror_tuple_stream_twin_sync(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinSyncConstMeta => const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_sync",
        argNames: [],
      );

  @override
  Numbers repeatNumberTwinSync(
      {required int num, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(num);
        var arg1 = cst_encode_usize(times);
        return wire.wire_repeat_number_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinSyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinSyncConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_sync",
        argNames: ["num", "times"],
      );

  @override
  Sequences repeatSequenceTwinSync(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(seq);
        var arg1 = cst_encode_usize(times);
        return wire.wire_repeat_sequence_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinSyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinSyncConstMeta => const TaskConstMeta(
        debugName: "repeat_sequence_twin_sync",
        argNames: ["seq", "times"],
      );

  @override
  ContainsMirroredSubStructTwinSync testContainsMirroredSubStructTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_contains_mirrored_sub_struct_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_contains_mirrored_sub_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_sync",
        argNames: [],
      );

  @override
  List<RawStringMirrored> testFallibleOfRawStringMirroredTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_fallible_of_raw_string_mirrored_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_raw_string_mirrored,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  List<RawStringEnumMirrored> testListOfNestedEnumsMirroredTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_list_of_nested_enums_mirrored_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_sync",
        argNames: [],
      );

  @override
  ListOfNestedRawStringMirrored testListOfRawNestedStringMirroredTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_list_of_raw_nested_string_mirrored_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  NestedRawStringMirrored testNestedRawStringMirroredTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_nested_raw_string_mirrored_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  RawStringEnumMirrored testRawStringEnumMirroredTwinSync(
      {required bool nested, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_bool(nested);
        return wire.wire_test_raw_string_enum_mirrored_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinSyncConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_sync",
        argNames: ["nested"],
      );

  @override
  RawStringMirrored testRawStringMirroredTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_raw_string_mirrored_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinSyncSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_app_settings_stream_twin_sync_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_sync_sse",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSyncSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_app_settings_vec_stream_twin_sync_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_sync_sse",
        argNames: [],
      );

  @override
  int? firstNumberTwinSyncSse({required Numbers nums, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_numbers(nums, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_first_number_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinSyncSseConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_sync_sse",
        argNames: ["nums"],
      );

  @override
  int? firstSequenceTwinSyncSse({required Sequences seqs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_sequences(seqs, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_first_sequence_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinSyncSseConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_sync_sse",
        argNames: ["seqs"],
      );

  @override
  ApplicationSettings getAppSettingsTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_app_settings_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "get_app_settings_twin_sync_sse",
        argNames: [],
      );

  @override
  ApplicationSettings getFallibleAppSettingsTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_fallible_app_settings_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_settings,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_sync_sse",
        argNames: [],
      );

  @override
  ApplicationMessage getMessageTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_get_message_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_sync_sse",
        argNames: [],
      );

  @override
  bool isAppEmbeddedTwinSyncSse(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_application_settings(app_settings, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_is_app_embedded_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinSyncSseConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_sync_sse",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinSyncSse> mirrorStructStreamTwinSyncSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_mirror_struct_stream_twin_sync_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_mirror_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_sync_sse",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinSyncSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_mirror_tuple_stream_twin_sync_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_sync_sse",
        argNames: [],
      );

  @override
  Numbers repeatNumberTwinSyncSse(
      {required int num, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(num, serializer);
        _sse_encode_usize(times, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_repeat_number_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinSyncSseConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_sync_sse",
        argNames: ["num", "times"],
      );

  @override
  Sequences repeatSequenceTwinSyncSse(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(seq, serializer);
        _sse_encode_usize(times, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_repeat_sequence_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinSyncSseConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "repeat_sequence_twin_sync_sse",
        argNames: ["seq", "times"],
      );

  @override
  ContainsMirroredSubStructTwinSyncSse testContainsMirroredSubStructTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_contains_mirrored_sub_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_contains_mirrored_sub_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_sync_sse",
        argNames: [],
      );

  @override
  List<RawStringMirrored> testFallibleOfRawStringMirroredTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_fallible_of_raw_string_mirrored_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_raw_string_mirrored,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_sync_sse",
        argNames: [],
      );

  @override
  List<RawStringEnumMirrored> testListOfNestedEnumsMirroredTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_list_of_nested_enums_mirrored_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_sync_sse",
        argNames: [],
      );

  @override
  ListOfNestedRawStringMirrored testListOfRawNestedStringMirroredTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_sync_sse",
        argNames: [],
      );

  @override
  NestedRawStringMirrored testNestedRawStringMirroredTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_nested_raw_string_mirrored_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_sync_sse",
        argNames: [],
      );

  @override
  RawStringEnumMirrored testRawStringEnumMirroredTwinSyncSse(
      {required bool nested, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_bool(nested, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_enum_mirrored_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinSyncSseConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_sync_sse",
        argNames: ["nested"],
      );

  @override
  RawStringMirrored testRawStringMirroredTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_mirrored_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_sync_sse",
        argNames: [],
      );

  @override
  Future<BigBuffersTwinRustAsync> handleBigBuffersTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_handle_big_buffers_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_big_buffers_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_big_buffers_twin_rust_async",
        argNames: [],
      );

  @override
  Future<MyTreeNodeTwinRustAsync> handleComplexStructTwinRustAsync(
      {required MyTreeNodeTwinRustAsync s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_tree_node_twin_rust_async(s);
        return wire.wire_handle_complex_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_tree_node_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_rust_async",
        argNames: ["s"],
      );

  @override
  Future<MyNestedStructTwinRustAsync> handleNestedStructTwinRustAsync(
      {required MyNestedStructTwinRustAsync s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_nested_struct_twin_rust_async(s);
        return wire.wire_handle_nested_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_nested_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_rust_async",
        argNames: ["s"],
      );

  @override
  Future<String> handleStringTwinRustAsync({required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(s);
        return wire.wire_handle_string_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_rust_async",
        argNames: ["s"],
      );

  @override
  Future<MySize> handleStructTwinRustAsync(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_my_size(arg);
        var arg1 = cst_encode_box_my_size(boxed);
        return wire.wire_handle_struct_twin_rust_async(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinRustAsyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_rust_async",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<Uint8List> handleVecU8TwinRustAsync(
      {required Uint8List v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8(v);
        return wire.wire_handle_vec_u8_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinRustAsyncConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_rust_async",
        argNames: ["v"],
      );

  @override
  Future<List<WeekdaysTwinRustAsync>> listOfPrimitiveEnumsTwinRustAsync(
      {required List<WeekdaysTwinRustAsync> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_weekdays_twin_rust_async(weekdays);
        return wire.wire_list_of_primitive_enums_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinRustAsyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_rust_async",
        argNames: ["weekdays"],
      );

  @override
  Future<AbcTwinRustAsync> testAbcEnumTwinRustAsync(
      {required AbcTwinRustAsync abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_abc_twin_rust_async(abc);
        return wire.wire_test_abc_enum_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_abc_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinRustAsyncConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_rust_async",
        argNames: ["abc"],
      );

  @override
  Future<StructWithEnumTwinRustAsync> testStructWithEnumTwinRustAsync(
      {required StructWithEnumTwinRustAsync se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_struct_with_enum_twin_rust_async(se);
        return wire.wire_test_struct_with_enum_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinRustAsyncConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_rust_async",
        argNames: ["se"],
      );

  @override
  Future<BigBuffersTwinRustAsyncSse> handleBigBuffersTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_handle_big_buffers_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_big_buffers_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_big_buffers_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<MyTreeNodeTwinRustAsyncSse> handleComplexStructTwinRustAsyncSse(
      {required MyTreeNodeTwinRustAsyncSse s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_tree_node_twin_rust_async_sse(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_complex_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_tree_node_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinRustAsyncSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_rust_async_sse",
        argNames: ["s"],
      );

  @override
  Future<MyNestedStructTwinRustAsyncSse> handleNestedStructTwinRustAsyncSse(
      {required MyNestedStructTwinRustAsyncSse s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_nested_struct_twin_rust_async_sse(
            s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_nested_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_nested_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinRustAsyncSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_rust_async_sse",
        argNames: ["s"],
      );

  @override
  Future<String> handleStringTwinRustAsyncSse(
      {required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_string_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinRustAsyncSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_twin_rust_async_sse",
        argNames: ["s"],
      );

  @override
  Future<MySize> handleStructTwinRustAsyncSse(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_size(arg, serializer);
        _sse_encode_box_my_size(boxed, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinRustAsyncSseConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_struct_twin_rust_async_sse",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<Uint8List> handleVecU8TwinRustAsyncSse(
      {required Uint8List v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(v, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_u8_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinRustAsyncSseConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_u8_twin_rust_async_sse",
        argNames: ["v"],
      );

  @override
  Future<List<WeekdaysTwinRustAsyncSse>> listOfPrimitiveEnumsTwinRustAsyncSse(
      {required List<WeekdaysTwinRustAsyncSse> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_weekdays_twin_rust_async_sse(weekdays, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_list_of_primitive_enums_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_weekdays_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinRustAsyncSseConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_rust_async_sse",
        argNames: ["weekdays"],
      );

  @override
  Future<AbcTwinRustAsyncSse> testAbcEnumTwinRustAsyncSse(
      {required AbcTwinRustAsyncSse abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_abc_twin_rust_async_sse(abc, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_abc_enum_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_abc_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinRustAsyncSseConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_abc_enum_twin_rust_async_sse",
        argNames: ["abc"],
      );

  @override
  Future<StructWithEnumTwinRustAsyncSse> testStructWithEnumTwinRustAsyncSse(
      {required StructWithEnumTwinRustAsyncSse se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_enum_twin_rust_async_sse(
            se, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_struct_with_enum_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_enum_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinRustAsyncSseConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_rust_async_sse",
        argNames: ["se"],
      );

  @override
  Future<BigBuffersTwinSse> handleBigBuffersTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_handle_big_buffers_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_big_buffers_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_big_buffers_twin_sse",
        argNames: [],
      );

  @override
  Future<MyTreeNodeTwinSse> handleComplexStructTwinSse(
      {required MyTreeNodeTwinSse s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_tree_node_twin_sse(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_complex_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_tree_node_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_complex_struct_twin_sse",
        argNames: ["s"],
      );

  @override
  Future<MyNestedStructTwinSse> handleNestedStructTwinSse(
      {required MyNestedStructTwinSse s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_nested_struct_twin_sse(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_nested_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_nested_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_nested_struct_twin_sse",
        argNames: ["s"],
      );

  @override
  Future<String> handleStringTwinSse({required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_string_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_sse",
        argNames: ["s"],
      );

  @override
  Future<MySize> handleStructTwinSse(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_size(arg, serializer);
        _sse_encode_box_my_size(boxed, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinSseConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_sse",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<Uint8List> handleVecU8TwinSse({required Uint8List v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(v, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_u8_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinSseConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_sse",
        argNames: ["v"],
      );

  @override
  Future<List<WeekdaysTwinSse>> listOfPrimitiveEnumsTwinSse(
      {required List<WeekdaysTwinSse> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_weekdays_twin_sse(weekdays, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_list_of_primitive_enums_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_weekdays_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinSseConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_sse",
        argNames: ["weekdays"],
      );

  @override
  Future<AbcTwinSse> testAbcEnumTwinSse(
      {required AbcTwinSse abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_abc_twin_sse(abc, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_abc_enum_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_abc_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinSseConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinSseConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_sse",
        argNames: ["abc"],
      );

  @override
  Future<StructWithEnumTwinSse> testStructWithEnumTwinSse(
      {required StructWithEnumTwinSse se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_enum_twin_sse(se, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_struct_with_enum_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_enum_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinSseConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinSseConstMeta => const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_sse",
        argNames: ["se"],
      );

  @override
  BigBuffersTwinSync handleBigBuffersTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_handle_big_buffers_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_big_buffers_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_big_buffers_twin_sync",
        argNames: [],
      );

  @override
  MyTreeNodeTwinSync handleComplexStructTwinSync(
      {required MyTreeNodeTwinSync s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_my_tree_node_twin_sync(s);
        return wire.wire_handle_complex_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_tree_node_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_sync",
        argNames: ["s"],
      );

  @override
  MyNestedStructTwinSync handleNestedStructTwinSync(
      {required MyNestedStructTwinSync s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_my_nested_struct_twin_sync(s);
        return wire.wire_handle_nested_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_nested_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_nested_struct_twin_sync",
        argNames: ["s"],
      );

  @override
  String handleStringTwinSync({required String s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(s);
        return wire.wire_handle_string_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_sync",
        argNames: ["s"],
      );

  @override
  MySize handleStructTwinSync(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_my_size(arg);
        var arg1 = cst_encode_box_my_size(boxed);
        return wire.wire_handle_struct_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinSyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_sync",
        argNames: ["arg", "boxed"],
      );

  @override
  Uint8List handleVecU8TwinSync({required Uint8List v, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_8(v);
        return wire.wire_handle_vec_u8_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinSyncConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_sync",
        argNames: ["v"],
      );

  @override
  List<WeekdaysTwinSync> listOfPrimitiveEnumsTwinSync(
      {required List<WeekdaysTwinSync> weekdays, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_weekdays_twin_sync(weekdays);
        return wire.wire_list_of_primitive_enums_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinSyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_sync",
        argNames: ["weekdays"],
      );

  @override
  AbcTwinSync testAbcEnumTwinSync({required AbcTwinSync abc, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_abc_twin_sync(abc);
        return wire.wire_test_abc_enum_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_abc_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinSyncConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_sync",
        argNames: ["abc"],
      );

  @override
  StructWithEnumTwinSync testStructWithEnumTwinSync(
      {required StructWithEnumTwinSync se, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_struct_with_enum_twin_sync(se);
        return wire.wire_test_struct_with_enum_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinSyncConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_sync",
        argNames: ["se"],
      );

  @override
  BigBuffersTwinSyncSse handleBigBuffersTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_handle_big_buffers_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_big_buffers_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_big_buffers_twin_sync_sse",
        argNames: [],
      );

  @override
  MyTreeNodeTwinSyncSse handleComplexStructTwinSyncSse(
      {required MyTreeNodeTwinSyncSse s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_tree_node_twin_sync_sse(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_complex_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_tree_node_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinSyncSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_sync_sse",
        argNames: ["s"],
      );

  @override
  MyNestedStructTwinSyncSse handleNestedStructTwinSyncSse(
      {required MyNestedStructTwinSyncSse s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_nested_struct_twin_sync_sse(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_nested_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_nested_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinSyncSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_sync_sse",
        argNames: ["s"],
      );

  @override
  String handleStringTwinSyncSse({required String s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(s, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_string_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinSyncSseConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_sync_sse",
        argNames: ["s"],
      );

  @override
  MySize handleStructTwinSyncSse(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_my_size(arg, serializer);
        _sse_encode_box_my_size(boxed, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinSyncSseConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_sync_sse",
        argNames: ["arg", "boxed"],
      );

  @override
  Uint8List handleVecU8TwinSyncSse({required Uint8List v, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(v, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_u8_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinSyncSseConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_sync_sse",
        argNames: ["v"],
      );

  @override
  List<WeekdaysTwinSyncSse> listOfPrimitiveEnumsTwinSyncSse(
      {required List<WeekdaysTwinSyncSse> weekdays, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_weekdays_twin_sync_sse(weekdays, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_list_of_primitive_enums_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_weekdays_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinSyncSseConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_sync_sse",
        argNames: ["weekdays"],
      );

  @override
  AbcTwinSyncSse testAbcEnumTwinSyncSse(
      {required AbcTwinSyncSse abc, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_abc_twin_sync_sse(abc, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_abc_enum_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_abc_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinSyncSseConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_sync_sse",
        argNames: ["abc"],
      );

  @override
  StructWithEnumTwinSyncSse testStructWithEnumTwinSyncSse(
      {required StructWithEnumTwinSyncSse se, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_enum_twin_sync_sse(se, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_struct_with_enum_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_enum_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinSyncSseConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_sync_sse",
        argNames: ["se"],
      );

  @override
  Future<EmptyTwinRustAsync> emptyStructTwinRustAsync(
      {required EmptyTwinRustAsync empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_empty_twin_rust_async(empty);
        return wire.wire_empty_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_empty_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinRustAsyncConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_rust_async",
        argNames: ["empty"],
      );

  @override
  Future<void> funcReturnUnitTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_func_return_unit_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_unit_twin_rust_async",
        argNames: [],
      );

  @override
  Future<String> funcStringTwinRustAsync({required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(arg);
        return wire.wire_func_string_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStringTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "func_string_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<List<MySize>> handleListOfStructTwinRustAsync(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_my_size(l);
        return wire.wire_handle_list_of_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinRustAsyncConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_rust_async",
        argNames: ["l"],
      );

  @override
  Future<List<String>> handleStringListTwinRustAsync(
      {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_String(names);
        return wire.wire_handle_string_list_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinRustAsyncConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_list_twin_rust_async",
        argNames: ["names"],
      );

  @override
  Future<EmptyTwinRustAsyncSse> emptyStructTwinRustAsyncSse(
      {required EmptyTwinRustAsyncSse empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_empty_twin_rust_async_sse(empty, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_empty_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_empty_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinRustAsyncSseConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "empty_struct_twin_rust_async_sse",
        argNames: ["empty"],
      );

  @override
  Future<void> funcReturnUnitTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_return_unit_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_unit_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<String> funcStringTwinRustAsyncSse(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_string_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStringTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStringTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "func_string_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<List<MySize>> handleListOfStructTwinRustAsyncSse(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_my_size(l, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_list_of_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinRustAsyncSseConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_rust_async_sse",
        argNames: ["l"],
      );

  @override
  Future<List<String>> handleStringListTwinRustAsyncSse(
      {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_String(names, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_string_list_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinRustAsyncSseConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_list_twin_rust_async_sse",
        argNames: ["names"],
      );

  @override
  Future<EmptyTwinSse> emptyStructTwinSse(
      {required EmptyTwinSse empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_empty_twin_sse(empty, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_empty_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_empty_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinSseConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_sse",
        argNames: ["empty"],
      );

  @override
  Future<void> funcReturnUnitTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_return_unit_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinSseConstMeta => const TaskConstMeta(
        debugName: "func_return_unit_twin_sse",
        argNames: [],
      );

  @override
  Future<String> funcStringTwinSse({required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_string_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStringTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStringTwinSseConstMeta => const TaskConstMeta(
        debugName: "func_string_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<List<MySize>> handleListOfStructTwinSse(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_my_size(l, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_list_of_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinSseConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_sse",
        argNames: ["l"],
      );

  @override
  Future<List<String>> handleStringListTwinSse(
      {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_String(names, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_string_list_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinSseConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_string_list_twin_sse",
        argNames: ["names"],
      );

  @override
  EmptyTwinSync emptyStructTwinSync(
      {required EmptyTwinSync empty, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_empty_twin_sync(empty);
        return wire.wire_empty_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_empty_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinSyncConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_sync",
        argNames: ["empty"],
      );

  @override
  void funcReturnUnitTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_func_return_unit_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_return_unit_twin_sync",
        argNames: [],
      );

  @override
  String funcStringTwinSync({required String arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(arg);
        return wire.wire_func_string_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStringTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_string_twin_sync",
        argNames: ["arg"],
      );

  @override
  List<MySize> handleListOfStructTwinSync(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_my_size(l);
        return wire.wire_handle_list_of_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinSyncConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_sync",
        argNames: ["l"],
      );

  @override
  List<String> handleStringListTwinSync(
      {required List<String> names, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_String(names);
        return wire.wire_handle_string_list_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinSyncConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_string_list_twin_sync",
        argNames: ["names"],
      );

  @override
  EmptyTwinSyncSse emptyStructTwinSyncSse(
      {required EmptyTwinSyncSse empty, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_empty_twin_sync_sse(empty, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_empty_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_empty_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinSyncSseConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_sync_sse",
        argNames: ["empty"],
      );

  @override
  void funcReturnUnitTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_return_unit_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "func_return_unit_twin_sync_sse",
        argNames: [],
      );

  @override
  String funcStringTwinSyncSse({required String arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_string_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStringTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStringTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "func_string_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  List<MySize> handleListOfStructTwinSyncSse(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_my_size(l, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_list_of_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinSyncSseConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_sync_sse",
        argNames: ["l"],
      );

  @override
  List<String> handleStringListTwinSyncSse(
      {required List<String> names, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_String(names, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_string_list_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinSyncSseConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_list_twin_sync_sse",
        argNames: ["names"],
      );

  @override
  Future<NewTypeIntTwinRustAsync> handleNewtypeTwinRustAsync(
      {required NewTypeIntTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_new_type_int_twin_rust_async(arg);
        return wire.wire_handle_newtype_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_new_type_int_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<NewTypeIntTwinRustAsyncSse> handleNewtypeTwinRustAsyncSse(
      {required NewTypeIntTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_new_type_int_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_newtype_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_new_type_int_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_newtype_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<NewTypeIntTwinSse> handleNewtypeTwinSse(
      {required NewTypeIntTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_new_type_int_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_newtype_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_new_type_int_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_sse",
        argNames: ["arg"],
      );

  @override
  NewTypeIntTwinSync handleNewtypeTwinSync(
      {required NewTypeIntTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_new_type_int_twin_sync(arg);
        return wire.wire_handle_newtype_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_new_type_int_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_sync",
        argNames: ["arg"],
      );

  @override
  NewTypeIntTwinSyncSse handleNewtypeTwinSyncSse(
      {required NewTypeIntTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_new_type_int_twin_sync_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_newtype_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_new_type_int_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinNormal(
      {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_bool(arg);
        return wire.wire_example_optional_primitive_type_bool_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeBoolTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_bool_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF32TwinNormal(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_f_32(arg);
        return wire.wire_example_optional_primitive_type_f32_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF64TwinNormal(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_f_64(arg);
        return wire.wire_example_optional_primitive_type_f64_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI16TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_16(arg);
        return wire.wire_example_optional_primitive_type_i16_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI32TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_32(arg);
        return wire.wire_example_optional_primitive_type_i32_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI64TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_64(arg);
        return wire.wire_example_optional_primitive_type_i64_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI8TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_8(arg);
        return wire.wire_example_optional_primitive_type_i8_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU16TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_16(arg);
        return wire.wire_example_optional_primitive_type_u16_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU32TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_32(arg);
        return wire.wire_example_optional_primitive_type_u32_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU64TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_64(arg);
        return wire.wire_example_optional_primitive_type_u64_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU8TwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_8(arg);
        return wire.wire_example_optional_primitive_type_u8_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> primitiveOptionalTypesTwinRustAsync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_32(myI32);
        var arg1 = cst_encode_opt_box_autoadd_i_64(myI64);
        var arg2 = cst_encode_opt_box_autoadd_f_64(myF64);
        var arg3 = cst_encode_opt_box_autoadd_bool(myBool);
        return wire.wire_primitive_optional_types_twin_rust_async(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_rust_async",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int?> primitiveOptionalTypesTwinRustAsyncSse(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_32(my_i32, serializer);
        _sse_encode_opt_box_autoadd_i_64(my_i64, serializer);
        _sse_encode_opt_box_autoadd_f_64(my_f64, serializer);
        _sse_encode_opt_box_autoadd_bool(my_bool, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_optional_types_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinRustAsyncSseConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_rust_async_sse",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int?> primitiveOptionalTypesTwinSse(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_32(my_i32, serializer);
        _sse_encode_opt_box_autoadd_i_64(my_i64, serializer);
        _sse_encode_opt_box_autoadd_f_64(my_f64, serializer);
        _sse_encode_opt_box_autoadd_bool(my_bool, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_optional_types_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinSseConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_sse",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  int? primitiveOptionalTypesTwinSync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_i_32(myI32);
        var arg1 = cst_encode_opt_box_autoadd_i_64(myI64);
        var arg2 = cst_encode_opt_box_autoadd_f_64(myF64);
        var arg3 = cst_encode_opt_box_autoadd_bool(myBool);
        return wire.wire_primitive_optional_types_twin_sync(
            arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_sync",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  int? primitiveOptionalTypesTwinSyncSse(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_32(my_i32, serializer);
        _sse_encode_opt_box_autoadd_i_64(my_i64, serializer);
        _sse_encode_opt_box_autoadd_f_64(my_f64, serializer);
        _sse_encode_opt_box_autoadd_bool(my_bool, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_optional_types_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinSyncSseConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_sync_sse",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinRustAsync(
      {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_bool(arg);
        return wire.wire_example_optional_primitive_type_bool_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeBoolTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_bool_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF32TwinRustAsync(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_f_32(arg);
        return wire.wire_example_optional_primitive_type_f32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF64TwinRustAsync(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_f_64(arg);
        return wire.wire_example_optional_primitive_type_f64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI16TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_16(arg);
        return wire.wire_example_optional_primitive_type_i16_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI32TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_32(arg);
        return wire.wire_example_optional_primitive_type_i32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI64TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_64(arg);
        return wire.wire_example_optional_primitive_type_i64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI8TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_i_8(arg);
        return wire.wire_example_optional_primitive_type_i8_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU16TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_16(arg);
        return wire.wire_example_optional_primitive_type_u16_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU32TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_32(arg);
        return wire.wire_example_optional_primitive_type_u32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU64TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_64(arg);
        return wire.wire_example_optional_primitive_type_u64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU8TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_u_8(arg);
        return wire.wire_example_optional_primitive_type_u8_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinRustAsyncSse(
      {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_bool_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeBoolTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleOptionalPrimitiveTypeBoolTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_optional_primitive_type_bool_twin_rust_async_sse",
            argNames: ["arg"],
          );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF32TwinRustAsyncSse(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_f32_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF64TwinRustAsyncSse(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_f64_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI16TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_i16_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI16TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI16TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i16_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI32TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_i32_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI64TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_i64_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI8TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i8_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI8TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI8TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i8_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU16TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_u16_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU16TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU16TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u16_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU32TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_u32_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU64TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_example_optional_primitive_type_u64_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU8TwinRustAsyncSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u8_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU8TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU8TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u8_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<bool?> exampleOptionalPrimitiveTypeBoolTwinSse(
      {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_bool_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeBoolTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeBoolTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_bool_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF32TwinSse(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_f32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleOptionalPrimitiveTypeF64TwinSse(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_f64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI16TwinSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i16_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI16TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI16TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i16_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI32TwinSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI64TwinSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeI8TwinSse({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i8_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI8TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI8TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i8_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU16TwinSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u16_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU16TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU16TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u16_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU32TwinSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU64TwinSse(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleOptionalPrimitiveTypeU8TwinSse({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u8_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU8TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU8TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u8_twin_sse",
        argNames: ["arg"],
      );

  @override
  bool? exampleOptionalPrimitiveTypeBoolTwinSync({bool? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_bool(arg);
        return wire.wire_example_optional_primitive_type_bool_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeBoolTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_bool_twin_sync",
        argNames: ["arg"],
      );

  @override
  double? exampleOptionalPrimitiveTypeF32TwinSync({double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_f_32(arg);
        return wire.wire_example_optional_primitive_type_f32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f32_twin_sync",
        argNames: ["arg"],
      );

  @override
  double? exampleOptionalPrimitiveTypeF64TwinSync({double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_f_64(arg);
        return wire.wire_example_optional_primitive_type_f64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI16TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_i_16(arg);
        return wire.wire_example_optional_primitive_type_i16_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI32TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_i_32(arg);
        return wire.wire_example_optional_primitive_type_i32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI64TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_i_64(arg);
        return wire.wire_example_optional_primitive_type_i64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI8TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_i_8(arg);
        return wire.wire_example_optional_primitive_type_i8_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i8_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU16TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_u_16(arg);
        return wire.wire_example_optional_primitive_type_u16_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU32TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_u_32(arg);
        return wire.wire_example_optional_primitive_type_u32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU64TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_u_64(arg);
        return wire.wire_example_optional_primitive_type_u64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU8TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_u_8(arg);
        return wire.wire_example_optional_primitive_type_u8_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u8_twin_sync",
        argNames: ["arg"],
      );

  @override
  bool? exampleOptionalPrimitiveTypeBoolTwinSyncSse({bool? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_bool_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeBoolTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeBoolTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_bool_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  double? exampleOptionalPrimitiveTypeF32TwinSyncSse(
      {double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_f32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  double? exampleOptionalPrimitiveTypeF64TwinSyncSse(
      {double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_f64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeF64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeF64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_f64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI16TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i16_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI16TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI16TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i16_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI32TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI64TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeI8TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_i8_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeI8TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeI8TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_i8_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU16TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u16_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU16TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU16TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u16_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU32TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU64TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int? exampleOptionalPrimitiveTypeU8TwinSyncSse({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_optional_primitive_type_u8_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleOptionalPrimitiveTypeU8TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleOptionalPrimitiveTypeU8TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_optional_primitive_type_u8_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Future<double> handleIncrementBoxedOptionalTwinRustAsync(
      {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_f_64(opt);
        return wire.wire_handle_increment_boxed_optional_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_rust_async",
        argNames: ["opt"],
      );

  @override
  Future<String> handleOptionBoxArgumentsTwinRustAsync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinRustAsync? structbox,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_i_8(i8Box);
        var arg1 = cst_encode_opt_box_u_8(u8Box);
        var arg2 = cst_encode_opt_box_i_32(i32Box);
        var arg3 = cst_encode_opt_box_i_64(i64Box);
        var arg4 = cst_encode_opt_box_f_64(f64Box);
        var arg5 = cst_encode_opt_box_bool(boolbox);
        var arg6 =
            cst_encode_opt_box_exotic_optionals_twin_rust_async(structbox);
        return wire.wire_handle_option_box_arguments_twin_rust_async(
            port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinRustAsyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_rust_async",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  Future<ExoticOptionalsTwinRustAsync?> handleOptionalIncrementTwinRustAsync(
      {ExoticOptionalsTwinRustAsync? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(opt);
        return wire.wire_handle_optional_increment_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_opt_box_autoadd_exotic_optionals_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_rust_async",
        argNames: ["opt"],
      );

  @override
  Future<double?> handleOptionalReturnTwinRustAsync(
      {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_64(left);
        var arg1 = cst_encode_f_64(right);
        return wire.wire_handle_optional_return_twin_rust_async(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinRustAsyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_rust_async",
        argNames: ["left", "right"],
      );

  @override
  Future<ElementTwinRustAsync?> handleOptionalStructTwinRustAsync(
      {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_String(document);
        return wire.wire_handle_optional_struct_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_element_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinRustAsyncConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_rust_async",
        argNames: ["document"],
      );

  @override
  Future<OptVecsTwinRustAsync> handleVecOfOptsTwinRustAsync(
      {required OptVecsTwinRustAsync opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_opt_vecs_twin_rust_async(opt);
        return wire.wire_handle_vec_of_opts_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_vecs_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_rust_async",
        argNames: ["opt"],
      );

  @override
  Future<double> handleIncrementBoxedOptionalTwinRustAsyncSse(
      {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_f_64(opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_increment_boxed_optional_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinRustAsyncSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_rust_async_sse",
        argNames: ["opt"],
      );

  @override
  Future<String> handleOptionBoxArgumentsTwinRustAsyncSse(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinRustAsyncSse? structbox,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_i_8(i8box, serializer);
        _sse_encode_opt_box_u_8(u8box, serializer);
        _sse_encode_opt_box_i_32(i32box, serializer);
        _sse_encode_opt_box_i_64(i64box, serializer);
        _sse_encode_opt_box_f_64(f64box, serializer);
        _sse_encode_opt_box_bool(boolbox, serializer);
        _sse_encode_opt_box_exotic_optionals_twin_rust_async_sse(
            structbox, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_option_box_arguments_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinRustAsyncSseConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_rust_async_sse",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  Future<ExoticOptionalsTwinRustAsyncSse?>
      handleOptionalIncrementTwinRustAsyncSse(
          {ExoticOptionalsTwinRustAsyncSse? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async_sse(
            opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_increment_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinRustAsyncSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_rust_async_sse",
        argNames: ["opt"],
      );

  @override
  Future<double?> handleOptionalReturnTwinRustAsyncSse(
      {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64(left, serializer);
        _sse_encode_f_64(right, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_return_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinRustAsyncSseConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_rust_async_sse",
        argNames: ["left", "right"],
      );

  @override
  Future<ElementTwinRustAsyncSse?> handleOptionalStructTwinRustAsyncSse(
      {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_String(document, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_opt_box_autoadd_element_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinRustAsyncSseConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_rust_async_sse",
        argNames: ["document"],
      );

  @override
  Future<OptVecsTwinRustAsyncSse> handleVecOfOptsTwinRustAsyncSse(
      {required OptVecsTwinRustAsyncSse opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_opt_vecs_twin_rust_async_sse(opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_of_opts_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_vecs_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinRustAsyncSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_rust_async_sse",
        argNames: ["opt"],
      );

  @override
  Future<double> handleIncrementBoxedOptionalTwinSse(
      {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_f_64(opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_increment_boxed_optional_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_sse",
        argNames: ["opt"],
      );

  @override
  Future<String> handleOptionBoxArgumentsTwinSse(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSse? structbox,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_i_8(i8box, serializer);
        _sse_encode_opt_box_u_8(u8box, serializer);
        _sse_encode_opt_box_i_32(i32box, serializer);
        _sse_encode_opt_box_i_64(i64box, serializer);
        _sse_encode_opt_box_f_64(f64box, serializer);
        _sse_encode_opt_box_bool(boolbox, serializer);
        _sse_encode_opt_box_exotic_optionals_twin_sse(structbox, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_option_box_arguments_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinSseConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_sse",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  Future<ExoticOptionalsTwinSse?> handleOptionalIncrementTwinSse(
      {ExoticOptionalsTwinSse? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_exotic_optionals_twin_sse(opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_increment_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_opt_box_autoadd_exotic_optionals_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_sse",
        argNames: ["opt"],
      );

  @override
  Future<double?> handleOptionalReturnTwinSse(
      {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64(left, serializer);
        _sse_encode_f_64(right, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_return_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinSseConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_sse",
        argNames: ["left", "right"],
      );

  @override
  Future<ElementTwinSse?> handleOptionalStructTwinSse(
      {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_String(document, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_element_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinSseConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_sse",
        argNames: ["document"],
      );

  @override
  Future<OptVecsTwinSse> handleVecOfOptsTwinSse(
      {required OptVecsTwinSse opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_opt_vecs_twin_sse(opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_of_opts_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_vecs_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_sse",
        argNames: ["opt"],
      );

  @override
  double handleIncrementBoxedOptionalTwinSync({double? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_f_64(opt);
        return wire.wire_handle_increment_boxed_optional_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_sync",
        argNames: ["opt"],
      );

  @override
  String handleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_i_8(i8Box);
        var arg1 = cst_encode_opt_box_u_8(u8Box);
        var arg2 = cst_encode_opt_box_i_32(i32Box);
        var arg3 = cst_encode_opt_box_i_64(i64Box);
        var arg4 = cst_encode_opt_box_f_64(f64Box);
        var arg5 = cst_encode_opt_box_bool(boolbox);
        var arg6 = cst_encode_opt_box_exotic_optionals_twin_sync(structbox);
        return wire.wire_handle_option_box_arguments_twin_sync(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinSyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_sync",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  ExoticOptionalsTwinSync? handleOptionalIncrementTwinSync(
      {ExoticOptionalsTwinSync? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_exotic_optionals_twin_sync(opt);
        return wire.wire_handle_optional_increment_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_opt_box_autoadd_exotic_optionals_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_sync",
        argNames: ["opt"],
      );

  @override
  double? handleOptionalReturnTwinSync(
      {required double left, required double right, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_f_64(left);
        var arg1 = cst_encode_f_64(right);
        return wire.wire_handle_optional_return_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinSyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_sync",
        argNames: ["left", "right"],
      );

  @override
  ElementTwinSync? handleOptionalStructTwinSync(
      {String? document, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_String(document);
        return wire.wire_handle_optional_struct_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_element_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinSyncConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_sync",
        argNames: ["document"],
      );

  @override
  OptVecsTwinSync handleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_opt_vecs_twin_sync(opt);
        return wire.wire_handle_vec_of_opts_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_vecs_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_sync",
        argNames: ["opt"],
      );

  @override
  double handleIncrementBoxedOptionalTwinSyncSse({double? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_f_64(opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_increment_boxed_optional_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinSyncSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_sync_sse",
        argNames: ["opt"],
      );

  @override
  String handleOptionBoxArgumentsTwinSyncSse(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSyncSse? structbox,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_i_8(i8box, serializer);
        _sse_encode_opt_box_u_8(u8box, serializer);
        _sse_encode_opt_box_i_32(i32box, serializer);
        _sse_encode_opt_box_i_64(i64box, serializer);
        _sse_encode_opt_box_f_64(f64box, serializer);
        _sse_encode_opt_box_bool(boolbox, serializer);
        _sse_encode_opt_box_exotic_optionals_twin_sync_sse(
            structbox, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_option_box_arguments_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinSyncSseConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_sync_sse",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  ExoticOptionalsTwinSyncSse? handleOptionalIncrementTwinSyncSse(
      {ExoticOptionalsTwinSyncSse? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_exotic_optionals_twin_sync_sse(
            opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_increment_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_opt_box_autoadd_exotic_optionals_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinSyncSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_sync_sse",
        argNames: ["opt"],
      );

  @override
  double? handleOptionalReturnTwinSyncSse(
      {required double left, required double right, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64(left, serializer);
        _sse_encode_f_64(right, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_return_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinSyncSseConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_sync_sse",
        argNames: ["left", "right"],
      );

  @override
  ElementTwinSyncSse? handleOptionalStructTwinSyncSse(
      {String? document, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_String(document, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_optional_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_element_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinSyncSseConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_sync_sse",
        argNames: ["document"],
      );

  @override
  OptVecsTwinSyncSse handleVecOfOptsTwinSyncSse(
      {required OptVecsTwinSyncSse opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_opt_vecs_twin_sync_sse(opt, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_of_opts_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_vecs_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinSyncSseConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_sync_sse",
        argNames: ["opt"],
      );

  @override
  Future<bool> examplePrimitiveTypeBoolTwinNormal(
      {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(arg);
        return wire.wire_example_primitive_type_bool_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeBoolTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_bool_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF32TwinNormal(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_32(arg);
        return wire.wire_example_primitive_type_f32_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF64TwinNormal(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_64(arg);
        return wire.wire_example_primitive_type_f64_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI16TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_16(arg);
        return wire.wire_example_primitive_type_i16_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI32TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(arg);
        return wire.wire_example_primitive_type_i32_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI64TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_64(arg);
        return wire.wire_example_primitive_type_i64_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI8TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_8(arg);
        return wire.wire_example_primitive_type_i8_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU16TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_16(arg);
        return wire.wire_example_primitive_type_u16_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU32TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(arg);
        return wire.wire_example_primitive_type_u32_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU64TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(arg);
        return wire.wire_example_primitive_type_u64_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU8TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_8(arg);
        return wire.wire_example_primitive_type_u8_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<List<bool>> examplePrimitiveListTypeBoolTwinNormal(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_bool(arg);
        return wire.wire_example_primitive_list_type_bool_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeBoolTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_bool_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Float32List> examplePrimitiveListTypeF32TwinNormal(
      {required Float32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_f_32(arg);
        return wire.wire_example_primitive_list_type_f32_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Float64List> examplePrimitiveListTypeF64TwinNormal(
      {required Float64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_f_64(arg);
        return wire.wire_example_primitive_list_type_f64_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int16List> examplePrimitiveListTypeI16TwinNormal(
      {required Int16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_16(arg);
        return wire.wire_example_primitive_list_type_i16_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int32List> examplePrimitiveListTypeI32TwinNormal(
      {required Int32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_32(arg);
        return wire.wire_example_primitive_list_type_i32_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int64List> examplePrimitiveListTypeI64TwinNormal(
      {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_64(arg);
        return wire.wire_example_primitive_list_type_i64_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int8List> examplePrimitiveListTypeI8TwinNormal(
      {required Int8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_8(arg);
        return wire.wire_example_primitive_list_type_i8_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint16List> examplePrimitiveListTypeU16TwinNormal(
      {required Uint16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_16(arg);
        return wire.wire_example_primitive_list_type_u16_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint32List> examplePrimitiveListTypeU32TwinNormal(
      {required Uint32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_32(arg);
        return wire.wire_example_primitive_list_type_u32_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint64List> examplePrimitiveListTypeU64TwinNormal(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_64(arg);
        return wire.wire_example_primitive_list_type_u64_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> examplePrimitiveListTypeU8TwinNormal(
      {required Uint8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8(arg);
        return wire.wire_example_primitive_list_type_u8_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<VecOfPrimitivePackTwinRustAsync> handleVecOfPrimitiveTwinRustAsync(
      {required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(n);
        return wire.wire_handle_vec_of_primitive_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_vec_of_primitive_pack_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinRustAsyncConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_rust_async",
        argNames: ["n"],
      );

  @override
  Future<VecOfPrimitivePackTwinRustAsyncSse>
      handleVecOfPrimitiveTwinRustAsyncSse({required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(n, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_of_primitive_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_vec_of_primitive_pack_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinRustAsyncSseConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_rust_async_sse",
        argNames: ["n"],
      );

  @override
  Future<VecOfPrimitivePackTwinSse> handleVecOfPrimitiveTwinSse(
      {required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(n, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_of_primitive_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_vec_of_primitive_pack_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinSseConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_sse",
        argNames: ["n"],
      );

  @override
  VecOfPrimitivePackTwinSync handleVecOfPrimitiveTwinSync(
      {required int n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(n);
        return wire.wire_handle_vec_of_primitive_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_vec_of_primitive_pack_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinSyncConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_sync",
        argNames: ["n"],
      );

  @override
  VecOfPrimitivePackTwinSyncSse handleVecOfPrimitiveTwinSyncSse(
      {required int n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(n, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_vec_of_primitive_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_vec_of_primitive_pack_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinSyncSseConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_sync_sse",
        argNames: ["n"],
      );

  @override
  Future<List<bool>> examplePrimitiveListTypeBoolTwinRustAsync(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_bool(arg);
        return wire.wire_example_primitive_list_type_bool_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeBoolTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_bool_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Float32List> examplePrimitiveListTypeF32TwinRustAsync(
      {required Float32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_f_32(arg);
        return wire.wire_example_primitive_list_type_f32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Float64List> examplePrimitiveListTypeF64TwinRustAsync(
      {required Float64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_f_64(arg);
        return wire.wire_example_primitive_list_type_f64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int16List> examplePrimitiveListTypeI16TwinRustAsync(
      {required Int16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_16(arg);
        return wire.wire_example_primitive_list_type_i16_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int32List> examplePrimitiveListTypeI32TwinRustAsync(
      {required Int32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_32(arg);
        return wire.wire_example_primitive_list_type_i32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int64List> examplePrimitiveListTypeI64TwinRustAsync(
      {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_64(arg);
        return wire.wire_example_primitive_list_type_i64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int8List> examplePrimitiveListTypeI8TwinRustAsync(
      {required Int8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_i_8(arg);
        return wire.wire_example_primitive_list_type_i8_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint16List> examplePrimitiveListTypeU16TwinRustAsync(
      {required Uint16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_16(arg);
        return wire.wire_example_primitive_list_type_u16_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint32List> examplePrimitiveListTypeU32TwinRustAsync(
      {required Uint32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_32(arg);
        return wire.wire_example_primitive_list_type_u32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint64List> examplePrimitiveListTypeU64TwinRustAsync(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_64(arg);
        return wire.wire_example_primitive_list_type_u64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> examplePrimitiveListTypeU8TwinRustAsync(
      {required Uint8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8(arg);
        return wire.wire_example_primitive_list_type_u8_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<List<bool>> examplePrimitiveListTypeBoolTwinRustAsyncSse(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_bool_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeBoolTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeBoolTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_bool_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Float32List> examplePrimitiveListTypeF32TwinRustAsyncSse(
      {required Float32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_f32_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Float64List> examplePrimitiveListTypeF64TwinRustAsyncSse(
      {required Float64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_f64_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int16List> examplePrimitiveListTypeI16TwinRustAsyncSse(
      {required Int16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i16_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI16TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI16TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i16_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int32List> examplePrimitiveListTypeI32TwinRustAsyncSse(
      {required Int32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i32_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int64List> examplePrimitiveListTypeI64TwinRustAsyncSse(
      {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i64_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int8List> examplePrimitiveListTypeI8TwinRustAsyncSse(
      {required Int8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i8_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI8TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI8TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i8_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint16List> examplePrimitiveListTypeU16TwinRustAsyncSse(
      {required Uint16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u16_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU16TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU16TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u16_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint32List> examplePrimitiveListTypeU32TwinRustAsyncSse(
      {required Uint32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u32_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint64List> examplePrimitiveListTypeU64TwinRustAsyncSse(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u64_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> examplePrimitiveListTypeU8TwinRustAsyncSse(
      {required Uint8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u8_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU8TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU8TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u8_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<List<bool>> examplePrimitiveListTypeBoolTwinSse(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_bool_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeBoolTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeBoolTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_bool_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Float32List> examplePrimitiveListTypeF32TwinSse(
      {required Float32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_f32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Float64List> examplePrimitiveListTypeF64TwinSse(
      {required Float64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_f64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int16List> examplePrimitiveListTypeI16TwinSse(
      {required Int16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i16_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI16TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI16TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i16_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int32List> examplePrimitiveListTypeI32TwinSse(
      {required Int32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int64List> examplePrimitiveListTypeI64TwinSse(
      {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Int8List> examplePrimitiveListTypeI8TwinSse(
      {required Int8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i8_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI8TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI8TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i8_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint16List> examplePrimitiveListTypeU16TwinSse(
      {required Uint16List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u16_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU16TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU16TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u16_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint32List> examplePrimitiveListTypeU32TwinSse(
      {required Uint32List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint64List> examplePrimitiveListTypeU64TwinSse(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> examplePrimitiveListTypeU8TwinSse(
      {required Uint8List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u8_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU8TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU8TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u8_twin_sse",
        argNames: ["arg"],
      );

  @override
  List<bool> examplePrimitiveListTypeBoolTwinSync(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_bool(arg);
        return wire.wire_example_primitive_list_type_bool_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeBoolTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_bool_twin_sync",
        argNames: ["arg"],
      );

  @override
  Float32List examplePrimitiveListTypeF32TwinSync(
      {required Float32List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_f_32(arg);
        return wire.wire_example_primitive_list_type_f32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Float64List examplePrimitiveListTypeF64TwinSync(
      {required Float64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_f_64(arg);
        return wire.wire_example_primitive_list_type_f64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int16List examplePrimitiveListTypeI16TwinSync(
      {required Int16List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_i_16(arg);
        return wire.wire_example_primitive_list_type_i16_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i16_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int32List examplePrimitiveListTypeI32TwinSync(
      {required Int32List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_i_32(arg);
        return wire.wire_example_primitive_list_type_i32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int64List examplePrimitiveListTypeI64TwinSync(
      {required Int64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_i_64(arg);
        return wire.wire_example_primitive_list_type_i64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int8List examplePrimitiveListTypeI8TwinSync(
      {required Int8List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_i_8(arg);
        return wire.wire_example_primitive_list_type_i8_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i8_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint16List examplePrimitiveListTypeU16TwinSync(
      {required Uint16List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_16(arg);
        return wire.wire_example_primitive_list_type_u16_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u16_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint32List examplePrimitiveListTypeU32TwinSync(
      {required Uint32List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_32(arg);
        return wire.wire_example_primitive_list_type_u32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint64List examplePrimitiveListTypeU64TwinSync(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_64(arg);
        return wire.wire_example_primitive_list_type_u64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint8List examplePrimitiveListTypeU8TwinSync(
      {required Uint8List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_8(arg);
        return wire.wire_example_primitive_list_type_u8_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u8_twin_sync",
        argNames: ["arg"],
      );

  @override
  List<bool> examplePrimitiveListTypeBoolTwinSyncSse(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_bool_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeBoolTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeBoolTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_bool_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Float32List examplePrimitiveListTypeF32TwinSyncSse(
      {required Float32List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_f32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Float64List examplePrimitiveListTypeF64TwinSyncSse(
      {required Float64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_f64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeF64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeF64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_f64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Int16List examplePrimitiveListTypeI16TwinSyncSse(
      {required Int16List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i16_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI16TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI16TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i16_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Int32List examplePrimitiveListTypeI32TwinSyncSse(
      {required Int32List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Int64List examplePrimitiveListTypeI64TwinSyncSse(
      {required Int64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Int8List examplePrimitiveListTypeI8TwinSyncSse(
      {required Int8List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_i8_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeI8TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeI8TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_i8_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Uint16List examplePrimitiveListTypeU16TwinSyncSse(
      {required Uint16List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u16_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU16TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU16TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u16_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Uint32List examplePrimitiveListTypeU32TwinSyncSse(
      {required Uint32List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Uint64List examplePrimitiveListTypeU64TwinSyncSse(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Uint8List examplePrimitiveListTypeU8TwinSyncSse(
      {required Uint8List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_prim_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_list_type_u8_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_prim_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveListTypeU8TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveListTypeU8TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_list_type_u8_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> primitiveTypesTwinRustAsync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(myI32);
        var arg1 = cst_encode_i_64(myI64);
        var arg2 = cst_encode_f_64(myF64);
        var arg3 = cst_encode_bool(myBool);
        return wire.wire_primitive_types_twin_rust_async(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_types_twin_rust_async",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int> primitiveU32TwinRustAsync({required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(myU32);
        return wire.wire_primitive_u32_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinRustAsyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_rust_async",
        argNames: ["myU32"],
      );

  @override
  Future<int> primitiveTypesTwinRustAsyncSse(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(my_i32, serializer);
        _sse_encode_i_64(my_i64, serializer);
        _sse_encode_f_64(my_f64, serializer);
        _sse_encode_bool(my_bool, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_types_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinRustAsyncSseConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_types_twin_rust_async_sse",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int> primitiveU32TwinRustAsyncSse({required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(my_u32, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_u32_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinRustAsyncSseConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_u32_twin_rust_async_sse",
        argNames: ["myU32"],
      );

  @override
  Future<int> primitiveTypesTwinSse(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(my_i32, serializer);
        _sse_encode_i_64(my_i64, serializer);
        _sse_encode_f_64(my_f64, serializer);
        _sse_encode_bool(my_bool, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_types_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinSseConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinSseConstMeta => const TaskConstMeta(
        debugName: "primitive_types_twin_sse",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int> primitiveU32TwinSse({required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(my_u32, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_u32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinSseConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinSseConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_sse",
        argNames: ["myU32"],
      );

  @override
  int primitiveTypesTwinSync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(myI32);
        var arg1 = cst_encode_i_64(myI64);
        var arg2 = cst_encode_f_64(myF64);
        var arg3 = cst_encode_bool(myBool);
        return wire.wire_primitive_types_twin_sync(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinSyncConstMeta => const TaskConstMeta(
        debugName: "primitive_types_twin_sync",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  int primitiveU32TwinSync({required int myU32, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(myU32);
        return wire.wire_primitive_u32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinSyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinSyncConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_sync",
        argNames: ["myU32"],
      );

  @override
  int primitiveTypesTwinSyncSse(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(my_i32, serializer);
        _sse_encode_i_64(my_i64, serializer);
        _sse_encode_f_64(my_f64, serializer);
        _sse_encode_bool(my_bool, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_types_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinSyncSseConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "primitive_types_twin_sync_sse",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  int primitiveU32TwinSyncSse({required int myU32, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(my_u32, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_primitive_u32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinSyncSseConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_sync_sse",
        argNames: ["myU32"],
      );

  @override
  Future<bool> examplePrimitiveTypeBoolTwinRustAsync(
      {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(arg);
        return wire.wire_example_primitive_type_bool_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeBoolTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_bool_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF32TwinRustAsync(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_32(arg);
        return wire.wire_example_primitive_type_f32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF64TwinRustAsync(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_64(arg);
        return wire.wire_example_primitive_type_f64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI16TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_16(arg);
        return wire.wire_example_primitive_type_i16_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI32TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(arg);
        return wire.wire_example_primitive_type_i32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI64TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_64(arg);
        return wire.wire_example_primitive_type_i64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI8TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_8(arg);
        return wire.wire_example_primitive_type_i8_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU16TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_16(arg);
        return wire.wire_example_primitive_type_u16_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU32TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(arg);
        return wire.wire_example_primitive_type_u32_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU64TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(arg);
        return wire.wire_example_primitive_type_u64_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU8TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_8(arg);
        return wire.wire_example_primitive_type_u8_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<bool> examplePrimitiveTypeBoolTwinRustAsyncSse(
      {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_bool_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeBoolTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeBoolTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_bool_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF32TwinRustAsyncSse(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_f32_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF64TwinRustAsyncSse(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_f64_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI16TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i16_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI16TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI16TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i16_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI32TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i32_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI64TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i64_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI8TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i8_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI8TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI8TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i8_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU16TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u16_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU16TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU16TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u16_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU32TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u32_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU32TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU32TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u32_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU64TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u64_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU64TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU64TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u64_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU8TwinRustAsyncSse(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u8_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU8TwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU8TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u8_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<bool> examplePrimitiveTypeBoolTwinSse(
      {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_bool_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeBoolTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeBoolTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_bool_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF32TwinSse(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_f32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<double> examplePrimitiveTypeF64TwinSse(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_f64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI16TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i16_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI16TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI16TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i16_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI32TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI64TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeI8TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i8_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI8TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI8TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i8_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU16TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u16_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU16TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU16TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u16_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU32TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u32_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU32TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU32TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u32_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU64TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u64_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU64TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU64TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u64_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<int> examplePrimitiveTypeU8TwinSse({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u8_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU8TwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU8TwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u8_twin_sse",
        argNames: ["arg"],
      );

  @override
  bool examplePrimitiveTypeBoolTwinSync({required bool arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_bool(arg);
        return wire.wire_example_primitive_type_bool_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeBoolTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_bool_twin_sync",
        argNames: ["arg"],
      );

  @override
  double examplePrimitiveTypeF32TwinSync({required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_f_32(arg);
        return wire.wire_example_primitive_type_f32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f32_twin_sync",
        argNames: ["arg"],
      );

  @override
  double examplePrimitiveTypeF64TwinSync({required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_f_64(arg);
        return wire.wire_example_primitive_type_f64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI16TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_16(arg);
        return wire.wire_example_primitive_type_i16_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI32TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(arg);
        return wire.wire_example_primitive_type_i32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI64TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_64(arg);
        return wire.wire_example_primitive_type_i64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI8TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_8(arg);
        return wire.wire_example_primitive_type_i8_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i8_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU16TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_16(arg);
        return wire.wire_example_primitive_type_u16_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU32TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(arg);
        return wire.wire_example_primitive_type_u32_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU64TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_64(arg);
        return wire.wire_example_primitive_type_u64_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU8TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(arg);
        return wire.wire_example_primitive_type_u8_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u8_twin_sync",
        argNames: ["arg"],
      );

  @override
  bool examplePrimitiveTypeBoolTwinSyncSse({required bool arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_bool(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_bool_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeBoolTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeBoolTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_bool_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  double examplePrimitiveTypeF32TwinSyncSse(
      {required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_f32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  double examplePrimitiveTypeF64TwinSyncSse(
      {required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_f_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_f64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeF64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeF64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_f64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI16TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i16_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI16TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI16TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i16_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI32TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI64TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeI8TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_i8_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeI8TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeI8TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_i8_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU16TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_16(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u16_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU16TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU16TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u16_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU32TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u32_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU32TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU32TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u32_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU64TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u64_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU64TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU64TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u64_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  int examplePrimitiveTypeU8TwinSyncSse({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_8(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_example_primitive_type_u8_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExamplePrimitiveTypeU8TwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExamplePrimitiveTypeU8TwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "example_primitive_type_u8_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      testMoreThanJustOneRawStringStructTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_more_than_just_one_raw_string_struct_twin_rust_async(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_more_than_just_one_raw_string_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Future<RawStringItemStructTwinRustAsync> testRawStringItemStructTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_raw_string_item_struct_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Future<MoreThanJustOneRawStringStructTwinRustAsyncSse>
      testMoreThanJustOneRawStringStructTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_more_than_just_one_raw_string_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kTestMoreThanJustOneRawStringStructTwinRustAsyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "test_more_than_just_one_raw_string_struct_twin_rust_async_sse",
            argNames: [],
          );

  @override
  Future<RawStringItemStructTwinRustAsyncSse>
      testRawStringItemStructTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_item_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_raw_string_item_struct_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<MoreThanJustOneRawStringStructTwinSse>
      testMoreThanJustOneRawStringStructTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_more_than_just_one_raw_string_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_more_than_just_one_raw_string_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_sse",
        argNames: [],
      );

  @override
  Future<RawStringItemStructTwinSse> testRawStringItemStructTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_item_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_item_struct_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_sse",
        argNames: [],
      );

  @override
  MoreThanJustOneRawStringStructTwinSync
      testMoreThanJustOneRawStringStructTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_more_than_just_one_raw_string_struct_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_more_than_just_one_raw_string_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_sync",
        argNames: [],
      );

  @override
  RawStringItemStructTwinSync testRawStringItemStructTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_test_raw_string_item_struct_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_sync",
        argNames: [],
      );

  @override
  MoreThanJustOneRawStringStructTwinSyncSse
      testMoreThanJustOneRawStringStructTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_test_more_than_just_one_raw_string_struct_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_more_than_just_one_raw_string_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_sync_sse",
        argNames: [],
      );

  @override
  RawStringItemStructTwinSyncSse testRawStringItemStructTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_test_raw_string_item_struct_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_raw_string_item_struct_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_sync_sse",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinSseInstanceMethodArgBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseInstanceMethodArgBorrowTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSseInstanceMethodArgBorrowTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinSseInstanceMethodArgMutBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSseInstanceMethodArgMutBorrowTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSseInstanceMethodArgMutBorrowTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinSseInstanceMethodArgOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseInstanceMethodArgOwnTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSseInstanceMethodArgOwnTwinSseConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<RwLockNonCloneSimpleTwinSse>
      nonCloneSimpleTwinSseInstanceMethodReturnOwnTwinSse(
          {required RwLockNonCloneSimpleTwinSse that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseInstanceMethodReturnOwnTwinSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSseInstanceMethodReturnOwnTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSse_instance_method_return_own_twin_sse",
            argNames: ["that"],
          );

  @override
  Future<RwLockNonCloneSimpleTwinSse> nonCloneSimpleTwinSseNewCustomNameTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseNewCustomNameTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSseNewCustomNameTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSse_new_custom_name_twin_sse",
        argNames: [],
      );

  @override
  Future<RwLockNonCloneSimpleTwinSse> nonCloneSimpleTwinSseNewTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_NonCloneSimpleTwinSse_new_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseNewTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSseNewTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSse_new_twin_sse",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinSseStaticMethodArgBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseStaticMethodArgBorrowTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSseStaticMethodArgBorrowTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinSseStaticMethodArgMutBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseStaticMethodArgMutBorrowTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSseStaticMethodArgMutBorrowTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinSseStaticMethodArgOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseStaticMethodArgOwnTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSseStaticMethodArgOwnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSse_static_method_arg_own_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<RwLockNonCloneSimpleTwinSse>
      nonCloneSimpleTwinSseStaticMethodReturnOwnTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSseStaticMethodReturnOwnTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSseStaticMethodReturnOwnTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSse_static_method_return_own_twin_sse",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueArgBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            arg, serializer);
        _sse_encode_i_32(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_borrow_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_sse",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueArgMutBorrowTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            arg, serializer);
        _sse_encode_i_32(expect, serializer);
        _sse_encode_i_32(adder, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_mut_borrow_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinSseConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_sse",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  Future<RwLockNonCloneSimpleTwinSse> rustAutoOpaqueArgOwnAndReturnOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_own_and_return_own_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<void> rustAutoOpaqueArgOwnTwinSse(
      {required RwLockNonCloneSimpleTwinSse arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            arg, serializer);
        _sse_encode_i_32(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_own_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_sse",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueCallableArgTwinSse(
      {required RwLockBoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_callable_arg_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<RwLockBoxFnStringString> rustAutoOpaqueCallableReturnTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_callable_return_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_sse",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinSse(
      {required RwLockNonCloneSimpleTwinSse a,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            a, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_sse",
        argNames: ["a", "b"],
      );

  @override
  Future<void> rustAutoOpaquePlusSignArgTwinSse(
      {required RwLockBoxMyTraitTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_plus_sign_arg_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<RwLockBoxMyTraitTwinSse> rustAutoOpaquePlusSignReturnTwinSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_plus_sign_return_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_sse",
        argNames: [],
      );

  @override
  Future<RwLockNonCloneSimpleTwinSse> rustAutoOpaqueReturnOwnTwinSse(
      {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(initial, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_return_own_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinSseConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_sse",
        argNames: ["initial"],
      );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse",
            argNames: ["arg"],
          );

  @override
  Future<RwLockStructWithGoodAndOpaqueFieldTwinSse>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSse(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse(
                port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinSse(
      {required RwLockBoxHelloTraitTwinSse arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
            arg, serializer);
        _sse_encode_String(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_sse",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinSse(
      {required RwLockBoxHelloTraitTwinSse arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
            arg, serializer);
        _sse_encode_String(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgMutBorrowTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinSse(
      {required RwLockBoxHelloTraitTwinSse arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
            arg, serializer);
        _sse_encode_String(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_trait_object_arg_own_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_sse",
        argNames: ["arg", "expect"],
      );

  @override
  Future<RwLockBoxHelloTraitTwinSse>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_trait_object_return_own_one_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnOneTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_one_twin_sse",
        argNames: [],
      );

  @override
  Future<RwLockBoxHelloTraitTwinSse>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_trait_object_return_own_two_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_two_twin_sse",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueTwoArgsTwinSse(
      {required RwLockNonCloneSimpleTwinSse a,
      required RwLockNonCloneSimpleTwinSse b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            a, serializer);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
            b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_two_args_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_sse",
        argNames: ["a", "b"],
      );

  @override
  void nonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                that);
        return wire
            .wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                that);
        return wire
            .wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                that);
        return wire
            .wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync",
            argNames: ["that"],
          );

  @override
  RwLockNonCloneSimpleTwinSync
      nonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
          {required RwLockNonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                that);
        return wire
            .wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_return_own_twin_sync",
            argNames: ["that"],
          );

  @override
  RwLockNonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewCustomNameTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSync_new_custom_name_twin_sync",
        argNames: [],
      );

  @override
  RwLockNonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_NonCloneSimpleTwinSync_new_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncNewTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSync_new_twin_sync",
        argNames: [],
      );

  @override
  void nonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                arg);
        return wire
            .wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                arg);
        return wire
            .wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                arg);
        return wire
            .wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_static_method_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  RwLockNonCloneSimpleTwinSync
      nonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_return_own_twin_sync",
            argNames: [],
          );

  @override
  void rustAutoOpaqueArgBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                arg);
        var arg1 = cst_encode_i_32(expect);
        return wire.wire_rust_auto_opaque_arg_borrow_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueArgMutBorrowTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                arg);
        var arg1 = cst_encode_i_32(expect);
        var arg2 = cst_encode_i_32(adder);
        return wire.wire_rust_auto_opaque_arg_mut_borrow_twin_sync(
            arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinSyncConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_sync",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  RwLockNonCloneSimpleTwinSync rustAutoOpaqueArgOwnAndReturnOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                arg);
        return wire
            .wire_rust_auto_opaque_arg_own_and_return_own_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_sync",
        argNames: ["arg"],
      );

  @override
  void rustAutoOpaqueArgOwnTwinSync(
      {required RwLockNonCloneSimpleTwinSync arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                arg);
        var arg1 = cst_encode_i_32(expect);
        return wire.wire_rust_auto_opaque_arg_own_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueCallableArgTwinSync(
      {required RwLockBoxFnStringString arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
                arg);
        return wire.wire_rust_auto_opaque_callable_arg_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_sync",
        argNames: ["arg"],
      );

  @override
  RwLockBoxFnStringString rustAutoOpaqueCallableReturnTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_rust_auto_opaque_callable_return_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_sync",
        argNames: [],
      );

  @override
  void rustAutoOpaqueNormalAndOpaqueArgTwinSync(
      {required RwLockNonCloneSimpleTwinSync a,
      required String b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                a);
        var arg1 = cst_encode_String(b);
        return wire.wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_sync",
        argNames: ["a", "b"],
      );

  @override
  void rustAutoOpaquePlusSignArgTwinSync(
      {required RwLockBoxMyTraitTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
                arg);
        return wire.wire_rust_auto_opaque_plus_sign_arg_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_sync",
        argNames: ["arg"],
      );

  @override
  RwLockBoxMyTraitTwinSync rustAutoOpaquePlusSignReturnTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_rust_auto_opaque_plus_sign_return_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_sync",
        argNames: [],
      );

  @override
  RwLockNonCloneSimpleTwinSync rustAutoOpaqueReturnOwnTwinSync(
      {required int initial, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(initial);
        return wire.wire_rust_auto_opaque_return_own_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinSyncConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_sync",
        argNames: ["initial"],
      );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSync(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
                arg);
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSync(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
                arg);
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
                arg);
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  RwLockStructWithGoodAndOpaqueFieldTwinSync
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync",
            argNames: [],
          );

  @override
  void rustAutoOpaqueTraitObjectArgBorrowTwinSync(
      {required RwLockBoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
                arg);
        var arg1 = cst_encode_String(expect);
        return wire.wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSync(
      {required RwLockBoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
                arg);
        var arg1 = cst_encode_String(expect);
        return wire.wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueTraitObjectArgOwnTwinSync(
      {required RwLockBoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
                arg);
        var arg1 = cst_encode_String(expect);
        return wire.wire_rust_auto_opaque_trait_object_arg_own_twin_sync(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  RwLockBoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnOneTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_rust_auto_opaque_trait_object_return_own_one_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_one_twin_sync",
        argNames: [],
      );

  @override
  RwLockBoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnTwoTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire
            .wire_rust_auto_opaque_trait_object_return_own_two_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_two_twin_sync",
        argNames: [],
      );

  @override
  void rustAutoOpaqueTwoArgsTwinSync(
      {required RwLockNonCloneSimpleTwinSync a,
      required RwLockNonCloneSimpleTwinSync b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                a);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
                b);
        return wire.wire_rust_auto_opaque_two_args_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_sync",
        argNames: ["a", "b"],
      );

  @override
  void nonCloneSimpleTwinSyncSseInstanceMethodArgBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseInstanceMethodArgBorrowTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseInstanceMethodArgBorrowTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncSseInstanceMethodArgMutBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseInstanceMethodArgMutBorrowTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseInstanceMethodArgMutBorrowTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncSseInstanceMethodArgOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseInstanceMethodArgOwnTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseInstanceMethodArgOwnTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  RwLockNonCloneSimpleTwinSyncSse
      nonCloneSimpleTwinSyncSseInstanceMethodReturnOwnTwinSyncSse(
          {required RwLockNonCloneSimpleTwinSyncSse that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            that, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseInstanceMethodReturnOwnTwinSyncSseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseInstanceMethodReturnOwnTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse",
            argNames: ["that"],
          );

  @override
  RwLockNonCloneSimpleTwinSyncSse
      nonCloneSimpleTwinSyncSseNewCustomNameTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncSseNewCustomNameTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseNewCustomNameTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse",
            argNames: [],
          );

  @override
  RwLockNonCloneSimpleTwinSyncSse nonCloneSimpleTwinSyncSseNewTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncSseNewTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSyncSseNewTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSyncSse_new_twin_sync_sse",
        argNames: [],
      );

  @override
  void nonCloneSimpleTwinSyncSseStaticMethodArgBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseStaticMethodArgBorrowTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseStaticMethodArgBorrowTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncSseStaticMethodArgMutBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseStaticMethodArgMutBorrowTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseStaticMethodArgMutBorrowTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncSseStaticMethodArgOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseStaticMethodArgOwnTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseStaticMethodArgOwnTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse",
            argNames: ["arg"],
          );

  @override
  RwLockNonCloneSimpleTwinSyncSse
      nonCloneSimpleTwinSyncSseStaticMethodReturnOwnTwinSyncSse(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncSseStaticMethodReturnOwnTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncSseStaticMethodReturnOwnTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse",
            argNames: [],
          );

  @override
  void rustAutoOpaqueArgBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            arg, serializer);
        _sse_encode_i_32(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_borrow_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinSyncSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_sync_sse",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueArgMutBorrowTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            arg, serializer);
        _sse_encode_i_32(expect, serializer);
        _sse_encode_i_32(adder, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinSyncSseConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_sync_sse",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  RwLockNonCloneSimpleTwinSyncSse rustAutoOpaqueArgOwnAndReturnOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  void rustAutoOpaqueArgOwnTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            arg, serializer);
        _sse_encode_i_32(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_arg_own_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinSyncSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_sync_sse",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueCallableArgTwinSyncSse(
      {required RwLockBoxFnStringString arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_callable_arg_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  RwLockBoxFnStringString rustAutoOpaqueCallableReturnTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_callable_return_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_sync_sse",
        argNames: [],
      );

  @override
  void rustAutoOpaqueNormalAndOpaqueArgTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse a,
      required String b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            a, serializer);
        _sse_encode_String(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinSyncSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse",
        argNames: ["a", "b"],
      );

  @override
  void rustAutoOpaquePlusSignArgTwinSyncSse(
      {required RwLockBoxMyTraitTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  RwLockBoxMyTraitTwinSyncSse rustAutoOpaquePlusSignReturnTwinSyncSse(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_plus_sign_return_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_sync_sse",
        argNames: [],
      );

  @override
  RwLockNonCloneSimpleTwinSyncSse rustAutoOpaqueReturnOwnTwinSyncSse(
      {required int initial, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(initial, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_return_own_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinSyncSseConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_sync_sse",
        argNames: ["initial"],
      );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncSse(
      {required RwLockStructWithGoodAndOpaqueFieldTwinSyncSse arg,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse",
            argNames: ["arg"],
          );

  @override
  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncSse(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse",
            argNames: [],
          );

  @override
  void rustAutoOpaqueTraitObjectArgBorrowTwinSyncSse(
      {required RwLockBoxHelloTraitTwinSyncSse arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
            arg, serializer);
        _sse_encode_String(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinSyncSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSyncSse(
      {required RwLockBoxHelloTraitTwinSyncSse arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
            arg, serializer);
        _sse_encode_String(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse",
            argNames: ["arg", "expect"],
          );

  @override
  void rustAutoOpaqueTraitObjectArgOwnTwinSyncSse(
      {required RwLockBoxHelloTraitTwinSyncSse arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
            arg, serializer);
        _sse_encode_String(expect, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinSyncSseConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_sync_sse",
        argNames: ["arg", "expect"],
      );

  @override
  RwLockBoxHelloTraitTwinSyncSse
      rustAutoOpaqueTraitObjectReturnOwnOneTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_one_twin_sync_sse",
            argNames: [],
          );

  @override
  RwLockBoxHelloTraitTwinSyncSse
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire
            .wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse(
                raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncSseConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_two_twin_sync_sse",
            argNames: [],
          );

  @override
  void rustAutoOpaqueTwoArgsTwinSyncSse(
      {required RwLockNonCloneSimpleTwinSyncSse a,
      required RwLockNonCloneSimpleTwinSyncSse b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            a, serializer);
        _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
            b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_rust_auto_opaque_two_args_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinSyncSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_sync_sse",
        argNames: ["a", "b"],
      );

  @override
  FrbOpaqueSyncReturn frbSyncGeneratorTestTwinSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_frb_sync_generator_test_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_frb_opaque_sync_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbSyncGeneratorTestTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSyncGeneratorTestTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "frb_sync_generator_test_twin_sse",
        argNames: [],
      );

  @override
  NonCloneData syncCreateNonCloneTwinSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_sync_create_non_clone_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_non_clone_data,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateNonCloneTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateNonCloneTwinSseConstMeta => const TaskConstMeta(
        debugName: "sync_create_non_clone_twin_sse",
        argNames: [],
      );

  @override
  HideData syncCreateOpaqueTwinSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_sync_create_opaque_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateOpaqueTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "sync_create_opaque_twin_sse",
        argNames: [],
      );

  @override
  NonSendHideData syncCreateSyncOpaqueTwinSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_sync_create_sync_opaque_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateSyncOpaqueTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateSyncOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "sync_create_sync_opaque_twin_sse",
        argNames: [],
      );

  @override
  HideData? syncOptionRustOpaqueTwinSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_sync_option_rust_opaque_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kSyncOptionRustOpaqueTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionRustOpaqueTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_rust_opaque_twin_sse",
        argNames: [],
      );

  @override
  String syncRunOpaqueTwinSse({required NonSendHideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_non_send_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_sync_run_opaque_twin_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSyncRunOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncRunOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "sync_run_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<EnumOpaqueTwinRustAsyncArray5> createArrayOpaqueEnumTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_array_opaque_enum_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_opaque_twin_rust_async_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_rust_async",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinRustAsync> createNestedOpaqueTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_nested_opaque_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_rust_async",
        argNames: [],
      );

  @override
  Future<HideData> createOpaqueTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_opaque_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_rust_async",
        argNames: [],
      );

  @override
  Future<HideData?> createOptionOpaqueTwinRustAsync(
      {HideData? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_RustOpaque_hide_data(opaque);
        return wire.wire_create_option_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<NonSendHideData> createSyncOpaqueTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_sync_opaque_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateSyncOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateSyncOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_sync_opaque_twin_rust_async",
        argNames: [],
      );

  @override
  Future<FrbOpaqueReturn> frbGeneratorTestTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_frb_generator_test_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_frb_opaque_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinRustAsync(
      {required HideDataArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data_array_2(data);
        return wire.wire_opaque_array_run_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_run_twin_rust_async",
        argNames: ["data"],
      );

  @override
  Future<HideDataArray2> opaqueArrayTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_opaque_array_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_hide_data_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinRustAsync(
      {required List<HideData> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_RustOpaque_hide_data(data);
        return wire.wire_opaque_vec_run_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_rust_async",
        argNames: ["data"],
      );

  @override
  Future<List<HideData>> opaqueVecTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_opaque_vec_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_rust_async",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinRustAsync(
      {required EnumOpaqueTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enum_opaque_twin_rust_async(opaque);
        return wire.wire_run_enum_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinRustAsync(
      {required OpaqueNestedTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_opaque_nested_twin_rust_async(opaque);
        return wire.wire_run_nested_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "run_nested_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinRustAsync(
      {required NonCloneData clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_non_clone_data(clone);
        return wire.wire_run_non_clone_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinRustAsyncConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_rust_async",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinRustAsync(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_run_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinRustAsync(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_run_opaque_with_delay_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinRustAsync(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_unwrap_rust_opaque_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<EnumOpaqueTwinRustAsyncSseArray5>
      createArrayOpaqueEnumTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_array_opaque_enum_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_opaque_twin_rust_async_sse_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinRustAsyncSse> createNestedOpaqueTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_nested_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opaque_nested_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<HideData> createOpaqueTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_opaque_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<HideData?> createOptionOpaqueTwinRustAsyncSse(
      {HideData? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_option_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<NonSendHideData> createSyncOpaqueTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_sync_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateSyncOpaqueTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateSyncOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_sync_opaque_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<FrbOpaqueReturn> frbGeneratorTestTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_frb_generator_test_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_frb_opaque_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinRustAsyncSse(
      {required HideDataArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data_array_2(data, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_array_run_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinRustAsyncSseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_run_twin_rust_async_sse",
        argNames: ["data"],
      );

  @override
  Future<HideDataArray2> opaqueArrayTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_array_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_hide_data_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinRustAsyncSse(
      {required List<HideData> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_RustOpaque_hide_data(data, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_vec_run_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinRustAsyncSseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_vec_run_twin_rust_async_sse",
        argNames: ["data"],
      );

  @override
  Future<List<HideData>> opaqueVecTwinRustAsyncSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_vec_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinRustAsyncSse(
      {required EnumOpaqueTwinRustAsyncSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_opaque_twin_rust_async_sse(
            opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_enum_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "run_enum_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinRustAsyncSse(
      {required OpaqueNestedTwinRustAsyncSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_opaque_nested_twin_rust_async_sse(
            opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_nested_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "run_nested_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinRustAsyncSse(
      {required NonCloneData clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_non_clone_data(clone, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_non_clone_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinRustAsyncSseConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "run_non_clone_twin_rust_async_sse",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinRustAsyncSse(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinRustAsyncSse(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_opaque_with_delay_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinRustAsyncSse(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_unwrap_rust_opaque_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinRustAsyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_rust_async_sse",
        argNames: ["opaque"],
      );

  @override
  Future<EnumOpaqueTwinSseArray5> createArrayOpaqueEnumTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_array_opaque_enum_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_opaque_twin_sse_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_sse",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinSse> createNestedOpaqueTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_nested_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opaque_nested_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "create_nested_opaque_twin_sse",
        argNames: [],
      );

  @override
  Future<HideData> createOpaqueTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_sse",
        argNames: [],
      );

  @override
  Future<HideData?> createOptionOpaqueTwinSse(
      {HideData? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_option_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "create_option_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<NonSendHideData> createSyncOpaqueTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_sync_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateSyncOpaqueTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateSyncOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "create_sync_opaque_twin_sse",
        argNames: [],
      );

  @override
  Future<FrbOpaqueReturn> frbGeneratorTestTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_frb_generator_test_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_frb_opaque_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinSseConstMeta => const TaskConstMeta(
        debugName: "frb_generator_test_twin_sse",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinSse(
      {required HideDataArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data_array_2(data, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_array_run_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinSseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinSseConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_sse",
        argNames: ["data"],
      );

  @override
  Future<HideDataArray2> opaqueArrayTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_array_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_hide_data_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinSseConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_sse",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinSse(
      {required List<HideData> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_RustOpaque_hide_data(data, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_vec_run_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinSseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinSseConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_sse",
        argNames: ["data"],
      );

  @override
  Future<List<HideData>> opaqueVecTwinSse({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_vec_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinSseConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_sse",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinSse(
      {required EnumOpaqueTwinSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_opaque_twin_sse(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_enum_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinSse(
      {required OpaqueNestedTwinSse opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_opaque_nested_twin_sse(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_nested_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinSse(
      {required NonCloneData clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_non_clone_data(clone, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_non_clone_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinSseConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinSseConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_sse",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinSse({required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinSse(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_opaque_with_delay_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinSseConstMeta => const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_sse",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinSse(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_unwrap_rust_opaque_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinSseConstMeta => const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_sse",
        argNames: ["opaque"],
      );

  @override
  EnumOpaqueTwinSyncArray5 createArrayOpaqueEnumTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_create_array_opaque_enum_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_opaque_twin_sync_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_sync",
        argNames: [],
      );

  @override
  OpaqueNestedTwinSync createNestedOpaqueTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_create_nested_opaque_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "create_nested_opaque_twin_sync",
        argNames: [],
      );

  @override
  HideData createOpaqueTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_create_opaque_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_sync",
        argNames: [],
      );

  @override
  HideData? createOptionOpaqueTwinSync({HideData? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_RustOpaque_hide_data(opaque);
        return wire.wire_create_option_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "create_option_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  NonSendHideData createSyncOpaqueTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_create_sync_opaque_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateSyncOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateSyncOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "create_sync_opaque_twin_sync",
        argNames: [],
      );

  @override
  FrbOpaqueReturn frbGeneratorTestTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_frb_generator_test_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_frb_opaque_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinSyncConstMeta => const TaskConstMeta(
        debugName: "frb_generator_test_twin_sync",
        argNames: [],
      );

  @override
  void opaqueArrayRunTwinSync({required HideDataArray2 data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_RustOpaque_hide_data_array_2(data);
        return wire.wire_opaque_array_run_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_sync",
        argNames: ["data"],
      );

  @override
  HideDataArray2 opaqueArrayTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_opaque_array_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_hide_data_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_sync",
        argNames: [],
      );

  @override
  void opaqueVecRunTwinSync({required List<HideData> data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_RustOpaque_hide_data(data);
        return wire.wire_opaque_vec_run_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_sync",
        argNames: ["data"],
      );

  @override
  List<HideData> opaqueVecTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_opaque_vec_twin_sync();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_sync",
        argNames: [],
      );

  @override
  String runEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_enum_opaque_twin_sync(opaque);
        return wire.wire_run_enum_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void runNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_opaque_nested_twin_sync(opaque);
        return wire.wire_run_nested_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  String runNonCloneTwinSync({required NonCloneData clone, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_RustOpaque_non_clone_data(clone);
        return wire.wire_run_non_clone_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinSyncConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_sync",
        argNames: ["clone"],
      );

  @override
  String runOpaqueTwinSync({required HideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_run_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  String runOpaqueWithDelayTwinSync({required HideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_run_opaque_with_delay_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_sync",
        argNames: ["opaque"],
      );

  @override
  String unwrapRustOpaqueTwinSync({required HideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_unwrap_rust_opaque_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  EnumOpaqueTwinSyncSseArray5 createArrayOpaqueEnumTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_array_opaque_enum_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_enum_opaque_twin_sync_sse_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_sync_sse",
        argNames: [],
      );

  @override
  OpaqueNestedTwinSyncSse createNestedOpaqueTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_nested_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opaque_nested_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_sync_sse",
        argNames: [],
      );

  @override
  HideData createOpaqueTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_sync_sse",
        argNames: [],
      );

  @override
  HideData? createOptionOpaqueTwinSyncSse({HideData? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_create_option_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  NonSendHideData createSyncOpaqueTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_create_sync_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateSyncOpaqueTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateSyncOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "create_sync_opaque_twin_sync_sse",
        argNames: [],
      );

  @override
  FrbOpaqueReturn frbGeneratorTestTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_frb_generator_test_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_frb_opaque_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_sync_sse",
        argNames: [],
      );

  @override
  void opaqueArrayRunTwinSyncSse({required HideDataArray2 data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data_array_2(data, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_array_run_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinSyncSseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_sync_sse",
        argNames: ["data"],
      );

  @override
  HideDataArray2 opaqueArrayTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_array_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_RustOpaque_hide_data_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_sync_sse",
        argNames: [],
      );

  @override
  void opaqueVecRunTwinSyncSse({required List<HideData> data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_RustOpaque_hide_data(data, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_vec_run_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinSyncSseConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_sync_sse",
        argNames: ["data"],
      );

  @override
  List<HideData> opaqueVecTwinSyncSse({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_opaque_vec_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_list_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinSyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_sync_sse",
        argNames: [],
      );

  @override
  String runEnumOpaqueTwinSyncSse(
      {required EnumOpaqueTwinSyncSse opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_enum_opaque_twin_sync_sse(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_enum_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  void runNestedOpaqueTwinSyncSse(
      {required OpaqueNestedTwinSyncSse opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_opaque_nested_twin_sync_sse(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_nested_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  String runNonCloneTwinSyncSse({required NonCloneData clone, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_non_clone_data(clone, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_non_clone_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinSyncSseConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_sync_sse",
        argNames: ["clone"],
      );

  @override
  String runOpaqueTwinSyncSse({required HideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  String runOpaqueWithDelayTwinSyncSse(
      {required HideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_run_opaque_with_delay_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  String unwrapRustOpaqueTwinSyncSse({required HideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_RustOpaque_hide_data(opaque, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_unwrap_rust_opaque_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinSyncSseConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_sync_sse",
        argNames: ["opaque"],
      );

  @override
  Future<int> simpleAdderTwinRustAsync(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(a);
        var arg1 = cst_encode_i_32(b);
        return wire.wire_simple_adder_twin_rust_async(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_rust_async",
        argNames: ["a", "b"],
      );

  @override
  Future<int> simpleAdderTwinRustAsyncSse(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(a, serializer);
        _sse_encode_i_32(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_simple_adder_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinRustAsyncSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "simple_adder_twin_rust_async_sse",
        argNames: ["a", "b"],
      );

  @override
  Future<int> simpleAdderTwinSse(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(a, serializer);
        _sse_encode_i_32(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_simple_adder_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinSseConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_sse",
        argNames: ["a", "b"],
      );

  @override
  int simpleAdderTwinSync({required int a, required int b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_32(a);
        var arg1 = cst_encode_i_32(b);
        return wire.wire_simple_adder_twin_sync(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinSyncConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_sync",
        argNames: ["a", "b"],
      );

  @override
  int simpleAdderTwinSyncSse({required int a, required int b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_i_32(a, serializer);
        _sse_encode_i_32(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_simple_adder_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinSyncSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_sync_sse",
        argNames: ["a", "b"],
      );

  @override
  Stream<String> funcStreamRealisticTwinSse(
      {required String arg, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_String(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_stream_realistic_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamRealisticTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamRealisticTwinSseConstMeta => const TaskConstMeta(
        debugName: "func_stream_realistic_twin_sse",
        argNames: ["arg"],
      );

  @override
  Stream<String> funcStreamReturnErrorTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_func_stream_return_error_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<String> funcStreamReturnPanicTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_func_stream_return_panic_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnPanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnPanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<int> funcStreamSinkArgPositionTwinRustAsync(
      {required int a, required int b, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(a);
        var arg1 = cst_encode_u_32(b);
        return wire.wire_func_stream_sink_arg_position_twin_rust_async(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamSinkArgPositionTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamSinkArgPositionTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_sink_arg_position_twin_rust_async",
        argNames: ["a", "b"],
      );

  @override
  Stream<MyStreamEntryTwinRustAsync> handleStreamOfStructTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_handle_stream_of_struct_twin_rust_async(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_stream_entry_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamOfStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamOfStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<LogTwinRustAsync> handleStreamSinkAt1TwinRustAsync(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire.wire_handle_stream_sink_at_1_twin_rust_async(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt1TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_rust_async",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinRustAsync> handleStreamSinkAt2TwinRustAsync(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire.wire_handle_stream_sink_at_2_twin_rust_async(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt2TwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt2TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_rust_async",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinRustAsync> handleStreamSinkAt3TwinRustAsync(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire.wire_handle_stream_sink_at_3_twin_rust_async(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt3TwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt3TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_rust_async",
        argNames: ["key", "max"],
      );

  @override
  Stream<String> funcStreamReturnErrorTwinRustAsyncSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_stream_return_error_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnErrorTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnErrorTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Stream<String> funcStreamReturnPanicTwinRustAsyncSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_stream_return_panic_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnPanicTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnPanicTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Stream<int> funcStreamSinkArgPositionTwinRustAsyncSse(
      {required int a, required int b, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(a, serializer);
        _sse_encode_u_32(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_stream_sink_arg_position_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamSinkArgPositionTwinRustAsyncSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamSinkArgPositionTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_sink_arg_position_twin_rust_async_sse",
        argNames: ["a", "b"],
      );

  @override
  Stream<MyStreamEntryTwinRustAsyncSse> handleStreamOfStructTwinRustAsyncSse(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_of_struct_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_stream_entry_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamOfStructTwinRustAsyncSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamOfStructTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_rust_async_sse",
        argNames: [],
      );

  @override
  Stream<LogTwinRustAsyncSse> handleStreamSinkAt1TwinRustAsyncSse(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_sink_at_1_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt1TwinRustAsyncSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt1TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_rust_async_sse",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinRustAsyncSse> handleStreamSinkAt2TwinRustAsyncSse(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_sink_at_2_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt2TwinRustAsyncSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt2TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_rust_async_sse",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinRustAsyncSse> handleStreamSinkAt3TwinRustAsyncSse(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_sink_at_3_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt3TwinRustAsyncSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt3TwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_rust_async_sse",
        argNames: ["key", "max"],
      );

  @override
  Stream<String> funcStreamReturnErrorTwinSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_stream_return_error_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnErrorTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnErrorTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_sse",
        argNames: [],
      );

  @override
  Stream<String> funcStreamReturnPanicTwinSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_func_stream_return_panic_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_String,
        decodeErrorData: _sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnPanicTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnPanicTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_sse",
        argNames: [],
      );

  @override
  Stream<int> funcStreamSinkArgPositionTwinSse(
      {required int a, required int b, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(a, serializer);
        _sse_encode_u_32(b, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_stream_sink_arg_position_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamSinkArgPositionTwinSseConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamSinkArgPositionTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_sink_arg_position_twin_sse",
        argNames: ["a", "b"],
      );

  @override
  Stream<MyStreamEntryTwinSse> handleStreamOfStructTwinSse({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);

        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_of_struct_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_my_stream_entry_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamOfStructTwinSseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamOfStructTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_sse",
        argNames: [],
      );

  @override
  Stream<LogTwinSse> handleStreamSinkAt1TwinSse(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_sink_at_1_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt1TwinSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt1TwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_sse",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinSse> handleStreamSinkAt2TwinSse(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_sink_at_2_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt2TwinSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt2TwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_sse",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinSse> handleStreamSinkAt3TwinSse(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_32(key, serializer);
        _sse_encode_u_32(max, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_stream_sink_at_3_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_log_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt3TwinSseConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt3TwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_sse",
        argNames: ["key", "max"],
      );

  @override
  Future<StructWithOneFieldTwinRustAsync> funcStructWithOneFieldTwinRustAsync(
      {required StructWithOneFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_one_field_twin_rust_async(arg);
        return wire.wire_func_struct_with_one_field_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<StructWithTwoFieldTwinRustAsync> funcStructWithTwoFieldTwinRustAsync(
      {required StructWithTwoFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_two_field_twin_rust_async(arg);
        return wire.wire_func_struct_with_two_field_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<StructWithZeroFieldTwinRustAsync> funcStructWithZeroFieldTwinRustAsync(
      {required StructWithZeroFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_zero_field_twin_rust_async(arg);
        return wire.wire_func_struct_with_zero_field_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_zero_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithOneFieldTwinRustAsync>
      funcTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
                arg);
        return wire.wire_func_tuple_struct_with_one_field_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_tuple_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithTwoFieldTwinRustAsync>
      funcTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
                arg);
        return wire.wire_func_tuple_struct_with_two_field_twin_rust_async(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_tuple_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<StructWithOneFieldTwinRustAsyncSse>
      funcStructWithOneFieldTwinRustAsyncSse(
          {required StructWithOneFieldTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_one_field_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_one_field_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_struct_with_one_field_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<StructWithTwoFieldTwinRustAsyncSse>
      funcStructWithTwoFieldTwinRustAsyncSse(
          {required StructWithTwoFieldTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_two_field_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_two_field_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_struct_with_two_field_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<StructWithZeroFieldTwinRustAsyncSse>
      funcStructWithZeroFieldTwinRustAsyncSse(
          {required StructWithZeroFieldTwinRustAsyncSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_zero_field_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_struct_with_zero_field_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithOneFieldTwinRustAsyncSse>
      funcTupleStructWithOneFieldTwinRustAsyncSse(
          {required TupleStructWithOneFieldTwinRustAsyncSse arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_tuple_struct_with_one_field_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_tuple_struct_with_one_field_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithTwoFieldTwinRustAsyncSse>
      funcTupleStructWithTwoFieldTwinRustAsyncSse(
          {required TupleStructWithTwoFieldTwinRustAsyncSse arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_tuple_struct_with_two_field_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_tuple_struct_with_two_field_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinRustAsyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_rust_async_sse",
        argNames: ["arg"],
      );

  @override
  Future<StructWithOneFieldTwinSse> funcStructWithOneFieldTwinSse(
      {required StructWithOneFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_one_field_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_one_field_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_one_field_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<StructWithTwoFieldTwinSse> funcStructWithTwoFieldTwinSse(
      {required StructWithTwoFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_two_field_twin_sse(arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_two_field_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_two_field_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<StructWithZeroFieldTwinSse> funcStructWithZeroFieldTwinSse(
      {required StructWithZeroFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_zero_field_twin_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_zero_field_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_zero_field_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithOneFieldTwinSse> funcTupleStructWithOneFieldTwinSse(
      {required TupleStructWithOneFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_tuple_struct_with_one_field_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_tuple_struct_with_one_field_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_sse",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithTwoFieldTwinSse> funcTupleStructWithTwoFieldTwinSse(
      {required TupleStructWithTwoFieldTwinSse arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_tuple_struct_with_two_field_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_tuple_struct_with_two_field_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_sse",
        argNames: ["arg"],
      );

  @override
  StructWithOneFieldTwinSync funcStructWithOneFieldTwinSync(
      {required StructWithOneFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_struct_with_one_field_twin_sync(arg);
        return wire.wire_func_struct_with_one_field_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  StructWithTwoFieldTwinSync funcStructWithTwoFieldTwinSync(
      {required StructWithTwoFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_struct_with_two_field_twin_sync(arg);
        return wire.wire_func_struct_with_two_field_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  StructWithZeroFieldTwinSync funcStructWithZeroFieldTwinSync(
      {required StructWithZeroFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_struct_with_zero_field_twin_sync(arg);
        return wire.wire_func_struct_with_zero_field_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_zero_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  TupleStructWithOneFieldTwinSync funcTupleStructWithOneFieldTwinSync(
      {required TupleStructWithOneFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(arg);
        return wire.wire_func_tuple_struct_with_one_field_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_tuple_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  TupleStructWithTwoFieldTwinSync funcTupleStructWithTwoFieldTwinSync(
      {required TupleStructWithTwoFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(arg);
        return wire.wire_func_tuple_struct_with_two_field_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_tuple_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  StructWithOneFieldTwinSyncSse funcStructWithOneFieldTwinSyncSse(
      {required StructWithOneFieldTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_one_field_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_one_field_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_one_field_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  StructWithTwoFieldTwinSyncSse funcStructWithTwoFieldTwinSyncSse(
      {required StructWithTwoFieldTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_two_field_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_two_field_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_two_field_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  StructWithZeroFieldTwinSyncSse funcStructWithZeroFieldTwinSyncSse(
      {required StructWithZeroFieldTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_struct_with_zero_field_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_struct_with_zero_field_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_struct_with_zero_field_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  TupleStructWithOneFieldTwinSyncSse funcTupleStructWithOneFieldTwinSyncSse(
      {required TupleStructWithOneFieldTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_tuple_struct_with_one_field_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_tuple_struct_with_one_field_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  TupleStructWithTwoFieldTwinSyncSse funcTupleStructWithTwoFieldTwinSyncSse(
      {required TupleStructWithTwoFieldTwinSyncSse arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync_sse(
            arg, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_func_tuple_struct_with_two_field_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData:
            _sse_decode_tuple_struct_with_two_field_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinSyncSseConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_sync_sse",
        argNames: ["arg"],
      );

  @override
  Future<void> testTuple2TwinRustAsync(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_record_string_i_32(value);
        return wire.wire_test_tuple_2_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_rust_async",
        argNames: ["value"],
      );

  @override
  Future<(String, int)> testTupleTwinRustAsync(
      {(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_record_string_i_32(value);
        return wire.wire_test_tuple_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_rust_async",
        argNames: ["value"],
      );

  @override
  Future<void> testTuple2TwinRustAsyncSse(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_record_string_i_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_tuple_2_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinRustAsyncSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_rust_async_sse",
        argNames: ["value"],
      );

  @override
  Future<(String, int)> testTupleTwinRustAsyncSse(
      {(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_tuple_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinRustAsyncSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinRustAsyncSseConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_rust_async_sse",
        argNames: ["value"],
      );

  @override
  Future<void> testTuple2TwinSse(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_record_string_i_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_tuple_2_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinSseConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_sse",
        argNames: ["value"],
      );

  @override
  Future<(String, int)> testTupleTwinSse({(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_tuple_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinSseConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_sse",
        argNames: ["value"],
      );

  @override
  void testTuple2TwinSync({required List<(String, int)> value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_record_string_i_32(value);
        return wire.wire_test_tuple_2_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_sync",
        argNames: ["value"],
      );

  @override
  (String, int) testTupleTwinSync({(String, int)? value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_opt_box_autoadd_record_string_i_32(value);
        return wire.wire_test_tuple_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_sync",
        argNames: ["value"],
      );

  @override
  void testTuple2TwinSyncSse(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_list_record_string_i_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_tuple_2_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinSyncSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_sync_sse",
        argNames: ["value"],
      );

  @override
  (String, int) testTupleTwinSyncSse({(String, int)? value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_test_tuple_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinSyncSseConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinSyncSseConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_sync_sse",
        argNames: ["value"],
      );

  @override
  Future<int> handleTypeAliasIdTwinRustAsync(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_alias_id_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_rust_async",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinRustAsync> handleTypeAliasModelTwinRustAsync(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_alias_model_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_model_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_rust_async",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeNestAliasIdTwinRustAsync(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_nest_alias_id_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_rust_async",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeAliasIdTwinRustAsyncSse(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_alias_id_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinRustAsyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_rust_async_sse",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinRustAsyncSse> handleTypeAliasModelTwinRustAsyncSse(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_alias_model_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_model_twin_rust_async_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinRustAsyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_rust_async_sse",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeNestAliasIdTwinRustAsyncSse(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_nest_alias_id_twin_rust_async_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinRustAsyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinRustAsyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_rust_async_sse",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeAliasIdTwinSse({required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_alias_id_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinSseConstMeta => const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_sse",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinSse> handleTypeAliasModelTwinSse(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_alias_model_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_model_twin_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_sse",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeNestAliasIdTwinSse({required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_nest_alias_id_twin_sse(
            port_, raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_sse",
        argNames: ["input"],
      );

  @override
  int handleTypeAliasIdTwinSync({required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_alias_id_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_sync",
        argNames: ["input"],
      );

  @override
  TestModelTwinSync handleTypeAliasModelTwinSync(
      {required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_alias_model_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_model_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_sync",
        argNames: ["input"],
      );

  @override
  int handleTypeNestAliasIdTwinSync({required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_nest_alias_id_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_sync",
        argNames: ["input"],
      );

  @override
  int handleTypeAliasIdTwinSyncSse({required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_alias_id_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinSyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_sync_sse",
        argNames: ["input"],
      );

  @override
  TestModelTwinSyncSse handleTypeAliasModelTwinSyncSse(
      {required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_alias_model_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_test_model_twin_sync_sse,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinSyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_sync_sse",
        argNames: ["input"],
      );

  @override
  int handleTypeNestAliasIdTwinSyncSse({required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        _sse_encode_u_64(input, serializer);
        final raw_ = serializer.intoRaw();
        return wire.wire_handle_type_nest_alias_id_twin_sync_sse(
            raw_.ptr, raw_.rustVecLen, raw_.dataLen);
      },
      codec: SseCodec(
        decodeSuccessData: _sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinSyncSseConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinSyncSseConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_sync_sse",
        argNames: ["input"],
      );

  @override
  Future<FeatureUuidTwinRustAsync> handleNestedUuidsTwinRustAsync(
      {required FeatureUuidTwinRustAsync ids, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_feature_uuid_twin_rust_async(ids);
        return wire.wire_handle_nested_uuids_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_feature_uuid_twin_rust_async,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHandleNestedUuidsTwinRustAsyncConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedUuidsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_uuids_twin_rust_async",
        argNames: ["ids"],
      );

  @override
  Future<UuidValue> handleUuidTwinRustAsync(
      {required UuidValue id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Uuid(id);
        return wire.wire_handle_uuid_twin_rust_async(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Uuid,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHandleUuidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleUuidTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_uuid_twin_rust_async",
        argNames: ["id"],
      );

  @override
  FeatureUuidTwinSync handleNestedUuidsTwinSync(
      {required FeatureUuidTwinSync ids, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_feature_uuid_twin_sync(ids);
        return wire.wire_handle_nested_uuids_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_feature_uuid_twin_sync,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHandleNestedUuidsTwinSyncConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedUuidsTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_nested_uuids_twin_sync",
        argNames: ["ids"],
      );

  @override
  UuidValue handleUuidTwinSync({required UuidValue id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Uuid(id);
        return wire.wire_handle_uuid_twin_sync(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Uuid,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHandleUuidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleUuidTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_uuid_twin_sync",
        argNames: ["id"],
      );

  @override
  Future<MoreThanJustOneRawStringStructTwinNormal>
      testMoreThanJustOneRawStringStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_test_more_than_just_one_raw_string_struct_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_more_than_just_one_raw_string_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<RawStringItemStructTwinNormal> testRawStringItemStructTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_test_raw_string_item_struct_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_raw_string_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                that);
        return wire
            .wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                that);
        return wire
            .wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                that);
        return wire
            .wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<RwLockNonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required RwLockNonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                that);
        return wire
            .wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<RwLockNonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalNewCustomNameTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinNormal_new_custom_name_twin_normal",
        argNames: [],
      );

  @override
  Future<RwLockNonCloneSimpleTwinNormal> nonCloneSimpleTwinNormalNewTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_NonCloneSimpleTwinNormal_new_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinNormalNewTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinNormal_new_twin_normal",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                arg);
        return wire
            .wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                arg);
        return wire
            .wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                arg);
        return wire
            .wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<RwLockNonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueArgBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                arg);
        var arg1 = cst_encode_i_32(expect);
        return wire.wire_rust_auto_opaque_arg_borrow_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueArgMutBorrowTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                arg);
        var arg1 = cst_encode_i_32(expect);
        var arg2 = cst_encode_i_32(adder);
        return wire.wire_rust_auto_opaque_arg_mut_borrow_twin_normal(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinNormalConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_normal",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  Future<RwLockNonCloneSimpleTwinNormal>
      rustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
          {required RwLockNonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                arg);
        return wire.wire_rust_auto_opaque_arg_own_and_return_own_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> rustAutoOpaqueArgOwnTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                arg);
        var arg1 = cst_encode_i_32(expect);
        return wire.wire_rust_auto_opaque_arg_own_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueCallableArgTwinNormal(
      {required RwLockBoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
                arg);
        return wire.wire_rust_auto_opaque_callable_arg_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<RwLockBoxFnStringString> rustAutoOpaqueCallableReturnTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_rust_auto_opaque_callable_return_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_normal",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal a,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                a);
        var arg1 = cst_encode_String(b);
        return wire.wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<void> rustAutoOpaquePlusSignArgTwinNormal(
      {required RwLockBoxMyTraitTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
                arg);
        return wire.wire_rust_auto_opaque_plus_sign_arg_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<RwLockBoxMyTraitTwinNormal> rustAutoOpaquePlusSignReturnTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_rust_auto_opaque_plus_sign_return_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_normal",
        argNames: [],
      );

  @override
  Future<RwLockNonCloneSimpleTwinNormal> rustAutoOpaqueReturnOwnTwinNormal(
      {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(initial);
        return wire.wire_rust_auto_opaque_return_own_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinNormalConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_normal",
        argNames: ["initial"],
      );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormal(
      {required RwLockStructWithGoodAndOpaqueFieldTwinNormal arg,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
                arg);
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormal(
      {required RwLockStructWithGoodAndOpaqueFieldTwinNormal arg,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
                arg);
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
      {required RwLockStructWithGoodAndOpaqueFieldTwinNormal arg,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
                arg);
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<RwLockStructWithGoodAndOpaqueFieldTwinNormal>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinNormal(
      {required RwLockBoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
                arg);
        var arg1 = cst_encode_String(expect);
        return wire.wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinNormal(
      {required RwLockBoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
                arg);
        var arg1 = cst_encode_String(expect);
        return wire
            .wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgMutBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinNormal(
      {required RwLockBoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
                arg);
        var arg1 = cst_encode_String(expect);
        return wire.wire_rust_auto_opaque_trait_object_arg_own_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<RwLockBoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_rust_auto_opaque_trait_object_return_own_one_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnOneTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_one_twin_normal",
        argNames: [],
      );

  @override
  Future<RwLockBoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire
            .wire_rust_auto_opaque_trait_object_return_own_two_twin_normal(
                port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_two_twin_normal",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueTwoArgsTwinNormal(
      {required RwLockNonCloneSimpleTwinNormal a,
      required RwLockNonCloneSimpleTwinNormal b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                a);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
                b);
        return wire.wire_rust_auto_opaque_two_args_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<EnumOpaqueTwinNormalArray5> createArrayOpaqueEnumTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_array_opaque_enum_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_enum_opaque_twin_normal_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_normal",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinNormal> createNestedOpaqueTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_nested_opaque_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<HideData> createOpaqueTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_opaque_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<HideData?> createOptionOpaqueTwinNormal(
      {HideData? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_RustOpaque_hide_data(opaque);
        return wire.wire_create_option_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<NonSendHideData> createSyncOpaqueTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_create_sync_opaque_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kCreateSyncOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateSyncOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "create_sync_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<FrbOpaqueReturn> frbGeneratorTestTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_frb_generator_test_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_frb_opaque_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinNormalConstMeta => const TaskConstMeta(
        debugName: "frb_generator_test_twin_normal",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinNormal(
      {required HideDataArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data_array_2(data);
        return wire.wire_opaque_array_run_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<HideDataArray2> opaqueArrayTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_opaque_array_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_hide_data_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_normal",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinNormal(
      {required List<HideData> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_RustOpaque_hide_data(data);
        return wire.wire_opaque_vec_run_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<List<HideData>> opaqueVecTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_opaque_vec_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_list_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_normal",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enum_opaque_twin_normal(opaque);
        return wire.wire_run_enum_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_opaque_nested_twin_normal(opaque);
        return wire.wire_run_nested_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinNormal(
      {required NonCloneData clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_non_clone_data(clone);
        return wire.wire_run_non_clone_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinNormalConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_normal",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinNormal({required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_run_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinNormal(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_run_opaque_with_delay_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinNormal(
      {required HideData opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_RustOpaque_hide_data(opaque);
        return wire.wire_unwrap_rust_opaque_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  FrbOpaqueSyncReturn frbSyncGeneratorTestTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_frb_sync_generator_test_twin_normal();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_frb_opaque_sync_return,
        decodeErrorData: null,
      ),
      constMeta: kFrbSyncGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSyncGeneratorTestTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "frb_sync_generator_test_twin_normal",
        argNames: [],
      );

  @override
  NonCloneData syncCreateNonCloneTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_sync_create_non_clone_twin_normal();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_non_clone_data,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateNonCloneTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateNonCloneTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_create_non_clone_twin_normal",
        argNames: [],
      );

  @override
  HideData syncCreateOpaqueTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_sync_create_opaque_twin_normal();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "sync_create_opaque_twin_normal",
        argNames: [],
      );

  @override
  NonSendHideData syncCreateSyncOpaqueTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_sync_create_sync_opaque_twin_normal();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_RustOpaque_non_send_hide_data,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateSyncOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateSyncOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_create_sync_opaque_twin_normal",
        argNames: [],
      );

  @override
  HideData? syncOptionRustOpaqueTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_sync_option_rust_opaque_twin_normal();
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_opt_box_autoadd_RustOpaque_hide_data,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kSyncOptionRustOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionRustOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_rust_opaque_twin_normal",
        argNames: [],
      );

  @override
  String syncRunOpaqueTwinNormal(
      {required NonSendHideData opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_RustOpaque_non_send_hide_data(opaque);
        return wire.wire_sync_run_opaque_twin_normal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSyncRunOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncRunOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "sync_run_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<int> simpleAdderTwinNormal(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(a);
        var arg1 = cst_encode_i_32(b);
        return wire.wire_simple_adder_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinNormalConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Stream<String> funcStreamReturnErrorTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_func_stream_return_error_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_normal",
        argNames: [],
      );

  @override
  Stream<String> funcStreamReturnPanicTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_func_stream_return_panic_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnPanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_normal",
        argNames: [],
      );

  @override
  Stream<int> funcStreamSinkArgPositionTwinNormal(
      {required int a, required int b, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(a);
        var arg1 = cst_encode_u_32(b);
        return wire.wire_func_stream_sink_arg_position_twin_normal(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamSinkArgPositionTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamSinkArgPositionTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_sink_arg_position_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Stream<MyStreamEntryTwinNormal> handleStreamOfStructTwinNormal(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_handle_stream_of_struct_twin_normal(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_my_stream_entry_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamOfStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_normal",
        argNames: [],
      );

  @override
  Stream<LogTwinNormal> handleStreamSinkAt1TwinNormal(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire.wire_handle_stream_sink_at_1_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt1TwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_normal",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinNormal> handleStreamSinkAt2TwinNormal(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire.wire_handle_stream_sink_at_2_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt2TwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_normal",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinNormal> handleStreamSinkAt3TwinNormal(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_32(key);
        var arg1 = cst_encode_u_32(max);
        return wire.wire_handle_stream_sink_at_3_twin_normal(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_log_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt3TwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt3TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_normal",
        argNames: ["key", "max"],
      );

  @override
  Stream<String> funcStreamRealisticTwinNormal(
      {required String arg, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(arg);
        return wire.wire_func_stream_realistic_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamRealisticTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamRealisticTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_realistic_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<StructWithOneFieldTwinNormal> funcStructWithOneFieldTwinNormal(
      {required StructWithOneFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_one_field_twin_normal(arg);
        return wire.wire_func_struct_with_one_field_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<StructWithTwoFieldTwinNormal> funcStructWithTwoFieldTwinNormal(
      {required StructWithTwoFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_two_field_twin_normal(arg);
        return wire.wire_func_struct_with_two_field_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<StructWithZeroFieldTwinNormal> funcStructWithZeroFieldTwinNormal(
      {required StructWithZeroFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_struct_with_zero_field_twin_normal(arg);
        return wire.wire_func_struct_with_zero_field_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_struct_with_zero_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithOneFieldTwinNormal>
      funcTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(arg);
        return wire.wire_func_tuple_struct_with_one_field_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_tuple_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithTwoFieldTwinNormal>
      funcTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(arg);
        return wire.wire_func_tuple_struct_with_two_field_twin_normal(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_tuple_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> testTuple2TwinNormal(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_record_string_i_32(value);
        return wire.wire_test_tuple_2_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinNormalConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<(String, int)> testTupleTwinNormal(
      {(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_box_autoadd_record_string_i_32(value);
        return wire.wire_test_tuple_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinNormalConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<int> handleTypeAliasIdTwinNormal({required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_alias_id_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinNormal> handleTypeAliasModelTwinNormal(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_alias_model_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_test_model_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeNestAliasIdTwinNormal(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(input);
        return wire.wire_handle_type_nest_alias_id_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<FeatureUuidTwinNormal> handleNestedUuidsTwinNormal(
      {required FeatureUuidTwinNormal ids, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_feature_uuid_twin_normal(ids);
        return wire.wire_handle_nested_uuids_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_feature_uuid_twin_normal,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHandleNestedUuidsTwinNormalConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedUuidsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_uuids_twin_normal",
        argNames: ["ids"],
      );

  @override
  Future<UuidValue> handleUuidTwinNormal(
      {required UuidValue id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Uuid(id);
        return wire.wire_handle_uuid_twin_normal(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: _dco_decode_Uuid,
        decodeErrorData: _dco_decode_AnyhowException,
      ),
      constMeta: kHandleUuidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleUuidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_uuid_twin_normal",
        argNames: ["id"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideData =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexHideData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideData =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexHideData;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideData =>
          wire.rust_arc_increment_strong_count_RustOpaque_RwLockHideData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideData =>
          wire.rust_arc_decrement_strong_count_RustOpaque_RwLockHideData;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsyncSse => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSse => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSyncSse => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturn =>
          wire.rust_arc_increment_strong_count_RustOpaque_frb_opaque_return;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturn =>
          wire.rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturn => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturn => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideData =>
          wire.rust_arc_increment_strong_count_RustOpaque_hide_data;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideData =>
          wire.rust_arc_decrement_strong_count_RustOpaque_hide_data;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32 =>
      wire.rust_arc_increment_strong_count_RustOpaque_i_32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32 =>
      wire.rust_arc_decrement_strong_count_RustOpaque_i_32;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneData =>
          wire.rust_arc_increment_strong_count_RustOpaque_non_clone_data;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneData =>
          wire.rust_arc_decrement_strong_count_RustOpaque_non_clone_data;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonSendHideData =>
          wire.rust_arc_increment_strong_count_RustOpaque_non_send_hide_data;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonSendHideData =>
          wire.rust_arc_decrement_strong_count_RustOpaque_non_send_hide_data;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxFnStringString => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxFnStringString => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinSse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxHelloTraitTwinSyncSse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinSse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockBoxMyTraitTwinSyncSse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinSse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockNonCloneSimpleTwinSyncSse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncSse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSse =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSse =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSse =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSse =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse;

  AnyhowException _dco_decode_AnyhowException(dynamic raw) {
    return AnyhowException(raw as String);
  }

  RwLockBoxFnStringString
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          dynamic raw) {
    return RwLockBoxFnStringString.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinNormal
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          dynamic raw) {
    return RwLockBoxHelloTraitTwinNormal.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
          dynamic raw) {
    return RwLockBoxHelloTraitTwinSse.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinSync
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          dynamic raw) {
    return RwLockBoxHelloTraitTwinSync.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinSyncSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          dynamic raw) {
    return RwLockBoxHelloTraitTwinSyncSse.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinNormal
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinNormal.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinSse.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinSync
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinSync.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinSyncSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinSyncSse.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinNormal
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          dynamic raw) {
    return RwLockNonCloneSimpleTwinNormal.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
          dynamic raw) {
    return RwLockNonCloneSimpleTwinSse.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinSync
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
          dynamic raw) {
    return RwLockNonCloneSimpleTwinSync.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinSyncSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          dynamic raw) {
    return RwLockNonCloneSimpleTwinSyncSse.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinNormal
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinNormal.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSse.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSync
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSync.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse
      _dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSyncSse.dcoDecode(raw);
  }

  String _dco_decode_Backtrace(dynamic raw) {
    return raw as String;
  }

  Duration _dco_decode_Chrono_Duration(dynamic raw) {
    return dcoDecodeDuration(_dco_decode_i_64(raw).toInt());
  }

  DateTime _dco_decode_Chrono_Local(dynamic raw) {
    return dcoDecodeTimestamp(ts: _dco_decode_i_64(raw).toInt(), isUtc: false);
  }

  DateTime _dco_decode_Chrono_Naive(dynamic raw) {
    return dcoDecodeTimestamp(ts: _dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  DateTime _dco_decode_Chrono_Utc(dynamic raw) {
    return dcoDecodeTimestamp(ts: _dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  Object _dco_decode_DartOpaque(dynamic raw) {
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  ObjectArray1 _dco_decode_DartOpaque_array_1(dynamic raw) {
    return ObjectArray1(
        (raw as List<dynamic>).map(_dco_decode_DartOpaque).toList());
  }

  MutexHideData _dco_decode_RustOpaque_MutexHideData(dynamic raw) {
    return MutexHideData.dcoDecode(raw);
  }

  RwLockHideData _dco_decode_RustOpaque_RwLockHideData(dynamic raw) {
    return RwLockHideData.dcoDecode(raw);
  }

  BoxDartDebugTwinNormal _dco_decode_RustOpaque_box_dynDartDebugTwinNormal(
      dynamic raw) {
    return BoxDartDebugTwinNormal.dcoDecode(raw);
  }

  BoxDartDebugTwinRustAsync
      _dco_decode_RustOpaque_box_dynDartDebugTwinRustAsync(dynamic raw) {
    return BoxDartDebugTwinRustAsync.dcoDecode(raw);
  }

  BoxDartDebugTwinRustAsyncSse
      _dco_decode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(dynamic raw) {
    return BoxDartDebugTwinRustAsyncSse.dcoDecode(raw);
  }

  BoxDartDebugTwinSse _dco_decode_RustOpaque_box_dynDartDebugTwinSse(
      dynamic raw) {
    return BoxDartDebugTwinSse.dcoDecode(raw);
  }

  BoxDartDebugTwinSync _dco_decode_RustOpaque_box_dynDartDebugTwinSync(
      dynamic raw) {
    return BoxDartDebugTwinSync.dcoDecode(raw);
  }

  BoxDartDebugTwinSyncSse _dco_decode_RustOpaque_box_dynDartDebugTwinSyncSse(
      dynamic raw) {
    return BoxDartDebugTwinSyncSse.dcoDecode(raw);
  }

  FrbOpaqueReturn _dco_decode_RustOpaque_frb_opaque_return(dynamic raw) {
    return FrbOpaqueReturn.dcoDecode(raw);
  }

  FrbOpaqueSyncReturn _dco_decode_RustOpaque_frb_opaque_sync_return(
      dynamic raw) {
    return FrbOpaqueSyncReturn.dcoDecode(raw);
  }

  HideData _dco_decode_RustOpaque_hide_data(dynamic raw) {
    return HideData.dcoDecode(raw);
  }

  HideDataArray2 _dco_decode_RustOpaque_hide_data_array_2(dynamic raw) {
    return HideDataArray2(
        (raw as List<dynamic>).map(_dco_decode_RustOpaque_hide_data).toList());
  }

  I32 _dco_decode_RustOpaque_i_32(dynamic raw) {
    return I32.dcoDecode(raw);
  }

  NonCloneData _dco_decode_RustOpaque_non_clone_data(dynamic raw) {
    return NonCloneData.dcoDecode(raw);
  }

  NonSendHideData _dco_decode_RustOpaque_non_send_hide_data(dynamic raw) {
    return NonSendHideData.dcoDecode(raw);
  }

  RwLockBoxFnStringString
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          dynamic raw) {
    return RwLockBoxFnStringString.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinNormal
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          dynamic raw) {
    return RwLockBoxHelloTraitTwinNormal.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinSse
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(dynamic raw) {
    return RwLockBoxHelloTraitTwinSse.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinSync
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          dynamic raw) {
    return RwLockBoxHelloTraitTwinSync.dcoDecode(raw);
  }

  RwLockBoxHelloTraitTwinSyncSse
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          dynamic raw) {
    return RwLockBoxHelloTraitTwinSyncSse.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinNormal
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinNormal.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinSse
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinSse.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinSync
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinSync.dcoDecode(raw);
  }

  RwLockBoxMyTraitTwinSyncSse
      _dco_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          dynamic raw) {
    return RwLockBoxMyTraitTwinSyncSse.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinNormal
      _dco_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          dynamic raw) {
    return RwLockNonCloneSimpleTwinNormal.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinSse
      _dco_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(dynamic raw) {
    return RwLockNonCloneSimpleTwinSse.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinSync
      _dco_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(dynamic raw) {
    return RwLockNonCloneSimpleTwinSync.dcoDecode(raw);
  }

  RwLockNonCloneSimpleTwinSyncSse
      _dco_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          dynamic raw) {
    return RwLockNonCloneSimpleTwinSyncSse.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinNormal
      _dco_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinNormal.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSse
      _dco_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSse.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSync
      _dco_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSync.dcoDecode(raw);
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse
      _dco_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          dynamic raw) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSyncSse.dcoDecode(raw);
  }

  String _dco_decode_String(dynamic raw) {
    return raw as String;
  }

  UuidValue _dco_decode_Uuid(dynamic raw) {
    return UuidValue.fromByteList(_dco_decode_list_prim_u_8(raw));
  }

  ATwinNormal _dco_decode_a_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinNormal(
      a: _dco_decode_String(arr[0]),
    );
  }

  ATwinRustAsync _dco_decode_a_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinRustAsync(
      a: _dco_decode_String(arr[0]),
    );
  }

  ATwinRustAsyncSse _dco_decode_a_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinRustAsyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  ATwinSse _dco_decode_a_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  ATwinSync _dco_decode_a_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinSync(
      a: _dco_decode_String(arr[0]),
    );
  }

  ATwinSyncSse _dco_decode_a_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinSyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  AbcTwinNormal _dco_decode_abc_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AbcTwinNormal_A(
          _dco_decode_box_autoadd_a_twin_normal(raw[1]),
        );
      case 1:
        return AbcTwinNormal_B(
          _dco_decode_box_autoadd_b_twin_normal(raw[1]),
        );
      case 2:
        return AbcTwinNormal_C(
          _dco_decode_box_autoadd_c_twin_normal(raw[1]),
        );
      case 3:
        return AbcTwinNormal_JustInt(
          _dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  AbcTwinRustAsync _dco_decode_abc_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AbcTwinRustAsync_A(
          _dco_decode_box_autoadd_a_twin_rust_async(raw[1]),
        );
      case 1:
        return AbcTwinRustAsync_B(
          _dco_decode_box_autoadd_b_twin_rust_async(raw[1]),
        );
      case 2:
        return AbcTwinRustAsync_C(
          _dco_decode_box_autoadd_c_twin_rust_async(raw[1]),
        );
      case 3:
        return AbcTwinRustAsync_JustInt(
          _dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  AbcTwinRustAsyncSse _dco_decode_abc_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AbcTwinRustAsyncSse_A(
          _dco_decode_box_autoadd_a_twin_rust_async_sse(raw[1]),
        );
      case 1:
        return AbcTwinRustAsyncSse_B(
          _dco_decode_box_autoadd_b_twin_rust_async_sse(raw[1]),
        );
      case 2:
        return AbcTwinRustAsyncSse_C(
          _dco_decode_box_autoadd_c_twin_rust_async_sse(raw[1]),
        );
      case 3:
        return AbcTwinRustAsyncSse_JustInt(
          _dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  AbcTwinSse _dco_decode_abc_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AbcTwinSse_A(
          _dco_decode_box_autoadd_a_twin_sse(raw[1]),
        );
      case 1:
        return AbcTwinSse_B(
          _dco_decode_box_autoadd_b_twin_sse(raw[1]),
        );
      case 2:
        return AbcTwinSse_C(
          _dco_decode_box_autoadd_c_twin_sse(raw[1]),
        );
      case 3:
        return AbcTwinSse_JustInt(
          _dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  AbcTwinSync _dco_decode_abc_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AbcTwinSync_A(
          _dco_decode_box_autoadd_a_twin_sync(raw[1]),
        );
      case 1:
        return AbcTwinSync_B(
          _dco_decode_box_autoadd_b_twin_sync(raw[1]),
        );
      case 2:
        return AbcTwinSync_C(
          _dco_decode_box_autoadd_c_twin_sync(raw[1]),
        );
      case 3:
        return AbcTwinSync_JustInt(
          _dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  AbcTwinSyncSse _dco_decode_abc_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AbcTwinSyncSse_A(
          _dco_decode_box_autoadd_a_twin_sync_sse(raw[1]),
        );
      case 1:
        return AbcTwinSyncSse_B(
          _dco_decode_box_autoadd_b_twin_sync_sse(raw[1]),
        );
      case 2:
        return AbcTwinSyncSse_C(
          _dco_decode_box_autoadd_c_twin_sync_sse(raw[1]),
        );
      case 3:
        return AbcTwinSyncSse_JustInt(
          _dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  AnotherMacroStructTwinNormal _dco_decode_another_macro_struct_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AnotherMacroStructTwinNormal(
      data: _dco_decode_i_32(arr[0]),
      nonFinalData: _dco_decode_i_32(arr[1]),
    );
  }

  AnotherMacroStructTwinSse _dco_decode_another_macro_struct_twin_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AnotherMacroStructTwinSse(
      data: _dco_decode_i_32(arr[0]),
      nonFinalData: _dco_decode_i_32(arr[1]),
    );
  }

  AnotherTwinNormal _dco_decode_another_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinNormal(
      a: _dco_decode_String(arr[0]),
    );
  }

  AnotherTwinRustAsync _dco_decode_another_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinRustAsync(
      a: _dco_decode_String(arr[0]),
    );
  }

  AnotherTwinRustAsyncSse _dco_decode_another_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinRustAsyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  AnotherTwinSse _dco_decode_another_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  AnotherTwinSync _dco_decode_another_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinSync(
      a: _dco_decode_String(arr[0]),
    );
  }

  AnotherTwinSyncSse _dco_decode_another_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinSyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  ApplicationEnv _dco_decode_application_env(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ApplicationEnv(
      vars: _dco_decode_list_application_env_var(arr[0]),
    );
  }

  ApplicationEnvVar _dco_decode_application_env_var(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApplicationEnvVar(
      field0: _dco_decode_String(arr[0]),
      field1: _dco_decode_bool(arr[1]),
    );
  }

  ApplicationMessage _dco_decode_application_message(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ApplicationMessage_DisplayMessage(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return ApplicationMessage_RenderPixel(
          x: _dco_decode_i_32(raw[1]),
          y: _dco_decode_i_32(raw[2]),
        );
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw Exception("unreachable");
    }
  }

  ApplicationMode _dco_decode_application_mode(dynamic raw) {
    return ApplicationMode.values[raw as int];
  }

  ApplicationSettings _dco_decode_application_settings(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApplicationSettings(
      name: _dco_decode_String(arr[0]),
      version: _dco_decode_String(arr[1]),
      mode: _dco_decode_application_mode(arr[2]),
      env: _dco_decode_box_application_env(arr[3]),
      envOptional: _dco_decode_opt_box_autoadd_application_env(arr[4]),
    );
  }

  AttributeTwinNormal _dco_decode_attribute_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinNormal(
      key: _dco_decode_String(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  AttributeTwinRustAsync _dco_decode_attribute_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinRustAsync(
      key: _dco_decode_String(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  AttributeTwinRustAsyncSse _dco_decode_attribute_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinRustAsyncSse(
      key: _dco_decode_String(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  AttributeTwinSse _dco_decode_attribute_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinSse(
      key: _dco_decode_String(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  AttributeTwinSync _dco_decode_attribute_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinSync(
      key: _dco_decode_String(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  AttributeTwinSyncSse _dco_decode_attribute_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinSyncSse(
      key: _dco_decode_String(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  BTwinNormal _dco_decode_b_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinNormal(
      b: _dco_decode_i_32(arr[0]),
    );
  }

  BTwinRustAsync _dco_decode_b_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinRustAsync(
      b: _dco_decode_i_32(arr[0]),
    );
  }

  BTwinRustAsyncSse _dco_decode_b_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinRustAsyncSse(
      b: _dco_decode_i_32(arr[0]),
    );
  }

  BTwinSse _dco_decode_b_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinSse(
      b: _dco_decode_i_32(arr[0]),
    );
  }

  BTwinSync _dco_decode_b_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinSync(
      b: _dco_decode_i_32(arr[0]),
    );
  }

  BTwinSyncSse _dco_decode_b_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinSyncSse(
      b: _dco_decode_i_32(arr[0]),
    );
  }

  BigBuffersTwinNormal _dco_decode_big_buffers_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinNormal(
      int64: _dco_decode_list_prim_i_64(arr[0]),
      uint64: _dco_decode_list_prim_u_64(arr[1]),
    );
  }

  BigBuffersTwinRustAsync _dco_decode_big_buffers_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinRustAsync(
      int64: _dco_decode_list_prim_i_64(arr[0]),
      uint64: _dco_decode_list_prim_u_64(arr[1]),
    );
  }

  BigBuffersTwinRustAsyncSse _dco_decode_big_buffers_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinRustAsyncSse(
      int64: _dco_decode_list_prim_i_64(arr[0]),
      uint64: _dco_decode_list_prim_u_64(arr[1]),
    );
  }

  BigBuffersTwinSse _dco_decode_big_buffers_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinSse(
      int64: _dco_decode_list_prim_i_64(arr[0]),
      uint64: _dco_decode_list_prim_u_64(arr[1]),
    );
  }

  BigBuffersTwinSync _dco_decode_big_buffers_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinSync(
      int64: _dco_decode_list_prim_i_64(arr[0]),
      uint64: _dco_decode_list_prim_u_64(arr[1]),
    );
  }

  BigBuffersTwinSyncSse _dco_decode_big_buffers_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinSyncSse(
      int64: _dco_decode_list_prim_i_64(arr[0]),
      uint64: _dco_decode_list_prim_u_64(arr[1]),
    );
  }

  BlobTwinNormal _dco_decode_blob_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinNormal(
      field0: _dco_decode_u_8_array_1600(arr[0]),
    );
  }

  BlobTwinRustAsync _dco_decode_blob_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinRustAsync(
      field0: _dco_decode_u_8_array_1600(arr[0]),
    );
  }

  BlobTwinRustAsyncSse _dco_decode_blob_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinRustAsyncSse(
      field0: _dco_decode_u_8_array_1600(arr[0]),
    );
  }

  BlobTwinSse _dco_decode_blob_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinSse(
      field0: _dco_decode_u_8_array_1600(arr[0]),
    );
  }

  BlobTwinSync _dco_decode_blob_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinSync(
      field0: _dco_decode_u_8_array_1600(arr[0]),
    );
  }

  BlobTwinSyncSse _dco_decode_blob_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinSyncSse(
      field0: _dco_decode_u_8_array_1600(arr[0]),
    );
  }

  bool _dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  ApplicationEnv _dco_decode_box_application_env(dynamic raw) {
    return _dco_decode_application_env(raw);
  }

  Duration _dco_decode_box_autoadd_Chrono_Duration(dynamic raw) {
    return _dco_decode_Chrono_Duration(raw);
  }

  DateTime _dco_decode_box_autoadd_Chrono_Naive(dynamic raw) {
    return _dco_decode_Chrono_Naive(raw);
  }

  DateTime _dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    return _dco_decode_Chrono_Utc(raw);
  }

  Object _dco_decode_box_autoadd_DartOpaque(dynamic raw) {
    return _dco_decode_DartOpaque(raw);
  }

  HideData _dco_decode_box_autoadd_RustOpaque_hide_data(dynamic raw) {
    return _dco_decode_RustOpaque_hide_data(raw);
  }

  ATwinNormal _dco_decode_box_autoadd_a_twin_normal(dynamic raw) {
    return _dco_decode_a_twin_normal(raw);
  }

  ATwinRustAsync _dco_decode_box_autoadd_a_twin_rust_async(dynamic raw) {
    return _dco_decode_a_twin_rust_async(raw);
  }

  ATwinRustAsyncSse _dco_decode_box_autoadd_a_twin_rust_async_sse(dynamic raw) {
    return _dco_decode_a_twin_rust_async_sse(raw);
  }

  ATwinSse _dco_decode_box_autoadd_a_twin_sse(dynamic raw) {
    return _dco_decode_a_twin_sse(raw);
  }

  ATwinSync _dco_decode_box_autoadd_a_twin_sync(dynamic raw) {
    return _dco_decode_a_twin_sync(raw);
  }

  ATwinSyncSse _dco_decode_box_autoadd_a_twin_sync_sse(dynamic raw) {
    return _dco_decode_a_twin_sync_sse(raw);
  }

  ApplicationEnv _dco_decode_box_autoadd_application_env(dynamic raw) {
    return _dco_decode_application_env(raw);
  }

  AttributeTwinNormal _dco_decode_box_autoadd_attribute_twin_normal(
      dynamic raw) {
    return _dco_decode_attribute_twin_normal(raw);
  }

  AttributeTwinRustAsync _dco_decode_box_autoadd_attribute_twin_rust_async(
      dynamic raw) {
    return _dco_decode_attribute_twin_rust_async(raw);
  }

  AttributeTwinRustAsyncSse
      _dco_decode_box_autoadd_attribute_twin_rust_async_sse(dynamic raw) {
    return _dco_decode_attribute_twin_rust_async_sse(raw);
  }

  AttributeTwinSse _dco_decode_box_autoadd_attribute_twin_sse(dynamic raw) {
    return _dco_decode_attribute_twin_sse(raw);
  }

  AttributeTwinSync _dco_decode_box_autoadd_attribute_twin_sync(dynamic raw) {
    return _dco_decode_attribute_twin_sync(raw);
  }

  AttributeTwinSyncSse _dco_decode_box_autoadd_attribute_twin_sync_sse(
      dynamic raw) {
    return _dco_decode_attribute_twin_sync_sse(raw);
  }

  BTwinNormal _dco_decode_box_autoadd_b_twin_normal(dynamic raw) {
    return _dco_decode_b_twin_normal(raw);
  }

  BTwinRustAsync _dco_decode_box_autoadd_b_twin_rust_async(dynamic raw) {
    return _dco_decode_b_twin_rust_async(raw);
  }

  BTwinRustAsyncSse _dco_decode_box_autoadd_b_twin_rust_async_sse(dynamic raw) {
    return _dco_decode_b_twin_rust_async_sse(raw);
  }

  BTwinSse _dco_decode_box_autoadd_b_twin_sse(dynamic raw) {
    return _dco_decode_b_twin_sse(raw);
  }

  BTwinSync _dco_decode_box_autoadd_b_twin_sync(dynamic raw) {
    return _dco_decode_b_twin_sync(raw);
  }

  BTwinSyncSse _dco_decode_box_autoadd_b_twin_sync_sse(dynamic raw) {
    return _dco_decode_b_twin_sync_sse(raw);
  }

  bool _dco_decode_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  CTwinNormal _dco_decode_box_autoadd_c_twin_normal(dynamic raw) {
    return _dco_decode_c_twin_normal(raw);
  }

  CTwinRustAsync _dco_decode_box_autoadd_c_twin_rust_async(dynamic raw) {
    return _dco_decode_c_twin_rust_async(raw);
  }

  CTwinRustAsyncSse _dco_decode_box_autoadd_c_twin_rust_async_sse(dynamic raw) {
    return _dco_decode_c_twin_rust_async_sse(raw);
  }

  CTwinSse _dco_decode_box_autoadd_c_twin_sse(dynamic raw) {
    return _dco_decode_c_twin_sse(raw);
  }

  CTwinSync _dco_decode_box_autoadd_c_twin_sync(dynamic raw) {
    return _dco_decode_c_twin_sync(raw);
  }

  CTwinSyncSse _dco_decode_box_autoadd_c_twin_sync_sse(dynamic raw) {
    return _dco_decode_c_twin_sync_sse(raw);
  }

  CustomNestedError2TwinNormal
      _dco_decode_box_autoadd_custom_nested_error_2_twin_normal(dynamic raw) {
    return _dco_decode_custom_nested_error_2_twin_normal(raw);
  }

  CustomNestedError2TwinRustAsync
      _dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
          dynamic raw) {
    return _dco_decode_custom_nested_error_2_twin_rust_async(raw);
  }

  CustomNestedError2TwinRustAsyncSse
      _dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async_sse(
          dynamic raw) {
    return _dco_decode_custom_nested_error_2_twin_rust_async_sse(raw);
  }

  CustomNestedError2TwinSse
      _dco_decode_box_autoadd_custom_nested_error_2_twin_sse(dynamic raw) {
    return _dco_decode_custom_nested_error_2_twin_sse(raw);
  }

  CustomNestedError2TwinSync
      _dco_decode_box_autoadd_custom_nested_error_2_twin_sync(dynamic raw) {
    return _dco_decode_custom_nested_error_2_twin_sync(raw);
  }

  CustomNestedError2TwinSyncSse
      _dco_decode_box_autoadd_custom_nested_error_2_twin_sync_sse(dynamic raw) {
    return _dco_decode_custom_nested_error_2_twin_sync_sse(raw);
  }

  CustomNestedErrorInnerTwinNormal
      _dco_decode_box_autoadd_custom_nested_error_inner_twin_normal(
          dynamic raw) {
    return _dco_decode_custom_nested_error_inner_twin_normal(raw);
  }

  CustomNestedErrorInnerTwinRustAsync
      _dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          dynamic raw) {
    return _dco_decode_custom_nested_error_inner_twin_rust_async(raw);
  }

  CustomNestedErrorInnerTwinRustAsyncSse
      _dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
          dynamic raw) {
    return _dco_decode_custom_nested_error_inner_twin_rust_async_sse(raw);
  }

  CustomNestedErrorInnerTwinSse
      _dco_decode_box_autoadd_custom_nested_error_inner_twin_sse(dynamic raw) {
    return _dco_decode_custom_nested_error_inner_twin_sse(raw);
  }

  CustomNestedErrorInnerTwinSync
      _dco_decode_box_autoadd_custom_nested_error_inner_twin_sync(dynamic raw) {
    return _dco_decode_custom_nested_error_inner_twin_sync(raw);
  }

  CustomNestedErrorInnerTwinSyncSse
      _dco_decode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
          dynamic raw) {
    return _dco_decode_custom_nested_error_inner_twin_sync_sse(raw);
  }

  ElementTwinNormal _dco_decode_box_autoadd_element_twin_normal(dynamic raw) {
    return _dco_decode_element_twin_normal(raw);
  }

  ElementTwinRustAsync _dco_decode_box_autoadd_element_twin_rust_async(
      dynamic raw) {
    return _dco_decode_element_twin_rust_async(raw);
  }

  ElementTwinRustAsyncSse _dco_decode_box_autoadd_element_twin_rust_async_sse(
      dynamic raw) {
    return _dco_decode_element_twin_rust_async_sse(raw);
  }

  ElementTwinSse _dco_decode_box_autoadd_element_twin_sse(dynamic raw) {
    return _dco_decode_element_twin_sse(raw);
  }

  ElementTwinSync _dco_decode_box_autoadd_element_twin_sync(dynamic raw) {
    return _dco_decode_element_twin_sync(raw);
  }

  ElementTwinSyncSse _dco_decode_box_autoadd_element_twin_sync_sse(
      dynamic raw) {
    return _dco_decode_element_twin_sync_sse(raw);
  }

  ExoticOptionalsTwinNormal
      _dco_decode_box_autoadd_exotic_optionals_twin_normal(dynamic raw) {
    return _dco_decode_exotic_optionals_twin_normal(raw);
  }

  ExoticOptionalsTwinRustAsync
      _dco_decode_box_autoadd_exotic_optionals_twin_rust_async(dynamic raw) {
    return _dco_decode_exotic_optionals_twin_rust_async(raw);
  }

  ExoticOptionalsTwinRustAsyncSse
      _dco_decode_box_autoadd_exotic_optionals_twin_rust_async_sse(
          dynamic raw) {
    return _dco_decode_exotic_optionals_twin_rust_async_sse(raw);
  }

  ExoticOptionalsTwinSse _dco_decode_box_autoadd_exotic_optionals_twin_sse(
      dynamic raw) {
    return _dco_decode_exotic_optionals_twin_sse(raw);
  }

  ExoticOptionalsTwinSync _dco_decode_box_autoadd_exotic_optionals_twin_sync(
      dynamic raw) {
    return _dco_decode_exotic_optionals_twin_sync(raw);
  }

  ExoticOptionalsTwinSyncSse
      _dco_decode_box_autoadd_exotic_optionals_twin_sync_sse(dynamic raw) {
    return _dco_decode_exotic_optionals_twin_sync_sse(raw);
  }

  double _dco_decode_box_autoadd_f_32(dynamic raw) {
    return raw as double;
  }

  double _dco_decode_box_autoadd_f_64(dynamic raw) {
    return raw as double;
  }

  int _dco_decode_box_autoadd_i_16(dynamic raw) {
    return raw as int;
  }

  int _dco_decode_box_autoadd_i_32(dynamic raw) {
    return raw as int;
  }

  int _dco_decode_box_autoadd_i_64(dynamic raw) {
    return _dco_decode_i_64(raw);
  }

  int _dco_decode_box_autoadd_i_8(dynamic raw) {
    return raw as int;
  }

  ListOfNestedRawStringMirrored
      _dco_decode_box_autoadd_list_of_nested_raw_string_mirrored(dynamic raw) {
    return _dco_decode_list_of_nested_raw_string_mirrored(raw);
  }

  MeasureTwinNormal _dco_decode_box_autoadd_measure_twin_normal(dynamic raw) {
    return _dco_decode_measure_twin_normal(raw);
  }

  MeasureTwinRustAsync _dco_decode_box_autoadd_measure_twin_rust_async(
      dynamic raw) {
    return _dco_decode_measure_twin_rust_async(raw);
  }

  MeasureTwinRustAsyncSse _dco_decode_box_autoadd_measure_twin_rust_async_sse(
      dynamic raw) {
    return _dco_decode_measure_twin_rust_async_sse(raw);
  }

  MeasureTwinSse _dco_decode_box_autoadd_measure_twin_sse(dynamic raw) {
    return _dco_decode_measure_twin_sse(raw);
  }

  MeasureTwinSync _dco_decode_box_autoadd_measure_twin_sync(dynamic raw) {
    return _dco_decode_measure_twin_sync(raw);
  }

  MeasureTwinSyncSse _dco_decode_box_autoadd_measure_twin_sync_sse(
      dynamic raw) {
    return _dco_decode_measure_twin_sync_sse(raw);
  }

  NestedRawStringMirrored _dco_decode_box_autoadd_nested_raw_string_mirrored(
      dynamic raw) {
    return _dco_decode_nested_raw_string_mirrored(raw);
  }

  NewTypeIntTwinNormal _dco_decode_box_autoadd_new_type_int_twin_normal(
      dynamic raw) {
    return _dco_decode_new_type_int_twin_normal(raw);
  }

  NewTypeIntTwinRustAsync _dco_decode_box_autoadd_new_type_int_twin_rust_async(
      dynamic raw) {
    return _dco_decode_new_type_int_twin_rust_async(raw);
  }

  NewTypeIntTwinRustAsyncSse
      _dco_decode_box_autoadd_new_type_int_twin_rust_async_sse(dynamic raw) {
    return _dco_decode_new_type_int_twin_rust_async_sse(raw);
  }

  NewTypeIntTwinSse _dco_decode_box_autoadd_new_type_int_twin_sse(dynamic raw) {
    return _dco_decode_new_type_int_twin_sse(raw);
  }

  NewTypeIntTwinSync _dco_decode_box_autoadd_new_type_int_twin_sync(
      dynamic raw) {
    return _dco_decode_new_type_int_twin_sync(raw);
  }

  NewTypeIntTwinSyncSse _dco_decode_box_autoadd_new_type_int_twin_sync_sse(
      dynamic raw) {
    return _dco_decode_new_type_int_twin_sync_sse(raw);
  }

  RawStringMirrored _dco_decode_box_autoadd_raw_string_mirrored(dynamic raw) {
    return _dco_decode_raw_string_mirrored(raw);
  }

  int _dco_decode_box_autoadd_u_16(dynamic raw) {
    return raw as int;
  }

  int _dco_decode_box_autoadd_u_32(dynamic raw) {
    return raw as int;
  }

  int _dco_decode_box_autoadd_u_64(dynamic raw) {
    return _dco_decode_u_64(raw);
  }

  int _dco_decode_box_autoadd_u_8(dynamic raw) {
    return raw as int;
  }

  WeekdaysTwinNormal _dco_decode_box_autoadd_weekdays_twin_normal(dynamic raw) {
    return _dco_decode_weekdays_twin_normal(raw);
  }

  WeekdaysTwinRustAsync _dco_decode_box_autoadd_weekdays_twin_rust_async(
      dynamic raw) {
    return _dco_decode_weekdays_twin_rust_async(raw);
  }

  WeekdaysTwinRustAsyncSse _dco_decode_box_autoadd_weekdays_twin_rust_async_sse(
      dynamic raw) {
    return _dco_decode_weekdays_twin_rust_async_sse(raw);
  }

  WeekdaysTwinSse _dco_decode_box_autoadd_weekdays_twin_sse(dynamic raw) {
    return _dco_decode_weekdays_twin_sse(raw);
  }

  WeekdaysTwinSync _dco_decode_box_autoadd_weekdays_twin_sync(dynamic raw) {
    return _dco_decode_weekdays_twin_sync(raw);
  }

  WeekdaysTwinSyncSse _dco_decode_box_autoadd_weekdays_twin_sync_sse(
      dynamic raw) {
    return _dco_decode_weekdays_twin_sync_sse(raw);
  }

  DistanceTwinNormal _dco_decode_box_distance_twin_normal(dynamic raw) {
    return _dco_decode_distance_twin_normal(raw);
  }

  DistanceTwinRustAsync _dco_decode_box_distance_twin_rust_async(dynamic raw) {
    return _dco_decode_distance_twin_rust_async(raw);
  }

  DistanceTwinRustAsyncSse _dco_decode_box_distance_twin_rust_async_sse(
      dynamic raw) {
    return _dco_decode_distance_twin_rust_async_sse(raw);
  }

  DistanceTwinSse _dco_decode_box_distance_twin_sse(dynamic raw) {
    return _dco_decode_distance_twin_sse(raw);
  }

  DistanceTwinSync _dco_decode_box_distance_twin_sync(dynamic raw) {
    return _dco_decode_distance_twin_sync(raw);
  }

  DistanceTwinSyncSse _dco_decode_box_distance_twin_sync_sse(dynamic raw) {
    return _dco_decode_distance_twin_sync_sse(raw);
  }

  FeedIdTwinNormal _dco_decode_box_feed_id_twin_normal(dynamic raw) {
    return _dco_decode_feed_id_twin_normal(raw);
  }

  FeedIdTwinRustAsync _dco_decode_box_feed_id_twin_rust_async(dynamic raw) {
    return _dco_decode_feed_id_twin_rust_async(raw);
  }

  FeedIdTwinRustAsyncSse _dco_decode_box_feed_id_twin_rust_async_sse(
      dynamic raw) {
    return _dco_decode_feed_id_twin_rust_async_sse(raw);
  }

  FeedIdTwinSse _dco_decode_box_feed_id_twin_sse(dynamic raw) {
    return _dco_decode_feed_id_twin_sse(raw);
  }

  FeedIdTwinSync _dco_decode_box_feed_id_twin_sync(dynamic raw) {
    return _dco_decode_feed_id_twin_sync(raw);
  }

  FeedIdTwinSyncSse _dco_decode_box_feed_id_twin_sync_sse(dynamic raw) {
    return _dco_decode_feed_id_twin_sync_sse(raw);
  }

  KitchenSinkTwinNormal _dco_decode_box_kitchen_sink_twin_normal(dynamic raw) {
    return _dco_decode_kitchen_sink_twin_normal(raw);
  }

  KitchenSinkTwinRustAsync _dco_decode_box_kitchen_sink_twin_rust_async(
      dynamic raw) {
    return _dco_decode_kitchen_sink_twin_rust_async(raw);
  }

  KitchenSinkTwinRustAsyncSse _dco_decode_box_kitchen_sink_twin_rust_async_sse(
      dynamic raw) {
    return _dco_decode_kitchen_sink_twin_rust_async_sse(raw);
  }

  KitchenSinkTwinSse _dco_decode_box_kitchen_sink_twin_sse(dynamic raw) {
    return _dco_decode_kitchen_sink_twin_sse(raw);
  }

  KitchenSinkTwinSync _dco_decode_box_kitchen_sink_twin_sync(dynamic raw) {
    return _dco_decode_kitchen_sink_twin_sync(raw);
  }

  KitchenSinkTwinSyncSse _dco_decode_box_kitchen_sink_twin_sync_sse(
      dynamic raw) {
    return _dco_decode_kitchen_sink_twin_sync_sse(raw);
  }

  SpeedTwinNormal _dco_decode_box_speed_twin_normal(dynamic raw) {
    return _dco_decode_speed_twin_normal(raw);
  }

  SpeedTwinRustAsync _dco_decode_box_speed_twin_rust_async(dynamic raw) {
    return _dco_decode_speed_twin_rust_async(raw);
  }

  SpeedTwinRustAsyncSse _dco_decode_box_speed_twin_rust_async_sse(dynamic raw) {
    return _dco_decode_speed_twin_rust_async_sse(raw);
  }

  SpeedTwinSse _dco_decode_box_speed_twin_sse(dynamic raw) {
    return _dco_decode_speed_twin_sse(raw);
  }

  SpeedTwinSync _dco_decode_box_speed_twin_sync(dynamic raw) {
    return _dco_decode_speed_twin_sync(raw);
  }

  SpeedTwinSyncSse _dco_decode_box_speed_twin_sync_sse(dynamic raw) {
    return _dco_decode_speed_twin_sync_sse(raw);
  }

  U8Array8 _dco_decode_box_u_8_array_8(dynamic raw) {
    return _dco_decode_u_8_array_8(raw);
  }

  CTwinNormal _dco_decode_c_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinNormal(
      c: _dco_decode_bool(arr[0]),
    );
  }

  CTwinRustAsync _dco_decode_c_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinRustAsync(
      c: _dco_decode_bool(arr[0]),
    );
  }

  CTwinRustAsyncSse _dco_decode_c_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinRustAsyncSse(
      c: _dco_decode_bool(arr[0]),
    );
  }

  CTwinSse _dco_decode_c_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinSse(
      c: _dco_decode_bool(arr[0]),
    );
  }

  CTwinSync _dco_decode_c_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinSync(
      c: _dco_decode_bool(arr[0]),
    );
  }

  CTwinSyncSse _dco_decode_c_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinSyncSse(
      c: _dco_decode_bool(arr[0]),
    );
  }

  ConcatenateWithTwinNormal _dco_decode_concatenate_with_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinNormal(
      a: _dco_decode_String(arr[0]),
    );
  }

  ConcatenateWithTwinRustAsync _dco_decode_concatenate_with_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinRustAsync(
      a: _dco_decode_String(arr[0]),
    );
  }

  ConcatenateWithTwinRustAsyncSse
      _dco_decode_concatenate_with_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinRustAsyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  ConcatenateWithTwinSse _dco_decode_concatenate_with_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  ConcatenateWithTwinSync _dco_decode_concatenate_with_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinSync(
      a: _dco_decode_String(arr[0]),
    );
  }

  ConcatenateWithTwinSyncSse _dco_decode_concatenate_with_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinSyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  ContainsMirroredSubStructTwinNormal
      _dco_decode_contains_mirrored_sub_struct_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinNormal(
      test: _dco_decode_raw_string_mirrored(arr[0]),
      test2: _dco_decode_another_twin_normal(arr[1]),
    );
  }

  ContainsMirroredSubStructTwinRustAsync
      _dco_decode_contains_mirrored_sub_struct_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinRustAsync(
      test: _dco_decode_raw_string_mirrored(arr[0]),
      test2: _dco_decode_another_twin_rust_async(arr[1]),
    );
  }

  ContainsMirroredSubStructTwinRustAsyncSse
      _dco_decode_contains_mirrored_sub_struct_twin_rust_async_sse(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinRustAsyncSse(
      test: _dco_decode_raw_string_mirrored(arr[0]),
      test2: _dco_decode_another_twin_rust_async_sse(arr[1]),
    );
  }

  ContainsMirroredSubStructTwinSse
      _dco_decode_contains_mirrored_sub_struct_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinSse(
      test: _dco_decode_raw_string_mirrored(arr[0]),
      test2: _dco_decode_another_twin_sse(arr[1]),
    );
  }

  ContainsMirroredSubStructTwinSync
      _dco_decode_contains_mirrored_sub_struct_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinSync(
      test: _dco_decode_raw_string_mirrored(arr[0]),
      test2: _dco_decode_another_twin_sync(arr[1]),
    );
  }

  ContainsMirroredSubStructTwinSyncSse
      _dco_decode_contains_mirrored_sub_struct_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinSyncSse(
      test: _dco_decode_raw_string_mirrored(arr[0]),
      test2: _dco_decode_another_twin_sync_sse(arr[1]),
    );
  }

  CustomEnumErrorTwinNormal _dco_decode_custom_enum_error_twin_normal(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinNormal_One(
          message: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinNormal_Two(
          message: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomEnumErrorTwinRustAsync _dco_decode_custom_enum_error_twin_rust_async(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinRustAsync_One(
          message: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinRustAsync_Two(
          message: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomEnumErrorTwinRustAsyncSse
      _dco_decode_custom_enum_error_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinRustAsyncSse_One(
          message: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinRustAsyncSse_Two(
          message: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomEnumErrorTwinSse _dco_decode_custom_enum_error_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinSse_One(
          message: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinSse_Two(
          message: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomEnumErrorTwinSync _dco_decode_custom_enum_error_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinSync_One(
          message: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinSync_Two(
          message: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomEnumErrorTwinSyncSse _dco_decode_custom_enum_error_twin_sync_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinSyncSse_One(
          message: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinSyncSse_Two(
          message: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomErrorTwinNormal _dco_decode_custom_error_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinNormal_Error0(
          e: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinNormal_Error1(
          e: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomErrorTwinRustAsync _dco_decode_custom_error_twin_rust_async(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinRustAsync_Error0(
          e: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinRustAsync_Error1(
          e: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomErrorTwinRustAsyncSse _dco_decode_custom_error_twin_rust_async_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinRustAsyncSse_Error0(
          e: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinRustAsyncSse_Error1(
          e: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomErrorTwinSse _dco_decode_custom_error_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinSse_Error0(
          e: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinSse_Error1(
          e: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomErrorTwinSync _dco_decode_custom_error_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinSync_Error0(
          e: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinSync_Error1(
          e: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomErrorTwinSyncSse _dco_decode_custom_error_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinSyncSse_Error0(
          e: _dco_decode_String(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinSyncSse_Error1(
          e: _dco_decode_u_32(raw[1]),
          backtrace: _dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError1TwinNormal _dco_decode_custom_nested_error_1_twin_normal(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinNormal_CustomNested1(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinNormal_ErrorNested(
          _dco_decode_box_autoadd_custom_nested_error_2_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError1TwinRustAsync
      _dco_decode_custom_nested_error_1_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinRustAsync_CustomNested1(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinRustAsync_ErrorNested(
          _dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError1TwinRustAsyncSse
      _dco_decode_custom_nested_error_1_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinRustAsyncSse_CustomNested1(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinRustAsyncSse_ErrorNested(
          _dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async_sse(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError1TwinSse _dco_decode_custom_nested_error_1_twin_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinSse_CustomNested1(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinSse_ErrorNested(
          _dco_decode_box_autoadd_custom_nested_error_2_twin_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError1TwinSync _dco_decode_custom_nested_error_1_twin_sync(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinSync_CustomNested1(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinSync_ErrorNested(
          _dco_decode_box_autoadd_custom_nested_error_2_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError1TwinSyncSse _dco_decode_custom_nested_error_1_twin_sync_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinSyncSse_CustomNested1(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinSyncSse_ErrorNested(
          _dco_decode_box_autoadd_custom_nested_error_2_twin_sync_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError2TwinNormal _dco_decode_custom_nested_error_2_twin_normal(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinNormal_CustomNested2(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinNormal_CustomNested2Number(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError2TwinRustAsync
      _dco_decode_custom_nested_error_2_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinRustAsync_CustomNested2(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinRustAsync_CustomNested2Number(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError2TwinRustAsyncSse
      _dco_decode_custom_nested_error_2_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinRustAsyncSse_CustomNested2(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinRustAsyncSse_CustomNested2Number(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError2TwinSse _dco_decode_custom_nested_error_2_twin_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinSse_CustomNested2(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinSse_CustomNested2Number(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError2TwinSync _dco_decode_custom_nested_error_2_twin_sync(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinSync_CustomNested2(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinSync_CustomNested2Number(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError2TwinSyncSse _dco_decode_custom_nested_error_2_twin_sync_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinSyncSse_CustomNested2(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinSyncSse_CustomNested2Number(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorInnerTwinNormal
      _dco_decode_custom_nested_error_inner_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinNormal_Three(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinNormal_Four(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorInnerTwinRustAsync
      _dco_decode_custom_nested_error_inner_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinRustAsync_Three(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinRustAsync_Four(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorInnerTwinRustAsyncSse
      _dco_decode_custom_nested_error_inner_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinRustAsyncSse_Three(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinRustAsyncSse_Four(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorInnerTwinSse _dco_decode_custom_nested_error_inner_twin_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinSse_Three(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinSse_Four(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorInnerTwinSync
      _dco_decode_custom_nested_error_inner_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinSync_Three(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinSync_Four(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorInnerTwinSyncSse
      _dco_decode_custom_nested_error_inner_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinSyncSse_Three(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinSyncSse_Four(
          _dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorOuterTwinNormal
      _dco_decode_custom_nested_error_outer_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinNormal_One(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinNormal_Two(
          _dco_decode_box_autoadd_custom_nested_error_inner_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorOuterTwinRustAsync
      _dco_decode_custom_nested_error_outer_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinRustAsync_One(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinRustAsync_Two(
          _dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorOuterTwinRustAsyncSse
      _dco_decode_custom_nested_error_outer_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinRustAsyncSse_One(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinRustAsyncSse_Two(
          _dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorOuterTwinSse _dco_decode_custom_nested_error_outer_twin_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinSse_One(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinSse_Two(
          _dco_decode_box_autoadd_custom_nested_error_inner_twin_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorOuterTwinSync
      _dco_decode_custom_nested_error_outer_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinSync_One(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinSync_Two(
          _dco_decode_box_autoadd_custom_nested_error_inner_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedErrorOuterTwinSyncSse
      _dco_decode_custom_nested_error_outer_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinSyncSse_One(
          _dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinSyncSse_Two(
          _dco_decode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomStructErrorAnotherTwinNormal
      _dco_decode_custom_struct_error_another_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinNormal(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorAnotherTwinRustAsync
      _dco_decode_custom_struct_error_another_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinRustAsync(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorAnotherTwinRustAsyncSse
      _dco_decode_custom_struct_error_another_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinRustAsyncSse(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorAnotherTwinSse
      _dco_decode_custom_struct_error_another_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinSse(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorAnotherTwinSync
      _dco_decode_custom_struct_error_another_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinSync(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorAnotherTwinSyncSse
      _dco_decode_custom_struct_error_another_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinSyncSse(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorTwinNormal _dco_decode_custom_struct_error_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinNormal(
      a: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorTwinRustAsync
      _dco_decode_custom_struct_error_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinRustAsync(
      a: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorTwinRustAsyncSse
      _dco_decode_custom_struct_error_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinRustAsyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorTwinSse _dco_decode_custom_struct_error_twin_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorTwinSync _dco_decode_custom_struct_error_twin_sync(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinSync(
      a: _dco_decode_String(arr[0]),
    );
  }

  CustomStructErrorTwinSyncSse _dco_decode_custom_struct_error_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinSyncSse(
      a: _dco_decode_String(arr[0]),
    );
  }

  CustomStructTwinNormal _dco_decode_custom_struct_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinNormal(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructTwinRustAsync _dco_decode_custom_struct_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinRustAsync(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructTwinRustAsyncSse _dco_decode_custom_struct_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinRustAsyncSse(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructTwinSse _dco_decode_custom_struct_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinSse(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructTwinSync _dco_decode_custom_struct_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinSync(
      message: _dco_decode_String(arr[0]),
    );
  }

  CustomStructTwinSyncSse _dco_decode_custom_struct_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinSyncSse(
      message: _dco_decode_String(arr[0]),
    );
  }

  DartOpaqueNestedTwinNormal _dco_decode_dart_opaque_nested_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinNormal(
      first: _dco_decode_DartOpaque(arr[0]),
      second: _dco_decode_DartOpaque(arr[1]),
    );
  }

  DartOpaqueNestedTwinRustAsync _dco_decode_dart_opaque_nested_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinRustAsync(
      first: _dco_decode_DartOpaque(arr[0]),
      second: _dco_decode_DartOpaque(arr[1]),
    );
  }

  DartOpaqueNestedTwinRustAsyncSse
      _dco_decode_dart_opaque_nested_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinRustAsyncSse(
      first: _dco_decode_DartOpaque(arr[0]),
      second: _dco_decode_DartOpaque(arr[1]),
    );
  }

  DartOpaqueNestedTwinSse _dco_decode_dart_opaque_nested_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinSse(
      first: _dco_decode_DartOpaque(arr[0]),
      second: _dco_decode_DartOpaque(arr[1]),
    );
  }

  DartOpaqueNestedTwinSync _dco_decode_dart_opaque_nested_twin_sync(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinSync(
      first: _dco_decode_DartOpaque(arr[0]),
      second: _dco_decode_DartOpaque(arr[1]),
    );
  }

  DartOpaqueNestedTwinSyncSse _dco_decode_dart_opaque_nested_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinSyncSse(
      first: _dco_decode_DartOpaque(arr[0]),
      second: _dco_decode_DartOpaque(arr[1]),
    );
  }

  dynamic _dco_decode_dartabi(dynamic raw) {
    return raw;
  }

  DistanceTwinNormal _dco_decode_distance_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DistanceTwinNormal_Unknown();
      case 1:
        return DistanceTwinNormal_Map(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DistanceTwinRustAsync _dco_decode_distance_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DistanceTwinRustAsync_Unknown();
      case 1:
        return DistanceTwinRustAsync_Map(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DistanceTwinRustAsyncSse _dco_decode_distance_twin_rust_async_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DistanceTwinRustAsyncSse_Unknown();
      case 1:
        return DistanceTwinRustAsyncSse_Map(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DistanceTwinSse _dco_decode_distance_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DistanceTwinSse_Unknown();
      case 1:
        return DistanceTwinSse_Map(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DistanceTwinSync _dco_decode_distance_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DistanceTwinSync_Unknown();
      case 1:
        return DistanceTwinSync_Map(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DistanceTwinSyncSse _dco_decode_distance_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DistanceTwinSyncSse_Unknown();
      case 1:
        return DistanceTwinSyncSse_Map(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ElementTwinNormal _dco_decode_element_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinNormal(
      tag: _dco_decode_opt_String(arr[0]),
      text: _dco_decode_opt_String(arr[1]),
      attributes: _dco_decode_opt_list_attribute_twin_normal(arr[2]),
      children: _dco_decode_opt_list_element_twin_normal(arr[3]),
    );
  }

  ElementTwinRustAsync _dco_decode_element_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinRustAsync(
      tag: _dco_decode_opt_String(arr[0]),
      text: _dco_decode_opt_String(arr[1]),
      attributes: _dco_decode_opt_list_attribute_twin_rust_async(arr[2]),
      children: _dco_decode_opt_list_element_twin_rust_async(arr[3]),
    );
  }

  ElementTwinRustAsyncSse _dco_decode_element_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinRustAsyncSse(
      tag: _dco_decode_opt_String(arr[0]),
      text: _dco_decode_opt_String(arr[1]),
      attributes: _dco_decode_opt_list_attribute_twin_rust_async_sse(arr[2]),
      children: _dco_decode_opt_list_element_twin_rust_async_sse(arr[3]),
    );
  }

  ElementTwinSse _dco_decode_element_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinSse(
      tag: _dco_decode_opt_String(arr[0]),
      text: _dco_decode_opt_String(arr[1]),
      attributes: _dco_decode_opt_list_attribute_twin_sse(arr[2]),
      children: _dco_decode_opt_list_element_twin_sse(arr[3]),
    );
  }

  ElementTwinSync _dco_decode_element_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinSync(
      tag: _dco_decode_opt_String(arr[0]),
      text: _dco_decode_opt_String(arr[1]),
      attributes: _dco_decode_opt_list_attribute_twin_sync(arr[2]),
      children: _dco_decode_opt_list_element_twin_sync(arr[3]),
    );
  }

  ElementTwinSyncSse _dco_decode_element_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinSyncSse(
      tag: _dco_decode_opt_String(arr[0]),
      text: _dco_decode_opt_String(arr[1]),
      attributes: _dco_decode_opt_list_attribute_twin_sync_sse(arr[2]),
      children: _dco_decode_opt_list_element_twin_sync_sse(arr[3]),
    );
  }

  EmptyTwinNormal _dco_decode_empty_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinNormal();
  }

  EmptyTwinRustAsync _dco_decode_empty_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinRustAsync();
  }

  EmptyTwinRustAsyncSse _dco_decode_empty_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinRustAsyncSse();
  }

  EmptyTwinSse _dco_decode_empty_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinSse();
  }

  EmptyTwinSync _dco_decode_empty_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinSync();
  }

  EmptyTwinSyncSse _dco_decode_empty_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinSyncSse();
  }

  EnumDartOpaqueTwinNormal _dco_decode_enum_dart_opaque_twin_normal(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinNormal_Primitive(
          _dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinNormal_Opaque(
          _dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumDartOpaqueTwinRustAsync _dco_decode_enum_dart_opaque_twin_rust_async(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinRustAsync_Primitive(
          _dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinRustAsync_Opaque(
          _dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumDartOpaqueTwinRustAsyncSse
      _dco_decode_enum_dart_opaque_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinRustAsyncSse_Primitive(
          _dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinRustAsyncSse_Opaque(
          _dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumDartOpaqueTwinSse _dco_decode_enum_dart_opaque_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinSse_Primitive(
          _dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinSse_Opaque(
          _dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumDartOpaqueTwinSync _dco_decode_enum_dart_opaque_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinSync_Primitive(
          _dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinSync_Opaque(
          _dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumDartOpaqueTwinSyncSse _dco_decode_enum_dart_opaque_twin_sync_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinSyncSse_Primitive(
          _dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinSyncSse_Opaque(
          _dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaqueTwinNormal _dco_decode_enum_opaque_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinNormal_Struct(
          _dco_decode_RustOpaque_hide_data(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinNormal_Primitive(
          _dco_decode_RustOpaque_i_32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinNormal_TraitObj(
          _dco_decode_RustOpaque_box_dynDartDebugTwinNormal(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinNormal_Mutex(
          _dco_decode_RustOpaque_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinNormal_RwLock(
          _dco_decode_RustOpaque_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaqueTwinNormalArray5 _dco_decode_enum_opaque_twin_normal_array_5(
      dynamic raw) {
    return EnumOpaqueTwinNormalArray5((raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_normal)
        .toList());
  }

  EnumOpaqueTwinRustAsync _dco_decode_enum_opaque_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinRustAsync_Struct(
          _dco_decode_RustOpaque_hide_data(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinRustAsync_Primitive(
          _dco_decode_RustOpaque_i_32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinRustAsync_TraitObj(
          _dco_decode_RustOpaque_box_dynDartDebugTwinRustAsync(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinRustAsync_Mutex(
          _dco_decode_RustOpaque_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinRustAsync_RwLock(
          _dco_decode_RustOpaque_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaqueTwinRustAsyncArray5 _dco_decode_enum_opaque_twin_rust_async_array_5(
      dynamic raw) {
    return EnumOpaqueTwinRustAsyncArray5((raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_rust_async)
        .toList());
  }

  EnumOpaqueTwinRustAsyncSse _dco_decode_enum_opaque_twin_rust_async_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinRustAsyncSse_Struct(
          _dco_decode_RustOpaque_hide_data(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinRustAsyncSse_Primitive(
          _dco_decode_RustOpaque_i_32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinRustAsyncSse_TraitObj(
          _dco_decode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinRustAsyncSse_Mutex(
          _dco_decode_RustOpaque_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinRustAsyncSse_RwLock(
          _dco_decode_RustOpaque_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaqueTwinRustAsyncSseArray5
      _dco_decode_enum_opaque_twin_rust_async_sse_array_5(dynamic raw) {
    return EnumOpaqueTwinRustAsyncSseArray5((raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_rust_async_sse)
        .toList());
  }

  EnumOpaqueTwinSse _dco_decode_enum_opaque_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinSse_Struct(
          _dco_decode_RustOpaque_hide_data(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinSse_Primitive(
          _dco_decode_RustOpaque_i_32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinSse_TraitObj(
          _dco_decode_RustOpaque_box_dynDartDebugTwinSse(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinSse_Mutex(
          _dco_decode_RustOpaque_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinSse_RwLock(
          _dco_decode_RustOpaque_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaqueTwinSseArray5 _dco_decode_enum_opaque_twin_sse_array_5(
      dynamic raw) {
    return EnumOpaqueTwinSseArray5(
        (raw as List<dynamic>).map(_dco_decode_enum_opaque_twin_sse).toList());
  }

  EnumOpaqueTwinSync _dco_decode_enum_opaque_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinSync_Struct(
          _dco_decode_RustOpaque_hide_data(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinSync_Primitive(
          _dco_decode_RustOpaque_i_32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinSync_TraitObj(
          _dco_decode_RustOpaque_box_dynDartDebugTwinSync(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinSync_Mutex(
          _dco_decode_RustOpaque_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinSync_RwLock(
          _dco_decode_RustOpaque_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaqueTwinSyncArray5 _dco_decode_enum_opaque_twin_sync_array_5(
      dynamic raw) {
    return EnumOpaqueTwinSyncArray5(
        (raw as List<dynamic>).map(_dco_decode_enum_opaque_twin_sync).toList());
  }

  EnumOpaqueTwinSyncSse _dco_decode_enum_opaque_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinSyncSse_Struct(
          _dco_decode_RustOpaque_hide_data(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinSyncSse_Primitive(
          _dco_decode_RustOpaque_i_32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinSyncSse_TraitObj(
          _dco_decode_RustOpaque_box_dynDartDebugTwinSyncSse(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinSyncSse_Mutex(
          _dco_decode_RustOpaque_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinSyncSse_RwLock(
          _dco_decode_RustOpaque_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaqueTwinSyncSseArray5 _dco_decode_enum_opaque_twin_sync_sse_array_5(
      dynamic raw) {
    return EnumOpaqueTwinSyncSseArray5((raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_sync_sse)
        .toList());
  }

  EnumSimpleTwinNormal _dco_decode_enum_simple_twin_normal(dynamic raw) {
    return EnumSimpleTwinNormal.values[raw as int];
  }

  EnumSimpleTwinRustAsync _dco_decode_enum_simple_twin_rust_async(dynamic raw) {
    return EnumSimpleTwinRustAsync.values[raw as int];
  }

  EnumSimpleTwinRustAsyncSse _dco_decode_enum_simple_twin_rust_async_sse(
      dynamic raw) {
    return EnumSimpleTwinRustAsyncSse.values[raw as int];
  }

  EnumSimpleTwinSse _dco_decode_enum_simple_twin_sse(dynamic raw) {
    return EnumSimpleTwinSse.values[raw as int];
  }

  EnumSimpleTwinSync _dco_decode_enum_simple_twin_sync(dynamic raw) {
    return EnumSimpleTwinSync.values[raw as int];
  }

  EnumSimpleTwinSyncSse _dco_decode_enum_simple_twin_sync_sse(dynamic raw) {
    return EnumSimpleTwinSyncSse.values[raw as int];
  }

  EnumWithItemMixedTwinNormal _dco_decode_enum_with_item_mixed_twin_normal(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinNormal_A();
      case 1:
        return EnumWithItemMixedTwinNormal_B(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinNormal_C(
          cField: _dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemMixedTwinRustAsync
      _dco_decode_enum_with_item_mixed_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinRustAsync_A();
      case 1:
        return EnumWithItemMixedTwinRustAsync_B(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinRustAsync_C(
          cField: _dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemMixedTwinRustAsyncSse
      _dco_decode_enum_with_item_mixed_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinRustAsyncSse_A();
      case 1:
        return EnumWithItemMixedTwinRustAsyncSse_B(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinRustAsyncSse_C(
          cField: _dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemMixedTwinSse _dco_decode_enum_with_item_mixed_twin_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinSse_A();
      case 1:
        return EnumWithItemMixedTwinSse_B(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinSse_C(
          cField: _dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemMixedTwinSync _dco_decode_enum_with_item_mixed_twin_sync(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinSync_A();
      case 1:
        return EnumWithItemMixedTwinSync_B(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinSync_C(
          cField: _dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemMixedTwinSyncSse _dco_decode_enum_with_item_mixed_twin_sync_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinSyncSse_A();
      case 1:
        return EnumWithItemMixedTwinSyncSse_B(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinSyncSse_C(
          cField: _dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemStructTwinNormal _dco_decode_enum_with_item_struct_twin_normal(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinNormal_A(
          aField: _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinNormal_B(
          bField: _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemStructTwinRustAsync
      _dco_decode_enum_with_item_struct_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinRustAsync_A(
          aField: _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinRustAsync_B(
          bField: _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemStructTwinRustAsyncSse
      _dco_decode_enum_with_item_struct_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinRustAsyncSse_A(
          aField: _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinRustAsyncSse_B(
          bField: _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemStructTwinSse _dco_decode_enum_with_item_struct_twin_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinSse_A(
          aField: _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinSse_B(
          bField: _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemStructTwinSync _dco_decode_enum_with_item_struct_twin_sync(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinSync_A(
          aField: _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinSync_B(
          bField: _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemStructTwinSyncSse _dco_decode_enum_with_item_struct_twin_sync_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinSyncSse_A(
          aField: _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinSyncSse_B(
          bField: _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemTupleTwinNormal _dco_decode_enum_with_item_tuple_twin_normal(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinNormal_A(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinNormal_B(
          _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemTupleTwinRustAsync
      _dco_decode_enum_with_item_tuple_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinRustAsync_A(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinRustAsync_B(
          _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemTupleTwinRustAsyncSse
      _dco_decode_enum_with_item_tuple_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinRustAsyncSse_A(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinRustAsyncSse_B(
          _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemTupleTwinSse _dco_decode_enum_with_item_tuple_twin_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinSse_A(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinSse_B(
          _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemTupleTwinSync _dco_decode_enum_with_item_tuple_twin_sync(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinSync_A(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinSync_B(
          _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumWithItemTupleTwinSyncSse _dco_decode_enum_with_item_tuple_twin_sync_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinSyncSse_A(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinSyncSse_B(
          _dco_decode_list_prim_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EventTwinNormal _dco_decode_event_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinNormal(
      address: _dco_decode_String(arr[0]),
      payload: _dco_decode_String(arr[1]),
    );
  }

  EventTwinRustAsync _dco_decode_event_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinRustAsync(
      address: _dco_decode_String(arr[0]),
      payload: _dco_decode_String(arr[1]),
    );
  }

  EventTwinRustAsyncSse _dco_decode_event_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinRustAsyncSse(
      address: _dco_decode_String(arr[0]),
      payload: _dco_decode_String(arr[1]),
    );
  }

  EventTwinSse _dco_decode_event_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinSse(
      address: _dco_decode_String(arr[0]),
      payload: _dco_decode_String(arr[1]),
    );
  }

  ExoticOptionalsTwinNormal _dco_decode_exotic_optionals_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinNormal(
      int32: _dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: _dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: _dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: _dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: _dco_decode_opt_list_prim_u_8(arr[4]),
      int8List: _dco_decode_opt_list_prim_i_8(arr[5]),
      uint8List: _dco_decode_opt_list_prim_u_8(arr[6]),
      int32List: _dco_decode_opt_list_prim_i_32(arr[7]),
      float32List: _dco_decode_opt_list_prim_f_32(arr[8]),
      float64List: _dco_decode_opt_list_prim_f_64(arr[9]),
      attributes: _dco_decode_opt_list_attribute_twin_normal(arr[10]),
      attributesNullable:
          _dco_decode_list_opt_box_autoadd_attribute_twin_normal(arr[11]),
      nullableAttributes:
          _dco_decode_opt_list_opt_box_autoadd_attribute_twin_normal(arr[12]),
      newtypeint: _dco_decode_opt_box_autoadd_new_type_int_twin_normal(arr[13]),
    );
  }

  ExoticOptionalsTwinRustAsync _dco_decode_exotic_optionals_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinRustAsync(
      int32: _dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: _dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: _dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: _dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: _dco_decode_opt_list_prim_u_8(arr[4]),
      int8List: _dco_decode_opt_list_prim_i_8(arr[5]),
      uint8List: _dco_decode_opt_list_prim_u_8(arr[6]),
      int32List: _dco_decode_opt_list_prim_i_32(arr[7]),
      float32List: _dco_decode_opt_list_prim_f_32(arr[8]),
      float64List: _dco_decode_opt_list_prim_f_64(arr[9]),
      attributes: _dco_decode_opt_list_attribute_twin_rust_async(arr[10]),
      attributesNullable:
          _dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(arr[11]),
      nullableAttributes:
          _dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
              arr[12]),
      newtypeint:
          _dco_decode_opt_box_autoadd_new_type_int_twin_rust_async(arr[13]),
    );
  }

  ExoticOptionalsTwinRustAsyncSse
      _dco_decode_exotic_optionals_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinRustAsyncSse(
      int32: _dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: _dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: _dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: _dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: _dco_decode_opt_list_prim_u_8(arr[4]),
      int8List: _dco_decode_opt_list_prim_i_8(arr[5]),
      uint8List: _dco_decode_opt_list_prim_u_8(arr[6]),
      int32List: _dco_decode_opt_list_prim_i_32(arr[7]),
      float32List: _dco_decode_opt_list_prim_f_32(arr[8]),
      float64List: _dco_decode_opt_list_prim_f_64(arr[9]),
      attributes: _dco_decode_opt_list_attribute_twin_rust_async_sse(arr[10]),
      attributesNullable:
          _dco_decode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
              arr[11]),
      nullableAttributes:
          _dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
              arr[12]),
      newtypeint:
          _dco_decode_opt_box_autoadd_new_type_int_twin_rust_async_sse(arr[13]),
    );
  }

  ExoticOptionalsTwinSse _dco_decode_exotic_optionals_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinSse(
      int32: _dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: _dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: _dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: _dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: _dco_decode_opt_list_prim_u_8(arr[4]),
      int8List: _dco_decode_opt_list_prim_i_8(arr[5]),
      uint8List: _dco_decode_opt_list_prim_u_8(arr[6]),
      int32List: _dco_decode_opt_list_prim_i_32(arr[7]),
      float32List: _dco_decode_opt_list_prim_f_32(arr[8]),
      float64List: _dco_decode_opt_list_prim_f_64(arr[9]),
      attributes: _dco_decode_opt_list_attribute_twin_sse(arr[10]),
      attributesNullable:
          _dco_decode_list_opt_box_autoadd_attribute_twin_sse(arr[11]),
      nullableAttributes:
          _dco_decode_opt_list_opt_box_autoadd_attribute_twin_sse(arr[12]),
      newtypeint: _dco_decode_opt_box_autoadd_new_type_int_twin_sse(arr[13]),
    );
  }

  ExoticOptionalsTwinSync _dco_decode_exotic_optionals_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinSync(
      int32: _dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: _dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: _dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: _dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: _dco_decode_opt_list_prim_u_8(arr[4]),
      int8List: _dco_decode_opt_list_prim_i_8(arr[5]),
      uint8List: _dco_decode_opt_list_prim_u_8(arr[6]),
      int32List: _dco_decode_opt_list_prim_i_32(arr[7]),
      float32List: _dco_decode_opt_list_prim_f_32(arr[8]),
      float64List: _dco_decode_opt_list_prim_f_64(arr[9]),
      attributes: _dco_decode_opt_list_attribute_twin_sync(arr[10]),
      attributesNullable:
          _dco_decode_list_opt_box_autoadd_attribute_twin_sync(arr[11]),
      nullableAttributes:
          _dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync(arr[12]),
      newtypeint: _dco_decode_opt_box_autoadd_new_type_int_twin_sync(arr[13]),
    );
  }

  ExoticOptionalsTwinSyncSse _dco_decode_exotic_optionals_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinSyncSse(
      int32: _dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: _dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: _dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: _dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: _dco_decode_opt_list_prim_u_8(arr[4]),
      int8List: _dco_decode_opt_list_prim_i_8(arr[5]),
      uint8List: _dco_decode_opt_list_prim_u_8(arr[6]),
      int32List: _dco_decode_opt_list_prim_i_32(arr[7]),
      float32List: _dco_decode_opt_list_prim_f_32(arr[8]),
      float64List: _dco_decode_opt_list_prim_f_64(arr[9]),
      attributes: _dco_decode_opt_list_attribute_twin_sync_sse(arr[10]),
      attributesNullable:
          _dco_decode_list_opt_box_autoadd_attribute_twin_sync_sse(arr[11]),
      nullableAttributes:
          _dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(arr[12]),
      newtypeint:
          _dco_decode_opt_box_autoadd_new_type_int_twin_sync_sse(arr[13]),
    );
  }

  double _dco_decode_f_32(dynamic raw) {
    return raw as double;
  }

  double _dco_decode_f_64(dynamic raw) {
    return raw as double;
  }

  FeatureUuidTwinNormal _dco_decode_feature_uuid_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinNormal(
      one: _dco_decode_Uuid(arr[0]),
    );
  }

  FeatureUuidTwinRustAsync _dco_decode_feature_uuid_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinRustAsync(
      one: _dco_decode_Uuid(arr[0]),
    );
  }

  FeatureUuidTwinSync _dco_decode_feature_uuid_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinSync(
      one: _dco_decode_Uuid(arr[0]),
    );
  }

  FeedIdTwinNormal _dco_decode_feed_id_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinNormal(
      field0: _dco_decode_u_8_array_8(arr[0]),
    );
  }

  FeedIdTwinRustAsync _dco_decode_feed_id_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinRustAsync(
      field0: _dco_decode_u_8_array_8(arr[0]),
    );
  }

  FeedIdTwinRustAsyncSse _dco_decode_feed_id_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinRustAsyncSse(
      field0: _dco_decode_u_8_array_8(arr[0]),
    );
  }

  FeedIdTwinSse _dco_decode_feed_id_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinSse(
      field0: _dco_decode_u_8_array_8(arr[0]),
    );
  }

  FeedIdTwinSync _dco_decode_feed_id_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinSync(
      field0: _dco_decode_u_8_array_8(arr[0]),
    );
  }

  FeedIdTwinSyncSse _dco_decode_feed_id_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinSyncSse(
      field0: _dco_decode_u_8_array_8(arr[0]),
    );
  }

  int _dco_decode_i_16(dynamic raw) {
    return raw as int;
  }

  int _dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  I32Array2 _dco_decode_i_32_array_2(dynamic raw) {
    return I32Array2(_dco_decode_list_prim_i_32(raw));
  }

  int _dco_decode_i_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  int _dco_decode_i_8(dynamic raw) {
    return raw as int;
  }

  KitchenSinkTwinNormal _dco_decode_kitchen_sink_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinNormal_Empty();
      case 1:
        return KitchenSinkTwinNormal_Primitives(
          int32: _dco_decode_i_32(raw[1]),
          float64: _dco_decode_f_64(raw[2]),
          boolean: _dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinNormal_Nested(
          _dco_decode_i_32(raw[1]),
          _dco_decode_box_kitchen_sink_twin_normal(raw[2]),
        );
      case 3:
        return KitchenSinkTwinNormal_Optional(
          _dco_decode_opt_box_autoadd_i_32(raw[1]),
          _dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinNormal_Buffer(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 5:
        return KitchenSinkTwinNormal_Enums(
          _dco_decode_weekdays_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  KitchenSinkTwinRustAsync _dco_decode_kitchen_sink_twin_rust_async(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinRustAsync_Empty();
      case 1:
        return KitchenSinkTwinRustAsync_Primitives(
          int32: _dco_decode_i_32(raw[1]),
          float64: _dco_decode_f_64(raw[2]),
          boolean: _dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinRustAsync_Nested(
          _dco_decode_i_32(raw[1]),
          _dco_decode_box_kitchen_sink_twin_rust_async(raw[2]),
        );
      case 3:
        return KitchenSinkTwinRustAsync_Optional(
          _dco_decode_opt_box_autoadd_i_32(raw[1]),
          _dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinRustAsync_Buffer(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 5:
        return KitchenSinkTwinRustAsync_Enums(
          _dco_decode_weekdays_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  KitchenSinkTwinRustAsyncSse _dco_decode_kitchen_sink_twin_rust_async_sse(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinRustAsyncSse_Empty();
      case 1:
        return KitchenSinkTwinRustAsyncSse_Primitives(
          int32: _dco_decode_i_32(raw[1]),
          float64: _dco_decode_f_64(raw[2]),
          boolean: _dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinRustAsyncSse_Nested(
          _dco_decode_i_32(raw[1]),
          _dco_decode_box_kitchen_sink_twin_rust_async_sse(raw[2]),
        );
      case 3:
        return KitchenSinkTwinRustAsyncSse_Optional(
          _dco_decode_opt_box_autoadd_i_32(raw[1]),
          _dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinRustAsyncSse_Buffer(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 5:
        return KitchenSinkTwinRustAsyncSse_Enums(
          _dco_decode_weekdays_twin_rust_async_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  KitchenSinkTwinSse _dco_decode_kitchen_sink_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinSse_Empty();
      case 1:
        return KitchenSinkTwinSse_Primitives(
          int32: _dco_decode_i_32(raw[1]),
          float64: _dco_decode_f_64(raw[2]),
          boolean: _dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinSse_Nested(
          _dco_decode_i_32(raw[1]),
          _dco_decode_box_kitchen_sink_twin_sse(raw[2]),
        );
      case 3:
        return KitchenSinkTwinSse_Optional(
          _dco_decode_opt_box_autoadd_i_32(raw[1]),
          _dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinSse_Buffer(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 5:
        return KitchenSinkTwinSse_Enums(
          _dco_decode_weekdays_twin_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  KitchenSinkTwinSync _dco_decode_kitchen_sink_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinSync_Empty();
      case 1:
        return KitchenSinkTwinSync_Primitives(
          int32: _dco_decode_i_32(raw[1]),
          float64: _dco_decode_f_64(raw[2]),
          boolean: _dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinSync_Nested(
          _dco_decode_i_32(raw[1]),
          _dco_decode_box_kitchen_sink_twin_sync(raw[2]),
        );
      case 3:
        return KitchenSinkTwinSync_Optional(
          _dco_decode_opt_box_autoadd_i_32(raw[1]),
          _dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinSync_Buffer(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 5:
        return KitchenSinkTwinSync_Enums(
          _dco_decode_weekdays_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  KitchenSinkTwinSyncSse _dco_decode_kitchen_sink_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinSyncSse_Empty();
      case 1:
        return KitchenSinkTwinSyncSse_Primitives(
          int32: _dco_decode_i_32(raw[1]),
          float64: _dco_decode_f_64(raw[2]),
          boolean: _dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinSyncSse_Nested(
          _dco_decode_i_32(raw[1]),
          _dco_decode_box_kitchen_sink_twin_sync_sse(raw[2]),
        );
      case 3:
        return KitchenSinkTwinSyncSse_Optional(
          _dco_decode_opt_box_autoadd_i_32(raw[1]),
          _dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinSyncSse_Buffer(
          _dco_decode_list_prim_u_8(raw[1]),
        );
      case 5:
        return KitchenSinkTwinSyncSse_Enums(
          _dco_decode_weekdays_twin_sync_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  List<Duration> _dco_decode_list_Chrono_Duration(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_Chrono_Duration).toList();
  }

  List<DateTime> _dco_decode_list_Chrono_Local(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_Chrono_Local).toList();
  }

  List<Object> _dco_decode_list_DartOpaque(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_DartOpaque).toList();
  }

  List<HideData> _dco_decode_list_RustOpaque_hide_data(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_RustOpaque_hide_data)
        .toList();
  }

  List<String> _dco_decode_list_String(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_String).toList();
  }

  List<ApplicationEnvVar> _dco_decode_list_application_env_var(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_application_env_var).toList();
  }

  List<ApplicationSettings> _dco_decode_list_application_settings(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_application_settings)
        .toList();
  }

  List<AttributeTwinNormal> _dco_decode_list_attribute_twin_normal(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_attribute_twin_normal)
        .toList();
  }

  List<AttributeTwinRustAsync> _dco_decode_list_attribute_twin_rust_async(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_attribute_twin_rust_async)
        .toList();
  }

  List<AttributeTwinRustAsyncSse>
      _dco_decode_list_attribute_twin_rust_async_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_attribute_twin_rust_async_sse)
        .toList();
  }

  List<AttributeTwinSse> _dco_decode_list_attribute_twin_sse(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_attribute_twin_sse).toList();
  }

  List<AttributeTwinSync> _dco_decode_list_attribute_twin_sync(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_attribute_twin_sync).toList();
  }

  List<AttributeTwinSyncSse> _dco_decode_list_attribute_twin_sync_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_attribute_twin_sync_sse)
        .toList();
  }

  List<bool> _dco_decode_list_bool(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_bool).toList();
  }

  List<ElementTwinNormal> _dco_decode_list_element_twin_normal(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_element_twin_normal).toList();
  }

  List<ElementTwinRustAsync> _dco_decode_list_element_twin_rust_async(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_element_twin_rust_async)
        .toList();
  }

  List<ElementTwinRustAsyncSse> _dco_decode_list_element_twin_rust_async_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_element_twin_rust_async_sse)
        .toList();
  }

  List<ElementTwinSse> _dco_decode_list_element_twin_sse(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_element_twin_sse).toList();
  }

  List<ElementTwinSync> _dco_decode_list_element_twin_sync(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_element_twin_sync).toList();
  }

  List<ElementTwinSyncSse> _dco_decode_list_element_twin_sync_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_element_twin_sync_sse)
        .toList();
  }

  List<EnumOpaqueTwinNormal> _dco_decode_list_enum_opaque_twin_normal(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_normal)
        .toList();
  }

  List<EnumOpaqueTwinRustAsync> _dco_decode_list_enum_opaque_twin_rust_async(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_rust_async)
        .toList();
  }

  List<EnumOpaqueTwinRustAsyncSse>
      _dco_decode_list_enum_opaque_twin_rust_async_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_rust_async_sse)
        .toList();
  }

  List<EnumOpaqueTwinSse> _dco_decode_list_enum_opaque_twin_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_sse)
        .toList();
  }

  List<EnumOpaqueTwinSync> _dco_decode_list_enum_opaque_twin_sync(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_sync)
        .toList();
  }

  List<EnumOpaqueTwinSyncSse> _dco_decode_list_enum_opaque_twin_sync_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_enum_opaque_twin_sync_sse)
        .toList();
  }

  List<MyEnum> _dco_decode_list_my_enum(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_my_enum).toList();
  }

  List<MySize> _dco_decode_list_my_size(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_my_size).toList();
  }

  List<MyTreeNodeTwinNormal> _dco_decode_list_my_tree_node_twin_normal(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_my_tree_node_twin_normal)
        .toList();
  }

  List<MyTreeNodeTwinRustAsync> _dco_decode_list_my_tree_node_twin_rust_async(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_my_tree_node_twin_rust_async)
        .toList();
  }

  List<MyTreeNodeTwinRustAsyncSse>
      _dco_decode_list_my_tree_node_twin_rust_async_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_my_tree_node_twin_rust_async_sse)
        .toList();
  }

  List<MyTreeNodeTwinSse> _dco_decode_list_my_tree_node_twin_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_my_tree_node_twin_sse)
        .toList();
  }

  List<MyTreeNodeTwinSync> _dco_decode_list_my_tree_node_twin_sync(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_my_tree_node_twin_sync)
        .toList();
  }

  List<MyTreeNodeTwinSyncSse> _dco_decode_list_my_tree_node_twin_sync_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_my_tree_node_twin_sync_sse)
        .toList();
  }

  List<NestedRawStringMirrored> _dco_decode_list_nested_raw_string_mirrored(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_nested_raw_string_mirrored)
        .toList();
  }

  ListOfNestedRawStringMirrored _dco_decode_list_of_nested_raw_string_mirrored(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListOfNestedRawStringMirrored(
      raw: _dco_decode_list_nested_raw_string_mirrored(arr[0]),
    );
  }

  List<String?> _dco_decode_list_opt_String(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_opt_String).toList();
  }

  List<AttributeTwinNormal?>
      _dco_decode_list_opt_box_autoadd_attribute_twin_normal(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_attribute_twin_normal)
        .toList();
  }

  List<AttributeTwinRustAsync?>
      _dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_attribute_twin_rust_async)
        .toList();
  }

  List<AttributeTwinRustAsyncSse?>
      _dco_decode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_attribute_twin_rust_async_sse)
        .toList();
  }

  List<AttributeTwinSse?> _dco_decode_list_opt_box_autoadd_attribute_twin_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_attribute_twin_sse)
        .toList();
  }

  List<AttributeTwinSync?> _dco_decode_list_opt_box_autoadd_attribute_twin_sync(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_attribute_twin_sync)
        .toList();
  }

  List<AttributeTwinSyncSse?>
      _dco_decode_list_opt_box_autoadd_attribute_twin_sync_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_attribute_twin_sync_sse)
        .toList();
  }

  List<int?> _dco_decode_list_opt_box_autoadd_i_32(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_i_32)
        .toList();
  }

  List<WeekdaysTwinNormal?>
      _dco_decode_list_opt_box_autoadd_weekdays_twin_normal(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_weekdays_twin_normal)
        .toList();
  }

  List<WeekdaysTwinRustAsync?>
      _dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_weekdays_twin_rust_async)
        .toList();
  }

  List<WeekdaysTwinRustAsyncSse?>
      _dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(
          dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_weekdays_twin_rust_async_sse)
        .toList();
  }

  List<WeekdaysTwinSse?> _dco_decode_list_opt_box_autoadd_weekdays_twin_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_weekdays_twin_sse)
        .toList();
  }

  List<WeekdaysTwinSync?> _dco_decode_list_opt_box_autoadd_weekdays_twin_sync(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_weekdays_twin_sync)
        .toList();
  }

  List<WeekdaysTwinSyncSse?>
      _dco_decode_list_opt_box_autoadd_weekdays_twin_sync_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_opt_box_autoadd_weekdays_twin_sync_sse)
        .toList();
  }

  List<Int32List?> _dco_decode_list_opt_list_prim_i_32(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_opt_list_prim_i_32).toList();
  }

  List<PointTwinNormal> _dco_decode_list_point_twin_normal(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_point_twin_normal).toList();
  }

  List<PointTwinRustAsync> _dco_decode_list_point_twin_rust_async(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_point_twin_rust_async)
        .toList();
  }

  List<PointTwinRustAsyncSse> _dco_decode_list_point_twin_rust_async_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_point_twin_rust_async_sse)
        .toList();
  }

  List<PointTwinSse> _dco_decode_list_point_twin_sse(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_point_twin_sse).toList();
  }

  List<PointTwinSync> _dco_decode_list_point_twin_sync(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_point_twin_sync).toList();
  }

  List<PointTwinSyncSse> _dco_decode_list_point_twin_sync_sse(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_point_twin_sync_sse).toList();
  }

  Float32List _dco_decode_list_prim_f_32(dynamic raw) {
    return raw as Float32List;
  }

  Float64List _dco_decode_list_prim_f_64(dynamic raw) {
    return raw as Float64List;
  }

  Int16List _dco_decode_list_prim_i_16(dynamic raw) {
    return raw as Int16List;
  }

  Int32List _dco_decode_list_prim_i_32(dynamic raw) {
    return raw as Int32List;
  }

  Int64List _dco_decode_list_prim_i_64(dynamic raw) {
    return Int64List.from(raw);
  }

  Int8List _dco_decode_list_prim_i_8(dynamic raw) {
    return raw as Int8List;
  }

  Uint16List _dco_decode_list_prim_u_16(dynamic raw) {
    return raw as Uint16List;
  }

  Uint32List _dco_decode_list_prim_u_32(dynamic raw) {
    return raw as Uint32List;
  }

  Uint64List _dco_decode_list_prim_u_64(dynamic raw) {
    return Uint64List.from(raw);
  }

  Uint8List _dco_decode_list_prim_u_8(dynamic raw) {
    return raw as Uint8List;
  }

  List<RawStringEnumMirrored> _dco_decode_list_raw_string_enum_mirrored(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_raw_string_enum_mirrored)
        .toList();
  }

  List<RawStringMirrored> _dco_decode_list_raw_string_mirrored(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_raw_string_mirrored).toList();
  }

  List<SumWithTwinNormal> _dco_decode_list_sum_with_twin_normal(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_sum_with_twin_normal)
        .toList();
  }

  List<SumWithTwinRustAsync> _dco_decode_list_sum_with_twin_rust_async(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_sum_with_twin_rust_async)
        .toList();
  }

  List<SumWithTwinRustAsyncSse> _dco_decode_list_sum_with_twin_rust_async_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_sum_with_twin_rust_async_sse)
        .toList();
  }

  List<SumWithTwinSse> _dco_decode_list_sum_with_twin_sse(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_sum_with_twin_sse).toList();
  }

  List<SumWithTwinSync> _dco_decode_list_sum_with_twin_sync(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_sum_with_twin_sync).toList();
  }

  List<SumWithTwinSyncSse> _dco_decode_list_sum_with_twin_sync_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_sum_with_twin_sync_sse)
        .toList();
  }

  List<TestIdTwinNormal> _dco_decode_list_test_id_twin_normal(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_test_id_twin_normal).toList();
  }

  List<TestIdTwinRustAsync> _dco_decode_list_test_id_twin_rust_async(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_test_id_twin_rust_async)
        .toList();
  }

  List<TestIdTwinRustAsyncSse> _dco_decode_list_test_id_twin_rust_async_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_test_id_twin_rust_async_sse)
        .toList();
  }

  List<TestIdTwinSse> _dco_decode_list_test_id_twin_sse(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_test_id_twin_sse).toList();
  }

  List<TestIdTwinSync> _dco_decode_list_test_id_twin_sync(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_test_id_twin_sync).toList();
  }

  List<TestIdTwinSyncSse> _dco_decode_list_test_id_twin_sync_sse(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_test_id_twin_sync_sse)
        .toList();
  }

  List<WeekdaysTwinNormal> _dco_decode_list_weekdays_twin_normal(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_weekdays_twin_normal)
        .toList();
  }

  List<WeekdaysTwinRustAsync> _dco_decode_list_weekdays_twin_rust_async(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_weekdays_twin_rust_async)
        .toList();
  }

  List<WeekdaysTwinRustAsyncSse> _dco_decode_list_weekdays_twin_rust_async_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_weekdays_twin_rust_async_sse)
        .toList();
  }

  List<WeekdaysTwinSse> _dco_decode_list_weekdays_twin_sse(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_weekdays_twin_sse).toList();
  }

  List<WeekdaysTwinSync> _dco_decode_list_weekdays_twin_sync(dynamic raw) {
    return (raw as List<dynamic>).map(_dco_decode_weekdays_twin_sync).toList();
  }

  List<WeekdaysTwinSyncSse> _dco_decode_list_weekdays_twin_sync_sse(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_dco_decode_weekdays_twin_sync_sse)
        .toList();
  }

  Log2TwinNormal _dco_decode_log_2_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinNormal(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  Log2TwinRustAsync _dco_decode_log_2_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinRustAsync(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  Log2TwinRustAsyncSse _dco_decode_log_2_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinRustAsyncSse(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  Log2TwinSse _dco_decode_log_2_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinSse(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  Log2TwinSync _dco_decode_log_2_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinSync(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  Log2TwinSyncSse _dco_decode_log_2_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinSyncSse(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_String(arr[1]),
    );
  }

  LogTwinNormal _dco_decode_log_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinNormal(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_u_32(arr[1]),
    );
  }

  LogTwinRustAsync _dco_decode_log_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinRustAsync(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_u_32(arr[1]),
    );
  }

  LogTwinRustAsyncSse _dco_decode_log_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinRustAsyncSse(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_u_32(arr[1]),
    );
  }

  LogTwinSse _dco_decode_log_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinSse(
      key: _dco_decode_u_32(arr[0]),
      value: _dco_decode_u_32(arr[1]),
    );
  }

  MacroStruct _dco_decode_macro_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MacroStruct(
      data: _dco_decode_i_32(arr[0]),
    );
  }

  MeasureTwinNormal _dco_decode_measure_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MeasureTwinNormal_Speed(
          _dco_decode_box_speed_twin_normal(raw[1]),
        );
      case 1:
        return MeasureTwinNormal_Distance(
          _dco_decode_box_distance_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MeasureTwinRustAsync _dco_decode_measure_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MeasureTwinRustAsync_Speed(
          _dco_decode_box_speed_twin_rust_async(raw[1]),
        );
      case 1:
        return MeasureTwinRustAsync_Distance(
          _dco_decode_box_distance_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MeasureTwinRustAsyncSse _dco_decode_measure_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MeasureTwinRustAsyncSse_Speed(
          _dco_decode_box_speed_twin_rust_async_sse(raw[1]),
        );
      case 1:
        return MeasureTwinRustAsyncSse_Distance(
          _dco_decode_box_distance_twin_rust_async_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MeasureTwinSse _dco_decode_measure_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MeasureTwinSse_Speed(
          _dco_decode_box_speed_twin_sse(raw[1]),
        );
      case 1:
        return MeasureTwinSse_Distance(
          _dco_decode_box_distance_twin_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MeasureTwinSync _dco_decode_measure_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MeasureTwinSync_Speed(
          _dco_decode_box_speed_twin_sync(raw[1]),
        );
      case 1:
        return MeasureTwinSync_Distance(
          _dco_decode_box_distance_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MeasureTwinSyncSse _dco_decode_measure_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MeasureTwinSyncSse_Speed(
          _dco_decode_box_speed_twin_sync_sse(raw[1]),
        );
      case 1:
        return MeasureTwinSyncSse_Distance(
          _dco_decode_box_distance_twin_sync_sse(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MessageIdTwinNormal _dco_decode_message_id_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinNormal(
      field0: _dco_decode_u_8_array_32(arr[0]),
    );
  }

  MessageIdTwinRustAsync _dco_decode_message_id_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinRustAsync(
      field0: _dco_decode_u_8_array_32(arr[0]),
    );
  }

  MessageIdTwinRustAsyncSse _dco_decode_message_id_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinRustAsyncSse(
      field0: _dco_decode_u_8_array_32(arr[0]),
    );
  }

  MessageIdTwinSse _dco_decode_message_id_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinSse(
      field0: _dco_decode_u_8_array_32(arr[0]),
    );
  }

  MessageIdTwinSync _dco_decode_message_id_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinSync(
      field0: _dco_decode_u_8_array_32(arr[0]),
    );
  }

  MessageIdTwinSyncSse _dco_decode_message_id_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinSyncSse(
      field0: _dco_decode_u_8_array_32(arr[0]),
    );
  }

  MirrorStructTwinNormal _dco_decode_mirror_struct_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinNormal(
      a: _dco_decode_application_settings(arr[0]),
      b: _dco_decode_my_struct(arr[1]),
      c: _dco_decode_list_my_enum(arr[2]),
      d: _dco_decode_list_application_settings(arr[3]),
    );
  }

  MirrorStructTwinRustAsync _dco_decode_mirror_struct_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinRustAsync(
      a: _dco_decode_application_settings(arr[0]),
      b: _dco_decode_my_struct(arr[1]),
      c: _dco_decode_list_my_enum(arr[2]),
      d: _dco_decode_list_application_settings(arr[3]),
    );
  }

  MirrorStructTwinRustAsyncSse _dco_decode_mirror_struct_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinRustAsyncSse(
      a: _dco_decode_application_settings(arr[0]),
      b: _dco_decode_my_struct(arr[1]),
      c: _dco_decode_list_my_enum(arr[2]),
      d: _dco_decode_list_application_settings(arr[3]),
    );
  }

  MirrorStructTwinSse _dco_decode_mirror_struct_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinSse(
      a: _dco_decode_application_settings(arr[0]),
      b: _dco_decode_my_struct(arr[1]),
      c: _dco_decode_list_my_enum(arr[2]),
      d: _dco_decode_list_application_settings(arr[3]),
    );
  }

  MirrorStructTwinSync _dco_decode_mirror_struct_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinSync(
      a: _dco_decode_application_settings(arr[0]),
      b: _dco_decode_my_struct(arr[1]),
      c: _dco_decode_list_my_enum(arr[2]),
      d: _dco_decode_list_application_settings(arr[3]),
    );
  }

  MirrorStructTwinSyncSse _dco_decode_mirror_struct_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinSyncSse(
      a: _dco_decode_application_settings(arr[0]),
      b: _dco_decode_my_struct(arr[1]),
      c: _dco_decode_list_my_enum(arr[2]),
      d: _dco_decode_list_application_settings(arr[3]),
    );
  }

  MoreThanJustOneRawStringStructTwinNormal
      _dco_decode_more_than_just_one_raw_string_struct_twin_normal(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinNormal(
      regular: _dco_decode_String(arr[0]),
      type: _dco_decode_String(arr[1]),
      async: _dco_decode_bool(arr[2]),
      another: _dco_decode_String(arr[3]),
    );
  }

  MoreThanJustOneRawStringStructTwinRustAsync
      _dco_decode_more_than_just_one_raw_string_struct_twin_rust_async(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinRustAsync(
      regular: _dco_decode_String(arr[0]),
      type: _dco_decode_String(arr[1]),
      async: _dco_decode_bool(arr[2]),
      another: _dco_decode_String(arr[3]),
    );
  }

  MoreThanJustOneRawStringStructTwinRustAsyncSse
      _dco_decode_more_than_just_one_raw_string_struct_twin_rust_async_sse(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinRustAsyncSse(
      regular: _dco_decode_String(arr[0]),
      type: _dco_decode_String(arr[1]),
      async: _dco_decode_bool(arr[2]),
      another: _dco_decode_String(arr[3]),
    );
  }

  MoreThanJustOneRawStringStructTwinSse
      _dco_decode_more_than_just_one_raw_string_struct_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinSse(
      regular: _dco_decode_String(arr[0]),
      type: _dco_decode_String(arr[1]),
      async: _dco_decode_bool(arr[2]),
      another: _dco_decode_String(arr[3]),
    );
  }

  MoreThanJustOneRawStringStructTwinSync
      _dco_decode_more_than_just_one_raw_string_struct_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinSync(
      regular: _dco_decode_String(arr[0]),
      type: _dco_decode_String(arr[1]),
      async: _dco_decode_bool(arr[2]),
      another: _dco_decode_String(arr[3]),
    );
  }

  MoreThanJustOneRawStringStructTwinSyncSse
      _dco_decode_more_than_just_one_raw_string_struct_twin_sync_sse(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinSyncSse(
      regular: _dco_decode_String(arr[0]),
      type: _dco_decode_String(arr[1]),
      async: _dco_decode_bool(arr[2]),
      another: _dco_decode_String(arr[3]),
    );
  }

  MyEnum _dco_decode_my_enum(dynamic raw) {
    return MyEnum.values[raw as int];
  }

  MyNestedStructTwinNormal _dco_decode_my_nested_struct_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinNormal(
      treeNode: _dco_decode_my_tree_node_twin_normal(arr[0]),
      weekday: _dco_decode_weekdays_twin_normal(arr[1]),
    );
  }

  MyNestedStructTwinRustAsync _dco_decode_my_nested_struct_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinRustAsync(
      treeNode: _dco_decode_my_tree_node_twin_rust_async(arr[0]),
      weekday: _dco_decode_weekdays_twin_rust_async(arr[1]),
    );
  }

  MyNestedStructTwinRustAsyncSse
      _dco_decode_my_nested_struct_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinRustAsyncSse(
      treeNode: _dco_decode_my_tree_node_twin_rust_async_sse(arr[0]),
      weekday: _dco_decode_weekdays_twin_rust_async_sse(arr[1]),
    );
  }

  MyNestedStructTwinSse _dco_decode_my_nested_struct_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinSse(
      treeNode: _dco_decode_my_tree_node_twin_sse(arr[0]),
      weekday: _dco_decode_weekdays_twin_sse(arr[1]),
    );
  }

  MyNestedStructTwinSync _dco_decode_my_nested_struct_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinSync(
      treeNode: _dco_decode_my_tree_node_twin_sync(arr[0]),
      weekday: _dco_decode_weekdays_twin_sync(arr[1]),
    );
  }

  MyNestedStructTwinSyncSse _dco_decode_my_nested_struct_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinSyncSse(
      treeNode: _dco_decode_my_tree_node_twin_sync_sse(arr[0]),
      weekday: _dco_decode_weekdays_twin_sync_sse(arr[1]),
    );
  }

  MySize _dco_decode_my_size(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MySize(
      width: _dco_decode_i_32(arr[0]),
      height: _dco_decode_i_32(arr[1]),
    );
  }

  MyStreamEntryTwinNormal _dco_decode_my_stream_entry_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinNormal(
      hello: _dco_decode_String(arr[0]),
    );
  }

  MyStreamEntryTwinRustAsync _dco_decode_my_stream_entry_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinRustAsync(
      hello: _dco_decode_String(arr[0]),
    );
  }

  MyStreamEntryTwinRustAsyncSse _dco_decode_my_stream_entry_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinRustAsyncSse(
      hello: _dco_decode_String(arr[0]),
    );
  }

  MyStreamEntryTwinSse _dco_decode_my_stream_entry_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinSse(
      hello: _dco_decode_String(arr[0]),
    );
  }

  MyStruct _dco_decode_my_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStruct(
      content: _dco_decode_bool(arr[0]),
    );
  }

  MyTreeNodeTwinNormal _dco_decode_my_tree_node_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinNormal(
      valueI32: _dco_decode_i_32(arr[0]),
      valueVecU8: _dco_decode_list_prim_u_8(arr[1]),
      valueBoolean: _dco_decode_bool(arr[2]),
      children: _dco_decode_list_my_tree_node_twin_normal(arr[3]),
    );
  }

  MyTreeNodeTwinRustAsync _dco_decode_my_tree_node_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinRustAsync(
      valueI32: _dco_decode_i_32(arr[0]),
      valueVecU8: _dco_decode_list_prim_u_8(arr[1]),
      valueBoolean: _dco_decode_bool(arr[2]),
      children: _dco_decode_list_my_tree_node_twin_rust_async(arr[3]),
    );
  }

  MyTreeNodeTwinRustAsyncSse _dco_decode_my_tree_node_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinRustAsyncSse(
      valueI32: _dco_decode_i_32(arr[0]),
      valueVecU8: _dco_decode_list_prim_u_8(arr[1]),
      valueBoolean: _dco_decode_bool(arr[2]),
      children: _dco_decode_list_my_tree_node_twin_rust_async_sse(arr[3]),
    );
  }

  MyTreeNodeTwinSse _dco_decode_my_tree_node_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinSse(
      valueI32: _dco_decode_i_32(arr[0]),
      valueVecU8: _dco_decode_list_prim_u_8(arr[1]),
      valueBoolean: _dco_decode_bool(arr[2]),
      children: _dco_decode_list_my_tree_node_twin_sse(arr[3]),
    );
  }

  MyTreeNodeTwinSync _dco_decode_my_tree_node_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinSync(
      valueI32: _dco_decode_i_32(arr[0]),
      valueVecU8: _dco_decode_list_prim_u_8(arr[1]),
      valueBoolean: _dco_decode_bool(arr[2]),
      children: _dco_decode_list_my_tree_node_twin_sync(arr[3]),
    );
  }

  MyTreeNodeTwinSyncSse _dco_decode_my_tree_node_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinSyncSse(
      valueI32: _dco_decode_i_32(arr[0]),
      valueVecU8: _dco_decode_list_prim_u_8(arr[1]),
      valueBoolean: _dco_decode_bool(arr[2]),
      children: _dco_decode_list_my_tree_node_twin_sync_sse(arr[3]),
    );
  }

  NestedRawStringMirrored _dco_decode_nested_raw_string_mirrored(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NestedRawStringMirrored(
      raw: _dco_decode_raw_string_mirrored(arr[0]),
    );
  }

  NewSimpleStruct _dco_decode_new_simple_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewSimpleStruct(
      field: _dco_decode_i_32(arr[0]),
    );
  }

  NewTypeIntTwinNormal _dco_decode_new_type_int_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinNormal(
      field0: _dco_decode_i_64(arr[0]),
    );
  }

  NewTypeIntTwinRustAsync _dco_decode_new_type_int_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinRustAsync(
      field0: _dco_decode_i_64(arr[0]),
    );
  }

  NewTypeIntTwinRustAsyncSse _dco_decode_new_type_int_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinRustAsyncSse(
      field0: _dco_decode_i_64(arr[0]),
    );
  }

  NewTypeIntTwinSse _dco_decode_new_type_int_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinSse(
      field0: _dco_decode_i_64(arr[0]),
    );
  }

  NewTypeIntTwinSync _dco_decode_new_type_int_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinSync(
      field0: _dco_decode_i_64(arr[0]),
    );
  }

  NewTypeIntTwinSyncSse _dco_decode_new_type_int_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinSyncSse(
      field0: _dco_decode_i_64(arr[0]),
    );
  }

  Numbers _dco_decode_numbers(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Numbers(
      field0: _dco_decode_list_prim_i_32(arr[0]),
    );
  }

  OldSimpleStruct _dco_decode_old_simple_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OldSimpleStruct(
      field: _dco_decode_i_32(arr[0]),
    );
  }

  OpaqueNestedTwinNormal _dco_decode_opaque_nested_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinNormal(
      first: _dco_decode_RustOpaque_hide_data(arr[0]),
      second: _dco_decode_RustOpaque_hide_data(arr[1]),
    );
  }

  OpaqueNestedTwinRustAsync _dco_decode_opaque_nested_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinRustAsync(
      first: _dco_decode_RustOpaque_hide_data(arr[0]),
      second: _dco_decode_RustOpaque_hide_data(arr[1]),
    );
  }

  OpaqueNestedTwinRustAsyncSse _dco_decode_opaque_nested_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinRustAsyncSse(
      first: _dco_decode_RustOpaque_hide_data(arr[0]),
      second: _dco_decode_RustOpaque_hide_data(arr[1]),
    );
  }

  OpaqueNestedTwinSse _dco_decode_opaque_nested_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinSse(
      first: _dco_decode_RustOpaque_hide_data(arr[0]),
      second: _dco_decode_RustOpaque_hide_data(arr[1]),
    );
  }

  OpaqueNestedTwinSync _dco_decode_opaque_nested_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinSync(
      first: _dco_decode_RustOpaque_hide_data(arr[0]),
      second: _dco_decode_RustOpaque_hide_data(arr[1]),
    );
  }

  OpaqueNestedTwinSyncSse _dco_decode_opaque_nested_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinSyncSse(
      first: _dco_decode_RustOpaque_hide_data(arr[0]),
      second: _dco_decode_RustOpaque_hide_data(arr[1]),
    );
  }

  String? _dco_decode_opt_String(dynamic raw) {
    return raw == null ? null : _dco_decode_String(raw);
  }

  Duration? _dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_Chrono_Duration(raw);
  }

  DateTime? _dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_Chrono_Naive(raw);
  }

  DateTime? _dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  Object? _dco_decode_opt_box_autoadd_DartOpaque(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_DartOpaque(raw);
  }

  HideData? _dco_decode_opt_box_autoadd_RustOpaque_hide_data(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_RustOpaque_hide_data(raw);
  }

  ApplicationEnv? _dco_decode_opt_box_autoadd_application_env(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_application_env(raw);
  }

  AttributeTwinNormal? _dco_decode_opt_box_autoadd_attribute_twin_normal(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_attribute_twin_normal(raw);
  }

  AttributeTwinRustAsync? _dco_decode_opt_box_autoadd_attribute_twin_rust_async(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_attribute_twin_rust_async(raw);
  }

  AttributeTwinRustAsyncSse?
      _dco_decode_opt_box_autoadd_attribute_twin_rust_async_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_attribute_twin_rust_async_sse(raw);
  }

  AttributeTwinSse? _dco_decode_opt_box_autoadd_attribute_twin_sse(
      dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_attribute_twin_sse(raw);
  }

  AttributeTwinSync? _dco_decode_opt_box_autoadd_attribute_twin_sync(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_attribute_twin_sync(raw);
  }

  AttributeTwinSyncSse? _dco_decode_opt_box_autoadd_attribute_twin_sync_sse(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_attribute_twin_sync_sse(raw);
  }

  bool? _dco_decode_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_bool(raw);
  }

  ElementTwinNormal? _dco_decode_opt_box_autoadd_element_twin_normal(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_element_twin_normal(raw);
  }

  ElementTwinRustAsync? _dco_decode_opt_box_autoadd_element_twin_rust_async(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_element_twin_rust_async(raw);
  }

  ElementTwinRustAsyncSse?
      _dco_decode_opt_box_autoadd_element_twin_rust_async_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_element_twin_rust_async_sse(raw);
  }

  ElementTwinSse? _dco_decode_opt_box_autoadd_element_twin_sse(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_element_twin_sse(raw);
  }

  ElementTwinSync? _dco_decode_opt_box_autoadd_element_twin_sync(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_element_twin_sync(raw);
  }

  ElementTwinSyncSse? _dco_decode_opt_box_autoadd_element_twin_sync_sse(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_element_twin_sync_sse(raw);
  }

  ExoticOptionalsTwinNormal?
      _dco_decode_opt_box_autoadd_exotic_optionals_twin_normal(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_exotic_optionals_twin_normal(raw);
  }

  ExoticOptionalsTwinRustAsync?
      _dco_decode_opt_box_autoadd_exotic_optionals_twin_rust_async(
          dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_exotic_optionals_twin_rust_async(raw);
  }

  ExoticOptionalsTwinRustAsyncSse?
      _dco_decode_opt_box_autoadd_exotic_optionals_twin_rust_async_sse(
          dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_exotic_optionals_twin_rust_async_sse(raw);
  }

  ExoticOptionalsTwinSse? _dco_decode_opt_box_autoadd_exotic_optionals_twin_sse(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_exotic_optionals_twin_sse(raw);
  }

  ExoticOptionalsTwinSync?
      _dco_decode_opt_box_autoadd_exotic_optionals_twin_sync(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_exotic_optionals_twin_sync(raw);
  }

  ExoticOptionalsTwinSyncSse?
      _dco_decode_opt_box_autoadd_exotic_optionals_twin_sync_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_exotic_optionals_twin_sync_sse(raw);
  }

  double? _dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_f_32(raw);
  }

  double? _dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_f_64(raw);
  }

  int? _dco_decode_opt_box_autoadd_i_16(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_i_16(raw);
  }

  int? _dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_i_32(raw);
  }

  int? _dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_i_64(raw);
  }

  int? _dco_decode_opt_box_autoadd_i_8(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_i_8(raw);
  }

  MeasureTwinNormal? _dco_decode_opt_box_autoadd_measure_twin_normal(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_measure_twin_normal(raw);
  }

  MeasureTwinRustAsync? _dco_decode_opt_box_autoadd_measure_twin_rust_async(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_measure_twin_rust_async(raw);
  }

  MeasureTwinRustAsyncSse?
      _dco_decode_opt_box_autoadd_measure_twin_rust_async_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_measure_twin_rust_async_sse(raw);
  }

  MeasureTwinSse? _dco_decode_opt_box_autoadd_measure_twin_sse(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_measure_twin_sse(raw);
  }

  MeasureTwinSync? _dco_decode_opt_box_autoadd_measure_twin_sync(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_measure_twin_sync(raw);
  }

  MeasureTwinSyncSse? _dco_decode_opt_box_autoadd_measure_twin_sync_sse(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_measure_twin_sync_sse(raw);
  }

  NewTypeIntTwinNormal? _dco_decode_opt_box_autoadd_new_type_int_twin_normal(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_new_type_int_twin_normal(raw);
  }

  NewTypeIntTwinRustAsync?
      _dco_decode_opt_box_autoadd_new_type_int_twin_rust_async(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_new_type_int_twin_rust_async(raw);
  }

  NewTypeIntTwinRustAsyncSse?
      _dco_decode_opt_box_autoadd_new_type_int_twin_rust_async_sse(
          dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_new_type_int_twin_rust_async_sse(raw);
  }

  NewTypeIntTwinSse? _dco_decode_opt_box_autoadd_new_type_int_twin_sse(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_new_type_int_twin_sse(raw);
  }

  NewTypeIntTwinSync? _dco_decode_opt_box_autoadd_new_type_int_twin_sync(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_new_type_int_twin_sync(raw);
  }

  NewTypeIntTwinSyncSse? _dco_decode_opt_box_autoadd_new_type_int_twin_sync_sse(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_new_type_int_twin_sync_sse(raw);
  }

  int? _dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_u_16(raw);
  }

  int? _dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_u_32(raw);
  }

  int? _dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_u_64(raw);
  }

  int? _dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_u_8(raw);
  }

  WeekdaysTwinNormal? _dco_decode_opt_box_autoadd_weekdays_twin_normal(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_weekdays_twin_normal(raw);
  }

  WeekdaysTwinRustAsync? _dco_decode_opt_box_autoadd_weekdays_twin_rust_async(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_weekdays_twin_rust_async(raw);
  }

  WeekdaysTwinRustAsyncSse?
      _dco_decode_opt_box_autoadd_weekdays_twin_rust_async_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_weekdays_twin_rust_async_sse(raw);
  }

  WeekdaysTwinSse? _dco_decode_opt_box_autoadd_weekdays_twin_sse(dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_weekdays_twin_sse(raw);
  }

  WeekdaysTwinSync? _dco_decode_opt_box_autoadd_weekdays_twin_sync(
      dynamic raw) {
    return raw == null ? null : _dco_decode_box_autoadd_weekdays_twin_sync(raw);
  }

  WeekdaysTwinSyncSse? _dco_decode_opt_box_autoadd_weekdays_twin_sync_sse(
      dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_box_autoadd_weekdays_twin_sync_sse(raw);
  }

  List<AttributeTwinNormal>? _dco_decode_opt_list_attribute_twin_normal(
      dynamic raw) {
    return raw == null ? null : _dco_decode_list_attribute_twin_normal(raw);
  }

  List<AttributeTwinRustAsync>? _dco_decode_opt_list_attribute_twin_rust_async(
      dynamic raw) {
    return raw == null ? null : _dco_decode_list_attribute_twin_rust_async(raw);
  }

  List<AttributeTwinRustAsyncSse>?
      _dco_decode_opt_list_attribute_twin_rust_async_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_attribute_twin_rust_async_sse(raw);
  }

  List<AttributeTwinSse>? _dco_decode_opt_list_attribute_twin_sse(dynamic raw) {
    return raw == null ? null : _dco_decode_list_attribute_twin_sse(raw);
  }

  List<AttributeTwinSync>? _dco_decode_opt_list_attribute_twin_sync(
      dynamic raw) {
    return raw == null ? null : _dco_decode_list_attribute_twin_sync(raw);
  }

  List<AttributeTwinSyncSse>? _dco_decode_opt_list_attribute_twin_sync_sse(
      dynamic raw) {
    return raw == null ? null : _dco_decode_list_attribute_twin_sync_sse(raw);
  }

  List<ElementTwinNormal>? _dco_decode_opt_list_element_twin_normal(
      dynamic raw) {
    return raw == null ? null : _dco_decode_list_element_twin_normal(raw);
  }

  List<ElementTwinRustAsync>? _dco_decode_opt_list_element_twin_rust_async(
      dynamic raw) {
    return raw == null ? null : _dco_decode_list_element_twin_rust_async(raw);
  }

  List<ElementTwinRustAsyncSse>?
      _dco_decode_opt_list_element_twin_rust_async_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_element_twin_rust_async_sse(raw);
  }

  List<ElementTwinSse>? _dco_decode_opt_list_element_twin_sse(dynamic raw) {
    return raw == null ? null : _dco_decode_list_element_twin_sse(raw);
  }

  List<ElementTwinSync>? _dco_decode_opt_list_element_twin_sync(dynamic raw) {
    return raw == null ? null : _dco_decode_list_element_twin_sync(raw);
  }

  List<ElementTwinSyncSse>? _dco_decode_opt_list_element_twin_sync_sse(
      dynamic raw) {
    return raw == null ? null : _dco_decode_list_element_twin_sync_sse(raw);
  }

  List<AttributeTwinNormal?>?
      _dco_decode_opt_list_opt_box_autoadd_attribute_twin_normal(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_opt_box_autoadd_attribute_twin_normal(raw);
  }

  List<AttributeTwinRustAsync?>?
      _dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(raw);
  }

  List<AttributeTwinRustAsyncSse?>?
      _dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_opt_box_autoadd_attribute_twin_rust_async_sse(raw);
  }

  List<AttributeTwinSse?>?
      _dco_decode_opt_list_opt_box_autoadd_attribute_twin_sse(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_opt_box_autoadd_attribute_twin_sse(raw);
  }

  List<AttributeTwinSync?>?
      _dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync(dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_opt_box_autoadd_attribute_twin_sync(raw);
  }

  List<AttributeTwinSyncSse?>?
      _dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(
          dynamic raw) {
    return raw == null
        ? null
        : _dco_decode_list_opt_box_autoadd_attribute_twin_sync_sse(raw);
  }

  Float32List? _dco_decode_opt_list_prim_f_32(dynamic raw) {
    return raw == null ? null : _dco_decode_list_prim_f_32(raw);
  }

  Float64List? _dco_decode_opt_list_prim_f_64(dynamic raw) {
    return raw == null ? null : _dco_decode_list_prim_f_64(raw);
  }

  Int32List? _dco_decode_opt_list_prim_i_32(dynamic raw) {
    return raw == null ? null : _dco_decode_list_prim_i_32(raw);
  }

  Int8List? _dco_decode_opt_list_prim_i_8(dynamic raw) {
    return raw == null ? null : _dco_decode_list_prim_i_8(raw);
  }

  Uint8List? _dco_decode_opt_list_prim_u_8(dynamic raw) {
    return raw == null ? null : _dco_decode_list_prim_u_8(raw);
  }

  OptVecsTwinNormal _dco_decode_opt_vecs_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinNormal(
      i32: _dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: _dco_decode_list_opt_box_autoadd_weekdays_twin_normal(arr[1]),
      strings: _dco_decode_list_opt_String(arr[2]),
      buffers: _dco_decode_list_opt_list_prim_i_32(arr[3]),
    );
  }

  OptVecsTwinRustAsync _dco_decode_opt_vecs_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinRustAsync(
      i32: _dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: _dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async(arr[1]),
      strings: _dco_decode_list_opt_String(arr[2]),
      buffers: _dco_decode_list_opt_list_prim_i_32(arr[3]),
    );
  }

  OptVecsTwinRustAsyncSse _dco_decode_opt_vecs_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinRustAsyncSse(
      i32: _dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums:
          _dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(arr[1]),
      strings: _dco_decode_list_opt_String(arr[2]),
      buffers: _dco_decode_list_opt_list_prim_i_32(arr[3]),
    );
  }

  OptVecsTwinSse _dco_decode_opt_vecs_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinSse(
      i32: _dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: _dco_decode_list_opt_box_autoadd_weekdays_twin_sse(arr[1]),
      strings: _dco_decode_list_opt_String(arr[2]),
      buffers: _dco_decode_list_opt_list_prim_i_32(arr[3]),
    );
  }

  OptVecsTwinSync _dco_decode_opt_vecs_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinSync(
      i32: _dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: _dco_decode_list_opt_box_autoadd_weekdays_twin_sync(arr[1]),
      strings: _dco_decode_list_opt_String(arr[2]),
      buffers: _dco_decode_list_opt_list_prim_i_32(arr[3]),
    );
  }

  OptVecsTwinSyncSse _dco_decode_opt_vecs_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinSyncSse(
      i32: _dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: _dco_decode_list_opt_box_autoadd_weekdays_twin_sync_sse(arr[1]),
      strings: _dco_decode_list_opt_String(arr[2]),
      buffers: _dco_decode_list_opt_list_prim_i_32(arr[3]),
    );
  }

  PointTwinNormal _dco_decode_point_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinNormal(
      x: _dco_decode_f_32(arr[0]),
      y: _dco_decode_f_32(arr[1]),
    );
  }

  PointTwinNormalArray2 _dco_decode_point_twin_normal_array_2(dynamic raw) {
    return PointTwinNormalArray2(
        (raw as List<dynamic>).map(_dco_decode_point_twin_normal).toList());
  }

  PointTwinRustAsync _dco_decode_point_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinRustAsync(
      x: _dco_decode_f_32(arr[0]),
      y: _dco_decode_f_32(arr[1]),
    );
  }

  PointTwinRustAsyncArray2 _dco_decode_point_twin_rust_async_array_2(
      dynamic raw) {
    return PointTwinRustAsyncArray2(
        (raw as List<dynamic>).map(_dco_decode_point_twin_rust_async).toList());
  }

  PointTwinRustAsyncSse _dco_decode_point_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinRustAsyncSse(
      x: _dco_decode_f_32(arr[0]),
      y: _dco_decode_f_32(arr[1]),
    );
  }

  PointTwinRustAsyncSseArray2 _dco_decode_point_twin_rust_async_sse_array_2(
      dynamic raw) {
    return PointTwinRustAsyncSseArray2((raw as List<dynamic>)
        .map(_dco_decode_point_twin_rust_async_sse)
        .toList());
  }

  PointTwinSse _dco_decode_point_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinSse(
      x: _dco_decode_f_32(arr[0]),
      y: _dco_decode_f_32(arr[1]),
    );
  }

  PointTwinSseArray2 _dco_decode_point_twin_sse_array_2(dynamic raw) {
    return PointTwinSseArray2(
        (raw as List<dynamic>).map(_dco_decode_point_twin_sse).toList());
  }

  PointTwinSync _dco_decode_point_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinSync(
      x: _dco_decode_f_32(arr[0]),
      y: _dco_decode_f_32(arr[1]),
    );
  }

  PointTwinSyncArray2 _dco_decode_point_twin_sync_array_2(dynamic raw) {
    return PointTwinSyncArray2(
        (raw as List<dynamic>).map(_dco_decode_point_twin_sync).toList());
  }

  PointTwinSyncSse _dco_decode_point_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinSyncSse(
      x: _dco_decode_f_32(arr[0]),
      y: _dco_decode_f_32(arr[1]),
    );
  }

  PointTwinSyncSseArray2 _dco_decode_point_twin_sync_sse_array_2(dynamic raw) {
    return PointTwinSyncSseArray2(
        (raw as List<dynamic>).map(_dco_decode_point_twin_sync_sse).toList());
  }

  RawStringEnumMirrored _dco_decode_raw_string_enum_mirrored(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return RawStringEnumMirrored_Raw(
          _dco_decode_box_autoadd_raw_string_mirrored(raw[1]),
        );
      case 1:
        return RawStringEnumMirrored_Nested(
          _dco_decode_box_autoadd_nested_raw_string_mirrored(raw[1]),
        );
      case 2:
        return RawStringEnumMirrored_ListOfNested(
          _dco_decode_box_autoadd_list_of_nested_raw_string_mirrored(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  RawStringItemStructTwinNormal _dco_decode_raw_string_item_struct_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinNormal(
      type: _dco_decode_String(arr[0]),
    );
  }

  RawStringItemStructTwinRustAsync
      _dco_decode_raw_string_item_struct_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinRustAsync(
      type: _dco_decode_String(arr[0]),
    );
  }

  RawStringItemStructTwinRustAsyncSse
      _dco_decode_raw_string_item_struct_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinRustAsyncSse(
      type: _dco_decode_String(arr[0]),
    );
  }

  RawStringItemStructTwinSse _dco_decode_raw_string_item_struct_twin_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinSse(
      type: _dco_decode_String(arr[0]),
    );
  }

  RawStringItemStructTwinSync _dco_decode_raw_string_item_struct_twin_sync(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinSync(
      type: _dco_decode_String(arr[0]),
    );
  }

  RawStringItemStructTwinSyncSse
      _dco_decode_raw_string_item_struct_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinSyncSse(
      type: _dco_decode_String(arr[0]),
    );
  }

  RawStringMirrored _dco_decode_raw_string_mirrored(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringMirrored(
      value: _dco_decode_String(arr[0]),
    );
  }

  (ApplicationSettings, RawStringEnumMirrored)
      _dco_decode_record_application_settings_raw_string_enum_mirrored(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _dco_decode_application_settings(arr[0]),
      _dco_decode_raw_string_enum_mirrored(arr[1]),
    );
  }

  (String, int) _dco_decode_record_string_i_32(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _dco_decode_String(arr[0]),
      _dco_decode_i_32(arr[1]),
    );
  }

  Sequences _dco_decode_sequences(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Sequences(
      field0: _dco_decode_list_prim_i_32(arr[0]),
    );
  }

  SomeStructTwinNormal _dco_decode_some_struct_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinNormal(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  SomeStructTwinRustAsync _dco_decode_some_struct_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinRustAsync(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  SomeStructTwinRustAsyncSse _dco_decode_some_struct_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinRustAsyncSse(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  SomeStructTwinSse _dco_decode_some_struct_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinSse(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  SomeStructTwinSync _dco_decode_some_struct_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinSync(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  SomeStructTwinSyncSse _dco_decode_some_struct_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinSyncSse(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  SpeedTwinNormal _dco_decode_speed_twin_normal(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SpeedTwinNormal_Unknown();
      case 1:
        return SpeedTwinNormal_GPS(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SpeedTwinRustAsync _dco_decode_speed_twin_rust_async(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SpeedTwinRustAsync_Unknown();
      case 1:
        return SpeedTwinRustAsync_GPS(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SpeedTwinRustAsyncSse _dco_decode_speed_twin_rust_async_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SpeedTwinRustAsyncSse_Unknown();
      case 1:
        return SpeedTwinRustAsyncSse_GPS(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SpeedTwinSse _dco_decode_speed_twin_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SpeedTwinSse_Unknown();
      case 1:
        return SpeedTwinSse_GPS(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SpeedTwinSync _dco_decode_speed_twin_sync(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SpeedTwinSync_Unknown();
      case 1:
        return SpeedTwinSync_GPS(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SpeedTwinSyncSse _dco_decode_speed_twin_sync_sse(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SpeedTwinSyncSse_Unknown();
      case 1:
        return SpeedTwinSyncSse_GPS(
          _dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  StructWithEnumTwinNormal _dco_decode_struct_with_enum_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinNormal(
      abc1: _dco_decode_abc_twin_normal(arr[0]),
      abc2: _dco_decode_abc_twin_normal(arr[1]),
    );
  }

  StructWithEnumTwinRustAsync _dco_decode_struct_with_enum_twin_rust_async(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinRustAsync(
      abc1: _dco_decode_abc_twin_rust_async(arr[0]),
      abc2: _dco_decode_abc_twin_rust_async(arr[1]),
    );
  }

  StructWithEnumTwinRustAsyncSse
      _dco_decode_struct_with_enum_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinRustAsyncSse(
      abc1: _dco_decode_abc_twin_rust_async_sse(arr[0]),
      abc2: _dco_decode_abc_twin_rust_async_sse(arr[1]),
    );
  }

  StructWithEnumTwinSse _dco_decode_struct_with_enum_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinSse(
      abc1: _dco_decode_abc_twin_sse(arr[0]),
      abc2: _dco_decode_abc_twin_sse(arr[1]),
    );
  }

  StructWithEnumTwinSync _dco_decode_struct_with_enum_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinSync(
      abc1: _dco_decode_abc_twin_sync(arr[0]),
      abc2: _dco_decode_abc_twin_sync(arr[1]),
    );
  }

  StructWithEnumTwinSyncSse _dco_decode_struct_with_enum_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinSyncSse(
      abc1: _dco_decode_abc_twin_sync_sse(arr[0]),
      abc2: _dco_decode_abc_twin_sync_sse(arr[1]),
    );
  }

  StructWithOneFieldTwinNormal _dco_decode_struct_with_one_field_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinNormal(
      a: _dco_decode_i_32(arr[0]),
    );
  }

  StructWithOneFieldTwinRustAsync
      _dco_decode_struct_with_one_field_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinRustAsync(
      a: _dco_decode_i_32(arr[0]),
    );
  }

  StructWithOneFieldTwinRustAsyncSse
      _dco_decode_struct_with_one_field_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinRustAsyncSse(
      a: _dco_decode_i_32(arr[0]),
    );
  }

  StructWithOneFieldTwinSse _dco_decode_struct_with_one_field_twin_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinSse(
      a: _dco_decode_i_32(arr[0]),
    );
  }

  StructWithOneFieldTwinSync _dco_decode_struct_with_one_field_twin_sync(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinSync(
      a: _dco_decode_i_32(arr[0]),
    );
  }

  StructWithOneFieldTwinSyncSse _dco_decode_struct_with_one_field_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinSyncSse(
      a: _dco_decode_i_32(arr[0]),
    );
  }

  StructWithTwoFieldTwinNormal _dco_decode_struct_with_two_field_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinNormal(
      a: _dco_decode_i_32(arr[0]),
      b: _dco_decode_i_32(arr[1]),
    );
  }

  StructWithTwoFieldTwinRustAsync
      _dco_decode_struct_with_two_field_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinRustAsync(
      a: _dco_decode_i_32(arr[0]),
      b: _dco_decode_i_32(arr[1]),
    );
  }

  StructWithTwoFieldTwinRustAsyncSse
      _dco_decode_struct_with_two_field_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinRustAsyncSse(
      a: _dco_decode_i_32(arr[0]),
      b: _dco_decode_i_32(arr[1]),
    );
  }

  StructWithTwoFieldTwinSse _dco_decode_struct_with_two_field_twin_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinSse(
      a: _dco_decode_i_32(arr[0]),
      b: _dco_decode_i_32(arr[1]),
    );
  }

  StructWithTwoFieldTwinSync _dco_decode_struct_with_two_field_twin_sync(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinSync(
      a: _dco_decode_i_32(arr[0]),
      b: _dco_decode_i_32(arr[1]),
    );
  }

  StructWithTwoFieldTwinSyncSse _dco_decode_struct_with_two_field_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinSyncSse(
      a: _dco_decode_i_32(arr[0]),
      b: _dco_decode_i_32(arr[1]),
    );
  }

  StructWithZeroFieldTwinNormal _dco_decode_struct_with_zero_field_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinNormal();
  }

  StructWithZeroFieldTwinRustAsync
      _dco_decode_struct_with_zero_field_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinRustAsync();
  }

  StructWithZeroFieldTwinRustAsyncSse
      _dco_decode_struct_with_zero_field_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinRustAsyncSse();
  }

  StructWithZeroFieldTwinSse _dco_decode_struct_with_zero_field_twin_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinSse();
  }

  StructWithZeroFieldTwinSync _dco_decode_struct_with_zero_field_twin_sync(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinSync();
  }

  StructWithZeroFieldTwinSyncSse
      _dco_decode_struct_with_zero_field_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinSyncSse();
  }

  SumWithTwinNormal _dco_decode_sum_with_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinNormal(
      x: _dco_decode_u_32(arr[0]),
    );
  }

  SumWithTwinNormalArray3 _dco_decode_sum_with_twin_normal_array_3(
      dynamic raw) {
    return SumWithTwinNormalArray3(
        (raw as List<dynamic>).map(_dco_decode_sum_with_twin_normal).toList());
  }

  SumWithTwinRustAsync _dco_decode_sum_with_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinRustAsync(
      x: _dco_decode_u_32(arr[0]),
    );
  }

  SumWithTwinRustAsyncArray3 _dco_decode_sum_with_twin_rust_async_array_3(
      dynamic raw) {
    return SumWithTwinRustAsyncArray3((raw as List<dynamic>)
        .map(_dco_decode_sum_with_twin_rust_async)
        .toList());
  }

  SumWithTwinRustAsyncSse _dco_decode_sum_with_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinRustAsyncSse(
      x: _dco_decode_u_32(arr[0]),
    );
  }

  SumWithTwinRustAsyncSseArray3
      _dco_decode_sum_with_twin_rust_async_sse_array_3(dynamic raw) {
    return SumWithTwinRustAsyncSseArray3((raw as List<dynamic>)
        .map(_dco_decode_sum_with_twin_rust_async_sse)
        .toList());
  }

  SumWithTwinSse _dco_decode_sum_with_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinSse(
      x: _dco_decode_u_32(arr[0]),
    );
  }

  SumWithTwinSseArray3 _dco_decode_sum_with_twin_sse_array_3(dynamic raw) {
    return SumWithTwinSseArray3(
        (raw as List<dynamic>).map(_dco_decode_sum_with_twin_sse).toList());
  }

  SumWithTwinSync _dco_decode_sum_with_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinSync(
      x: _dco_decode_u_32(arr[0]),
    );
  }

  SumWithTwinSyncArray3 _dco_decode_sum_with_twin_sync_array_3(dynamic raw) {
    return SumWithTwinSyncArray3(
        (raw as List<dynamic>).map(_dco_decode_sum_with_twin_sync).toList());
  }

  SumWithTwinSyncSse _dco_decode_sum_with_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinSyncSse(
      x: _dco_decode_u_32(arr[0]),
    );
  }

  SumWithTwinSyncSseArray3 _dco_decode_sum_with_twin_sync_sse_array_3(
      dynamic raw) {
    return SumWithTwinSyncSseArray3((raw as List<dynamic>)
        .map(_dco_decode_sum_with_twin_sync_sse)
        .toList());
  }

  TestChronoTwinNormal _dco_decode_test_chrono_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinNormal(
      dt: _dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: _dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: _dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  TestChronoTwinRustAsync _dco_decode_test_chrono_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinRustAsync(
      dt: _dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: _dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: _dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  TestChronoTwinSync _dco_decode_test_chrono_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinSync(
      dt: _dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: _dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: _dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  TestIdTwinNormal _dco_decode_test_id_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinNormal(
      field0: _dco_decode_i_32_array_2(arr[0]),
    );
  }

  TestIdTwinNormalArray2 _dco_decode_test_id_twin_normal_array_2(dynamic raw) {
    return TestIdTwinNormalArray2(
        (raw as List<dynamic>).map(_dco_decode_test_id_twin_normal).toList());
  }

  TestIdTwinRustAsync _dco_decode_test_id_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinRustAsync(
      field0: _dco_decode_i_32_array_2(arr[0]),
    );
  }

  TestIdTwinRustAsyncArray2 _dco_decode_test_id_twin_rust_async_array_2(
      dynamic raw) {
    return TestIdTwinRustAsyncArray2((raw as List<dynamic>)
        .map(_dco_decode_test_id_twin_rust_async)
        .toList());
  }

  TestIdTwinRustAsyncSse _dco_decode_test_id_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinRustAsyncSse(
      field0: _dco_decode_i_32_array_2(arr[0]),
    );
  }

  TestIdTwinRustAsyncSseArray2 _dco_decode_test_id_twin_rust_async_sse_array_2(
      dynamic raw) {
    return TestIdTwinRustAsyncSseArray2((raw as List<dynamic>)
        .map(_dco_decode_test_id_twin_rust_async_sse)
        .toList());
  }

  TestIdTwinSse _dco_decode_test_id_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinSse(
      field0: _dco_decode_i_32_array_2(arr[0]),
    );
  }

  TestIdTwinSseArray2 _dco_decode_test_id_twin_sse_array_2(dynamic raw) {
    return TestIdTwinSseArray2(
        (raw as List<dynamic>).map(_dco_decode_test_id_twin_sse).toList());
  }

  TestIdTwinSync _dco_decode_test_id_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinSync(
      field0: _dco_decode_i_32_array_2(arr[0]),
    );
  }

  TestIdTwinSyncArray2 _dco_decode_test_id_twin_sync_array_2(dynamic raw) {
    return TestIdTwinSyncArray2(
        (raw as List<dynamic>).map(_dco_decode_test_id_twin_sync).toList());
  }

  TestIdTwinSyncSse _dco_decode_test_id_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinSyncSse(
      field0: _dco_decode_i_32_array_2(arr[0]),
    );
  }

  TestIdTwinSyncSseArray2 _dco_decode_test_id_twin_sync_sse_array_2(
      dynamic raw) {
    return TestIdTwinSyncSseArray2(
        (raw as List<dynamic>).map(_dco_decode_test_id_twin_sync_sse).toList());
  }

  TestModelTwinNormal _dco_decode_test_model_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinNormal(
      id: _dco_decode_u_64(arr[0]),
      name: _dco_decode_String(arr[1]),
      aliasEnum: _dco_decode_my_enum(arr[2]),
      aliasStruct: _dco_decode_my_struct(arr[3]),
    );
  }

  TestModelTwinRustAsync _dco_decode_test_model_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinRustAsync(
      id: _dco_decode_u_64(arr[0]),
      name: _dco_decode_String(arr[1]),
      aliasEnum: _dco_decode_my_enum(arr[2]),
      aliasStruct: _dco_decode_my_struct(arr[3]),
    );
  }

  TestModelTwinRustAsyncSse _dco_decode_test_model_twin_rust_async_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinRustAsyncSse(
      id: _dco_decode_u_64(arr[0]),
      name: _dco_decode_String(arr[1]),
      aliasEnum: _dco_decode_my_enum(arr[2]),
      aliasStruct: _dco_decode_my_struct(arr[3]),
    );
  }

  TestModelTwinSse _dco_decode_test_model_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinSse(
      id: _dco_decode_u_64(arr[0]),
      name: _dco_decode_String(arr[1]),
      aliasEnum: _dco_decode_my_enum(arr[2]),
      aliasStruct: _dco_decode_my_struct(arr[3]),
    );
  }

  TestModelTwinSync _dco_decode_test_model_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinSync(
      id: _dco_decode_u_64(arr[0]),
      name: _dco_decode_String(arr[1]),
      aliasEnum: _dco_decode_my_enum(arr[2]),
      aliasStruct: _dco_decode_my_struct(arr[3]),
    );
  }

  TestModelTwinSyncSse _dco_decode_test_model_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinSyncSse(
      id: _dco_decode_u_64(arr[0]),
      name: _dco_decode_String(arr[1]),
      aliasEnum: _dco_decode_my_enum(arr[2]),
      aliasStruct: _dco_decode_my_struct(arr[3]),
    );
  }

  TupleStructWithOneFieldTwinNormal
      _dco_decode_tuple_struct_with_one_field_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinNormal(
      field0: _dco_decode_i_32(arr[0]),
    );
  }

  TupleStructWithOneFieldTwinRustAsync
      _dco_decode_tuple_struct_with_one_field_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinRustAsync(
      field0: _dco_decode_i_32(arr[0]),
    );
  }

  TupleStructWithOneFieldTwinRustAsyncSse
      _dco_decode_tuple_struct_with_one_field_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinRustAsyncSse(
      field0: _dco_decode_i_32(arr[0]),
    );
  }

  TupleStructWithOneFieldTwinSse
      _dco_decode_tuple_struct_with_one_field_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinSse(
      field0: _dco_decode_i_32(arr[0]),
    );
  }

  TupleStructWithOneFieldTwinSync
      _dco_decode_tuple_struct_with_one_field_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinSync(
      field0: _dco_decode_i_32(arr[0]),
    );
  }

  TupleStructWithOneFieldTwinSyncSse
      _dco_decode_tuple_struct_with_one_field_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinSyncSse(
      field0: _dco_decode_i_32(arr[0]),
    );
  }

  TupleStructWithTwoFieldTwinNormal
      _dco_decode_tuple_struct_with_two_field_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinNormal(
      field0: _dco_decode_i_32(arr[0]),
      field1: _dco_decode_i_32(arr[1]),
    );
  }

  TupleStructWithTwoFieldTwinRustAsync
      _dco_decode_tuple_struct_with_two_field_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinRustAsync(
      field0: _dco_decode_i_32(arr[0]),
      field1: _dco_decode_i_32(arr[1]),
    );
  }

  TupleStructWithTwoFieldTwinRustAsyncSse
      _dco_decode_tuple_struct_with_two_field_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinRustAsyncSse(
      field0: _dco_decode_i_32(arr[0]),
      field1: _dco_decode_i_32(arr[1]),
    );
  }

  TupleStructWithTwoFieldTwinSse
      _dco_decode_tuple_struct_with_two_field_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinSse(
      field0: _dco_decode_i_32(arr[0]),
      field1: _dco_decode_i_32(arr[1]),
    );
  }

  TupleStructWithTwoFieldTwinSync
      _dco_decode_tuple_struct_with_two_field_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinSync(
      field0: _dco_decode_i_32(arr[0]),
      field1: _dco_decode_i_32(arr[1]),
    );
  }

  TupleStructWithTwoFieldTwinSyncSse
      _dco_decode_tuple_struct_with_two_field_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinSyncSse(
      field0: _dco_decode_i_32(arr[0]),
      field1: _dco_decode_i_32(arr[1]),
    );
  }

  int _dco_decode_u_16(dynamic raw) {
    return raw as int;
  }

  int _dco_decode_u_32(dynamic raw) {
    return raw as int;
  }

  int _dco_decode_u_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  int _dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  U8Array1600 _dco_decode_u_8_array_1600(dynamic raw) {
    return U8Array1600(_dco_decode_list_prim_u_8(raw));
  }

  U8Array32 _dco_decode_u_8_array_32(dynamic raw) {
    return U8Array32(_dco_decode_list_prim_u_8(raw));
  }

  U8Array5 _dco_decode_u_8_array_5(dynamic raw) {
    return U8Array5(_dco_decode_list_prim_u_8(raw));
  }

  U8Array8 _dco_decode_u_8_array_8(dynamic raw) {
    return U8Array8(_dco_decode_list_prim_u_8(raw));
  }

  void _dco_decode_unit(dynamic raw) {
    return;
  }

  UserIdTwinNormal _dco_decode_user_id_twin_normal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinNormal(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  UserIdTwinRustAsync _dco_decode_user_id_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinRustAsync(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  UserIdTwinRustAsyncSse _dco_decode_user_id_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinRustAsyncSse(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  UserIdTwinSse _dco_decode_user_id_twin_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinSse(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  UserIdTwinSync _dco_decode_user_id_twin_sync(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinSync(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  UserIdTwinSyncSse _dco_decode_user_id_twin_sync_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinSyncSse(
      value: _dco_decode_u_32(arr[0]),
    );
  }

  int _dco_decode_usize(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  VecOfPrimitivePackTwinNormal _dco_decode_vec_of_primitive_pack_twin_normal(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinNormal(
      int8List: _dco_decode_list_prim_i_8(arr[0]),
      uint8List: _dco_decode_list_prim_u_8(arr[1]),
      int16List: _dco_decode_list_prim_i_16(arr[2]),
      uint16List: _dco_decode_list_prim_u_16(arr[3]),
      uint32List: _dco_decode_list_prim_u_32(arr[4]),
      int32List: _dco_decode_list_prim_i_32(arr[5]),
      uint64List: _dco_decode_list_prim_u_64(arr[6]),
      int64List: _dco_decode_list_prim_i_64(arr[7]),
      float32List: _dco_decode_list_prim_f_32(arr[8]),
      float64List: _dco_decode_list_prim_f_64(arr[9]),
      boolList: _dco_decode_list_bool(arr[10]),
    );
  }

  VecOfPrimitivePackTwinRustAsync
      _dco_decode_vec_of_primitive_pack_twin_rust_async(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinRustAsync(
      int8List: _dco_decode_list_prim_i_8(arr[0]),
      uint8List: _dco_decode_list_prim_u_8(arr[1]),
      int16List: _dco_decode_list_prim_i_16(arr[2]),
      uint16List: _dco_decode_list_prim_u_16(arr[3]),
      uint32List: _dco_decode_list_prim_u_32(arr[4]),
      int32List: _dco_decode_list_prim_i_32(arr[5]),
      uint64List: _dco_decode_list_prim_u_64(arr[6]),
      int64List: _dco_decode_list_prim_i_64(arr[7]),
      float32List: _dco_decode_list_prim_f_32(arr[8]),
      float64List: _dco_decode_list_prim_f_64(arr[9]),
      boolList: _dco_decode_list_bool(arr[10]),
    );
  }

  VecOfPrimitivePackTwinRustAsyncSse
      _dco_decode_vec_of_primitive_pack_twin_rust_async_sse(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinRustAsyncSse(
      int8List: _dco_decode_list_prim_i_8(arr[0]),
      uint8List: _dco_decode_list_prim_u_8(arr[1]),
      int16List: _dco_decode_list_prim_i_16(arr[2]),
      uint16List: _dco_decode_list_prim_u_16(arr[3]),
      uint32List: _dco_decode_list_prim_u_32(arr[4]),
      int32List: _dco_decode_list_prim_i_32(arr[5]),
      uint64List: _dco_decode_list_prim_u_64(arr[6]),
      int64List: _dco_decode_list_prim_i_64(arr[7]),
      float32List: _dco_decode_list_prim_f_32(arr[8]),
      float64List: _dco_decode_list_prim_f_64(arr[9]),
      boolList: _dco_decode_list_bool(arr[10]),
    );
  }

  VecOfPrimitivePackTwinSse _dco_decode_vec_of_primitive_pack_twin_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinSse(
      int8List: _dco_decode_list_prim_i_8(arr[0]),
      uint8List: _dco_decode_list_prim_u_8(arr[1]),
      int16List: _dco_decode_list_prim_i_16(arr[2]),
      uint16List: _dco_decode_list_prim_u_16(arr[3]),
      uint32List: _dco_decode_list_prim_u_32(arr[4]),
      int32List: _dco_decode_list_prim_i_32(arr[5]),
      uint64List: _dco_decode_list_prim_u_64(arr[6]),
      int64List: _dco_decode_list_prim_i_64(arr[7]),
      float32List: _dco_decode_list_prim_f_32(arr[8]),
      float64List: _dco_decode_list_prim_f_64(arr[9]),
      boolList: _dco_decode_list_bool(arr[10]),
    );
  }

  VecOfPrimitivePackTwinSync _dco_decode_vec_of_primitive_pack_twin_sync(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinSync(
      int8List: _dco_decode_list_prim_i_8(arr[0]),
      uint8List: _dco_decode_list_prim_u_8(arr[1]),
      int16List: _dco_decode_list_prim_i_16(arr[2]),
      uint16List: _dco_decode_list_prim_u_16(arr[3]),
      uint32List: _dco_decode_list_prim_u_32(arr[4]),
      int32List: _dco_decode_list_prim_i_32(arr[5]),
      uint64List: _dco_decode_list_prim_u_64(arr[6]),
      int64List: _dco_decode_list_prim_i_64(arr[7]),
      float32List: _dco_decode_list_prim_f_32(arr[8]),
      float64List: _dco_decode_list_prim_f_64(arr[9]),
      boolList: _dco_decode_list_bool(arr[10]),
    );
  }

  VecOfPrimitivePackTwinSyncSse _dco_decode_vec_of_primitive_pack_twin_sync_sse(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinSyncSse(
      int8List: _dco_decode_list_prim_i_8(arr[0]),
      uint8List: _dco_decode_list_prim_u_8(arr[1]),
      int16List: _dco_decode_list_prim_i_16(arr[2]),
      uint16List: _dco_decode_list_prim_u_16(arr[3]),
      uint32List: _dco_decode_list_prim_u_32(arr[4]),
      int32List: _dco_decode_list_prim_i_32(arr[5]),
      uint64List: _dco_decode_list_prim_u_64(arr[6]),
      int64List: _dco_decode_list_prim_i_64(arr[7]),
      float32List: _dco_decode_list_prim_f_32(arr[8]),
      float64List: _dco_decode_list_prim_f_64(arr[9]),
      boolList: _dco_decode_list_bool(arr[10]),
    );
  }

  WeekdaysTwinNormal _dco_decode_weekdays_twin_normal(dynamic raw) {
    return WeekdaysTwinNormal.values[raw as int];
  }

  WeekdaysTwinRustAsync _dco_decode_weekdays_twin_rust_async(dynamic raw) {
    return WeekdaysTwinRustAsync.values[raw as int];
  }

  WeekdaysTwinRustAsyncSse _dco_decode_weekdays_twin_rust_async_sse(
      dynamic raw) {
    return WeekdaysTwinRustAsyncSse.values[raw as int];
  }

  WeekdaysTwinSse _dco_decode_weekdays_twin_sse(dynamic raw) {
    return WeekdaysTwinSse.values[raw as int];
  }

  WeekdaysTwinSync _dco_decode_weekdays_twin_sync(dynamic raw) {
    return WeekdaysTwinSync.values[raw as int];
  }

  WeekdaysTwinSyncSse _dco_decode_weekdays_twin_sync_sse(dynamic raw) {
    return WeekdaysTwinSyncSse.values[raw as int];
  }

  AnyhowException _sse_decode_AnyhowException(SseDeserializer deserializer) {
    var inner = _sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  RwLockBoxFnStringString
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          SseDeserializer deserializer) {
    return RwLockBoxFnStringString.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinNormal
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinSync
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinSyncSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinNormal
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinSync
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinSyncSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinNormal
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinSync
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinSyncSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinNormal
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSync
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse
      _sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  String _sse_decode_Backtrace(SseDeserializer deserializer) {
    var inner = _sse_decode_String(deserializer);
    return inner;
  }

  Duration _sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  DateTime _sse_decode_Chrono_Local(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  DateTime _sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  DateTime _sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  Object _sse_decode_DartOpaque(SseDeserializer deserializer) {
    var inner = _sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  ObjectArray1 _sse_decode_DartOpaque_array_1(SseDeserializer deserializer) {
    var inner = _sse_decode_list_DartOpaque(deserializer);
    return ObjectArray1(inner);
  }

  MutexHideData _sse_decode_RustOpaque_MutexHideData(
      SseDeserializer deserializer) {
    return MutexHideData.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockHideData _sse_decode_RustOpaque_RwLockHideData(
      SseDeserializer deserializer) {
    return RwLockHideData.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  BoxDartDebugTwinNormal _sse_decode_RustOpaque_box_dynDartDebugTwinNormal(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  BoxDartDebugTwinRustAsync
      _sse_decode_RustOpaque_box_dynDartDebugTwinRustAsync(
          SseDeserializer deserializer) {
    return BoxDartDebugTwinRustAsync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  BoxDartDebugTwinRustAsyncSse
      _sse_decode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
          SseDeserializer deserializer) {
    return BoxDartDebugTwinRustAsyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  BoxDartDebugTwinSse _sse_decode_RustOpaque_box_dynDartDebugTwinSse(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  BoxDartDebugTwinSync _sse_decode_RustOpaque_box_dynDartDebugTwinSync(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  BoxDartDebugTwinSyncSse _sse_decode_RustOpaque_box_dynDartDebugTwinSyncSse(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  FrbOpaqueReturn _sse_decode_RustOpaque_frb_opaque_return(
      SseDeserializer deserializer) {
    return FrbOpaqueReturn.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  FrbOpaqueSyncReturn _sse_decode_RustOpaque_frb_opaque_sync_return(
      SseDeserializer deserializer) {
    return FrbOpaqueSyncReturn.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  HideData _sse_decode_RustOpaque_hide_data(SseDeserializer deserializer) {
    return HideData.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  HideDataArray2 _sse_decode_RustOpaque_hide_data_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_RustOpaque_hide_data(deserializer);
    return HideDataArray2(inner);
  }

  I32 _sse_decode_RustOpaque_i_32(SseDeserializer deserializer) {
    return I32.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  NonCloneData _sse_decode_RustOpaque_non_clone_data(
      SseDeserializer deserializer) {
    return NonCloneData.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  NonSendHideData _sse_decode_RustOpaque_non_send_hide_data(
      SseDeserializer deserializer) {
    return NonSendHideData.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxFnStringString
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          SseDeserializer deserializer) {
    return RwLockBoxFnStringString.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinNormal
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinSse
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinSync
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxHelloTraitTwinSyncSse
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          SseDeserializer deserializer) {
    return RwLockBoxHelloTraitTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinNormal
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinSse
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinSync
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockBoxMyTraitTwinSyncSse
      _sse_decode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          SseDeserializer deserializer) {
    return RwLockBoxMyTraitTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinNormal
      _sse_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinSse
      _sse_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinSync
      _sse_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockNonCloneSimpleTwinSyncSse
      _sse_decode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          SseDeserializer deserializer) {
    return RwLockNonCloneSimpleTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinNormal
      _sse_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinNormal.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSse
      _sse_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSync
      _sse_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSync.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  RwLockStructWithGoodAndOpaqueFieldTwinSyncSse
      _sse_decode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          SseDeserializer deserializer) {
    return RwLockStructWithGoodAndOpaqueFieldTwinSyncSse.sseDecode(
        _sse_decode_usize(deserializer), _sse_decode_i_32(deserializer));
  }

  String _sse_decode_String(SseDeserializer deserializer) {
    var inner = _sse_decode_list_prim_u_8(deserializer);
    return utf8.decoder.convert(inner);
  }

  UuidValue _sse_decode_Uuid(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  ATwinNormal _sse_decode_a_twin_normal(SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ATwinNormal(a: a);
  }

  ATwinRustAsync _sse_decode_a_twin_rust_async(SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ATwinRustAsync(a: a);
  }

  ATwinRustAsyncSse _sse_decode_a_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ATwinRustAsyncSse(a: a);
  }

  ATwinSse _sse_decode_a_twin_sse(SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ATwinSse(a: a);
  }

  ATwinSync _sse_decode_a_twin_sync(SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ATwinSync(a: a);
  }

  ATwinSyncSse _sse_decode_a_twin_sync_sse(SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ATwinSyncSse(a: a);
  }

  AbcTwinNormal _sse_decode_abc_twin_normal(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_autoadd_a_twin_normal(deserializer);
        return AbcTwinNormal_A(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_b_twin_normal(deserializer);
        return AbcTwinNormal_B(field0);
      case 2:
        var field0 = _sse_decode_box_autoadd_c_twin_normal(deserializer);
        return AbcTwinNormal_C(field0);
      case 3:
        var field0 = _sse_decode_i_32(deserializer);
        return AbcTwinNormal_JustInt(field0);
      default:
        throw UnimplementedError('');
    }
  }

  AbcTwinRustAsync _sse_decode_abc_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_autoadd_a_twin_rust_async(deserializer);
        return AbcTwinRustAsync_A(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_b_twin_rust_async(deserializer);
        return AbcTwinRustAsync_B(field0);
      case 2:
        var field0 = _sse_decode_box_autoadd_c_twin_rust_async(deserializer);
        return AbcTwinRustAsync_C(field0);
      case 3:
        var field0 = _sse_decode_i_32(deserializer);
        return AbcTwinRustAsync_JustInt(field0);
      default:
        throw UnimplementedError('');
    }
  }

  AbcTwinRustAsyncSse _sse_decode_abc_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 =
            _sse_decode_box_autoadd_a_twin_rust_async_sse(deserializer);
        return AbcTwinRustAsyncSse_A(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_b_twin_rust_async_sse(deserializer);
        return AbcTwinRustAsyncSse_B(field0);
      case 2:
        var field0 =
            _sse_decode_box_autoadd_c_twin_rust_async_sse(deserializer);
        return AbcTwinRustAsyncSse_C(field0);
      case 3:
        var field0 = _sse_decode_i_32(deserializer);
        return AbcTwinRustAsyncSse_JustInt(field0);
      default:
        throw UnimplementedError('');
    }
  }

  AbcTwinSse _sse_decode_abc_twin_sse(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_autoadd_a_twin_sse(deserializer);
        return AbcTwinSse_A(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_b_twin_sse(deserializer);
        return AbcTwinSse_B(field0);
      case 2:
        var field0 = _sse_decode_box_autoadd_c_twin_sse(deserializer);
        return AbcTwinSse_C(field0);
      case 3:
        var field0 = _sse_decode_i_32(deserializer);
        return AbcTwinSse_JustInt(field0);
      default:
        throw UnimplementedError('');
    }
  }

  AbcTwinSync _sse_decode_abc_twin_sync(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_autoadd_a_twin_sync(deserializer);
        return AbcTwinSync_A(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_b_twin_sync(deserializer);
        return AbcTwinSync_B(field0);
      case 2:
        var field0 = _sse_decode_box_autoadd_c_twin_sync(deserializer);
        return AbcTwinSync_C(field0);
      case 3:
        var field0 = _sse_decode_i_32(deserializer);
        return AbcTwinSync_JustInt(field0);
      default:
        throw UnimplementedError('');
    }
  }

  AbcTwinSyncSse _sse_decode_abc_twin_sync_sse(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_autoadd_a_twin_sync_sse(deserializer);
        return AbcTwinSyncSse_A(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_b_twin_sync_sse(deserializer);
        return AbcTwinSyncSse_B(field0);
      case 2:
        var field0 = _sse_decode_box_autoadd_c_twin_sync_sse(deserializer);
        return AbcTwinSyncSse_C(field0);
      case 3:
        var field0 = _sse_decode_i_32(deserializer);
        return AbcTwinSyncSse_JustInt(field0);
      default:
        throw UnimplementedError('');
    }
  }

  AnotherMacroStructTwinNormal _sse_decode_another_macro_struct_twin_normal(
      SseDeserializer deserializer) {
    var data = _sse_decode_i_32(deserializer);
    var nonFinalData = _sse_decode_i_32(deserializer);
    return AnotherMacroStructTwinNormal(data: data, nonFinalData: nonFinalData);
  }

  AnotherMacroStructTwinSse _sse_decode_another_macro_struct_twin_sse(
      SseDeserializer deserializer) {
    var data = _sse_decode_i_32(deserializer);
    var nonFinalData = _sse_decode_i_32(deserializer);
    return AnotherMacroStructTwinSse(data: data, nonFinalData: nonFinalData);
  }

  AnotherTwinNormal _sse_decode_another_twin_normal(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return AnotherTwinNormal(a: a);
  }

  AnotherTwinRustAsync _sse_decode_another_twin_rust_async(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return AnotherTwinRustAsync(a: a);
  }

  AnotherTwinRustAsyncSse _sse_decode_another_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return AnotherTwinRustAsyncSse(a: a);
  }

  AnotherTwinSse _sse_decode_another_twin_sse(SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return AnotherTwinSse(a: a);
  }

  AnotherTwinSync _sse_decode_another_twin_sync(SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return AnotherTwinSync(a: a);
  }

  AnotherTwinSyncSse _sse_decode_another_twin_sync_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return AnotherTwinSyncSse(a: a);
  }

  ApplicationEnv _sse_decode_application_env(SseDeserializer deserializer) {
    var vars = _sse_decode_list_application_env_var(deserializer);
    return ApplicationEnv(vars: vars);
  }

  ApplicationEnvVar _sse_decode_application_env_var(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_String(deserializer);
    var field1 = _sse_decode_bool(deserializer);
    return ApplicationEnvVar(field0: field0, field1: field1);
  }

  ApplicationMessage _sse_decode_application_message(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return ApplicationMessage_DisplayMessage(field0);
      case 1:
        var x = _sse_decode_i_32(deserializer);
        var y = _sse_decode_i_32(deserializer);
        return ApplicationMessage_RenderPixel(x: x, y: y);
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw UnimplementedError('');
    }
  }

  ApplicationMode _sse_decode_application_mode(SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return ApplicationMode.values[inner];
  }

  ApplicationSettings _sse_decode_application_settings(
      SseDeserializer deserializer) {
    var name = _sse_decode_String(deserializer);
    var version = _sse_decode_String(deserializer);
    var mode = _sse_decode_application_mode(deserializer);
    var env = _sse_decode_box_application_env(deserializer);
    var envOptional = _sse_decode_opt_box_autoadd_application_env(deserializer);
    return ApplicationSettings(
        name: name,
        version: version,
        mode: mode,
        env: env,
        envOptional: envOptional);
  }

  AttributeTwinNormal _sse_decode_attribute_twin_normal(
      SseDeserializer deserializer) {
    var key = _sse_decode_String(deserializer);
    var value = _sse_decode_String(deserializer);
    return AttributeTwinNormal(key: key, value: value);
  }

  AttributeTwinRustAsync _sse_decode_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    var key = _sse_decode_String(deserializer);
    var value = _sse_decode_String(deserializer);
    return AttributeTwinRustAsync(key: key, value: value);
  }

  AttributeTwinRustAsyncSse _sse_decode_attribute_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var key = _sse_decode_String(deserializer);
    var value = _sse_decode_String(deserializer);
    return AttributeTwinRustAsyncSse(key: key, value: value);
  }

  AttributeTwinSse _sse_decode_attribute_twin_sse(
      SseDeserializer deserializer) {
    var key = _sse_decode_String(deserializer);
    var value = _sse_decode_String(deserializer);
    return AttributeTwinSse(key: key, value: value);
  }

  AttributeTwinSync _sse_decode_attribute_twin_sync(
      SseDeserializer deserializer) {
    var key = _sse_decode_String(deserializer);
    var value = _sse_decode_String(deserializer);
    return AttributeTwinSync(key: key, value: value);
  }

  AttributeTwinSyncSse _sse_decode_attribute_twin_sync_sse(
      SseDeserializer deserializer) {
    var key = _sse_decode_String(deserializer);
    var value = _sse_decode_String(deserializer);
    return AttributeTwinSyncSse(key: key, value: value);
  }

  BTwinNormal _sse_decode_b_twin_normal(SseDeserializer deserializer) {
    var b = _sse_decode_i_32(deserializer);
    return BTwinNormal(b: b);
  }

  BTwinRustAsync _sse_decode_b_twin_rust_async(SseDeserializer deserializer) {
    var b = _sse_decode_i_32(deserializer);
    return BTwinRustAsync(b: b);
  }

  BTwinRustAsyncSse _sse_decode_b_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var b = _sse_decode_i_32(deserializer);
    return BTwinRustAsyncSse(b: b);
  }

  BTwinSse _sse_decode_b_twin_sse(SseDeserializer deserializer) {
    var b = _sse_decode_i_32(deserializer);
    return BTwinSse(b: b);
  }

  BTwinSync _sse_decode_b_twin_sync(SseDeserializer deserializer) {
    var b = _sse_decode_i_32(deserializer);
    return BTwinSync(b: b);
  }

  BTwinSyncSse _sse_decode_b_twin_sync_sse(SseDeserializer deserializer) {
    var b = _sse_decode_i_32(deserializer);
    return BTwinSyncSse(b: b);
  }

  BigBuffersTwinNormal _sse_decode_big_buffers_twin_normal(
      SseDeserializer deserializer) {
    var int64 = _sse_decode_list_prim_i_64(deserializer);
    var uint64 = _sse_decode_list_prim_u_64(deserializer);
    return BigBuffersTwinNormal(int64: int64, uint64: uint64);
  }

  BigBuffersTwinRustAsync _sse_decode_big_buffers_twin_rust_async(
      SseDeserializer deserializer) {
    var int64 = _sse_decode_list_prim_i_64(deserializer);
    var uint64 = _sse_decode_list_prim_u_64(deserializer);
    return BigBuffersTwinRustAsync(int64: int64, uint64: uint64);
  }

  BigBuffersTwinRustAsyncSse _sse_decode_big_buffers_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var int64 = _sse_decode_list_prim_i_64(deserializer);
    var uint64 = _sse_decode_list_prim_u_64(deserializer);
    return BigBuffersTwinRustAsyncSse(int64: int64, uint64: uint64);
  }

  BigBuffersTwinSse _sse_decode_big_buffers_twin_sse(
      SseDeserializer deserializer) {
    var int64 = _sse_decode_list_prim_i_64(deserializer);
    var uint64 = _sse_decode_list_prim_u_64(deserializer);
    return BigBuffersTwinSse(int64: int64, uint64: uint64);
  }

  BigBuffersTwinSync _sse_decode_big_buffers_twin_sync(
      SseDeserializer deserializer) {
    var int64 = _sse_decode_list_prim_i_64(deserializer);
    var uint64 = _sse_decode_list_prim_u_64(deserializer);
    return BigBuffersTwinSync(int64: int64, uint64: uint64);
  }

  BigBuffersTwinSyncSse _sse_decode_big_buffers_twin_sync_sse(
      SseDeserializer deserializer) {
    var int64 = _sse_decode_list_prim_i_64(deserializer);
    var uint64 = _sse_decode_list_prim_u_64(deserializer);
    return BigBuffersTwinSyncSse(int64: int64, uint64: uint64);
  }

  BlobTwinNormal _sse_decode_blob_twin_normal(SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_1600(deserializer);
    return BlobTwinNormal(field0: field0);
  }

  BlobTwinRustAsync _sse_decode_blob_twin_rust_async(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_1600(deserializer);
    return BlobTwinRustAsync(field0: field0);
  }

  BlobTwinRustAsyncSse _sse_decode_blob_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_1600(deserializer);
    return BlobTwinRustAsyncSse(field0: field0);
  }

  BlobTwinSse _sse_decode_blob_twin_sse(SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_1600(deserializer);
    return BlobTwinSse(field0: field0);
  }

  BlobTwinSync _sse_decode_blob_twin_sync(SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_1600(deserializer);
    return BlobTwinSync(field0: field0);
  }

  BlobTwinSyncSse _sse_decode_blob_twin_sync_sse(SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_1600(deserializer);
    return BlobTwinSyncSse(field0: field0);
  }

  bool _sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  ApplicationEnv _sse_decode_box_application_env(SseDeserializer deserializer) {
    return (_sse_decode_application_env(deserializer));
  }

  Duration _sse_decode_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    return (_sse_decode_Chrono_Duration(deserializer));
  }

  DateTime _sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer) {
    return (_sse_decode_Chrono_Naive(deserializer));
  }

  DateTime _sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    return (_sse_decode_Chrono_Utc(deserializer));
  }

  Object _sse_decode_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    return (_sse_decode_DartOpaque(deserializer));
  }

  HideData _sse_decode_box_autoadd_RustOpaque_hide_data(
      SseDeserializer deserializer) {
    return (_sse_decode_RustOpaque_hide_data(deserializer));
  }

  ATwinNormal _sse_decode_box_autoadd_a_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_a_twin_normal(deserializer));
  }

  ATwinRustAsync _sse_decode_box_autoadd_a_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_a_twin_rust_async(deserializer));
  }

  ATwinRustAsyncSse _sse_decode_box_autoadd_a_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_a_twin_rust_async_sse(deserializer));
  }

  ATwinSse _sse_decode_box_autoadd_a_twin_sse(SseDeserializer deserializer) {
    return (_sse_decode_a_twin_sse(deserializer));
  }

  ATwinSync _sse_decode_box_autoadd_a_twin_sync(SseDeserializer deserializer) {
    return (_sse_decode_a_twin_sync(deserializer));
  }

  ATwinSyncSse _sse_decode_box_autoadd_a_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_a_twin_sync_sse(deserializer));
  }

  ApplicationEnv _sse_decode_box_autoadd_application_env(
      SseDeserializer deserializer) {
    return (_sse_decode_application_env(deserializer));
  }

  AttributeTwinNormal _sse_decode_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_attribute_twin_normal(deserializer));
  }

  AttributeTwinRustAsync _sse_decode_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_attribute_twin_rust_async(deserializer));
  }

  AttributeTwinRustAsyncSse
      _sse_decode_box_autoadd_attribute_twin_rust_async_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_attribute_twin_rust_async_sse(deserializer));
  }

  AttributeTwinSse _sse_decode_box_autoadd_attribute_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_attribute_twin_sse(deserializer));
  }

  AttributeTwinSync _sse_decode_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_attribute_twin_sync(deserializer));
  }

  AttributeTwinSyncSse _sse_decode_box_autoadd_attribute_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_attribute_twin_sync_sse(deserializer));
  }

  BTwinNormal _sse_decode_box_autoadd_b_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_b_twin_normal(deserializer));
  }

  BTwinRustAsync _sse_decode_box_autoadd_b_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_b_twin_rust_async(deserializer));
  }

  BTwinRustAsyncSse _sse_decode_box_autoadd_b_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_b_twin_rust_async_sse(deserializer));
  }

  BTwinSse _sse_decode_box_autoadd_b_twin_sse(SseDeserializer deserializer) {
    return (_sse_decode_b_twin_sse(deserializer));
  }

  BTwinSync _sse_decode_box_autoadd_b_twin_sync(SseDeserializer deserializer) {
    return (_sse_decode_b_twin_sync(deserializer));
  }

  BTwinSyncSse _sse_decode_box_autoadd_b_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_b_twin_sync_sse(deserializer));
  }

  bool _sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    return (_sse_decode_bool(deserializer));
  }

  CTwinNormal _sse_decode_box_autoadd_c_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_c_twin_normal(deserializer));
  }

  CTwinRustAsync _sse_decode_box_autoadd_c_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_c_twin_rust_async(deserializer));
  }

  CTwinRustAsyncSse _sse_decode_box_autoadd_c_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_c_twin_rust_async_sse(deserializer));
  }

  CTwinSse _sse_decode_box_autoadd_c_twin_sse(SseDeserializer deserializer) {
    return (_sse_decode_c_twin_sse(deserializer));
  }

  CTwinSync _sse_decode_box_autoadd_c_twin_sync(SseDeserializer deserializer) {
    return (_sse_decode_c_twin_sync(deserializer));
  }

  CTwinSyncSse _sse_decode_box_autoadd_c_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_c_twin_sync_sse(deserializer));
  }

  CustomNestedError2TwinNormal
      _sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_2_twin_normal(deserializer));
  }

  CustomNestedError2TwinRustAsync
      _sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_2_twin_rust_async(deserializer));
  }

  CustomNestedError2TwinRustAsyncSse
      _sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_2_twin_rust_async_sse(
        deserializer));
  }

  CustomNestedError2TwinSse
      _sse_decode_box_autoadd_custom_nested_error_2_twin_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_2_twin_sse(deserializer));
  }

  CustomNestedError2TwinSync
      _sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_2_twin_sync(deserializer));
  }

  CustomNestedError2TwinSyncSse
      _sse_decode_box_autoadd_custom_nested_error_2_twin_sync_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_2_twin_sync_sse(deserializer));
  }

  CustomNestedErrorInnerTwinNormal
      _sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_inner_twin_normal(deserializer));
  }

  CustomNestedErrorInnerTwinRustAsync
      _sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_inner_twin_rust_async(
        deserializer));
  }

  CustomNestedErrorInnerTwinRustAsyncSse
      _sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_inner_twin_rust_async_sse(
        deserializer));
  }

  CustomNestedErrorInnerTwinSse
      _sse_decode_box_autoadd_custom_nested_error_inner_twin_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_inner_twin_sse(deserializer));
  }

  CustomNestedErrorInnerTwinSync
      _sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_inner_twin_sync(deserializer));
  }

  CustomNestedErrorInnerTwinSyncSse
      _sse_decode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_custom_nested_error_inner_twin_sync_sse(deserializer));
  }

  ElementTwinNormal _sse_decode_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_element_twin_normal(deserializer));
  }

  ElementTwinRustAsync _sse_decode_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_element_twin_rust_async(deserializer));
  }

  ElementTwinRustAsyncSse _sse_decode_box_autoadd_element_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_element_twin_rust_async_sse(deserializer));
  }

  ElementTwinSse _sse_decode_box_autoadd_element_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_element_twin_sse(deserializer));
  }

  ElementTwinSync _sse_decode_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_element_twin_sync(deserializer));
  }

  ElementTwinSyncSse _sse_decode_box_autoadd_element_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_element_twin_sync_sse(deserializer));
  }

  ExoticOptionalsTwinNormal
      _sse_decode_box_autoadd_exotic_optionals_twin_normal(
          SseDeserializer deserializer) {
    return (_sse_decode_exotic_optionals_twin_normal(deserializer));
  }

  ExoticOptionalsTwinRustAsync
      _sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    return (_sse_decode_exotic_optionals_twin_rust_async(deserializer));
  }

  ExoticOptionalsTwinRustAsyncSse
      _sse_decode_box_autoadd_exotic_optionals_twin_rust_async_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_exotic_optionals_twin_rust_async_sse(deserializer));
  }

  ExoticOptionalsTwinSse _sse_decode_box_autoadd_exotic_optionals_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_exotic_optionals_twin_sse(deserializer));
  }

  ExoticOptionalsTwinSync _sse_decode_box_autoadd_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_exotic_optionals_twin_sync(deserializer));
  }

  ExoticOptionalsTwinSyncSse
      _sse_decode_box_autoadd_exotic_optionals_twin_sync_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_exotic_optionals_twin_sync_sse(deserializer));
  }

  double _sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    return (_sse_decode_f_32(deserializer));
  }

  double _sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    return (_sse_decode_f_64(deserializer));
  }

  int _sse_decode_box_autoadd_i_16(SseDeserializer deserializer) {
    return (_sse_decode_i_16(deserializer));
  }

  int _sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    return (_sse_decode_i_32(deserializer));
  }

  int _sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    return (_sse_decode_i_64(deserializer));
  }

  int _sse_decode_box_autoadd_i_8(SseDeserializer deserializer) {
    return (_sse_decode_i_8(deserializer));
  }

  ListOfNestedRawStringMirrored
      _sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
          SseDeserializer deserializer) {
    return (_sse_decode_list_of_nested_raw_string_mirrored(deserializer));
  }

  MeasureTwinNormal _sse_decode_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_measure_twin_normal(deserializer));
  }

  MeasureTwinRustAsync _sse_decode_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_measure_twin_rust_async(deserializer));
  }

  MeasureTwinRustAsyncSse _sse_decode_box_autoadd_measure_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_measure_twin_rust_async_sse(deserializer));
  }

  MeasureTwinSse _sse_decode_box_autoadd_measure_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_measure_twin_sse(deserializer));
  }

  MeasureTwinSync _sse_decode_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_measure_twin_sync(deserializer));
  }

  MeasureTwinSyncSse _sse_decode_box_autoadd_measure_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_measure_twin_sync_sse(deserializer));
  }

  NestedRawStringMirrored _sse_decode_box_autoadd_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    return (_sse_decode_nested_raw_string_mirrored(deserializer));
  }

  NewTypeIntTwinNormal _sse_decode_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_new_type_int_twin_normal(deserializer));
  }

  NewTypeIntTwinRustAsync _sse_decode_box_autoadd_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_new_type_int_twin_rust_async(deserializer));
  }

  NewTypeIntTwinRustAsyncSse
      _sse_decode_box_autoadd_new_type_int_twin_rust_async_sse(
          SseDeserializer deserializer) {
    return (_sse_decode_new_type_int_twin_rust_async_sse(deserializer));
  }

  NewTypeIntTwinSse _sse_decode_box_autoadd_new_type_int_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_new_type_int_twin_sse(deserializer));
  }

  NewTypeIntTwinSync _sse_decode_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_new_type_int_twin_sync(deserializer));
  }

  NewTypeIntTwinSyncSse _sse_decode_box_autoadd_new_type_int_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_new_type_int_twin_sync_sse(deserializer));
  }

  RawStringMirrored _sse_decode_box_autoadd_raw_string_mirrored(
      SseDeserializer deserializer) {
    return (_sse_decode_raw_string_mirrored(deserializer));
  }

  int _sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    return (_sse_decode_u_16(deserializer));
  }

  int _sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    return (_sse_decode_u_32(deserializer));
  }

  int _sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    return (_sse_decode_u_64(deserializer));
  }

  int _sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    return (_sse_decode_u_8(deserializer));
  }

  WeekdaysTwinNormal _sse_decode_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_weekdays_twin_normal(deserializer));
  }

  WeekdaysTwinRustAsync _sse_decode_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_weekdays_twin_rust_async(deserializer));
  }

  WeekdaysTwinRustAsyncSse _sse_decode_box_autoadd_weekdays_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_weekdays_twin_rust_async_sse(deserializer));
  }

  WeekdaysTwinSse _sse_decode_box_autoadd_weekdays_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_weekdays_twin_sse(deserializer));
  }

  WeekdaysTwinSync _sse_decode_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_weekdays_twin_sync(deserializer));
  }

  WeekdaysTwinSyncSse _sse_decode_box_autoadd_weekdays_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_weekdays_twin_sync_sse(deserializer));
  }

  DistanceTwinNormal _sse_decode_box_distance_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_distance_twin_normal(deserializer));
  }

  DistanceTwinRustAsync _sse_decode_box_distance_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_distance_twin_rust_async(deserializer));
  }

  DistanceTwinRustAsyncSse _sse_decode_box_distance_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_distance_twin_rust_async_sse(deserializer));
  }

  DistanceTwinSse _sse_decode_box_distance_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_distance_twin_sse(deserializer));
  }

  DistanceTwinSync _sse_decode_box_distance_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_distance_twin_sync(deserializer));
  }

  DistanceTwinSyncSse _sse_decode_box_distance_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_distance_twin_sync_sse(deserializer));
  }

  FeedIdTwinNormal _sse_decode_box_feed_id_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_feed_id_twin_normal(deserializer));
  }

  FeedIdTwinRustAsync _sse_decode_box_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_feed_id_twin_rust_async(deserializer));
  }

  FeedIdTwinRustAsyncSse _sse_decode_box_feed_id_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_feed_id_twin_rust_async_sse(deserializer));
  }

  FeedIdTwinSse _sse_decode_box_feed_id_twin_sse(SseDeserializer deserializer) {
    return (_sse_decode_feed_id_twin_sse(deserializer));
  }

  FeedIdTwinSync _sse_decode_box_feed_id_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_feed_id_twin_sync(deserializer));
  }

  FeedIdTwinSyncSse _sse_decode_box_feed_id_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_feed_id_twin_sync_sse(deserializer));
  }

  KitchenSinkTwinNormal _sse_decode_box_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_kitchen_sink_twin_normal(deserializer));
  }

  KitchenSinkTwinRustAsync _sse_decode_box_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_kitchen_sink_twin_rust_async(deserializer));
  }

  KitchenSinkTwinRustAsyncSse _sse_decode_box_kitchen_sink_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_kitchen_sink_twin_rust_async_sse(deserializer));
  }

  KitchenSinkTwinSse _sse_decode_box_kitchen_sink_twin_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_kitchen_sink_twin_sse(deserializer));
  }

  KitchenSinkTwinSync _sse_decode_box_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    return (_sse_decode_kitchen_sink_twin_sync(deserializer));
  }

  KitchenSinkTwinSyncSse _sse_decode_box_kitchen_sink_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_kitchen_sink_twin_sync_sse(deserializer));
  }

  SpeedTwinNormal _sse_decode_box_speed_twin_normal(
      SseDeserializer deserializer) {
    return (_sse_decode_speed_twin_normal(deserializer));
  }

  SpeedTwinRustAsync _sse_decode_box_speed_twin_rust_async(
      SseDeserializer deserializer) {
    return (_sse_decode_speed_twin_rust_async(deserializer));
  }

  SpeedTwinRustAsyncSse _sse_decode_box_speed_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_speed_twin_rust_async_sse(deserializer));
  }

  SpeedTwinSse _sse_decode_box_speed_twin_sse(SseDeserializer deserializer) {
    return (_sse_decode_speed_twin_sse(deserializer));
  }

  SpeedTwinSync _sse_decode_box_speed_twin_sync(SseDeserializer deserializer) {
    return (_sse_decode_speed_twin_sync(deserializer));
  }

  SpeedTwinSyncSse _sse_decode_box_speed_twin_sync_sse(
      SseDeserializer deserializer) {
    return (_sse_decode_speed_twin_sync_sse(deserializer));
  }

  U8Array8 _sse_decode_box_u_8_array_8(SseDeserializer deserializer) {
    return (_sse_decode_u_8_array_8(deserializer));
  }

  CTwinNormal _sse_decode_c_twin_normal(SseDeserializer deserializer) {
    var c = _sse_decode_bool(deserializer);
    return CTwinNormal(c: c);
  }

  CTwinRustAsync _sse_decode_c_twin_rust_async(SseDeserializer deserializer) {
    var c = _sse_decode_bool(deserializer);
    return CTwinRustAsync(c: c);
  }

  CTwinRustAsyncSse _sse_decode_c_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var c = _sse_decode_bool(deserializer);
    return CTwinRustAsyncSse(c: c);
  }

  CTwinSse _sse_decode_c_twin_sse(SseDeserializer deserializer) {
    var c = _sse_decode_bool(deserializer);
    return CTwinSse(c: c);
  }

  CTwinSync _sse_decode_c_twin_sync(SseDeserializer deserializer) {
    var c = _sse_decode_bool(deserializer);
    return CTwinSync(c: c);
  }

  CTwinSyncSse _sse_decode_c_twin_sync_sse(SseDeserializer deserializer) {
    var c = _sse_decode_bool(deserializer);
    return CTwinSyncSse(c: c);
  }

  ConcatenateWithTwinNormal _sse_decode_concatenate_with_twin_normal(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ConcatenateWithTwinNormal(a: a);
  }

  ConcatenateWithTwinRustAsync _sse_decode_concatenate_with_twin_rust_async(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ConcatenateWithTwinRustAsync(a: a);
  }

  ConcatenateWithTwinRustAsyncSse
      _sse_decode_concatenate_with_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ConcatenateWithTwinRustAsyncSse(a: a);
  }

  ConcatenateWithTwinSse _sse_decode_concatenate_with_twin_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ConcatenateWithTwinSse(a: a);
  }

  ConcatenateWithTwinSync _sse_decode_concatenate_with_twin_sync(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ConcatenateWithTwinSync(a: a);
  }

  ConcatenateWithTwinSyncSse _sse_decode_concatenate_with_twin_sync_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return ConcatenateWithTwinSyncSse(a: a);
  }

  ContainsMirroredSubStructTwinNormal
      _sse_decode_contains_mirrored_sub_struct_twin_normal(
          SseDeserializer deserializer) {
    var test = _sse_decode_raw_string_mirrored(deserializer);
    var test2 = _sse_decode_another_twin_normal(deserializer);
    return ContainsMirroredSubStructTwinNormal(test: test, test2: test2);
  }

  ContainsMirroredSubStructTwinRustAsync
      _sse_decode_contains_mirrored_sub_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var test = _sse_decode_raw_string_mirrored(deserializer);
    var test2 = _sse_decode_another_twin_rust_async(deserializer);
    return ContainsMirroredSubStructTwinRustAsync(test: test, test2: test2);
  }

  ContainsMirroredSubStructTwinRustAsyncSse
      _sse_decode_contains_mirrored_sub_struct_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var test = _sse_decode_raw_string_mirrored(deserializer);
    var test2 = _sse_decode_another_twin_rust_async_sse(deserializer);
    return ContainsMirroredSubStructTwinRustAsyncSse(test: test, test2: test2);
  }

  ContainsMirroredSubStructTwinSse
      _sse_decode_contains_mirrored_sub_struct_twin_sse(
          SseDeserializer deserializer) {
    var test = _sse_decode_raw_string_mirrored(deserializer);
    var test2 = _sse_decode_another_twin_sse(deserializer);
    return ContainsMirroredSubStructTwinSse(test: test, test2: test2);
  }

  ContainsMirroredSubStructTwinSync
      _sse_decode_contains_mirrored_sub_struct_twin_sync(
          SseDeserializer deserializer) {
    var test = _sse_decode_raw_string_mirrored(deserializer);
    var test2 = _sse_decode_another_twin_sync(deserializer);
    return ContainsMirroredSubStructTwinSync(test: test, test2: test2);
  }

  ContainsMirroredSubStructTwinSyncSse
      _sse_decode_contains_mirrored_sub_struct_twin_sync_sse(
          SseDeserializer deserializer) {
    var test = _sse_decode_raw_string_mirrored(deserializer);
    var test2 = _sse_decode_another_twin_sync_sse(deserializer);
    return ContainsMirroredSubStructTwinSyncSse(test: test, test2: test2);
  }

  CustomEnumErrorTwinNormal _sse_decode_custom_enum_error_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var message = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_One(
            message: message, backtrace: backtrace);
      case 1:
        var message = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_Two(
            message: message, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomEnumErrorTwinRustAsync _sse_decode_custom_enum_error_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var message = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_One(
            message: message, backtrace: backtrace);
      case 1:
        var message = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_Two(
            message: message, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomEnumErrorTwinRustAsyncSse
      _sse_decode_custom_enum_error_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var message = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsyncSse_One(
            message: message, backtrace: backtrace);
      case 1:
        var message = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsyncSse_Two(
            message: message, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomEnumErrorTwinSse _sse_decode_custom_enum_error_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var message = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSse_One(
            message: message, backtrace: backtrace);
      case 1:
        var message = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSse_Two(
            message: message, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomEnumErrorTwinSync _sse_decode_custom_enum_error_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var message = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_One(
            message: message, backtrace: backtrace);
      case 1:
        var message = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_Two(
            message: message, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomEnumErrorTwinSyncSse _sse_decode_custom_enum_error_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var message = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSyncSse_One(
            message: message, backtrace: backtrace);
      case 1:
        var message = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSyncSse_Two(
            message: message, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomErrorTwinNormal _sse_decode_custom_error_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var e = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error0(e: e, backtrace: backtrace);
      case 1:
        var e = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error1(e: e, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomErrorTwinRustAsync _sse_decode_custom_error_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var e = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error0(e: e, backtrace: backtrace);
      case 1:
        var e = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error1(e: e, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomErrorTwinRustAsyncSse _sse_decode_custom_error_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var e = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsyncSse_Error0(e: e, backtrace: backtrace);
      case 1:
        var e = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsyncSse_Error1(e: e, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomErrorTwinSse _sse_decode_custom_error_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var e = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSse_Error0(e: e, backtrace: backtrace);
      case 1:
        var e = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSse_Error1(e: e, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomErrorTwinSync _sse_decode_custom_error_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var e = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error0(e: e, backtrace: backtrace);
      case 1:
        var e = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error1(e: e, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomErrorTwinSyncSse _sse_decode_custom_error_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var e = _sse_decode_String(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSyncSse_Error0(e: e, backtrace: backtrace);
      case 1:
        var e = _sse_decode_u_32(deserializer);
        var backtrace = _sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSyncSse_Error1(e: e, backtrace: backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError1TwinNormal _sse_decode_custom_nested_error_1_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError1TwinNormal_CustomNested1(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
            deserializer);
        return CustomNestedError1TwinNormal_ErrorNested(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError1TwinRustAsync
      _sse_decode_custom_nested_error_1_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError1TwinRustAsync_CustomNested1(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
                deserializer);
        return CustomNestedError1TwinRustAsync_ErrorNested(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError1TwinRustAsyncSse
      _sse_decode_custom_nested_error_1_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError1TwinRustAsyncSse_CustomNested1(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async_sse(
                deserializer);
        return CustomNestedError1TwinRustAsyncSse_ErrorNested(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError1TwinSse _sse_decode_custom_nested_error_1_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError1TwinSse_CustomNested1(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_custom_nested_error_2_twin_sse(
            deserializer);
        return CustomNestedError1TwinSse_ErrorNested(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError1TwinSync _sse_decode_custom_nested_error_1_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError1TwinSync_CustomNested1(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
            deserializer);
        return CustomNestedError1TwinSync_ErrorNested(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError1TwinSyncSse _sse_decode_custom_nested_error_1_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError1TwinSyncSse_CustomNested1(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_2_twin_sync_sse(
                deserializer);
        return CustomNestedError1TwinSyncSse_ErrorNested(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError2TwinNormal _sse_decode_custom_nested_error_2_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2Number(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError2TwinRustAsync
      _sse_decode_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2Number(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError2TwinRustAsyncSse
      _sse_decode_custom_nested_error_2_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError2TwinRustAsyncSse_CustomNested2(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedError2TwinRustAsyncSse_CustomNested2Number(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError2TwinSse _sse_decode_custom_nested_error_2_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError2TwinSse_CustomNested2(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedError2TwinSse_CustomNested2Number(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError2TwinSync _sse_decode_custom_nested_error_2_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError2TwinSync_CustomNested2(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedError2TwinSync_CustomNested2Number(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedError2TwinSyncSse _sse_decode_custom_nested_error_2_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedError2TwinSyncSse_CustomNested2(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedError2TwinSyncSse_CustomNested2Number(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorInnerTwinNormal
      _sse_decode_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinNormal_Three(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinNormal_Four(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorInnerTwinRustAsync
      _sse_decode_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Three(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Four(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorInnerTwinRustAsyncSse
      _sse_decode_custom_nested_error_inner_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinRustAsyncSse_Three(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinRustAsyncSse_Four(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorInnerTwinSse _sse_decode_custom_nested_error_inner_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinSse_Three(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinSse_Four(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorInnerTwinSync
      _sse_decode_custom_nested_error_inner_twin_sync(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinSync_Three(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinSync_Four(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorInnerTwinSyncSse
      _sse_decode_custom_nested_error_inner_twin_sync_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinSyncSse_Three(field0);
      case 1:
        var field0 = _sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinSyncSse_Four(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorOuterTwinNormal
      _sse_decode_custom_nested_error_outer_twin_normal(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinNormal_One(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
                deserializer);
        return CustomNestedErrorOuterTwinNormal_Two(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorOuterTwinRustAsync
      _sse_decode_custom_nested_error_outer_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinRustAsync_One(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
                deserializer);
        return CustomNestedErrorOuterTwinRustAsync_Two(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorOuterTwinRustAsyncSse
      _sse_decode_custom_nested_error_outer_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinRustAsyncSse_One(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
                deserializer);
        return CustomNestedErrorOuterTwinRustAsyncSse_Two(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorOuterTwinSse _sse_decode_custom_nested_error_outer_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinSse_One(field0);
      case 1:
        var field0 = _sse_decode_box_autoadd_custom_nested_error_inner_twin_sse(
            deserializer);
        return CustomNestedErrorOuterTwinSse_Two(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorOuterTwinSync
      _sse_decode_custom_nested_error_outer_twin_sync(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinSync_One(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
                deserializer);
        return CustomNestedErrorOuterTwinSync_Two(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomNestedErrorOuterTwinSyncSse
      _sse_decode_custom_nested_error_outer_twin_sync_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinSyncSse_One(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
                deserializer);
        return CustomNestedErrorOuterTwinSyncSse_Two(field0);
      default:
        throw UnimplementedError('');
    }
  }

  CustomStructErrorAnotherTwinNormal
      _sse_decode_custom_struct_error_another_twin_normal(
          SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinNormal(message: message);
  }

  CustomStructErrorAnotherTwinRustAsync
      _sse_decode_custom_struct_error_another_twin_rust_async(
          SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinRustAsync(message: message);
  }

  CustomStructErrorAnotherTwinRustAsyncSse
      _sse_decode_custom_struct_error_another_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinRustAsyncSse(message: message);
  }

  CustomStructErrorAnotherTwinSse
      _sse_decode_custom_struct_error_another_twin_sse(
          SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinSse(message: message);
  }

  CustomStructErrorAnotherTwinSync
      _sse_decode_custom_struct_error_another_twin_sync(
          SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinSync(message: message);
  }

  CustomStructErrorAnotherTwinSyncSse
      _sse_decode_custom_struct_error_another_twin_sync_sse(
          SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinSyncSse(message: message);
  }

  CustomStructErrorTwinNormal _sse_decode_custom_struct_error_twin_normal(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return CustomStructErrorTwinNormal(a: a);
  }

  CustomStructErrorTwinRustAsync
      _sse_decode_custom_struct_error_twin_rust_async(
          SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return CustomStructErrorTwinRustAsync(a: a);
  }

  CustomStructErrorTwinRustAsyncSse
      _sse_decode_custom_struct_error_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return CustomStructErrorTwinRustAsyncSse(a: a);
  }

  CustomStructErrorTwinSse _sse_decode_custom_struct_error_twin_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return CustomStructErrorTwinSse(a: a);
  }

  CustomStructErrorTwinSync _sse_decode_custom_struct_error_twin_sync(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return CustomStructErrorTwinSync(a: a);
  }

  CustomStructErrorTwinSyncSse _sse_decode_custom_struct_error_twin_sync_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_String(deserializer);
    return CustomStructErrorTwinSyncSse(a: a);
  }

  CustomStructTwinNormal _sse_decode_custom_struct_twin_normal(
      SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructTwinNormal(message: message);
  }

  CustomStructTwinRustAsync _sse_decode_custom_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructTwinRustAsync(message: message);
  }

  CustomStructTwinRustAsyncSse _sse_decode_custom_struct_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructTwinRustAsyncSse(message: message);
  }

  CustomStructTwinSse _sse_decode_custom_struct_twin_sse(
      SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructTwinSse(message: message);
  }

  CustomStructTwinSync _sse_decode_custom_struct_twin_sync(
      SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructTwinSync(message: message);
  }

  CustomStructTwinSyncSse _sse_decode_custom_struct_twin_sync_sse(
      SseDeserializer deserializer) {
    var message = _sse_decode_String(deserializer);
    return CustomStructTwinSyncSse(message: message);
  }

  DartOpaqueNestedTwinNormal _sse_decode_dart_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    var first = _sse_decode_DartOpaque(deserializer);
    var second = _sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinNormal(first: first, second: second);
  }

  DartOpaqueNestedTwinRustAsync _sse_decode_dart_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    var first = _sse_decode_DartOpaque(deserializer);
    var second = _sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinRustAsync(first: first, second: second);
  }

  DartOpaqueNestedTwinRustAsyncSse
      _sse_decode_dart_opaque_nested_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var first = _sse_decode_DartOpaque(deserializer);
    var second = _sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinRustAsyncSse(first: first, second: second);
  }

  DartOpaqueNestedTwinSse _sse_decode_dart_opaque_nested_twin_sse(
      SseDeserializer deserializer) {
    var first = _sse_decode_DartOpaque(deserializer);
    var second = _sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinSse(first: first, second: second);
  }

  DartOpaqueNestedTwinSync _sse_decode_dart_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    var first = _sse_decode_DartOpaque(deserializer);
    var second = _sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinSync(first: first, second: second);
  }

  DartOpaqueNestedTwinSyncSse _sse_decode_dart_opaque_nested_twin_sync_sse(
      SseDeserializer deserializer) {
    var first = _sse_decode_DartOpaque(deserializer);
    var second = _sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinSyncSse(first: first, second: second);
  }

  dynamic _sse_decode_dartabi(SseDeserializer deserializer) {
    throw UnimplementedError('');
  }

  DistanceTwinNormal _sse_decode_distance_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinNormal_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return DistanceTwinNormal_Map(field0);
      default:
        throw UnimplementedError('');
    }
  }

  DistanceTwinRustAsync _sse_decode_distance_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinRustAsync_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return DistanceTwinRustAsync_Map(field0);
      default:
        throw UnimplementedError('');
    }
  }

  DistanceTwinRustAsyncSse _sse_decode_distance_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinRustAsyncSse_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return DistanceTwinRustAsyncSse_Map(field0);
      default:
        throw UnimplementedError('');
    }
  }

  DistanceTwinSse _sse_decode_distance_twin_sse(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinSse_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return DistanceTwinSse_Map(field0);
      default:
        throw UnimplementedError('');
    }
  }

  DistanceTwinSync _sse_decode_distance_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinSync_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return DistanceTwinSync_Map(field0);
      default:
        throw UnimplementedError('');
    }
  }

  DistanceTwinSyncSse _sse_decode_distance_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinSyncSse_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return DistanceTwinSyncSse_Map(field0);
      default:
        throw UnimplementedError('');
    }
  }

  ElementTwinNormal _sse_decode_element_twin_normal(
      SseDeserializer deserializer) {
    var tag = _sse_decode_opt_String(deserializer);
    var text = _sse_decode_opt_String(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_normal(deserializer);
    var children = _sse_decode_opt_list_element_twin_normal(deserializer);
    return ElementTwinNormal(
        tag: tag, text: text, attributes: attributes, children: children);
  }

  ElementTwinRustAsync _sse_decode_element_twin_rust_async(
      SseDeserializer deserializer) {
    var tag = _sse_decode_opt_String(deserializer);
    var text = _sse_decode_opt_String(deserializer);
    var attributes =
        _sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var children = _sse_decode_opt_list_element_twin_rust_async(deserializer);
    return ElementTwinRustAsync(
        tag: tag, text: text, attributes: attributes, children: children);
  }

  ElementTwinRustAsyncSse _sse_decode_element_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag = _sse_decode_opt_String(deserializer);
    var text = _sse_decode_opt_String(deserializer);
    var attributes =
        _sse_decode_opt_list_attribute_twin_rust_async_sse(deserializer);
    var children =
        _sse_decode_opt_list_element_twin_rust_async_sse(deserializer);
    return ElementTwinRustAsyncSse(
        tag: tag, text: text, attributes: attributes, children: children);
  }

  ElementTwinSse _sse_decode_element_twin_sse(SseDeserializer deserializer) {
    var tag = _sse_decode_opt_String(deserializer);
    var text = _sse_decode_opt_String(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_sse(deserializer);
    var children = _sse_decode_opt_list_element_twin_sse(deserializer);
    return ElementTwinSse(
        tag: tag, text: text, attributes: attributes, children: children);
  }

  ElementTwinSync _sse_decode_element_twin_sync(SseDeserializer deserializer) {
    var tag = _sse_decode_opt_String(deserializer);
    var text = _sse_decode_opt_String(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_sync(deserializer);
    var children = _sse_decode_opt_list_element_twin_sync(deserializer);
    return ElementTwinSync(
        tag: tag, text: text, attributes: attributes, children: children);
  }

  ElementTwinSyncSse _sse_decode_element_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag = _sse_decode_opt_String(deserializer);
    var text = _sse_decode_opt_String(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_sync_sse(deserializer);
    var children = _sse_decode_opt_list_element_twin_sync_sse(deserializer);
    return ElementTwinSyncSse(
        tag: tag, text: text, attributes: attributes, children: children);
  }

  EmptyTwinNormal _sse_decode_empty_twin_normal(SseDeserializer deserializer) {
    return EmptyTwinNormal();
  }

  EmptyTwinRustAsync _sse_decode_empty_twin_rust_async(
      SseDeserializer deserializer) {
    return EmptyTwinRustAsync();
  }

  EmptyTwinRustAsyncSse _sse_decode_empty_twin_rust_async_sse(
      SseDeserializer deserializer) {
    return EmptyTwinRustAsyncSse();
  }

  EmptyTwinSse _sse_decode_empty_twin_sse(SseDeserializer deserializer) {
    return EmptyTwinSse();
  }

  EmptyTwinSync _sse_decode_empty_twin_sync(SseDeserializer deserializer) {
    return EmptyTwinSync();
  }

  EmptyTwinSyncSse _sse_decode_empty_twin_sync_sse(
      SseDeserializer deserializer) {
    return EmptyTwinSyncSse();
  }

  EnumDartOpaqueTwinNormal _sse_decode_enum_dart_opaque_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinNormal_Primitive(field0);
      case 1:
        var field0 = _sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinNormal_Opaque(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumDartOpaqueTwinRustAsync _sse_decode_enum_dart_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinRustAsync_Primitive(field0);
      case 1:
        var field0 = _sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinRustAsync_Opaque(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumDartOpaqueTwinRustAsyncSse
      _sse_decode_enum_dart_opaque_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinRustAsyncSse_Primitive(field0);
      case 1:
        var field0 = _sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinRustAsyncSse_Opaque(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumDartOpaqueTwinSse _sse_decode_enum_dart_opaque_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinSse_Primitive(field0);
      case 1:
        var field0 = _sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinSse_Opaque(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumDartOpaqueTwinSync _sse_decode_enum_dart_opaque_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinSync_Primitive(field0);
      case 1:
        var field0 = _sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinSync_Opaque(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumDartOpaqueTwinSyncSse _sse_decode_enum_dart_opaque_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinSyncSse_Primitive(field0);
      case 1:
        var field0 = _sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinSyncSse_Opaque(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumOpaqueTwinNormal _sse_decode_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_RustOpaque_hide_data(deserializer);
        return EnumOpaqueTwinNormal_Struct(field0);
      case 1:
        var field0 = _sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinNormal_Primitive(field0);
      case 2:
        var field0 =
            _sse_decode_RustOpaque_box_dynDartDebugTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_TraitObj(field0);
      case 3:
        var field0 = _sse_decode_RustOpaque_MutexHideData(deserializer);
        return EnumOpaqueTwinNormal_Mutex(field0);
      case 4:
        var field0 = _sse_decode_RustOpaque_RwLockHideData(deserializer);
        return EnumOpaqueTwinNormal_RwLock(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumOpaqueTwinNormalArray5 _sse_decode_enum_opaque_twin_normal_array_5(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_enum_opaque_twin_normal(deserializer);
    return EnumOpaqueTwinNormalArray5(inner);
  }

  EnumOpaqueTwinRustAsync _sse_decode_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_RustOpaque_hide_data(deserializer);
        return EnumOpaqueTwinRustAsync_Struct(field0);
      case 1:
        var field0 = _sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinRustAsync_Primitive(field0);
      case 2:
        var field0 =
            _sse_decode_RustOpaque_box_dynDartDebugTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_TraitObj(field0);
      case 3:
        var field0 = _sse_decode_RustOpaque_MutexHideData(deserializer);
        return EnumOpaqueTwinRustAsync_Mutex(field0);
      case 4:
        var field0 = _sse_decode_RustOpaque_RwLockHideData(deserializer);
        return EnumOpaqueTwinRustAsync_RwLock(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumOpaqueTwinRustAsyncArray5 _sse_decode_enum_opaque_twin_rust_async_array_5(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_enum_opaque_twin_rust_async(deserializer);
    return EnumOpaqueTwinRustAsyncArray5(inner);
  }

  EnumOpaqueTwinRustAsyncSse _sse_decode_enum_opaque_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_RustOpaque_hide_data(deserializer);
        return EnumOpaqueTwinRustAsyncSse_Struct(field0);
      case 1:
        var field0 = _sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinRustAsyncSse_Primitive(field0);
      case 2:
        var field0 = _sse_decode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
            deserializer);
        return EnumOpaqueTwinRustAsyncSse_TraitObj(field0);
      case 3:
        var field0 = _sse_decode_RustOpaque_MutexHideData(deserializer);
        return EnumOpaqueTwinRustAsyncSse_Mutex(field0);
      case 4:
        var field0 = _sse_decode_RustOpaque_RwLockHideData(deserializer);
        return EnumOpaqueTwinRustAsyncSse_RwLock(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumOpaqueTwinRustAsyncSseArray5
      _sse_decode_enum_opaque_twin_rust_async_sse_array_5(
          SseDeserializer deserializer) {
    var inner = _sse_decode_list_enum_opaque_twin_rust_async_sse(deserializer);
    return EnumOpaqueTwinRustAsyncSseArray5(inner);
  }

  EnumOpaqueTwinSse _sse_decode_enum_opaque_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_RustOpaque_hide_data(deserializer);
        return EnumOpaqueTwinSse_Struct(field0);
      case 1:
        var field0 = _sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinSse_Primitive(field0);
      case 2:
        var field0 =
            _sse_decode_RustOpaque_box_dynDartDebugTwinSse(deserializer);
        return EnumOpaqueTwinSse_TraitObj(field0);
      case 3:
        var field0 = _sse_decode_RustOpaque_MutexHideData(deserializer);
        return EnumOpaqueTwinSse_Mutex(field0);
      case 4:
        var field0 = _sse_decode_RustOpaque_RwLockHideData(deserializer);
        return EnumOpaqueTwinSse_RwLock(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumOpaqueTwinSseArray5 _sse_decode_enum_opaque_twin_sse_array_5(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_enum_opaque_twin_sse(deserializer);
    return EnumOpaqueTwinSseArray5(inner);
  }

  EnumOpaqueTwinSync _sse_decode_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_RustOpaque_hide_data(deserializer);
        return EnumOpaqueTwinSync_Struct(field0);
      case 1:
        var field0 = _sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinSync_Primitive(field0);
      case 2:
        var field0 =
            _sse_decode_RustOpaque_box_dynDartDebugTwinSync(deserializer);
        return EnumOpaqueTwinSync_TraitObj(field0);
      case 3:
        var field0 = _sse_decode_RustOpaque_MutexHideData(deserializer);
        return EnumOpaqueTwinSync_Mutex(field0);
      case 4:
        var field0 = _sse_decode_RustOpaque_RwLockHideData(deserializer);
        return EnumOpaqueTwinSync_RwLock(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumOpaqueTwinSyncArray5 _sse_decode_enum_opaque_twin_sync_array_5(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_enum_opaque_twin_sync(deserializer);
    return EnumOpaqueTwinSyncArray5(inner);
  }

  EnumOpaqueTwinSyncSse _sse_decode_enum_opaque_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_RustOpaque_hide_data(deserializer);
        return EnumOpaqueTwinSyncSse_Struct(field0);
      case 1:
        var field0 = _sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinSyncSse_Primitive(field0);
      case 2:
        var field0 =
            _sse_decode_RustOpaque_box_dynDartDebugTwinSyncSse(deserializer);
        return EnumOpaqueTwinSyncSse_TraitObj(field0);
      case 3:
        var field0 = _sse_decode_RustOpaque_MutexHideData(deserializer);
        return EnumOpaqueTwinSyncSse_Mutex(field0);
      case 4:
        var field0 = _sse_decode_RustOpaque_RwLockHideData(deserializer);
        return EnumOpaqueTwinSyncSse_RwLock(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumOpaqueTwinSyncSseArray5 _sse_decode_enum_opaque_twin_sync_sse_array_5(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_enum_opaque_twin_sync_sse(deserializer);
    return EnumOpaqueTwinSyncSseArray5(inner);
  }

  EnumSimpleTwinNormal _sse_decode_enum_simple_twin_normal(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return EnumSimpleTwinNormal.values[inner];
  }

  EnumSimpleTwinRustAsync _sse_decode_enum_simple_twin_rust_async(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return EnumSimpleTwinRustAsync.values[inner];
  }

  EnumSimpleTwinRustAsyncSse _sse_decode_enum_simple_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return EnumSimpleTwinRustAsyncSse.values[inner];
  }

  EnumSimpleTwinSse _sse_decode_enum_simple_twin_sse(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return EnumSimpleTwinSse.values[inner];
  }

  EnumSimpleTwinSync _sse_decode_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return EnumSimpleTwinSync.values[inner];
  }

  EnumSimpleTwinSyncSse _sse_decode_enum_simple_twin_sync_sse(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return EnumSimpleTwinSyncSse.values[inner];
  }

  EnumWithItemMixedTwinNormal _sse_decode_enum_with_item_mixed_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinNormal_A();
      case 1:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemMixedTwinNormal_B(field0);
      case 2:
        var cField = _sse_decode_String(deserializer);
        return EnumWithItemMixedTwinNormal_C(cField: cField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemMixedTwinRustAsync
      _sse_decode_enum_with_item_mixed_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinRustAsync_A();
      case 1:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemMixedTwinRustAsync_B(field0);
      case 2:
        var cField = _sse_decode_String(deserializer);
        return EnumWithItemMixedTwinRustAsync_C(cField: cField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemMixedTwinRustAsyncSse
      _sse_decode_enum_with_item_mixed_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinRustAsyncSse_A();
      case 1:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemMixedTwinRustAsyncSse_B(field0);
      case 2:
        var cField = _sse_decode_String(deserializer);
        return EnumWithItemMixedTwinRustAsyncSse_C(cField: cField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemMixedTwinSse _sse_decode_enum_with_item_mixed_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinSse_A();
      case 1:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemMixedTwinSse_B(field0);
      case 2:
        var cField = _sse_decode_String(deserializer);
        return EnumWithItemMixedTwinSse_C(cField: cField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemMixedTwinSync _sse_decode_enum_with_item_mixed_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinSync_A();
      case 1:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemMixedTwinSync_B(field0);
      case 2:
        var cField = _sse_decode_String(deserializer);
        return EnumWithItemMixedTwinSync_C(cField: cField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemMixedTwinSyncSse _sse_decode_enum_with_item_mixed_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinSyncSse_A();
      case 1:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemMixedTwinSyncSse_B(field0);
      case 2:
        var cField = _sse_decode_String(deserializer);
        return EnumWithItemMixedTwinSyncSse_C(cField: cField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemStructTwinNormal _sse_decode_enum_with_item_struct_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var aField = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemStructTwinNormal_A(aField: aField);
      case 1:
        var bField = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemStructTwinNormal_B(bField: bField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemStructTwinRustAsync
      _sse_decode_enum_with_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var aField = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemStructTwinRustAsync_A(aField: aField);
      case 1:
        var bField = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemStructTwinRustAsync_B(bField: bField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemStructTwinRustAsyncSse
      _sse_decode_enum_with_item_struct_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var aField = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemStructTwinRustAsyncSse_A(aField: aField);
      case 1:
        var bField = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemStructTwinRustAsyncSse_B(bField: bField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemStructTwinSse _sse_decode_enum_with_item_struct_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var aField = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemStructTwinSse_A(aField: aField);
      case 1:
        var bField = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemStructTwinSse_B(bField: bField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemStructTwinSync _sse_decode_enum_with_item_struct_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var aField = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemStructTwinSync_A(aField: aField);
      case 1:
        var bField = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemStructTwinSync_B(bField: bField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemStructTwinSyncSse _sse_decode_enum_with_item_struct_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var aField = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemStructTwinSyncSse_A(aField: aField);
      case 1:
        var bField = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemStructTwinSyncSse_B(bField: bField);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemTupleTwinNormal _sse_decode_enum_with_item_tuple_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemTupleTwinNormal_A(field0);
      case 1:
        var field0 = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemTupleTwinNormal_B(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemTupleTwinRustAsync
      _sse_decode_enum_with_item_tuple_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemTupleTwinRustAsync_A(field0);
      case 1:
        var field0 = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemTupleTwinRustAsync_B(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemTupleTwinRustAsyncSse
      _sse_decode_enum_with_item_tuple_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemTupleTwinRustAsyncSse_A(field0);
      case 1:
        var field0 = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemTupleTwinRustAsyncSse_B(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemTupleTwinSse _sse_decode_enum_with_item_tuple_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemTupleTwinSse_A(field0);
      case 1:
        var field0 = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemTupleTwinSse_B(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemTupleTwinSync _sse_decode_enum_with_item_tuple_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemTupleTwinSync_A(field0);
      case 1:
        var field0 = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemTupleTwinSync_B(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EnumWithItemTupleTwinSyncSse _sse_decode_enum_with_item_tuple_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return EnumWithItemTupleTwinSyncSse_A(field0);
      case 1:
        var field0 = _sse_decode_list_prim_i_32(deserializer);
        return EnumWithItemTupleTwinSyncSse_B(field0);
      default:
        throw UnimplementedError('');
    }
  }

  EventTwinNormal _sse_decode_event_twin_normal(SseDeserializer deserializer) {
    var address = _sse_decode_String(deserializer);
    var payload = _sse_decode_String(deserializer);
    return EventTwinNormal(address: address, payload: payload);
  }

  EventTwinRustAsync _sse_decode_event_twin_rust_async(
      SseDeserializer deserializer) {
    var address = _sse_decode_String(deserializer);
    var payload = _sse_decode_String(deserializer);
    return EventTwinRustAsync(address: address, payload: payload);
  }

  EventTwinRustAsyncSse _sse_decode_event_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var address = _sse_decode_String(deserializer);
    var payload = _sse_decode_String(deserializer);
    return EventTwinRustAsyncSse(address: address, payload: payload);
  }

  EventTwinSse _sse_decode_event_twin_sse(SseDeserializer deserializer) {
    var address = _sse_decode_String(deserializer);
    var payload = _sse_decode_String(deserializer);
    return EventTwinSse(address: address, payload: payload);
  }

  ExoticOptionalsTwinNormal _sse_decode_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    var int32 = _sse_decode_opt_box_autoadd_i_32(deserializer);
    var int64 = _sse_decode_opt_box_autoadd_i_64(deserializer);
    var float64 = _sse_decode_opt_box_autoadd_f_64(deserializer);
    var boolean = _sse_decode_opt_box_autoadd_bool(deserializer);
    var zerocopy = _sse_decode_opt_list_prim_u_8(deserializer);
    var int8List = _sse_decode_opt_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_opt_list_prim_u_8(deserializer);
    var int32List = _sse_decode_opt_list_prim_i_32(deserializer);
    var float32List = _sse_decode_opt_list_prim_f_32(deserializer);
    var float64List = _sse_decode_opt_list_prim_f_64(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_normal(deserializer);
    var attributesNullable =
        _sse_decode_list_opt_box_autoadd_attribute_twin_normal(deserializer);
    var nullableAttributes =
        _sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(
            deserializer);
    var newtypeint =
        _sse_decode_opt_box_autoadd_new_type_int_twin_normal(deserializer);
    return ExoticOptionalsTwinNormal(
        int32: int32,
        int64: int64,
        float64: float64,
        boolean: boolean,
        zerocopy: zerocopy,
        int8List: int8List,
        uint8List: uint8List,
        int32List: int32List,
        float32List: float32List,
        float64List: float64List,
        attributes: attributes,
        attributesNullable: attributesNullable,
        nullableAttributes: nullableAttributes,
        newtypeint: newtypeint);
  }

  ExoticOptionalsTwinRustAsync _sse_decode_exotic_optionals_twin_rust_async(
      SseDeserializer deserializer) {
    var int32 = _sse_decode_opt_box_autoadd_i_32(deserializer);
    var int64 = _sse_decode_opt_box_autoadd_i_64(deserializer);
    var float64 = _sse_decode_opt_box_autoadd_f_64(deserializer);
    var boolean = _sse_decode_opt_box_autoadd_bool(deserializer);
    var zerocopy = _sse_decode_opt_list_prim_u_8(deserializer);
    var int8List = _sse_decode_opt_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_opt_list_prim_u_8(deserializer);
    var int32List = _sse_decode_opt_list_prim_i_32(deserializer);
    var float32List = _sse_decode_opt_list_prim_f_32(deserializer);
    var float64List = _sse_decode_opt_list_prim_f_64(deserializer);
    var attributes =
        _sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var attributesNullable =
        _sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
            deserializer);
    var nullableAttributes =
        _sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
            deserializer);
    var newtypeint =
        _sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(deserializer);
    return ExoticOptionalsTwinRustAsync(
        int32: int32,
        int64: int64,
        float64: float64,
        boolean: boolean,
        zerocopy: zerocopy,
        int8List: int8List,
        uint8List: uint8List,
        int32List: int32List,
        float32List: float32List,
        float64List: float64List,
        attributes: attributes,
        attributesNullable: attributesNullable,
        nullableAttributes: nullableAttributes,
        newtypeint: newtypeint);
  }

  ExoticOptionalsTwinRustAsyncSse
      _sse_decode_exotic_optionals_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var int32 = _sse_decode_opt_box_autoadd_i_32(deserializer);
    var int64 = _sse_decode_opt_box_autoadd_i_64(deserializer);
    var float64 = _sse_decode_opt_box_autoadd_f_64(deserializer);
    var boolean = _sse_decode_opt_box_autoadd_bool(deserializer);
    var zerocopy = _sse_decode_opt_list_prim_u_8(deserializer);
    var int8List = _sse_decode_opt_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_opt_list_prim_u_8(deserializer);
    var int32List = _sse_decode_opt_list_prim_i_32(deserializer);
    var float32List = _sse_decode_opt_list_prim_f_32(deserializer);
    var float64List = _sse_decode_opt_list_prim_f_64(deserializer);
    var attributes =
        _sse_decode_opt_list_attribute_twin_rust_async_sse(deserializer);
    var attributesNullable =
        _sse_decode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
            deserializer);
    var nullableAttributes =
        _sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
            deserializer);
    var newtypeint =
        _sse_decode_opt_box_autoadd_new_type_int_twin_rust_async_sse(
            deserializer);
    return ExoticOptionalsTwinRustAsyncSse(
        int32: int32,
        int64: int64,
        float64: float64,
        boolean: boolean,
        zerocopy: zerocopy,
        int8List: int8List,
        uint8List: uint8List,
        int32List: int32List,
        float32List: float32List,
        float64List: float64List,
        attributes: attributes,
        attributesNullable: attributesNullable,
        nullableAttributes: nullableAttributes,
        newtypeint: newtypeint);
  }

  ExoticOptionalsTwinSse _sse_decode_exotic_optionals_twin_sse(
      SseDeserializer deserializer) {
    var int32 = _sse_decode_opt_box_autoadd_i_32(deserializer);
    var int64 = _sse_decode_opt_box_autoadd_i_64(deserializer);
    var float64 = _sse_decode_opt_box_autoadd_f_64(deserializer);
    var boolean = _sse_decode_opt_box_autoadd_bool(deserializer);
    var zerocopy = _sse_decode_opt_list_prim_u_8(deserializer);
    var int8List = _sse_decode_opt_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_opt_list_prim_u_8(deserializer);
    var int32List = _sse_decode_opt_list_prim_i_32(deserializer);
    var float32List = _sse_decode_opt_list_prim_f_32(deserializer);
    var float64List = _sse_decode_opt_list_prim_f_64(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_sse(deserializer);
    var attributesNullable =
        _sse_decode_list_opt_box_autoadd_attribute_twin_sse(deserializer);
    var nullableAttributes =
        _sse_decode_opt_list_opt_box_autoadd_attribute_twin_sse(deserializer);
    var newtypeint =
        _sse_decode_opt_box_autoadd_new_type_int_twin_sse(deserializer);
    return ExoticOptionalsTwinSse(
        int32: int32,
        int64: int64,
        float64: float64,
        boolean: boolean,
        zerocopy: zerocopy,
        int8List: int8List,
        uint8List: uint8List,
        int32List: int32List,
        float32List: float32List,
        float64List: float64List,
        attributes: attributes,
        attributesNullable: attributesNullable,
        nullableAttributes: nullableAttributes,
        newtypeint: newtypeint);
  }

  ExoticOptionalsTwinSync _sse_decode_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    var int32 = _sse_decode_opt_box_autoadd_i_32(deserializer);
    var int64 = _sse_decode_opt_box_autoadd_i_64(deserializer);
    var float64 = _sse_decode_opt_box_autoadd_f_64(deserializer);
    var boolean = _sse_decode_opt_box_autoadd_bool(deserializer);
    var zerocopy = _sse_decode_opt_list_prim_u_8(deserializer);
    var int8List = _sse_decode_opt_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_opt_list_prim_u_8(deserializer);
    var int32List = _sse_decode_opt_list_prim_i_32(deserializer);
    var float32List = _sse_decode_opt_list_prim_f_32(deserializer);
    var float64List = _sse_decode_opt_list_prim_f_64(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_sync(deserializer);
    var attributesNullable =
        _sse_decode_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var nullableAttributes =
        _sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var newtypeint =
        _sse_decode_opt_box_autoadd_new_type_int_twin_sync(deserializer);
    return ExoticOptionalsTwinSync(
        int32: int32,
        int64: int64,
        float64: float64,
        boolean: boolean,
        zerocopy: zerocopy,
        int8List: int8List,
        uint8List: uint8List,
        int32List: int32List,
        float32List: float32List,
        float64List: float64List,
        attributes: attributes,
        attributesNullable: attributesNullable,
        nullableAttributes: nullableAttributes,
        newtypeint: newtypeint);
  }

  ExoticOptionalsTwinSyncSse _sse_decode_exotic_optionals_twin_sync_sse(
      SseDeserializer deserializer) {
    var int32 = _sse_decode_opt_box_autoadd_i_32(deserializer);
    var int64 = _sse_decode_opt_box_autoadd_i_64(deserializer);
    var float64 = _sse_decode_opt_box_autoadd_f_64(deserializer);
    var boolean = _sse_decode_opt_box_autoadd_bool(deserializer);
    var zerocopy = _sse_decode_opt_list_prim_u_8(deserializer);
    var int8List = _sse_decode_opt_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_opt_list_prim_u_8(deserializer);
    var int32List = _sse_decode_opt_list_prim_i_32(deserializer);
    var float32List = _sse_decode_opt_list_prim_f_32(deserializer);
    var float64List = _sse_decode_opt_list_prim_f_64(deserializer);
    var attributes = _sse_decode_opt_list_attribute_twin_sync_sse(deserializer);
    var attributesNullable =
        _sse_decode_list_opt_box_autoadd_attribute_twin_sync_sse(deserializer);
    var nullableAttributes =
        _sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(
            deserializer);
    var newtypeint =
        _sse_decode_opt_box_autoadd_new_type_int_twin_sync_sse(deserializer);
    return ExoticOptionalsTwinSyncSse(
        int32: int32,
        int64: int64,
        float64: float64,
        boolean: boolean,
        zerocopy: zerocopy,
        int8List: int8List,
        uint8List: uint8List,
        int32List: int32List,
        float32List: float32List,
        float64List: float64List,
        attributes: attributes,
        attributesNullable: attributesNullable,
        nullableAttributes: nullableAttributes,
        newtypeint: newtypeint);
  }

  double _sse_decode_f_32(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat32();
  }

  double _sse_decode_f_64(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat64();
  }

  FeatureUuidTwinNormal _sse_decode_feature_uuid_twin_normal(
      SseDeserializer deserializer) {
    var one = _sse_decode_Uuid(deserializer);
    return FeatureUuidTwinNormal(one: one);
  }

  FeatureUuidTwinRustAsync _sse_decode_feature_uuid_twin_rust_async(
      SseDeserializer deserializer) {
    var one = _sse_decode_Uuid(deserializer);
    return FeatureUuidTwinRustAsync(one: one);
  }

  FeatureUuidTwinSync _sse_decode_feature_uuid_twin_sync(
      SseDeserializer deserializer) {
    var one = _sse_decode_Uuid(deserializer);
    return FeatureUuidTwinSync(one: one);
  }

  FeedIdTwinNormal _sse_decode_feed_id_twin_normal(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinNormal(field0: field0);
  }

  FeedIdTwinRustAsync _sse_decode_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinRustAsync(field0: field0);
  }

  FeedIdTwinRustAsyncSse _sse_decode_feed_id_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinRustAsyncSse(field0: field0);
  }

  FeedIdTwinSse _sse_decode_feed_id_twin_sse(SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinSse(field0: field0);
  }

  FeedIdTwinSync _sse_decode_feed_id_twin_sync(SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinSync(field0: field0);
  }

  FeedIdTwinSyncSse _sse_decode_feed_id_twin_sync_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinSyncSse(field0: field0);
  }

  int _sse_decode_i_16(SseDeserializer deserializer) {
    return deserializer.buffer.getInt16();
  }

  int _sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  I32Array2 _sse_decode_i_32_array_2(SseDeserializer deserializer) {
    var inner = _sse_decode_list_prim_i_32(deserializer);
    return I32Array2(inner);
  }

  int _sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  int _sse_decode_i_8(SseDeserializer deserializer) {
    return deserializer.buffer.getInt8();
  }

  KitchenSinkTwinNormal _sse_decode_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinNormal_Empty();
      case 1:
        var int32 = _sse_decode_i_32(deserializer);
        var float64 = _sse_decode_f_64(deserializer);
        var boolean = _sse_decode_bool(deserializer);
        return KitchenSinkTwinNormal_Primitives(
            int32: int32, float64: float64, boolean: boolean);
      case 2:
        var field0 = _sse_decode_i_32(deserializer);
        var field1 = _sse_decode_box_kitchen_sink_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Nested(field0, field1);
      case 3:
        var field0 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        var field1 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinNormal_Optional(field0, field1);
      case 4:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return KitchenSinkTwinNormal_Buffer(field0);
      case 5:
        var field0 = _sse_decode_weekdays_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Enums(field0);
      default:
        throw UnimplementedError('');
    }
  }

  KitchenSinkTwinRustAsync _sse_decode_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinRustAsync_Empty();
      case 1:
        var int32 = _sse_decode_i_32(deserializer);
        var float64 = _sse_decode_f_64(deserializer);
        var boolean = _sse_decode_bool(deserializer);
        return KitchenSinkTwinRustAsync_Primitives(
            int32: int32, float64: float64, boolean: boolean);
      case 2:
        var field0 = _sse_decode_i_32(deserializer);
        var field1 = _sse_decode_box_kitchen_sink_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Nested(field0, field1);
      case 3:
        var field0 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        var field1 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinRustAsync_Optional(field0, field1);
      case 4:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return KitchenSinkTwinRustAsync_Buffer(field0);
      case 5:
        var field0 = _sse_decode_weekdays_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Enums(field0);
      default:
        throw UnimplementedError('');
    }
  }

  KitchenSinkTwinRustAsyncSse _sse_decode_kitchen_sink_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinRustAsyncSse_Empty();
      case 1:
        var int32 = _sse_decode_i_32(deserializer);
        var float64 = _sse_decode_f_64(deserializer);
        var boolean = _sse_decode_bool(deserializer);
        return KitchenSinkTwinRustAsyncSse_Primitives(
            int32: int32, float64: float64, boolean: boolean);
      case 2:
        var field0 = _sse_decode_i_32(deserializer);
        var field1 =
            _sse_decode_box_kitchen_sink_twin_rust_async_sse(deserializer);
        return KitchenSinkTwinRustAsyncSse_Nested(field0, field1);
      case 3:
        var field0 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        var field1 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinRustAsyncSse_Optional(field0, field1);
      case 4:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return KitchenSinkTwinRustAsyncSse_Buffer(field0);
      case 5:
        var field0 = _sse_decode_weekdays_twin_rust_async_sse(deserializer);
        return KitchenSinkTwinRustAsyncSse_Enums(field0);
      default:
        throw UnimplementedError('');
    }
  }

  KitchenSinkTwinSse _sse_decode_kitchen_sink_twin_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinSse_Empty();
      case 1:
        var int32 = _sse_decode_i_32(deserializer);
        var float64 = _sse_decode_f_64(deserializer);
        var boolean = _sse_decode_bool(deserializer);
        return KitchenSinkTwinSse_Primitives(
            int32: int32, float64: float64, boolean: boolean);
      case 2:
        var field0 = _sse_decode_i_32(deserializer);
        var field1 = _sse_decode_box_kitchen_sink_twin_sse(deserializer);
        return KitchenSinkTwinSse_Nested(field0, field1);
      case 3:
        var field0 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        var field1 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinSse_Optional(field0, field1);
      case 4:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return KitchenSinkTwinSse_Buffer(field0);
      case 5:
        var field0 = _sse_decode_weekdays_twin_sse(deserializer);
        return KitchenSinkTwinSse_Enums(field0);
      default:
        throw UnimplementedError('');
    }
  }

  KitchenSinkTwinSync _sse_decode_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinSync_Empty();
      case 1:
        var int32 = _sse_decode_i_32(deserializer);
        var float64 = _sse_decode_f_64(deserializer);
        var boolean = _sse_decode_bool(deserializer);
        return KitchenSinkTwinSync_Primitives(
            int32: int32, float64: float64, boolean: boolean);
      case 2:
        var field0 = _sse_decode_i_32(deserializer);
        var field1 = _sse_decode_box_kitchen_sink_twin_sync(deserializer);
        return KitchenSinkTwinSync_Nested(field0, field1);
      case 3:
        var field0 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        var field1 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinSync_Optional(field0, field1);
      case 4:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return KitchenSinkTwinSync_Buffer(field0);
      case 5:
        var field0 = _sse_decode_weekdays_twin_sync(deserializer);
        return KitchenSinkTwinSync_Enums(field0);
      default:
        throw UnimplementedError('');
    }
  }

  KitchenSinkTwinSyncSse _sse_decode_kitchen_sink_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinSyncSse_Empty();
      case 1:
        var int32 = _sse_decode_i_32(deserializer);
        var float64 = _sse_decode_f_64(deserializer);
        var boolean = _sse_decode_bool(deserializer);
        return KitchenSinkTwinSyncSse_Primitives(
            int32: int32, float64: float64, boolean: boolean);
      case 2:
        var field0 = _sse_decode_i_32(deserializer);
        var field1 = _sse_decode_box_kitchen_sink_twin_sync_sse(deserializer);
        return KitchenSinkTwinSyncSse_Nested(field0, field1);
      case 3:
        var field0 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        var field1 = _sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinSyncSse_Optional(field0, field1);
      case 4:
        var field0 = _sse_decode_list_prim_u_8(deserializer);
        return KitchenSinkTwinSyncSse_Buffer(field0);
      case 5:
        var field0 = _sse_decode_weekdays_twin_sync_sse(deserializer);
        return KitchenSinkTwinSyncSse_Enums(field0);
      default:
        throw UnimplementedError('');
    }
  }

  List<Duration> _sse_decode_list_Chrono_Duration(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <Duration>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_Chrono_Duration(deserializer));
    }
    return ans_;
  }

  List<DateTime> _sse_decode_list_Chrono_Local(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <DateTime>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_Chrono_Local(deserializer));
    }
    return ans_;
  }

  List<Object> _sse_decode_list_DartOpaque(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <Object>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_DartOpaque(deserializer));
    }
    return ans_;
  }

  List<HideData> _sse_decode_list_RustOpaque_hide_data(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <HideData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_RustOpaque_hide_data(deserializer));
    }
    return ans_;
  }

  List<String> _sse_decode_list_String(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_String(deserializer));
    }
    return ans_;
  }

  List<ApplicationEnvVar> _sse_decode_list_application_env_var(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ApplicationEnvVar>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_application_env_var(deserializer));
    }
    return ans_;
  }

  List<ApplicationSettings> _sse_decode_list_application_settings(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ApplicationSettings>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_application_settings(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinNormal> _sse_decode_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinRustAsync> _sse_decode_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinRustAsyncSse>
      _sse_decode_list_attribute_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_attribute_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinSse> _sse_decode_list_attribute_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_attribute_twin_sse(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinSync> _sse_decode_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinSyncSse> _sse_decode_list_attribute_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_attribute_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<bool> _sse_decode_list_bool(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <bool>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_bool(deserializer));
    }
    return ans_;
  }

  List<ElementTwinNormal> _sse_decode_list_element_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_element_twin_normal(deserializer));
    }
    return ans_;
  }

  List<ElementTwinRustAsync> _sse_decode_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_element_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<ElementTwinRustAsyncSse> _sse_decode_list_element_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_element_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<ElementTwinSse> _sse_decode_list_element_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_element_twin_sse(deserializer));
    }
    return ans_;
  }

  List<ElementTwinSync> _sse_decode_list_element_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_element_twin_sync(deserializer));
    }
    return ans_;
  }

  List<ElementTwinSyncSse> _sse_decode_list_element_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_element_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<EnumOpaqueTwinNormal> _sse_decode_list_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_enum_opaque_twin_normal(deserializer));
    }
    return ans_;
  }

  List<EnumOpaqueTwinRustAsync> _sse_decode_list_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_enum_opaque_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<EnumOpaqueTwinRustAsyncSse>
      _sse_decode_list_enum_opaque_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_enum_opaque_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<EnumOpaqueTwinSse> _sse_decode_list_enum_opaque_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_enum_opaque_twin_sse(deserializer));
    }
    return ans_;
  }

  List<EnumOpaqueTwinSync> _sse_decode_list_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_enum_opaque_twin_sync(deserializer));
    }
    return ans_;
  }

  List<EnumOpaqueTwinSyncSse> _sse_decode_list_enum_opaque_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_enum_opaque_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<MyEnum> _sse_decode_list_my_enum(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MyEnum>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_enum(deserializer));
    }
    return ans_;
  }

  List<MySize> _sse_decode_list_my_size(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MySize>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_size(deserializer));
    }
    return ans_;
  }

  List<MyTreeNodeTwinNormal> _sse_decode_list_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_tree_node_twin_normal(deserializer));
    }
    return ans_;
  }

  List<MyTreeNodeTwinRustAsync> _sse_decode_list_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_tree_node_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<MyTreeNodeTwinRustAsyncSse>
      _sse_decode_list_my_tree_node_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_tree_node_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<MyTreeNodeTwinSse> _sse_decode_list_my_tree_node_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_tree_node_twin_sse(deserializer));
    }
    return ans_;
  }

  List<MyTreeNodeTwinSync> _sse_decode_list_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_tree_node_twin_sync(deserializer));
    }
    return ans_;
  }

  List<MyTreeNodeTwinSyncSse> _sse_decode_list_my_tree_node_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_my_tree_node_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<NestedRawStringMirrored> _sse_decode_list_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <NestedRawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_nested_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  ListOfNestedRawStringMirrored _sse_decode_list_of_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    var raw = _sse_decode_list_nested_raw_string_mirrored(deserializer);
    return ListOfNestedRawStringMirrored(raw: raw);
  }

  List<String?> _sse_decode_list_opt_String(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <String?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_String(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinNormal?>
      _sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinRustAsync?>
      _sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          _sse_decode_opt_box_autoadd_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinRustAsyncSse?>
      _sse_decode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsyncSse?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_attribute_twin_rust_async_sse(
          deserializer));
    }
    return ans_;
  }

  List<AttributeTwinSse?> _sse_decode_list_opt_box_autoadd_attribute_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSse?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_attribute_twin_sse(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinSync?> _sse_decode_list_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  List<AttributeTwinSyncSse?>
      _sse_decode_list_opt_box_autoadd_attribute_twin_sync_sse(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSyncSse?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          _sse_decode_opt_box_autoadd_attribute_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<int?> _sse_decode_list_opt_box_autoadd_i_32(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <int?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_i_32(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinNormal?>
      _sse_decode_list_opt_box_autoadd_weekdays_twin_normal(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinRustAsync?>
      _sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          _sse_decode_opt_box_autoadd_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinRustAsyncSse?>
      _sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsyncSse?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_weekdays_twin_rust_async_sse(
          deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinSse?> _sse_decode_list_opt_box_autoadd_weekdays_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSse?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_weekdays_twin_sse(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinSync?> _sse_decode_list_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_box_autoadd_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinSyncSse?>
      _sse_decode_list_opt_box_autoadd_weekdays_twin_sync_sse(
          SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSyncSse?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          _sse_decode_opt_box_autoadd_weekdays_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<Int32List?> _sse_decode_list_opt_list_prim_i_32(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <Int32List?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_opt_list_prim_i_32(deserializer));
    }
    return ans_;
  }

  List<PointTwinNormal> _sse_decode_list_point_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <PointTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_point_twin_normal(deserializer));
    }
    return ans_;
  }

  List<PointTwinRustAsync> _sse_decode_list_point_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <PointTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_point_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<PointTwinRustAsyncSse> _sse_decode_list_point_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <PointTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_point_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<PointTwinSse> _sse_decode_list_point_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <PointTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_point_twin_sse(deserializer));
    }
    return ans_;
  }

  List<PointTwinSync> _sse_decode_list_point_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <PointTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_point_twin_sync(deserializer));
    }
    return ans_;
  }

  List<PointTwinSyncSse> _sse_decode_list_point_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <PointTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_point_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  Float32List _sse_decode_list_prim_f_32(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  Float64List _sse_decode_list_prim_f_64(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  Int16List _sse_decode_list_prim_i_16(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  Int32List _sse_decode_list_prim_i_32(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  Int64List _sse_decode_list_prim_i_64(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  Int8List _sse_decode_list_prim_i_8(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt8List(len_);
  }

  Uint16List _sse_decode_list_prim_u_16(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  Uint32List _sse_decode_list_prim_u_32(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  Uint64List _sse_decode_list_prim_u_64(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  Uint8List _sse_decode_list_prim_u_8(SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  List<RawStringEnumMirrored> _sse_decode_list_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <RawStringEnumMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_raw_string_enum_mirrored(deserializer));
    }
    return ans_;
  }

  List<RawStringMirrored> _sse_decode_list_raw_string_mirrored(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <RawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  List<SumWithTwinNormal> _sse_decode_list_sum_with_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_sum_with_twin_normal(deserializer));
    }
    return ans_;
  }

  List<SumWithTwinRustAsync> _sse_decode_list_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_sum_with_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<SumWithTwinRustAsyncSse> _sse_decode_list_sum_with_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_sum_with_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<SumWithTwinSse> _sse_decode_list_sum_with_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_sum_with_twin_sse(deserializer));
    }
    return ans_;
  }

  List<SumWithTwinSync> _sse_decode_list_sum_with_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_sum_with_twin_sync(deserializer));
    }
    return ans_;
  }

  List<SumWithTwinSyncSse> _sse_decode_list_sum_with_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_sum_with_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<TestIdTwinNormal> _sse_decode_list_test_id_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_test_id_twin_normal(deserializer));
    }
    return ans_;
  }

  List<TestIdTwinRustAsync> _sse_decode_list_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_test_id_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<TestIdTwinRustAsyncSse> _sse_decode_list_test_id_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_test_id_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<TestIdTwinSse> _sse_decode_list_test_id_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_test_id_twin_sse(deserializer));
    }
    return ans_;
  }

  List<TestIdTwinSync> _sse_decode_list_test_id_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_test_id_twin_sync(deserializer));
    }
    return ans_;
  }

  List<TestIdTwinSyncSse> _sse_decode_list_test_id_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_test_id_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinNormal> _sse_decode_list_weekdays_twin_normal(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinRustAsync> _sse_decode_list_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinRustAsyncSse> _sse_decode_list_weekdays_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_weekdays_twin_rust_async_sse(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinSse> _sse_decode_list_weekdays_twin_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_weekdays_twin_sse(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinSync> _sse_decode_list_weekdays_twin_sync(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  List<WeekdaysTwinSyncSse> _sse_decode_list_weekdays_twin_sync_sse(
      SseDeserializer deserializer) {
    var len_ = _sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSyncSse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(_sse_decode_weekdays_twin_sync_sse(deserializer));
    }
    return ans_;
  }

  Log2TwinNormal _sse_decode_log_2_twin_normal(SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_String(deserializer);
    return Log2TwinNormal(key: key, value: value);
  }

  Log2TwinRustAsync _sse_decode_log_2_twin_rust_async(
      SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_String(deserializer);
    return Log2TwinRustAsync(key: key, value: value);
  }

  Log2TwinRustAsyncSse _sse_decode_log_2_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_String(deserializer);
    return Log2TwinRustAsyncSse(key: key, value: value);
  }

  Log2TwinSse _sse_decode_log_2_twin_sse(SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_String(deserializer);
    return Log2TwinSse(key: key, value: value);
  }

  Log2TwinSync _sse_decode_log_2_twin_sync(SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_String(deserializer);
    return Log2TwinSync(key: key, value: value);
  }

  Log2TwinSyncSse _sse_decode_log_2_twin_sync_sse(
      SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_String(deserializer);
    return Log2TwinSyncSse(key: key, value: value);
  }

  LogTwinNormal _sse_decode_log_twin_normal(SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_u_32(deserializer);
    return LogTwinNormal(key: key, value: value);
  }

  LogTwinRustAsync _sse_decode_log_twin_rust_async(
      SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_u_32(deserializer);
    return LogTwinRustAsync(key: key, value: value);
  }

  LogTwinRustAsyncSse _sse_decode_log_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_u_32(deserializer);
    return LogTwinRustAsyncSse(key: key, value: value);
  }

  LogTwinSse _sse_decode_log_twin_sse(SseDeserializer deserializer) {
    var key = _sse_decode_u_32(deserializer);
    var value = _sse_decode_u_32(deserializer);
    return LogTwinSse(key: key, value: value);
  }

  MacroStruct _sse_decode_macro_struct(SseDeserializer deserializer) {
    var data = _sse_decode_i_32(deserializer);
    return MacroStruct(data: data);
  }

  MeasureTwinNormal _sse_decode_measure_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_speed_twin_normal(deserializer);
        return MeasureTwinNormal_Speed(field0);
      case 1:
        var field0 = _sse_decode_box_distance_twin_normal(deserializer);
        return MeasureTwinNormal_Distance(field0);
      default:
        throw UnimplementedError('');
    }
  }

  MeasureTwinRustAsync _sse_decode_measure_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_speed_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Speed(field0);
      case 1:
        var field0 = _sse_decode_box_distance_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Distance(field0);
      default:
        throw UnimplementedError('');
    }
  }

  MeasureTwinRustAsyncSse _sse_decode_measure_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_speed_twin_rust_async_sse(deserializer);
        return MeasureTwinRustAsyncSse_Speed(field0);
      case 1:
        var field0 = _sse_decode_box_distance_twin_rust_async_sse(deserializer);
        return MeasureTwinRustAsyncSse_Distance(field0);
      default:
        throw UnimplementedError('');
    }
  }

  MeasureTwinSse _sse_decode_measure_twin_sse(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_speed_twin_sse(deserializer);
        return MeasureTwinSse_Speed(field0);
      case 1:
        var field0 = _sse_decode_box_distance_twin_sse(deserializer);
        return MeasureTwinSse_Distance(field0);
      default:
        throw UnimplementedError('');
    }
  }

  MeasureTwinSync _sse_decode_measure_twin_sync(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_speed_twin_sync(deserializer);
        return MeasureTwinSync_Speed(field0);
      case 1:
        var field0 = _sse_decode_box_distance_twin_sync(deserializer);
        return MeasureTwinSync_Distance(field0);
      default:
        throw UnimplementedError('');
    }
  }

  MeasureTwinSyncSse _sse_decode_measure_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_speed_twin_sync_sse(deserializer);
        return MeasureTwinSyncSse_Speed(field0);
      case 1:
        var field0 = _sse_decode_box_distance_twin_sync_sse(deserializer);
        return MeasureTwinSyncSse_Distance(field0);
      default:
        throw UnimplementedError('');
    }
  }

  MessageIdTwinNormal _sse_decode_message_id_twin_normal(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinNormal(field0: field0);
  }

  MessageIdTwinRustAsync _sse_decode_message_id_twin_rust_async(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinRustAsync(field0: field0);
  }

  MessageIdTwinRustAsyncSse _sse_decode_message_id_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinRustAsyncSse(field0: field0);
  }

  MessageIdTwinSse _sse_decode_message_id_twin_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinSse(field0: field0);
  }

  MessageIdTwinSync _sse_decode_message_id_twin_sync(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinSync(field0: field0);
  }

  MessageIdTwinSyncSse _sse_decode_message_id_twin_sync_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinSyncSse(field0: field0);
  }

  MirrorStructTwinNormal _sse_decode_mirror_struct_twin_normal(
      SseDeserializer deserializer) {
    var a = _sse_decode_application_settings(deserializer);
    var b = _sse_decode_my_struct(deserializer);
    var c = _sse_decode_list_my_enum(deserializer);
    var d = _sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinNormal(a: a, b: b, c: c, d: d);
  }

  MirrorStructTwinRustAsync _sse_decode_mirror_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var a = _sse_decode_application_settings(deserializer);
    var b = _sse_decode_my_struct(deserializer);
    var c = _sse_decode_list_my_enum(deserializer);
    var d = _sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinRustAsync(a: a, b: b, c: c, d: d);
  }

  MirrorStructTwinRustAsyncSse _sse_decode_mirror_struct_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_application_settings(deserializer);
    var b = _sse_decode_my_struct(deserializer);
    var c = _sse_decode_list_my_enum(deserializer);
    var d = _sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinRustAsyncSse(a: a, b: b, c: c, d: d);
  }

  MirrorStructTwinSse _sse_decode_mirror_struct_twin_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_application_settings(deserializer);
    var b = _sse_decode_my_struct(deserializer);
    var c = _sse_decode_list_my_enum(deserializer);
    var d = _sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinSse(a: a, b: b, c: c, d: d);
  }

  MirrorStructTwinSync _sse_decode_mirror_struct_twin_sync(
      SseDeserializer deserializer) {
    var a = _sse_decode_application_settings(deserializer);
    var b = _sse_decode_my_struct(deserializer);
    var c = _sse_decode_list_my_enum(deserializer);
    var d = _sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinSync(a: a, b: b, c: c, d: d);
  }

  MirrorStructTwinSyncSse _sse_decode_mirror_struct_twin_sync_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_application_settings(deserializer);
    var b = _sse_decode_my_struct(deserializer);
    var c = _sse_decode_list_my_enum(deserializer);
    var d = _sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinSyncSse(a: a, b: b, c: c, d: d);
  }

  MoreThanJustOneRawStringStructTwinNormal
      _sse_decode_more_than_just_one_raw_string_struct_twin_normal(
          SseDeserializer deserializer) {
    var regular = _sse_decode_String(deserializer);
    var type = _sse_decode_String(deserializer);
    var async = _sse_decode_bool(deserializer);
    var another = _sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinNormal(
        regular: regular, type: type, async: async, another: another);
  }

  MoreThanJustOneRawStringStructTwinRustAsync
      _sse_decode_more_than_just_one_raw_string_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var regular = _sse_decode_String(deserializer);
    var type = _sse_decode_String(deserializer);
    var async = _sse_decode_bool(deserializer);
    var another = _sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinRustAsync(
        regular: regular, type: type, async: async, another: another);
  }

  MoreThanJustOneRawStringStructTwinRustAsyncSse
      _sse_decode_more_than_just_one_raw_string_struct_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var regular = _sse_decode_String(deserializer);
    var type = _sse_decode_String(deserializer);
    var async = _sse_decode_bool(deserializer);
    var another = _sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinRustAsyncSse(
        regular: regular, type: type, async: async, another: another);
  }

  MoreThanJustOneRawStringStructTwinSse
      _sse_decode_more_than_just_one_raw_string_struct_twin_sse(
          SseDeserializer deserializer) {
    var regular = _sse_decode_String(deserializer);
    var type = _sse_decode_String(deserializer);
    var async = _sse_decode_bool(deserializer);
    var another = _sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinSse(
        regular: regular, type: type, async: async, another: another);
  }

  MoreThanJustOneRawStringStructTwinSync
      _sse_decode_more_than_just_one_raw_string_struct_twin_sync(
          SseDeserializer deserializer) {
    var regular = _sse_decode_String(deserializer);
    var type = _sse_decode_String(deserializer);
    var async = _sse_decode_bool(deserializer);
    var another = _sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinSync(
        regular: regular, type: type, async: async, another: another);
  }

  MoreThanJustOneRawStringStructTwinSyncSse
      _sse_decode_more_than_just_one_raw_string_struct_twin_sync_sse(
          SseDeserializer deserializer) {
    var regular = _sse_decode_String(deserializer);
    var type = _sse_decode_String(deserializer);
    var async = _sse_decode_bool(deserializer);
    var another = _sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinSyncSse(
        regular: regular, type: type, async: async, another: another);
  }

  MyEnum _sse_decode_my_enum(SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return MyEnum.values[inner];
  }

  MyNestedStructTwinNormal _sse_decode_my_nested_struct_twin_normal(
      SseDeserializer deserializer) {
    var treeNode = _sse_decode_my_tree_node_twin_normal(deserializer);
    var weekday = _sse_decode_weekdays_twin_normal(deserializer);
    return MyNestedStructTwinNormal(treeNode: treeNode, weekday: weekday);
  }

  MyNestedStructTwinRustAsync _sse_decode_my_nested_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var treeNode = _sse_decode_my_tree_node_twin_rust_async(deserializer);
    var weekday = _sse_decode_weekdays_twin_rust_async(deserializer);
    return MyNestedStructTwinRustAsync(treeNode: treeNode, weekday: weekday);
  }

  MyNestedStructTwinRustAsyncSse
      _sse_decode_my_nested_struct_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var treeNode = _sse_decode_my_tree_node_twin_rust_async_sse(deserializer);
    var weekday = _sse_decode_weekdays_twin_rust_async_sse(deserializer);
    return MyNestedStructTwinRustAsyncSse(treeNode: treeNode, weekday: weekday);
  }

  MyNestedStructTwinSse _sse_decode_my_nested_struct_twin_sse(
      SseDeserializer deserializer) {
    var treeNode = _sse_decode_my_tree_node_twin_sse(deserializer);
    var weekday = _sse_decode_weekdays_twin_sse(deserializer);
    return MyNestedStructTwinSse(treeNode: treeNode, weekday: weekday);
  }

  MyNestedStructTwinSync _sse_decode_my_nested_struct_twin_sync(
      SseDeserializer deserializer) {
    var treeNode = _sse_decode_my_tree_node_twin_sync(deserializer);
    var weekday = _sse_decode_weekdays_twin_sync(deserializer);
    return MyNestedStructTwinSync(treeNode: treeNode, weekday: weekday);
  }

  MyNestedStructTwinSyncSse _sse_decode_my_nested_struct_twin_sync_sse(
      SseDeserializer deserializer) {
    var treeNode = _sse_decode_my_tree_node_twin_sync_sse(deserializer);
    var weekday = _sse_decode_weekdays_twin_sync_sse(deserializer);
    return MyNestedStructTwinSyncSse(treeNode: treeNode, weekday: weekday);
  }

  MySize _sse_decode_my_size(SseDeserializer deserializer) {
    var width = _sse_decode_i_32(deserializer);
    var height = _sse_decode_i_32(deserializer);
    return MySize(width: width, height: height);
  }

  MyStreamEntryTwinNormal _sse_decode_my_stream_entry_twin_normal(
      SseDeserializer deserializer) {
    var hello = _sse_decode_String(deserializer);
    return MyStreamEntryTwinNormal(hello: hello);
  }

  MyStreamEntryTwinRustAsync _sse_decode_my_stream_entry_twin_rust_async(
      SseDeserializer deserializer) {
    var hello = _sse_decode_String(deserializer);
    return MyStreamEntryTwinRustAsync(hello: hello);
  }

  MyStreamEntryTwinRustAsyncSse _sse_decode_my_stream_entry_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var hello = _sse_decode_String(deserializer);
    return MyStreamEntryTwinRustAsyncSse(hello: hello);
  }

  MyStreamEntryTwinSse _sse_decode_my_stream_entry_twin_sse(
      SseDeserializer deserializer) {
    var hello = _sse_decode_String(deserializer);
    return MyStreamEntryTwinSse(hello: hello);
  }

  MyStruct _sse_decode_my_struct(SseDeserializer deserializer) {
    var content = _sse_decode_bool(deserializer);
    return MyStruct(content: content);
  }

  MyTreeNodeTwinNormal _sse_decode_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    var valueI32 = _sse_decode_i_32(deserializer);
    var valueVecU8 = _sse_decode_list_prim_u_8(deserializer);
    var valueBoolean = _sse_decode_bool(deserializer);
    var children = _sse_decode_list_my_tree_node_twin_normal(deserializer);
    return MyTreeNodeTwinNormal(
        valueI32: valueI32,
        valueVecU8: valueVecU8,
        valueBoolean: valueBoolean,
        children: children);
  }

  MyTreeNodeTwinRustAsync _sse_decode_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    var valueI32 = _sse_decode_i_32(deserializer);
    var valueVecU8 = _sse_decode_list_prim_u_8(deserializer);
    var valueBoolean = _sse_decode_bool(deserializer);
    var children = _sse_decode_list_my_tree_node_twin_rust_async(deserializer);
    return MyTreeNodeTwinRustAsync(
        valueI32: valueI32,
        valueVecU8: valueVecU8,
        valueBoolean: valueBoolean,
        children: children);
  }

  MyTreeNodeTwinRustAsyncSse _sse_decode_my_tree_node_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var valueI32 = _sse_decode_i_32(deserializer);
    var valueVecU8 = _sse_decode_list_prim_u_8(deserializer);
    var valueBoolean = _sse_decode_bool(deserializer);
    var children =
        _sse_decode_list_my_tree_node_twin_rust_async_sse(deserializer);
    return MyTreeNodeTwinRustAsyncSse(
        valueI32: valueI32,
        valueVecU8: valueVecU8,
        valueBoolean: valueBoolean,
        children: children);
  }

  MyTreeNodeTwinSse _sse_decode_my_tree_node_twin_sse(
      SseDeserializer deserializer) {
    var valueI32 = _sse_decode_i_32(deserializer);
    var valueVecU8 = _sse_decode_list_prim_u_8(deserializer);
    var valueBoolean = _sse_decode_bool(deserializer);
    var children = _sse_decode_list_my_tree_node_twin_sse(deserializer);
    return MyTreeNodeTwinSse(
        valueI32: valueI32,
        valueVecU8: valueVecU8,
        valueBoolean: valueBoolean,
        children: children);
  }

  MyTreeNodeTwinSync _sse_decode_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    var valueI32 = _sse_decode_i_32(deserializer);
    var valueVecU8 = _sse_decode_list_prim_u_8(deserializer);
    var valueBoolean = _sse_decode_bool(deserializer);
    var children = _sse_decode_list_my_tree_node_twin_sync(deserializer);
    return MyTreeNodeTwinSync(
        valueI32: valueI32,
        valueVecU8: valueVecU8,
        valueBoolean: valueBoolean,
        children: children);
  }

  MyTreeNodeTwinSyncSse _sse_decode_my_tree_node_twin_sync_sse(
      SseDeserializer deserializer) {
    var valueI32 = _sse_decode_i_32(deserializer);
    var valueVecU8 = _sse_decode_list_prim_u_8(deserializer);
    var valueBoolean = _sse_decode_bool(deserializer);
    var children = _sse_decode_list_my_tree_node_twin_sync_sse(deserializer);
    return MyTreeNodeTwinSyncSse(
        valueI32: valueI32,
        valueVecU8: valueVecU8,
        valueBoolean: valueBoolean,
        children: children);
  }

  NestedRawStringMirrored _sse_decode_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    var raw = _sse_decode_raw_string_mirrored(deserializer);
    return NestedRawStringMirrored(raw: raw);
  }

  NewSimpleStruct _sse_decode_new_simple_struct(SseDeserializer deserializer) {
    var field = _sse_decode_i_32(deserializer);
    return NewSimpleStruct(field: field);
  }

  NewTypeIntTwinNormal _sse_decode_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_64(deserializer);
    return NewTypeIntTwinNormal(field0: field0);
  }

  NewTypeIntTwinRustAsync _sse_decode_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_64(deserializer);
    return NewTypeIntTwinRustAsync(field0: field0);
  }

  NewTypeIntTwinRustAsyncSse _sse_decode_new_type_int_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_64(deserializer);
    return NewTypeIntTwinRustAsyncSse(field0: field0);
  }

  NewTypeIntTwinSse _sse_decode_new_type_int_twin_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_64(deserializer);
    return NewTypeIntTwinSse(field0: field0);
  }

  NewTypeIntTwinSync _sse_decode_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_64(deserializer);
    return NewTypeIntTwinSync(field0: field0);
  }

  NewTypeIntTwinSyncSse _sse_decode_new_type_int_twin_sync_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_64(deserializer);
    return NewTypeIntTwinSyncSse(field0: field0);
  }

  Numbers _sse_decode_numbers(SseDeserializer deserializer) {
    var field0 = _sse_decode_list_prim_i_32(deserializer);
    return Numbers(field0: field0);
  }

  OldSimpleStruct _sse_decode_old_simple_struct(SseDeserializer deserializer) {
    var field = _sse_decode_i_32(deserializer);
    return OldSimpleStruct(field: field);
  }

  OpaqueNestedTwinNormal _sse_decode_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    var first = _sse_decode_RustOpaque_hide_data(deserializer);
    var second = _sse_decode_RustOpaque_hide_data(deserializer);
    return OpaqueNestedTwinNormal(first: first, second: second);
  }

  OpaqueNestedTwinRustAsync _sse_decode_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    var first = _sse_decode_RustOpaque_hide_data(deserializer);
    var second = _sse_decode_RustOpaque_hide_data(deserializer);
    return OpaqueNestedTwinRustAsync(first: first, second: second);
  }

  OpaqueNestedTwinRustAsyncSse _sse_decode_opaque_nested_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var first = _sse_decode_RustOpaque_hide_data(deserializer);
    var second = _sse_decode_RustOpaque_hide_data(deserializer);
    return OpaqueNestedTwinRustAsyncSse(first: first, second: second);
  }

  OpaqueNestedTwinSse _sse_decode_opaque_nested_twin_sse(
      SseDeserializer deserializer) {
    var first = _sse_decode_RustOpaque_hide_data(deserializer);
    var second = _sse_decode_RustOpaque_hide_data(deserializer);
    return OpaqueNestedTwinSse(first: first, second: second);
  }

  OpaqueNestedTwinSync _sse_decode_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    var first = _sse_decode_RustOpaque_hide_data(deserializer);
    var second = _sse_decode_RustOpaque_hide_data(deserializer);
    return OpaqueNestedTwinSync(first: first, second: second);
  }

  OpaqueNestedTwinSyncSse _sse_decode_opaque_nested_twin_sync_sse(
      SseDeserializer deserializer) {
    var first = _sse_decode_RustOpaque_hide_data(deserializer);
    var second = _sse_decode_RustOpaque_hide_data(deserializer);
    return OpaqueNestedTwinSyncSse(first: first, second: second);
  }

  String? _sse_decode_opt_String(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  Duration? _sse_decode_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_Chrono_Duration(deserializer));
    } else {
      return null;
    }
  }

  DateTime? _sse_decode_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_Chrono_Naive(deserializer));
    } else {
      return null;
    }
  }

  DateTime? _sse_decode_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  Object? _sse_decode_opt_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_DartOpaque(deserializer));
    } else {
      return null;
    }
  }

  HideData? _sse_decode_opt_box_autoadd_RustOpaque_hide_data(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_RustOpaque_hide_data(deserializer));
    } else {
      return null;
    }
  }

  ApplicationEnv? _sse_decode_opt_box_autoadd_application_env(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_application_env(deserializer));
    } else {
      return null;
    }
  }

  AttributeTwinNormal? _sse_decode_opt_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  AttributeTwinRustAsync? _sse_decode_opt_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  AttributeTwinRustAsyncSse?
      _sse_decode_opt_box_autoadd_attribute_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_attribute_twin_rust_async_sse(
          deserializer));
    } else {
      return null;
    }
  }

  AttributeTwinSse? _sse_decode_opt_box_autoadd_attribute_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_attribute_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  AttributeTwinSync? _sse_decode_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  AttributeTwinSyncSse? _sse_decode_opt_box_autoadd_attribute_twin_sync_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_attribute_twin_sync_sse(deserializer));
    } else {
      return null;
    }
  }

  bool? _sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  ElementTwinNormal? _sse_decode_opt_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  ElementTwinRustAsync? _sse_decode_opt_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  ElementTwinRustAsyncSse?
      _sse_decode_opt_box_autoadd_element_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_element_twin_rust_async_sse(
          deserializer));
    } else {
      return null;
    }
  }

  ElementTwinSse? _sse_decode_opt_box_autoadd_element_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_element_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  ElementTwinSync? _sse_decode_opt_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  ElementTwinSyncSse? _sse_decode_opt_box_autoadd_element_twin_sync_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_element_twin_sync_sse(deserializer));
    } else {
      return null;
    }
  }

  ExoticOptionalsTwinNormal?
      _sse_decode_opt_box_autoadd_exotic_optionals_twin_normal(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_exotic_optionals_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  ExoticOptionalsTwinRustAsync?
      _sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  ExoticOptionalsTwinRustAsyncSse?
      _sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_exotic_optionals_twin_rust_async_sse(
          deserializer));
    } else {
      return null;
    }
  }

  ExoticOptionalsTwinSse? _sse_decode_opt_box_autoadd_exotic_optionals_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_exotic_optionals_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  ExoticOptionalsTwinSync?
      _sse_decode_opt_box_autoadd_exotic_optionals_twin_sync(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_exotic_optionals_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  ExoticOptionalsTwinSyncSse?
      _sse_decode_opt_box_autoadd_exotic_optionals_twin_sync_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_exotic_optionals_twin_sync_sse(
          deserializer));
    } else {
      return null;
    }
  }

  double? _sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  double? _sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_i_16(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_i_16(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_i_8(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_i_8(deserializer));
    } else {
      return null;
    }
  }

  MeasureTwinNormal? _sse_decode_opt_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_measure_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  MeasureTwinRustAsync? _sse_decode_opt_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_measure_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  MeasureTwinRustAsyncSse?
      _sse_decode_opt_box_autoadd_measure_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_measure_twin_rust_async_sse(
          deserializer));
    } else {
      return null;
    }
  }

  MeasureTwinSse? _sse_decode_opt_box_autoadd_measure_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_measure_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  MeasureTwinSync? _sse_decode_opt_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_measure_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  MeasureTwinSyncSse? _sse_decode_opt_box_autoadd_measure_twin_sync_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_measure_twin_sync_sse(deserializer));
    } else {
      return null;
    }
  }

  NewTypeIntTwinNormal? _sse_decode_opt_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_new_type_int_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  NewTypeIntTwinRustAsync?
      _sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_new_type_int_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  NewTypeIntTwinRustAsyncSse?
      _sse_decode_opt_box_autoadd_new_type_int_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_new_type_int_twin_rust_async_sse(
          deserializer));
    } else {
      return null;
    }
  }

  NewTypeIntTwinSse? _sse_decode_opt_box_autoadd_new_type_int_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_new_type_int_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  NewTypeIntTwinSync? _sse_decode_opt_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_new_type_int_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  NewTypeIntTwinSyncSse? _sse_decode_opt_box_autoadd_new_type_int_twin_sync_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_new_type_int_twin_sync_sse(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  int? _sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  WeekdaysTwinNormal? _sse_decode_opt_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_weekdays_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  WeekdaysTwinRustAsync? _sse_decode_opt_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_weekdays_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  WeekdaysTwinRustAsyncSse?
      _sse_decode_opt_box_autoadd_weekdays_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_weekdays_twin_rust_async_sse(
          deserializer));
    } else {
      return null;
    }
  }

  WeekdaysTwinSse? _sse_decode_opt_box_autoadd_weekdays_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_weekdays_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  WeekdaysTwinSync? _sse_decode_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_weekdays_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  WeekdaysTwinSyncSse? _sse_decode_opt_box_autoadd_weekdays_twin_sync_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_box_autoadd_weekdays_twin_sync_sse(deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinNormal>? _sse_decode_opt_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinRustAsync>? _sse_decode_opt_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinRustAsyncSse>?
      _sse_decode_opt_list_attribute_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_attribute_twin_rust_async_sse(deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinSse>? _sse_decode_opt_list_attribute_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_attribute_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinSync>? _sse_decode_opt_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinSyncSse>? _sse_decode_opt_list_attribute_twin_sync_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_attribute_twin_sync_sse(deserializer));
    } else {
      return null;
    }
  }

  List<ElementTwinNormal>? _sse_decode_opt_list_element_twin_normal(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  List<ElementTwinRustAsync>? _sse_decode_opt_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  List<ElementTwinRustAsyncSse>?
      _sse_decode_opt_list_element_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_element_twin_rust_async_sse(deserializer));
    } else {
      return null;
    }
  }

  List<ElementTwinSse>? _sse_decode_opt_list_element_twin_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_element_twin_sse(deserializer));
    } else {
      return null;
    }
  }

  List<ElementTwinSync>? _sse_decode_opt_list_element_twin_sync(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  List<ElementTwinSyncSse>? _sse_decode_opt_list_element_twin_sync_sse(
      SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_element_twin_sync_sse(deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinNormal?>?
      _sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinRustAsync?>?
      _sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinRustAsyncSse?>?
      _sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinSse?>?
      _sse_decode_opt_list_opt_box_autoadd_attribute_twin_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_opt_box_autoadd_attribute_twin_sse(
          deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinSync?>?
      _sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_opt_box_autoadd_attribute_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  List<AttributeTwinSyncSse?>?
      _sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(
          SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_opt_box_autoadd_attribute_twin_sync_sse(
          deserializer));
    } else {
      return null;
    }
  }

  Float32List? _sse_decode_opt_list_prim_f_32(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_prim_f_32(deserializer));
    } else {
      return null;
    }
  }

  Float64List? _sse_decode_opt_list_prim_f_64(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_prim_f_64(deserializer));
    } else {
      return null;
    }
  }

  Int32List? _sse_decode_opt_list_prim_i_32(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_prim_i_32(deserializer));
    } else {
      return null;
    }
  }

  Int8List? _sse_decode_opt_list_prim_i_8(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_prim_i_8(deserializer));
    } else {
      return null;
    }
  }

  Uint8List? _sse_decode_opt_list_prim_u_8(SseDeserializer deserializer) {
    if (_sse_decode_bool(deserializer)) {
      return (_sse_decode_list_prim_u_8(deserializer));
    } else {
      return null;
    }
  }

  OptVecsTwinNormal _sse_decode_opt_vecs_twin_normal(
      SseDeserializer deserializer) {
    var i32 = _sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var enums =
        _sse_decode_list_opt_box_autoadd_weekdays_twin_normal(deserializer);
    var strings = _sse_decode_list_opt_String(deserializer);
    var buffers = _sse_decode_list_opt_list_prim_i_32(deserializer);
    return OptVecsTwinNormal(
        i32: i32, enums: enums, strings: strings, buffers: buffers);
  }

  OptVecsTwinRustAsync _sse_decode_opt_vecs_twin_rust_async(
      SseDeserializer deserializer) {
    var i32 = _sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var enums =
        _sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(deserializer);
    var strings = _sse_decode_list_opt_String(deserializer);
    var buffers = _sse_decode_list_opt_list_prim_i_32(deserializer);
    return OptVecsTwinRustAsync(
        i32: i32, enums: enums, strings: strings, buffers: buffers);
  }

  OptVecsTwinRustAsyncSse _sse_decode_opt_vecs_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var i32 = _sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var enums = _sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(
        deserializer);
    var strings = _sse_decode_list_opt_String(deserializer);
    var buffers = _sse_decode_list_opt_list_prim_i_32(deserializer);
    return OptVecsTwinRustAsyncSse(
        i32: i32, enums: enums, strings: strings, buffers: buffers);
  }

  OptVecsTwinSse _sse_decode_opt_vecs_twin_sse(SseDeserializer deserializer) {
    var i32 = _sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var enums =
        _sse_decode_list_opt_box_autoadd_weekdays_twin_sse(deserializer);
    var strings = _sse_decode_list_opt_String(deserializer);
    var buffers = _sse_decode_list_opt_list_prim_i_32(deserializer);
    return OptVecsTwinSse(
        i32: i32, enums: enums, strings: strings, buffers: buffers);
  }

  OptVecsTwinSync _sse_decode_opt_vecs_twin_sync(SseDeserializer deserializer) {
    var i32 = _sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var enums =
        _sse_decode_list_opt_box_autoadd_weekdays_twin_sync(deserializer);
    var strings = _sse_decode_list_opt_String(deserializer);
    var buffers = _sse_decode_list_opt_list_prim_i_32(deserializer);
    return OptVecsTwinSync(
        i32: i32, enums: enums, strings: strings, buffers: buffers);
  }

  OptVecsTwinSyncSse _sse_decode_opt_vecs_twin_sync_sse(
      SseDeserializer deserializer) {
    var i32 = _sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var enums =
        _sse_decode_list_opt_box_autoadd_weekdays_twin_sync_sse(deserializer);
    var strings = _sse_decode_list_opt_String(deserializer);
    var buffers = _sse_decode_list_opt_list_prim_i_32(deserializer);
    return OptVecsTwinSyncSse(
        i32: i32, enums: enums, strings: strings, buffers: buffers);
  }

  PointTwinNormal _sse_decode_point_twin_normal(SseDeserializer deserializer) {
    var x = _sse_decode_f_32(deserializer);
    var y = _sse_decode_f_32(deserializer);
    return PointTwinNormal(x: x, y: y);
  }

  PointTwinNormalArray2 _sse_decode_point_twin_normal_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_point_twin_normal(deserializer);
    return PointTwinNormalArray2(inner);
  }

  PointTwinRustAsync _sse_decode_point_twin_rust_async(
      SseDeserializer deserializer) {
    var x = _sse_decode_f_32(deserializer);
    var y = _sse_decode_f_32(deserializer);
    return PointTwinRustAsync(x: x, y: y);
  }

  PointTwinRustAsyncArray2 _sse_decode_point_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_point_twin_rust_async(deserializer);
    return PointTwinRustAsyncArray2(inner);
  }

  PointTwinRustAsyncSse _sse_decode_point_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var x = _sse_decode_f_32(deserializer);
    var y = _sse_decode_f_32(deserializer);
    return PointTwinRustAsyncSse(x: x, y: y);
  }

  PointTwinRustAsyncSseArray2 _sse_decode_point_twin_rust_async_sse_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_point_twin_rust_async_sse(deserializer);
    return PointTwinRustAsyncSseArray2(inner);
  }

  PointTwinSse _sse_decode_point_twin_sse(SseDeserializer deserializer) {
    var x = _sse_decode_f_32(deserializer);
    var y = _sse_decode_f_32(deserializer);
    return PointTwinSse(x: x, y: y);
  }

  PointTwinSseArray2 _sse_decode_point_twin_sse_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_point_twin_sse(deserializer);
    return PointTwinSseArray2(inner);
  }

  PointTwinSync _sse_decode_point_twin_sync(SseDeserializer deserializer) {
    var x = _sse_decode_f_32(deserializer);
    var y = _sse_decode_f_32(deserializer);
    return PointTwinSync(x: x, y: y);
  }

  PointTwinSyncArray2 _sse_decode_point_twin_sync_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_point_twin_sync(deserializer);
    return PointTwinSyncArray2(inner);
  }

  PointTwinSyncSse _sse_decode_point_twin_sync_sse(
      SseDeserializer deserializer) {
    var x = _sse_decode_f_32(deserializer);
    var y = _sse_decode_f_32(deserializer);
    return PointTwinSyncSse(x: x, y: y);
  }

  PointTwinSyncSseArray2 _sse_decode_point_twin_sync_sse_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_point_twin_sync_sse(deserializer);
    return PointTwinSyncSseArray2(inner);
  }

  RawStringEnumMirrored _sse_decode_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var field0 = _sse_decode_box_autoadd_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Raw(field0);
      case 1:
        var field0 =
            _sse_decode_box_autoadd_nested_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Nested(field0);
      case 2:
        var field0 = _sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
            deserializer);
        return RawStringEnumMirrored_ListOfNested(field0);
      default:
        throw UnimplementedError('');
    }
  }

  RawStringItemStructTwinNormal _sse_decode_raw_string_item_struct_twin_normal(
      SseDeserializer deserializer) {
    var type = _sse_decode_String(deserializer);
    return RawStringItemStructTwinNormal(type: type);
  }

  RawStringItemStructTwinRustAsync
      _sse_decode_raw_string_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var type = _sse_decode_String(deserializer);
    return RawStringItemStructTwinRustAsync(type: type);
  }

  RawStringItemStructTwinRustAsyncSse
      _sse_decode_raw_string_item_struct_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var type = _sse_decode_String(deserializer);
    return RawStringItemStructTwinRustAsyncSse(type: type);
  }

  RawStringItemStructTwinSse _sse_decode_raw_string_item_struct_twin_sse(
      SseDeserializer deserializer) {
    var type = _sse_decode_String(deserializer);
    return RawStringItemStructTwinSse(type: type);
  }

  RawStringItemStructTwinSync _sse_decode_raw_string_item_struct_twin_sync(
      SseDeserializer deserializer) {
    var type = _sse_decode_String(deserializer);
    return RawStringItemStructTwinSync(type: type);
  }

  RawStringItemStructTwinSyncSse
      _sse_decode_raw_string_item_struct_twin_sync_sse(
          SseDeserializer deserializer) {
    var type = _sse_decode_String(deserializer);
    return RawStringItemStructTwinSyncSse(type: type);
  }

  RawStringMirrored _sse_decode_raw_string_mirrored(
      SseDeserializer deserializer) {
    var value = _sse_decode_String(deserializer);
    return RawStringMirrored(value: value);
  }

  (ApplicationSettings, RawStringEnumMirrored)
      _sse_decode_record_application_settings_raw_string_enum_mirrored(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_application_settings(deserializer);
    var field1 = _sse_decode_raw_string_enum_mirrored(deserializer);
    return (field0, field1);
  }

  (String, int) _sse_decode_record_string_i_32(SseDeserializer deserializer) {
    var field0 = _sse_decode_String(deserializer);
    var field1 = _sse_decode_i_32(deserializer);
    return (field0, field1);
  }

  Sequences _sse_decode_sequences(SseDeserializer deserializer) {
    var field0 = _sse_decode_list_prim_i_32(deserializer);
    return Sequences(field0: field0);
  }

  SomeStructTwinNormal _sse_decode_some_struct_twin_normal(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return SomeStructTwinNormal(value: value);
  }

  SomeStructTwinRustAsync _sse_decode_some_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return SomeStructTwinRustAsync(value: value);
  }

  SomeStructTwinRustAsyncSse _sse_decode_some_struct_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return SomeStructTwinRustAsyncSse(value: value);
  }

  SomeStructTwinSse _sse_decode_some_struct_twin_sse(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return SomeStructTwinSse(value: value);
  }

  SomeStructTwinSync _sse_decode_some_struct_twin_sync(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return SomeStructTwinSync(value: value);
  }

  SomeStructTwinSyncSse _sse_decode_some_struct_twin_sync_sse(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return SomeStructTwinSyncSse(value: value);
  }

  SpeedTwinNormal _sse_decode_speed_twin_normal(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinNormal_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return SpeedTwinNormal_GPS(field0);
      default:
        throw UnimplementedError('');
    }
  }

  SpeedTwinRustAsync _sse_decode_speed_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinRustAsync_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return SpeedTwinRustAsync_GPS(field0);
      default:
        throw UnimplementedError('');
    }
  }

  SpeedTwinRustAsyncSse _sse_decode_speed_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinRustAsyncSse_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return SpeedTwinRustAsyncSse_GPS(field0);
      default:
        throw UnimplementedError('');
    }
  }

  SpeedTwinSse _sse_decode_speed_twin_sse(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinSse_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return SpeedTwinSse_GPS(field0);
      default:
        throw UnimplementedError('');
    }
  }

  SpeedTwinSync _sse_decode_speed_twin_sync(SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinSync_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return SpeedTwinSync_GPS(field0);
      default:
        throw UnimplementedError('');
    }
  }

  SpeedTwinSyncSse _sse_decode_speed_twin_sync_sse(
      SseDeserializer deserializer) {
    var tag_ = _sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinSyncSse_Unknown();
      case 1:
        var field0 = _sse_decode_f_64(deserializer);
        return SpeedTwinSyncSse_GPS(field0);
      default:
        throw UnimplementedError('');
    }
  }

  StructWithEnumTwinNormal _sse_decode_struct_with_enum_twin_normal(
      SseDeserializer deserializer) {
    var abc1 = _sse_decode_abc_twin_normal(deserializer);
    var abc2 = _sse_decode_abc_twin_normal(deserializer);
    return StructWithEnumTwinNormal(abc1: abc1, abc2: abc2);
  }

  StructWithEnumTwinRustAsync _sse_decode_struct_with_enum_twin_rust_async(
      SseDeserializer deserializer) {
    var abc1 = _sse_decode_abc_twin_rust_async(deserializer);
    var abc2 = _sse_decode_abc_twin_rust_async(deserializer);
    return StructWithEnumTwinRustAsync(abc1: abc1, abc2: abc2);
  }

  StructWithEnumTwinRustAsyncSse
      _sse_decode_struct_with_enum_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var abc1 = _sse_decode_abc_twin_rust_async_sse(deserializer);
    var abc2 = _sse_decode_abc_twin_rust_async_sse(deserializer);
    return StructWithEnumTwinRustAsyncSse(abc1: abc1, abc2: abc2);
  }

  StructWithEnumTwinSse _sse_decode_struct_with_enum_twin_sse(
      SseDeserializer deserializer) {
    var abc1 = _sse_decode_abc_twin_sse(deserializer);
    var abc2 = _sse_decode_abc_twin_sse(deserializer);
    return StructWithEnumTwinSse(abc1: abc1, abc2: abc2);
  }

  StructWithEnumTwinSync _sse_decode_struct_with_enum_twin_sync(
      SseDeserializer deserializer) {
    var abc1 = _sse_decode_abc_twin_sync(deserializer);
    var abc2 = _sse_decode_abc_twin_sync(deserializer);
    return StructWithEnumTwinSync(abc1: abc1, abc2: abc2);
  }

  StructWithEnumTwinSyncSse _sse_decode_struct_with_enum_twin_sync_sse(
      SseDeserializer deserializer) {
    var abc1 = _sse_decode_abc_twin_sync_sse(deserializer);
    var abc2 = _sse_decode_abc_twin_sync_sse(deserializer);
    return StructWithEnumTwinSyncSse(abc1: abc1, abc2: abc2);
  }

  StructWithOneFieldTwinNormal _sse_decode_struct_with_one_field_twin_normal(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinNormal(a: a);
  }

  StructWithOneFieldTwinRustAsync
      _sse_decode_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinRustAsync(a: a);
  }

  StructWithOneFieldTwinRustAsyncSse
      _sse_decode_struct_with_one_field_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinRustAsyncSse(a: a);
  }

  StructWithOneFieldTwinSse _sse_decode_struct_with_one_field_twin_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinSse(a: a);
  }

  StructWithOneFieldTwinSync _sse_decode_struct_with_one_field_twin_sync(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinSync(a: a);
  }

  StructWithOneFieldTwinSyncSse _sse_decode_struct_with_one_field_twin_sync_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinSyncSse(a: a);
  }

  StructWithTwoFieldTwinNormal _sse_decode_struct_with_two_field_twin_normal(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    var b = _sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinNormal(a: a, b: b);
  }

  StructWithTwoFieldTwinRustAsync
      _sse_decode_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    var b = _sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinRustAsync(a: a, b: b);
  }

  StructWithTwoFieldTwinRustAsyncSse
      _sse_decode_struct_with_two_field_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    var b = _sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinRustAsyncSse(a: a, b: b);
  }

  StructWithTwoFieldTwinSse _sse_decode_struct_with_two_field_twin_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    var b = _sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinSse(a: a, b: b);
  }

  StructWithTwoFieldTwinSync _sse_decode_struct_with_two_field_twin_sync(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    var b = _sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinSync(a: a, b: b);
  }

  StructWithTwoFieldTwinSyncSse _sse_decode_struct_with_two_field_twin_sync_sse(
      SseDeserializer deserializer) {
    var a = _sse_decode_i_32(deserializer);
    var b = _sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinSyncSse(a: a, b: b);
  }

  StructWithZeroFieldTwinNormal _sse_decode_struct_with_zero_field_twin_normal(
      SseDeserializer deserializer) {
    return StructWithZeroFieldTwinNormal();
  }

  StructWithZeroFieldTwinRustAsync
      _sse_decode_struct_with_zero_field_twin_rust_async(
          SseDeserializer deserializer) {
    return StructWithZeroFieldTwinRustAsync();
  }

  StructWithZeroFieldTwinRustAsyncSse
      _sse_decode_struct_with_zero_field_twin_rust_async_sse(
          SseDeserializer deserializer) {
    return StructWithZeroFieldTwinRustAsyncSse();
  }

  StructWithZeroFieldTwinSse _sse_decode_struct_with_zero_field_twin_sse(
      SseDeserializer deserializer) {
    return StructWithZeroFieldTwinSse();
  }

  StructWithZeroFieldTwinSync _sse_decode_struct_with_zero_field_twin_sync(
      SseDeserializer deserializer) {
    return StructWithZeroFieldTwinSync();
  }

  StructWithZeroFieldTwinSyncSse
      _sse_decode_struct_with_zero_field_twin_sync_sse(
          SseDeserializer deserializer) {
    return StructWithZeroFieldTwinSyncSse();
  }

  SumWithTwinNormal _sse_decode_sum_with_twin_normal(
      SseDeserializer deserializer) {
    var x = _sse_decode_u_32(deserializer);
    return SumWithTwinNormal(x: x);
  }

  SumWithTwinNormalArray3 _sse_decode_sum_with_twin_normal_array_3(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_sum_with_twin_normal(deserializer);
    return SumWithTwinNormalArray3(inner);
  }

  SumWithTwinRustAsync _sse_decode_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    var x = _sse_decode_u_32(deserializer);
    return SumWithTwinRustAsync(x: x);
  }

  SumWithTwinRustAsyncArray3 _sse_decode_sum_with_twin_rust_async_array_3(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_sum_with_twin_rust_async(deserializer);
    return SumWithTwinRustAsyncArray3(inner);
  }

  SumWithTwinRustAsyncSse _sse_decode_sum_with_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var x = _sse_decode_u_32(deserializer);
    return SumWithTwinRustAsyncSse(x: x);
  }

  SumWithTwinRustAsyncSseArray3
      _sse_decode_sum_with_twin_rust_async_sse_array_3(
          SseDeserializer deserializer) {
    var inner = _sse_decode_list_sum_with_twin_rust_async_sse(deserializer);
    return SumWithTwinRustAsyncSseArray3(inner);
  }

  SumWithTwinSse _sse_decode_sum_with_twin_sse(SseDeserializer deserializer) {
    var x = _sse_decode_u_32(deserializer);
    return SumWithTwinSse(x: x);
  }

  SumWithTwinSseArray3 _sse_decode_sum_with_twin_sse_array_3(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_sum_with_twin_sse(deserializer);
    return SumWithTwinSseArray3(inner);
  }

  SumWithTwinSync _sse_decode_sum_with_twin_sync(SseDeserializer deserializer) {
    var x = _sse_decode_u_32(deserializer);
    return SumWithTwinSync(x: x);
  }

  SumWithTwinSyncArray3 _sse_decode_sum_with_twin_sync_array_3(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_sum_with_twin_sync(deserializer);
    return SumWithTwinSyncArray3(inner);
  }

  SumWithTwinSyncSse _sse_decode_sum_with_twin_sync_sse(
      SseDeserializer deserializer) {
    var x = _sse_decode_u_32(deserializer);
    return SumWithTwinSyncSse(x: x);
  }

  SumWithTwinSyncSseArray3 _sse_decode_sum_with_twin_sync_sse_array_3(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_sum_with_twin_sync_sse(deserializer);
    return SumWithTwinSyncSseArray3(inner);
  }

  TestChronoTwinNormal _sse_decode_test_chrono_twin_normal(
      SseDeserializer deserializer) {
    var dt = _sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var dt2 = _sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var du = _sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinNormal(dt: dt, dt2: dt2, du: du);
  }

  TestChronoTwinRustAsync _sse_decode_test_chrono_twin_rust_async(
      SseDeserializer deserializer) {
    var dt = _sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var dt2 = _sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var du = _sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinRustAsync(dt: dt, dt2: dt2, du: du);
  }

  TestChronoTwinSync _sse_decode_test_chrono_twin_sync(
      SseDeserializer deserializer) {
    var dt = _sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var dt2 = _sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var du = _sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinSync(dt: dt, dt2: dt2, du: du);
  }

  TestIdTwinNormal _sse_decode_test_id_twin_normal(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32_array_2(deserializer);
    return TestIdTwinNormal(field0: field0);
  }

  TestIdTwinNormalArray2 _sse_decode_test_id_twin_normal_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_test_id_twin_normal(deserializer);
    return TestIdTwinNormalArray2(inner);
  }

  TestIdTwinRustAsync _sse_decode_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32_array_2(deserializer);
    return TestIdTwinRustAsync(field0: field0);
  }

  TestIdTwinRustAsyncArray2 _sse_decode_test_id_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_test_id_twin_rust_async(deserializer);
    return TestIdTwinRustAsyncArray2(inner);
  }

  TestIdTwinRustAsyncSse _sse_decode_test_id_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32_array_2(deserializer);
    return TestIdTwinRustAsyncSse(field0: field0);
  }

  TestIdTwinRustAsyncSseArray2 _sse_decode_test_id_twin_rust_async_sse_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_test_id_twin_rust_async_sse(deserializer);
    return TestIdTwinRustAsyncSseArray2(inner);
  }

  TestIdTwinSse _sse_decode_test_id_twin_sse(SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32_array_2(deserializer);
    return TestIdTwinSse(field0: field0);
  }

  TestIdTwinSseArray2 _sse_decode_test_id_twin_sse_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_test_id_twin_sse(deserializer);
    return TestIdTwinSseArray2(inner);
  }

  TestIdTwinSync _sse_decode_test_id_twin_sync(SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32_array_2(deserializer);
    return TestIdTwinSync(field0: field0);
  }

  TestIdTwinSyncArray2 _sse_decode_test_id_twin_sync_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_test_id_twin_sync(deserializer);
    return TestIdTwinSyncArray2(inner);
  }

  TestIdTwinSyncSse _sse_decode_test_id_twin_sync_sse(
      SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32_array_2(deserializer);
    return TestIdTwinSyncSse(field0: field0);
  }

  TestIdTwinSyncSseArray2 _sse_decode_test_id_twin_sync_sse_array_2(
      SseDeserializer deserializer) {
    var inner = _sse_decode_list_test_id_twin_sync_sse(deserializer);
    return TestIdTwinSyncSseArray2(inner);
  }

  TestModelTwinNormal _sse_decode_test_model_twin_normal(
      SseDeserializer deserializer) {
    var id = _sse_decode_u_64(deserializer);
    var name = _sse_decode_String(deserializer);
    var aliasEnum = _sse_decode_my_enum(deserializer);
    var aliasStruct = _sse_decode_my_struct(deserializer);
    return TestModelTwinNormal(
        id: id, name: name, aliasEnum: aliasEnum, aliasStruct: aliasStruct);
  }

  TestModelTwinRustAsync _sse_decode_test_model_twin_rust_async(
      SseDeserializer deserializer) {
    var id = _sse_decode_u_64(deserializer);
    var name = _sse_decode_String(deserializer);
    var aliasEnum = _sse_decode_my_enum(deserializer);
    var aliasStruct = _sse_decode_my_struct(deserializer);
    return TestModelTwinRustAsync(
        id: id, name: name, aliasEnum: aliasEnum, aliasStruct: aliasStruct);
  }

  TestModelTwinRustAsyncSse _sse_decode_test_model_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var id = _sse_decode_u_64(deserializer);
    var name = _sse_decode_String(deserializer);
    var aliasEnum = _sse_decode_my_enum(deserializer);
    var aliasStruct = _sse_decode_my_struct(deserializer);
    return TestModelTwinRustAsyncSse(
        id: id, name: name, aliasEnum: aliasEnum, aliasStruct: aliasStruct);
  }

  TestModelTwinSse _sse_decode_test_model_twin_sse(
      SseDeserializer deserializer) {
    var id = _sse_decode_u_64(deserializer);
    var name = _sse_decode_String(deserializer);
    var aliasEnum = _sse_decode_my_enum(deserializer);
    var aliasStruct = _sse_decode_my_struct(deserializer);
    return TestModelTwinSse(
        id: id, name: name, aliasEnum: aliasEnum, aliasStruct: aliasStruct);
  }

  TestModelTwinSync _sse_decode_test_model_twin_sync(
      SseDeserializer deserializer) {
    var id = _sse_decode_u_64(deserializer);
    var name = _sse_decode_String(deserializer);
    var aliasEnum = _sse_decode_my_enum(deserializer);
    var aliasStruct = _sse_decode_my_struct(deserializer);
    return TestModelTwinSync(
        id: id, name: name, aliasEnum: aliasEnum, aliasStruct: aliasStruct);
  }

  TestModelTwinSyncSse _sse_decode_test_model_twin_sync_sse(
      SseDeserializer deserializer) {
    var id = _sse_decode_u_64(deserializer);
    var name = _sse_decode_String(deserializer);
    var aliasEnum = _sse_decode_my_enum(deserializer);
    var aliasStruct = _sse_decode_my_struct(deserializer);
    return TestModelTwinSyncSse(
        id: id, name: name, aliasEnum: aliasEnum, aliasStruct: aliasStruct);
  }

  TupleStructWithOneFieldTwinNormal
      _sse_decode_tuple_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinNormal(field0: field0);
  }

  TupleStructWithOneFieldTwinRustAsync
      _sse_decode_tuple_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinRustAsync(field0: field0);
  }

  TupleStructWithOneFieldTwinRustAsyncSse
      _sse_decode_tuple_struct_with_one_field_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinRustAsyncSse(field0: field0);
  }

  TupleStructWithOneFieldTwinSse
      _sse_decode_tuple_struct_with_one_field_twin_sse(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinSse(field0: field0);
  }

  TupleStructWithOneFieldTwinSync
      _sse_decode_tuple_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinSync(field0: field0);
  }

  TupleStructWithOneFieldTwinSyncSse
      _sse_decode_tuple_struct_with_one_field_twin_sync_sse(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinSyncSse(field0: field0);
  }

  TupleStructWithTwoFieldTwinNormal
      _sse_decode_tuple_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    var field1 = _sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinNormal(field0: field0, field1: field1);
  }

  TupleStructWithTwoFieldTwinRustAsync
      _sse_decode_tuple_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    var field1 = _sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinRustAsync(field0: field0, field1: field1);
  }

  TupleStructWithTwoFieldTwinRustAsyncSse
      _sse_decode_tuple_struct_with_two_field_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    var field1 = _sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinRustAsyncSse(
        field0: field0, field1: field1);
  }

  TupleStructWithTwoFieldTwinSse
      _sse_decode_tuple_struct_with_two_field_twin_sse(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    var field1 = _sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinSse(field0: field0, field1: field1);
  }

  TupleStructWithTwoFieldTwinSync
      _sse_decode_tuple_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    var field1 = _sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinSync(field0: field0, field1: field1);
  }

  TupleStructWithTwoFieldTwinSyncSse
      _sse_decode_tuple_struct_with_two_field_twin_sync_sse(
          SseDeserializer deserializer) {
    var field0 = _sse_decode_i_32(deserializer);
    var field1 = _sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinSyncSse(field0: field0, field1: field1);
  }

  int _sse_decode_u_16(SseDeserializer deserializer) {
    return deserializer.buffer.getUint16();
  }

  int _sse_decode_u_32(SseDeserializer deserializer) {
    return deserializer.buffer.getUint32();
  }

  int _sse_decode_u_64(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  int _sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  U8Array1600 _sse_decode_u_8_array_1600(SseDeserializer deserializer) {
    var inner = _sse_decode_list_prim_u_8(deserializer);
    return U8Array1600(inner);
  }

  U8Array32 _sse_decode_u_8_array_32(SseDeserializer deserializer) {
    var inner = _sse_decode_list_prim_u_8(deserializer);
    return U8Array32(inner);
  }

  U8Array5 _sse_decode_u_8_array_5(SseDeserializer deserializer) {
    var inner = _sse_decode_list_prim_u_8(deserializer);
    return U8Array5(inner);
  }

  U8Array8 _sse_decode_u_8_array_8(SseDeserializer deserializer) {
    var inner = _sse_decode_list_prim_u_8(deserializer);
    return U8Array8(inner);
  }

  void _sse_decode_unit(SseDeserializer deserializer) {}

  UserIdTwinNormal _sse_decode_user_id_twin_normal(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return UserIdTwinNormal(value: value);
  }

  UserIdTwinRustAsync _sse_decode_user_id_twin_rust_async(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return UserIdTwinRustAsync(value: value);
  }

  UserIdTwinRustAsyncSse _sse_decode_user_id_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return UserIdTwinRustAsyncSse(value: value);
  }

  UserIdTwinSse _sse_decode_user_id_twin_sse(SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return UserIdTwinSse(value: value);
  }

  UserIdTwinSync _sse_decode_user_id_twin_sync(SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return UserIdTwinSync(value: value);
  }

  UserIdTwinSyncSse _sse_decode_user_id_twin_sync_sse(
      SseDeserializer deserializer) {
    var value = _sse_decode_u_32(deserializer);
    return UserIdTwinSyncSse(value: value);
  }

  int _sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  VecOfPrimitivePackTwinNormal _sse_decode_vec_of_primitive_pack_twin_normal(
      SseDeserializer deserializer) {
    var int8List = _sse_decode_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_list_prim_u_8(deserializer);
    var int16List = _sse_decode_list_prim_i_16(deserializer);
    var uint16List = _sse_decode_list_prim_u_16(deserializer);
    var uint32List = _sse_decode_list_prim_u_32(deserializer);
    var int32List = _sse_decode_list_prim_i_32(deserializer);
    var uint64List = _sse_decode_list_prim_u_64(deserializer);
    var int64List = _sse_decode_list_prim_i_64(deserializer);
    var float32List = _sse_decode_list_prim_f_32(deserializer);
    var float64List = _sse_decode_list_prim_f_64(deserializer);
    var boolList = _sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinNormal(
        int8List: int8List,
        uint8List: uint8List,
        int16List: int16List,
        uint16List: uint16List,
        uint32List: uint32List,
        int32List: int32List,
        uint64List: uint64List,
        int64List: int64List,
        float32List: float32List,
        float64List: float64List,
        boolList: boolList);
  }

  VecOfPrimitivePackTwinRustAsync
      _sse_decode_vec_of_primitive_pack_twin_rust_async(
          SseDeserializer deserializer) {
    var int8List = _sse_decode_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_list_prim_u_8(deserializer);
    var int16List = _sse_decode_list_prim_i_16(deserializer);
    var uint16List = _sse_decode_list_prim_u_16(deserializer);
    var uint32List = _sse_decode_list_prim_u_32(deserializer);
    var int32List = _sse_decode_list_prim_i_32(deserializer);
    var uint64List = _sse_decode_list_prim_u_64(deserializer);
    var int64List = _sse_decode_list_prim_i_64(deserializer);
    var float32List = _sse_decode_list_prim_f_32(deserializer);
    var float64List = _sse_decode_list_prim_f_64(deserializer);
    var boolList = _sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinRustAsync(
        int8List: int8List,
        uint8List: uint8List,
        int16List: int16List,
        uint16List: uint16List,
        uint32List: uint32List,
        int32List: int32List,
        uint64List: uint64List,
        int64List: int64List,
        float32List: float32List,
        float64List: float64List,
        boolList: boolList);
  }

  VecOfPrimitivePackTwinRustAsyncSse
      _sse_decode_vec_of_primitive_pack_twin_rust_async_sse(
          SseDeserializer deserializer) {
    var int8List = _sse_decode_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_list_prim_u_8(deserializer);
    var int16List = _sse_decode_list_prim_i_16(deserializer);
    var uint16List = _sse_decode_list_prim_u_16(deserializer);
    var uint32List = _sse_decode_list_prim_u_32(deserializer);
    var int32List = _sse_decode_list_prim_i_32(deserializer);
    var uint64List = _sse_decode_list_prim_u_64(deserializer);
    var int64List = _sse_decode_list_prim_i_64(deserializer);
    var float32List = _sse_decode_list_prim_f_32(deserializer);
    var float64List = _sse_decode_list_prim_f_64(deserializer);
    var boolList = _sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinRustAsyncSse(
        int8List: int8List,
        uint8List: uint8List,
        int16List: int16List,
        uint16List: uint16List,
        uint32List: uint32List,
        int32List: int32List,
        uint64List: uint64List,
        int64List: int64List,
        float32List: float32List,
        float64List: float64List,
        boolList: boolList);
  }

  VecOfPrimitivePackTwinSse _sse_decode_vec_of_primitive_pack_twin_sse(
      SseDeserializer deserializer) {
    var int8List = _sse_decode_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_list_prim_u_8(deserializer);
    var int16List = _sse_decode_list_prim_i_16(deserializer);
    var uint16List = _sse_decode_list_prim_u_16(deserializer);
    var uint32List = _sse_decode_list_prim_u_32(deserializer);
    var int32List = _sse_decode_list_prim_i_32(deserializer);
    var uint64List = _sse_decode_list_prim_u_64(deserializer);
    var int64List = _sse_decode_list_prim_i_64(deserializer);
    var float32List = _sse_decode_list_prim_f_32(deserializer);
    var float64List = _sse_decode_list_prim_f_64(deserializer);
    var boolList = _sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinSse(
        int8List: int8List,
        uint8List: uint8List,
        int16List: int16List,
        uint16List: uint16List,
        uint32List: uint32List,
        int32List: int32List,
        uint64List: uint64List,
        int64List: int64List,
        float32List: float32List,
        float64List: float64List,
        boolList: boolList);
  }

  VecOfPrimitivePackTwinSync _sse_decode_vec_of_primitive_pack_twin_sync(
      SseDeserializer deserializer) {
    var int8List = _sse_decode_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_list_prim_u_8(deserializer);
    var int16List = _sse_decode_list_prim_i_16(deserializer);
    var uint16List = _sse_decode_list_prim_u_16(deserializer);
    var uint32List = _sse_decode_list_prim_u_32(deserializer);
    var int32List = _sse_decode_list_prim_i_32(deserializer);
    var uint64List = _sse_decode_list_prim_u_64(deserializer);
    var int64List = _sse_decode_list_prim_i_64(deserializer);
    var float32List = _sse_decode_list_prim_f_32(deserializer);
    var float64List = _sse_decode_list_prim_f_64(deserializer);
    var boolList = _sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinSync(
        int8List: int8List,
        uint8List: uint8List,
        int16List: int16List,
        uint16List: uint16List,
        uint32List: uint32List,
        int32List: int32List,
        uint64List: uint64List,
        int64List: int64List,
        float32List: float32List,
        float64List: float64List,
        boolList: boolList);
  }

  VecOfPrimitivePackTwinSyncSse _sse_decode_vec_of_primitive_pack_twin_sync_sse(
      SseDeserializer deserializer) {
    var int8List = _sse_decode_list_prim_i_8(deserializer);
    var uint8List = _sse_decode_list_prim_u_8(deserializer);
    var int16List = _sse_decode_list_prim_i_16(deserializer);
    var uint16List = _sse_decode_list_prim_u_16(deserializer);
    var uint32List = _sse_decode_list_prim_u_32(deserializer);
    var int32List = _sse_decode_list_prim_i_32(deserializer);
    var uint64List = _sse_decode_list_prim_u_64(deserializer);
    var int64List = _sse_decode_list_prim_i_64(deserializer);
    var float32List = _sse_decode_list_prim_f_32(deserializer);
    var float64List = _sse_decode_list_prim_f_64(deserializer);
    var boolList = _sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinSyncSse(
        int8List: int8List,
        uint8List: uint8List,
        int16List: int16List,
        uint16List: uint16List,
        uint32List: uint32List,
        int32List: int32List,
        uint64List: uint64List,
        int64List: int64List,
        float32List: float32List,
        float64List: float64List,
        boolList: boolList);
  }

  WeekdaysTwinNormal _sse_decode_weekdays_twin_normal(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return WeekdaysTwinNormal.values[inner];
  }

  WeekdaysTwinRustAsync _sse_decode_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return WeekdaysTwinRustAsync.values[inner];
  }

  WeekdaysTwinRustAsyncSse _sse_decode_weekdays_twin_rust_async_sse(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return WeekdaysTwinRustAsyncSse.values[inner];
  }

  WeekdaysTwinSse _sse_decode_weekdays_twin_sse(SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return WeekdaysTwinSse.values[inner];
  }

  WeekdaysTwinSync _sse_decode_weekdays_twin_sync(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return WeekdaysTwinSync.values[inner];
  }

  WeekdaysTwinSyncSse _sse_decode_weekdays_twin_sync_sse(
      SseDeserializer deserializer) {
    var inner = _sse_decode_i_32(deserializer);
    return WeekdaysTwinSyncSse.values[inner];
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          RwLockBoxFnStringString self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          RwLockBoxHelloTraitTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
      RwLockBoxHelloTraitTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
      RwLockBoxHelloTraitTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          RwLockBoxHelloTraitTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          RwLockBoxMyTraitTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          RwLockBoxMyTraitTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          RwLockBoxMyTraitTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          RwLockBoxMyTraitTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
      RwLockNonCloneSimpleTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
      RwLockNonCloneSimpleTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
      RwLockNonCloneSimpleTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
      RwLockNonCloneSimpleTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          RwLockStructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          RwLockStructWithGoodAndOpaqueFieldTwinSse self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          RwLockStructWithGoodAndOpaqueFieldTwinSync self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          RwLockStructWithGoodAndOpaqueFieldTwinSyncSse self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  void
      _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          RwLockBoxHelloTraitTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
      RwLockBoxHelloTraitTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
      RwLockBoxHelloTraitTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          RwLockBoxHelloTraitTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
      RwLockNonCloneSimpleTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
      RwLockNonCloneSimpleTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
      RwLockNonCloneSimpleTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          RwLockNonCloneSimpleTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          RwLockStructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          RwLockStructWithGoodAndOpaqueFieldTwinSse self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          RwLockStructWithGoodAndOpaqueFieldTwinSync self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          RwLockStructWithGoodAndOpaqueFieldTwinSyncSse self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
      RwLockBoxHelloTraitTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
      RwLockBoxHelloTraitTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
      RwLockBoxHelloTraitTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
      RwLockBoxHelloTraitTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
      RwLockNonCloneSimpleTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
      RwLockNonCloneSimpleTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
      RwLockNonCloneSimpleTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
      RwLockNonCloneSimpleTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          RwLockStructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          RwLockStructWithGoodAndOpaqueFieldTwinSse self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          RwLockStructWithGoodAndOpaqueFieldTwinSync self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void
      _sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          RwLockStructWithGoodAndOpaqueFieldTwinSyncSse self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  void _sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  void _sse_encode_Chrono_Local(DateTime self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  void _sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  void _sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  void _sse_encode_DartFn_Inputs__Output_unit(
      void Function() self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self, serializer);
  }

  void _sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    _sse_encode_usize(
        PlatformPointerUtil.ptrToInt(wire.dart_opaque_dart2rust_encode(self)),
        serializer);
  }

  void _sse_encode_DartOpaque_array_1(
      ObjectArray1 self, SseSerializer serializer) {
    _sse_encode_list_DartOpaque(self.inner, serializer);
  }

  void _sse_encode_RustOpaque_MutexHideData(
      MutexHideData self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_RwLockHideData(
      RwLockHideData self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_box_dynDartDebugTwinNormal(
      BoxDartDebugTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_box_dynDartDebugTwinRustAsync(
      BoxDartDebugTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
      BoxDartDebugTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_box_dynDartDebugTwinSse(
      BoxDartDebugTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_box_dynDartDebugTwinSync(
      BoxDartDebugTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_box_dynDartDebugTwinSyncSse(
      BoxDartDebugTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_hide_data(
      HideData self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_hide_data_array_2(
      HideDataArray2 self, SseSerializer serializer) {
    _sse_encode_list_RustOpaque_hide_data(self.inner, serializer);
  }

  void _sse_encode_RustOpaque_i_32(I32 self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_non_clone_data(
      NonCloneData self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_non_send_hide_data(
      NonSendHideData self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void
      _sse_encode_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          RwLockBoxFnStringString self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
      RwLockBoxHelloTraitTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
      RwLockBoxHelloTraitTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
      RwLockBoxHelloTraitTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
      RwLockBoxHelloTraitTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
      RwLockBoxMyTraitTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
      RwLockBoxMyTraitTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
      RwLockBoxMyTraitTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
      RwLockBoxMyTraitTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
      RwLockNonCloneSimpleTwinNormal self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
      RwLockNonCloneSimpleTwinSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
      RwLockNonCloneSimpleTwinSync self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
      RwLockNonCloneSimpleTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void
      _sse_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          RwLockStructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
      RwLockStructWithGoodAndOpaqueFieldTwinSse self,
      SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
      RwLockStructWithGoodAndOpaqueFieldTwinSync self,
      SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void
      _sse_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          RwLockStructWithGoodAndOpaqueFieldTwinSyncSse self,
          SseSerializer serializer) {
    _sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  void _sse_encode_String(String self, SseSerializer serializer) {
    _sse_encode_list_prim_u_8(utf8.encoder.convert(self), serializer);
  }

  void _sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  void _sse_encode_a_twin_normal(ATwinNormal self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_a_twin_rust_async_sse(
      ATwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_a_twin_sse(ATwinSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_a_twin_sync(ATwinSync self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_a_twin_sync_sse(
      ATwinSyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinNormal_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_autoadd_a_twin_normal(field0, serializer);
      case AbcTwinNormal_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_b_twin_normal(field0, serializer);
      case AbcTwinNormal_C(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_box_autoadd_c_twin_normal(field0, serializer);
      case AbcTwinNormal_JustInt(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_i_32(field0, serializer);
    }
  }

  void _sse_encode_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinRustAsync_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_autoadd_a_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_b_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_C(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_box_autoadd_c_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_JustInt(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_i_32(field0, serializer);
    }
  }

  void _sse_encode_abc_twin_rust_async_sse(
      AbcTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinRustAsyncSse_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_autoadd_a_twin_rust_async_sse(field0, serializer);
      case AbcTwinRustAsyncSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_b_twin_rust_async_sse(field0, serializer);
      case AbcTwinRustAsyncSse_C(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_box_autoadd_c_twin_rust_async_sse(field0, serializer);
      case AbcTwinRustAsyncSse_JustInt(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_i_32(field0, serializer);
    }
  }

  void _sse_encode_abc_twin_sse(AbcTwinSse self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinSse_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_autoadd_a_twin_sse(field0, serializer);
      case AbcTwinSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_b_twin_sse(field0, serializer);
      case AbcTwinSse_C(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_box_autoadd_c_twin_sse(field0, serializer);
      case AbcTwinSse_JustInt(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_i_32(field0, serializer);
    }
  }

  void _sse_encode_abc_twin_sync(AbcTwinSync self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinSync_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_autoadd_a_twin_sync(field0, serializer);
      case AbcTwinSync_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_b_twin_sync(field0, serializer);
      case AbcTwinSync_C(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_box_autoadd_c_twin_sync(field0, serializer);
      case AbcTwinSync_JustInt(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_i_32(field0, serializer);
    }
  }

  void _sse_encode_abc_twin_sync_sse(
      AbcTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinSyncSse_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_autoadd_a_twin_sync_sse(field0, serializer);
      case AbcTwinSyncSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_b_twin_sync_sse(field0, serializer);
      case AbcTwinSyncSse_C(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_box_autoadd_c_twin_sync_sse(field0, serializer);
      case AbcTwinSyncSse_JustInt(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_i_32(field0, serializer);
    }
  }

  void _sse_encode_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    _sse_encode_list_application_env_var(self.vars, serializer);
  }

  void _sse_encode_application_env_var(
      ApplicationEnvVar self, SseSerializer serializer) {
    _sse_encode_String(self.field0, serializer);
    _sse_encode_bool(self.field1, serializer);
  }

  void _sse_encode_application_mode(
      ApplicationMode self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    _sse_encode_String(self.name, serializer);
    _sse_encode_String(self.version, serializer);
    _sse_encode_application_mode(self.mode, serializer);
    _sse_encode_box_application_env(self.env, serializer);
    _sse_encode_opt_box_autoadd_application_env(self.envOptional, serializer);
  }

  void _sse_encode_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    _sse_encode_String(self.key, serializer);
    _sse_encode_String(self.value, serializer);
  }

  void _sse_encode_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_String(self.key, serializer);
    _sse_encode_String(self.value, serializer);
  }

  void _sse_encode_attribute_twin_rust_async_sse(
      AttributeTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.key, serializer);
    _sse_encode_String(self.value, serializer);
  }

  void _sse_encode_attribute_twin_sse(
      AttributeTwinSse self, SseSerializer serializer) {
    _sse_encode_String(self.key, serializer);
    _sse_encode_String(self.value, serializer);
  }

  void _sse_encode_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    _sse_encode_String(self.key, serializer);
    _sse_encode_String(self.value, serializer);
  }

  void _sse_encode_attribute_twin_sync_sse(
      AttributeTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.key, serializer);
    _sse_encode_String(self.value, serializer);
  }

  void _sse_encode_b_twin_normal(BTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_b_twin_rust_async_sse(
      BTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_b_twin_sse(BTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_b_twin_sync(BTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_b_twin_sync_sse(
      BTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    _sse_encode_u_8_array_1600(self.field0, serializer);
  }

  void _sse_encode_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_u_8_array_1600(self.field0, serializer);
  }

  void _sse_encode_blob_twin_rust_async_sse(
      BlobTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_1600(self.field0, serializer);
  }

  void _sse_encode_blob_twin_sse(BlobTwinSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_1600(self.field0, serializer);
  }

  void _sse_encode_blob_twin_sync(BlobTwinSync self, SseSerializer serializer) {
    _sse_encode_u_8_array_1600(self.field0, serializer);
  }

  void _sse_encode_blob_twin_sync_sse(
      BlobTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_1600(self.field0, serializer);
  }

  void _sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  void _sse_encode_box_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    _sse_encode_application_env(self, serializer);
  }

  void _sse_encode_box_autoadd_Chrono_Utc(
      DateTime self, SseSerializer serializer) {
    _sse_encode_Chrono_Utc(self, serializer);
  }

  void _sse_encode_box_autoadd_DartOpaque(
      Object self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self, serializer);
  }

  void _sse_encode_box_autoadd_RustOpaque_hide_data(
      HideData self, SseSerializer serializer) {
    _sse_encode_RustOpaque_hide_data(self, serializer);
  }

  void _sse_encode_box_autoadd_a_twin_normal(
      ATwinNormal self, SseSerializer serializer) {
    _sse_encode_a_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    _sse_encode_a_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_a_twin_rust_async_sse(
      ATwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_a_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_a_twin_sse(
      ATwinSse self, SseSerializer serializer) {
    _sse_encode_a_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_a_twin_sync(
      ATwinSync self, SseSerializer serializer) {
    _sse_encode_a_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_a_twin_sync_sse(
      ATwinSyncSse self, SseSerializer serializer) {
    _sse_encode_a_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    _sse_encode_abc_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_abc_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_abc_twin_rust_async_sse(
      AbcTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_abc_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_abc_twin_sse(
      AbcTwinSse self, SseSerializer serializer) {
    _sse_encode_abc_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_abc_twin_sync(
      AbcTwinSync self, SseSerializer serializer) {
    _sse_encode_abc_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_abc_twin_sync_sse(
      AbcTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_abc_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    _sse_encode_application_env(self, serializer);
  }

  void _sse_encode_box_autoadd_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    _sse_encode_application_settings(self, serializer);
  }

  void _sse_encode_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    _sse_encode_attribute_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_attribute_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_attribute_twin_rust_async_sse(
      AttributeTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_attribute_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_attribute_twin_sse(
      AttributeTwinSse self, SseSerializer serializer) {
    _sse_encode_attribute_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    _sse_encode_attribute_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_attribute_twin_sync_sse(
      AttributeTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_attribute_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_b_twin_normal(
      BTwinNormal self, SseSerializer serializer) {
    _sse_encode_b_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_b_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_b_twin_rust_async_sse(
      BTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_b_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_b_twin_sse(
      BTwinSse self, SseSerializer serializer) {
    _sse_encode_b_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_b_twin_sync(
      BTwinSync self, SseSerializer serializer) {
    _sse_encode_b_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_b_twin_sync_sse(
      BTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_b_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    _sse_encode_bool(self, serializer);
  }

  void _sse_encode_box_autoadd_c_twin_normal(
      CTwinNormal self, SseSerializer serializer) {
    _sse_encode_c_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_c_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_c_twin_rust_async_sse(
      CTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_c_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_c_twin_sse(
      CTwinSse self, SseSerializer serializer) {
    _sse_encode_c_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_c_twin_sync(
      CTwinSync self, SseSerializer serializer) {
    _sse_encode_c_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_c_twin_sync_sse(
      CTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_c_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    _sse_encode_concatenate_with_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_concatenate_with_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_concatenate_with_twin_rust_async_sse(
      ConcatenateWithTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_concatenate_with_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_concatenate_with_twin_sse(
      ConcatenateWithTwinSse self, SseSerializer serializer) {
    _sse_encode_concatenate_with_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    _sse_encode_concatenate_with_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_concatenate_with_twin_sync_sse(
      ConcatenateWithTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_concatenate_with_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_inner_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_inner_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
      CustomNestedErrorInnerTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_inner_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_inner_twin_sse(
      CustomNestedErrorInnerTwinSse self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_inner_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_inner_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
      CustomNestedErrorInnerTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_inner_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_outer_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_outer_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async_sse(
      CustomNestedErrorOuterTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_outer_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_outer_twin_sse(
      CustomNestedErrorOuterTwinSse self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_outer_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_outer_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_nested_error_outer_twin_sync_sse(
      CustomNestedErrorOuterTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_custom_nested_error_outer_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    _sse_encode_custom_struct_error_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_custom_struct_error_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_error_twin_rust_async_sse(
      CustomStructErrorTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_custom_struct_error_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_error_twin_sse(
      CustomStructErrorTwinSse self, SseSerializer serializer) {
    _sse_encode_custom_struct_error_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    _sse_encode_custom_struct_error_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_error_twin_sync_sse(
      CustomStructErrorTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_custom_struct_error_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    _sse_encode_custom_struct_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_custom_struct_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_twin_rust_async_sse(
      CustomStructTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_custom_struct_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_twin_sse(
      CustomStructTwinSse self, SseSerializer serializer) {
    _sse_encode_custom_struct_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    _sse_encode_custom_struct_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_custom_struct_twin_sync_sse(
      CustomStructTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_custom_struct_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    _sse_encode_customized_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_customized_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_customized_twin_rust_async_sse(
      CustomizedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_customized_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_customized_twin_sse(
      CustomizedTwinSse self, SseSerializer serializer) {
    _sse_encode_customized_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    _sse_encode_customized_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_customized_twin_sync_sse(
      CustomizedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_customized_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    _sse_encode_dart_opaque_nested_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_dart_opaque_nested_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async_sse(
      DartOpaqueNestedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_dart_opaque_nested_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_dart_opaque_nested_twin_sse(
      DartOpaqueNestedTwinSse self, SseSerializer serializer) {
    _sse_encode_dart_opaque_nested_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    _sse_encode_dart_opaque_nested_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_dart_opaque_nested_twin_sync_sse(
      DartOpaqueNestedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_dart_opaque_nested_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {
    _sse_encode_empty_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_empty_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_empty_twin_rust_async_sse(
      EmptyTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_empty_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_empty_twin_sse(
      EmptyTwinSse self, SseSerializer serializer) {
    _sse_encode_empty_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {
    _sse_encode_empty_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_empty_twin_sync_sse(
      EmptyTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_empty_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    _sse_encode_enum_dart_opaque_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_enum_dart_opaque_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async_sse(
      EnumDartOpaqueTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_enum_dart_opaque_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_dart_opaque_twin_sse(
      EnumDartOpaqueTwinSse self, SseSerializer serializer) {
    _sse_encode_enum_dart_opaque_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    _sse_encode_enum_dart_opaque_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_dart_opaque_twin_sync_sse(
      EnumDartOpaqueTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_enum_dart_opaque_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    _sse_encode_enum_opaque_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_enum_opaque_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_opaque_twin_rust_async_sse(
      EnumOpaqueTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_enum_opaque_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_opaque_twin_sse(
      EnumOpaqueTwinSse self, SseSerializer serializer) {
    _sse_encode_enum_opaque_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    _sse_encode_enum_opaque_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_opaque_twin_sync_sse(
      EnumOpaqueTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_enum_opaque_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    _sse_encode_enum_with_item_mixed_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_enum_with_item_mixed_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async_sse(
      EnumWithItemMixedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_mixed_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_mixed_twin_sse(
      EnumWithItemMixedTwinSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_mixed_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    _sse_encode_enum_with_item_mixed_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_mixed_twin_sync_sse(
      EnumWithItemMixedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_mixed_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    _sse_encode_enum_with_item_struct_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_enum_with_item_struct_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async_sse(
      EnumWithItemStructTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_struct_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_struct_twin_sse(
      EnumWithItemStructTwinSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_struct_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    _sse_encode_enum_with_item_struct_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_struct_twin_sync_sse(
      EnumWithItemStructTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_struct_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    _sse_encode_enum_with_item_tuple_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_enum_with_item_tuple_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async_sse(
      EnumWithItemTupleTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_tuple_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_tuple_twin_sse(
      EnumWithItemTupleTwinSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_tuple_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    _sse_encode_enum_with_item_tuple_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_enum_with_item_tuple_twin_sync_sse(
      EnumWithItemTupleTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_enum_with_item_tuple_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    _sse_encode_event_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_event_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_event_twin_rust_async_sse(
      EventTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_event_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_event_twin_sse(
      EventTwinSse self, SseSerializer serializer) {
    _sse_encode_event_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    _sse_encode_f_32(self, serializer);
  }

  void _sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    _sse_encode_f_64(self, serializer);
  }

  void _sse_encode_box_autoadd_feature_chrono_twin_normal(
      FeatureChronoTwinNormal self, SseSerializer serializer) {
    _sse_encode_feature_chrono_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_feature_chrono_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_feature_chrono_twin_sync(
      FeatureChronoTwinSync self, SseSerializer serializer) {
    _sse_encode_feature_chrono_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_feature_uuid_twin_normal(
      FeatureUuidTwinNormal self, SseSerializer serializer) {
    _sse_encode_feature_uuid_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_feature_uuid_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_feature_uuid_twin_sync(
      FeatureUuidTwinSync self, SseSerializer serializer) {
    _sse_encode_feature_uuid_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_feed_id_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_feed_id_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_feed_id_twin_rust_async_sse(
      FeedIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_feed_id_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_feed_id_twin_sse(
      FeedIdTwinSse self, SseSerializer serializer) {
    _sse_encode_feed_id_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    _sse_encode_feed_id_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_feed_id_twin_sync_sse(
      FeedIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_feed_id_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_i_16(int self, SseSerializer serializer) {
    _sse_encode_i_16(self, serializer);
  }

  void _sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    _sse_encode_i_32(self, serializer);
  }

  void _sse_encode_box_autoadd_i_64(int self, SseSerializer serializer) {
    _sse_encode_i_64(self, serializer);
  }

  void _sse_encode_box_autoadd_i_8(int self, SseSerializer serializer) {
    _sse_encode_i_8(self, serializer);
  }

  void _sse_encode_box_autoadd_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_kitchen_sink_twin_rust_async_sse(
      KitchenSinkTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_kitchen_sink_twin_sse(
      KitchenSinkTwinSse self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_kitchen_sink_twin_sync_sse(
      KitchenSinkTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_macro_struct(
      MacroStruct self, SseSerializer serializer) {
    _sse_encode_macro_struct(self, serializer);
  }

  void _sse_encode_box_autoadd_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    _sse_encode_measure_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_measure_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_measure_twin_rust_async_sse(
      MeasureTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_measure_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_measure_twin_sse(
      MeasureTwinSse self, SseSerializer serializer) {
    _sse_encode_measure_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    _sse_encode_measure_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_measure_twin_sync_sse(
      MeasureTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_measure_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_message_id_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_message_id_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_message_id_twin_rust_async_sse(
      MessageIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_message_id_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_message_id_twin_sse(
      MessageIdTwinSse self, SseSerializer serializer) {
    _sse_encode_message_id_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    _sse_encode_message_id_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_message_id_twin_sync_sse(
      MessageIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_message_id_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    _sse_encode_my_nested_struct_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_my_nested_struct_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_my_nested_struct_twin_rust_async_sse(
      MyNestedStructTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_my_nested_struct_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_my_nested_struct_twin_sse(
      MyNestedStructTwinSse self, SseSerializer serializer) {
    _sse_encode_my_nested_struct_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    _sse_encode_my_nested_struct_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_my_nested_struct_twin_sync_sse(
      MyNestedStructTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_my_nested_struct_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_my_size(MySize self, SseSerializer serializer) {
    _sse_encode_my_size(self, serializer);
  }

  void _sse_encode_box_autoadd_my_struct(
      MyStruct self, SseSerializer serializer) {
    _sse_encode_my_struct(self, serializer);
  }

  void _sse_encode_box_autoadd_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_my_tree_node_twin_rust_async_sse(
      MyTreeNodeTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_my_tree_node_twin_sse(
      MyTreeNodeTwinSse self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_my_tree_node_twin_sync_sse(
      MyTreeNodeTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    _sse_encode_new_type_int_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_new_type_int_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_new_type_int_twin_rust_async_sse(
      NewTypeIntTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_new_type_int_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_new_type_int_twin_sse(
      NewTypeIntTwinSse self, SseSerializer serializer) {
    _sse_encode_new_type_int_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    _sse_encode_new_type_int_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_new_type_int_twin_sync_sse(
      NewTypeIntTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_new_type_int_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    _sse_encode_note_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_note_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_note_twin_rust_async_sse(
      NoteTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_note_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_note_twin_sse(
      NoteTwinSse self, SseSerializer serializer) {
    _sse_encode_note_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_note_twin_sync(
      NoteTwinSync self, SseSerializer serializer) {
    _sse_encode_note_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_note_twin_sync_sse(
      NoteTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_note_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_numbers(Numbers self, SseSerializer serializer) {
    _sse_encode_numbers(self, serializer);
  }

  void _sse_encode_box_autoadd_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    _sse_encode_opaque_nested_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_opaque_nested_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_opaque_nested_twin_rust_async_sse(
      OpaqueNestedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_opaque_nested_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_opaque_nested_twin_sse(
      OpaqueNestedTwinSse self, SseSerializer serializer) {
    _sse_encode_opaque_nested_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    _sse_encode_opaque_nested_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_opaque_nested_twin_sync_sse(
      OpaqueNestedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_opaque_nested_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    _sse_encode_opt_vecs_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_opt_vecs_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_opt_vecs_twin_rust_async_sse(
      OptVecsTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_opt_vecs_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_opt_vecs_twin_sse(
      OptVecsTwinSse self, SseSerializer serializer) {
    _sse_encode_opt_vecs_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    _sse_encode_opt_vecs_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_opt_vecs_twin_sync_sse(
      OptVecsTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_opt_vecs_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    _sse_encode_record_string_i_32(self, serializer);
  }

  void _sse_encode_box_autoadd_sequences(
      Sequences self, SseSerializer serializer) {
    _sse_encode_sequences(self, serializer);
  }

  void _sse_encode_box_autoadd_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    _sse_encode_some_struct_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_some_struct_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_some_struct_twin_rust_async_sse(
      SomeStructTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_some_struct_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_some_struct_twin_sse(
      SomeStructTwinSse self, SseSerializer serializer) {
    _sse_encode_some_struct_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    _sse_encode_some_struct_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_some_struct_twin_sync_sse(
      SomeStructTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_some_struct_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    _sse_encode_struct_with_comments_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_struct_with_comments_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_comments_twin_rust_async_sse(
      StructWithCommentsTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_comments_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_comments_twin_sse(
      StructWithCommentsTwinSse self, SseSerializer serializer) {
    _sse_encode_struct_with_comments_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    _sse_encode_struct_with_comments_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_comments_twin_sync_sse(
      StructWithCommentsTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_comments_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    _sse_encode_struct_with_enum_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_struct_with_enum_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_enum_twin_rust_async_sse(
      StructWithEnumTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_enum_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_enum_twin_sse(
      StructWithEnumTwinSse self, SseSerializer serializer) {
    _sse_encode_struct_with_enum_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    _sse_encode_struct_with_enum_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_enum_twin_sync_sse(
      StructWithEnumTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_enum_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_struct_with_one_field_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_struct_with_one_field_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_one_field_twin_rust_async_sse(
      StructWithOneFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_one_field_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_one_field_twin_sse(
      StructWithOneFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_struct_with_one_field_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_struct_with_one_field_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_one_field_twin_sync_sse(
      StructWithOneFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_one_field_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_struct_with_two_field_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_struct_with_two_field_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_two_field_twin_rust_async_sse(
      StructWithTwoFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_two_field_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_two_field_twin_sse(
      StructWithTwoFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_struct_with_two_field_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_struct_with_two_field_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_two_field_twin_sync_sse(
      StructWithTwoFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_two_field_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_struct_with_zero_field_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_struct_with_zero_field_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async_sse(
      StructWithZeroFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_zero_field_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_zero_field_twin_sse(
      StructWithZeroFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_struct_with_zero_field_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_struct_with_zero_field_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_struct_with_zero_field_twin_sync_sse(
      StructWithZeroFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_struct_with_zero_field_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    _sse_encode_sum_with_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_sum_with_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_sum_with_twin_rust_async_sse(
      SumWithTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_sum_with_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_sum_with_twin_sse(
      SumWithTwinSse self, SseSerializer serializer) {
    _sse_encode_sum_with_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    _sse_encode_sum_with_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_sum_with_twin_sync_sse(
      SumWithTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_sum_with_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_test_id_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_test_id_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_test_id_twin_rust_async_sse(
      TestIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_test_id_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_test_id_twin_sse(
      TestIdTwinSse self, SseSerializer serializer) {
    _sse_encode_test_id_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    _sse_encode_test_id_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_test_id_twin_sync_sse(
      TestIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_test_id_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_one_field_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_one_field_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async_sse(
      TupleStructWithOneFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_one_field_twin_rust_async_sse(
        self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sse(
      TupleStructWithOneFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_one_field_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_one_field_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync_sse(
      TupleStructWithOneFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_one_field_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_two_field_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_two_field_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async_sse(
      TupleStructWithTwoFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_two_field_twin_rust_async_sse(
        self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sse(
      TupleStructWithTwoFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_two_field_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_two_field_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync_sse(
      TupleStructWithTwoFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_tuple_struct_with_two_field_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    _sse_encode_u_16(self, serializer);
  }

  void _sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    _sse_encode_u_32(self, serializer);
  }

  void _sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    _sse_encode_u_64(self, serializer);
  }

  void _sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    _sse_encode_u_8(self, serializer);
  }

  void _sse_encode_box_autoadd_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_user_id_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_user_id_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_user_id_twin_rust_async_sse(
      UserIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_user_id_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_user_id_twin_sse(
      UserIdTwinSse self, SseSerializer serializer) {
    _sse_encode_user_id_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    _sse_encode_user_id_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_user_id_twin_sync_sse(
      UserIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_user_id_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_normal(self, serializer);
  }

  void _sse_encode_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_autoadd_weekdays_twin_rust_async_sse(
      WeekdaysTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_weekdays_twin_sse(
      WeekdaysTwinSse self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_sse(self, serializer);
  }

  void _sse_encode_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_sync(self, serializer);
  }

  void _sse_encode_box_autoadd_weekdays_twin_sync_sse(
      WeekdaysTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    _sse_encode_blob_twin_normal(self, serializer);
  }

  void _sse_encode_box_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_blob_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_blob_twin_rust_async_sse(
      BlobTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_blob_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_blob_twin_sse(
      BlobTwinSse self, SseSerializer serializer) {
    _sse_encode_blob_twin_sse(self, serializer);
  }

  void _sse_encode_box_blob_twin_sync(
      BlobTwinSync self, SseSerializer serializer) {
    _sse_encode_blob_twin_sync(self, serializer);
  }

  void _sse_encode_box_blob_twin_sync_sse(
      BlobTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_blob_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_bool(bool self, SseSerializer serializer) {
    _sse_encode_bool(self, serializer);
  }

  void _sse_encode_box_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    _sse_encode_distance_twin_normal(self, serializer);
  }

  void _sse_encode_box_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_distance_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_distance_twin_rust_async_sse(
      DistanceTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_distance_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_distance_twin_sse(
      DistanceTwinSse self, SseSerializer serializer) {
    _sse_encode_distance_twin_sse(self, serializer);
  }

  void _sse_encode_box_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    _sse_encode_distance_twin_sync(self, serializer);
  }

  void _sse_encode_box_distance_twin_sync_sse(
      DistanceTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_distance_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  void _sse_encode_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_sse(self, serializer);
  }

  void _sse_encode_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  void _sse_encode_box_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_exotic_optionals_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_f_64(double self, SseSerializer serializer) {
    _sse_encode_f_64(self, serializer);
  }

  void _sse_encode_box_i_32(int self, SseSerializer serializer) {
    _sse_encode_i_32(self, serializer);
  }

  void _sse_encode_box_i_64(int self, SseSerializer serializer) {
    _sse_encode_i_64(self, serializer);
  }

  void _sse_encode_box_i_8(int self, SseSerializer serializer) {
    _sse_encode_i_8(self, serializer);
  }

  void _sse_encode_box_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  void _sse_encode_box_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_kitchen_sink_twin_rust_async_sse(
      KitchenSinkTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_kitchen_sink_twin_sse(
      KitchenSinkTwinSse self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_sse(self, serializer);
  }

  void _sse_encode_box_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  void _sse_encode_box_kitchen_sink_twin_sync_sse(
      KitchenSinkTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_kitchen_sink_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_my_size(MySize self, SseSerializer serializer) {
    _sse_encode_my_size(self, serializer);
  }

  void _sse_encode_box_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    _sse_encode_speed_twin_normal(self, serializer);
  }

  void _sse_encode_box_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_speed_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_speed_twin_rust_async_sse(
      SpeedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_speed_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_speed_twin_sse(
      SpeedTwinSse self, SseSerializer serializer) {
    _sse_encode_speed_twin_sse(self, serializer);
  }

  void _sse_encode_box_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    _sse_encode_speed_twin_sync(self, serializer);
  }

  void _sse_encode_box_speed_twin_sync_sse(
      SpeedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_speed_twin_sync_sse(self, serializer);
  }

  void _sse_encode_box_u_8(int self, SseSerializer serializer) {
    _sse_encode_u_8(self, serializer);
  }

  void _sse_encode_box_u_8_array_1600(
      U8Array1600 self, SseSerializer serializer) {
    _sse_encode_u_8_array_1600(self, serializer);
  }

  void _sse_encode_box_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_normal(self, serializer);
  }

  void _sse_encode_box_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  void _sse_encode_box_weekdays_twin_rust_async_sse(
      WeekdaysTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_rust_async_sse(self, serializer);
  }

  void _sse_encode_box_weekdays_twin_sse(
      WeekdaysTwinSse self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_sse(self, serializer);
  }

  void _sse_encode_box_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_sync(self, serializer);
  }

  void _sse_encode_box_weekdays_twin_sync_sse(
      WeekdaysTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_weekdays_twin_sync_sse(self, serializer);
  }

  void _sse_encode_c_twin_normal(CTwinNormal self, SseSerializer serializer) {
    _sse_encode_bool(self.c, serializer);
  }

  void _sse_encode_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_bool(self.c, serializer);
  }

  void _sse_encode_c_twin_rust_async_sse(
      CTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_bool(self.c, serializer);
  }

  void _sse_encode_c_twin_sse(CTwinSse self, SseSerializer serializer) {
    _sse_encode_bool(self.c, serializer);
  }

  void _sse_encode_c_twin_sync(CTwinSync self, SseSerializer serializer) {
    _sse_encode_bool(self.c, serializer);
  }

  void _sse_encode_c_twin_sync_sse(
      CTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_bool(self.c, serializer);
  }

  void _sse_encode_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_concatenate_with_twin_rust_async_sse(
      ConcatenateWithTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_concatenate_with_twin_sse(
      ConcatenateWithTwinSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_concatenate_with_twin_sync_sse(
      ConcatenateWithTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinNormal_Three(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinNormal_Four(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_u_32(field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinRustAsync_Three(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinRustAsync_Four(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_u_32(field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_inner_twin_rust_async_sse(
      CustomNestedErrorInnerTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinRustAsyncSse_Three(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinRustAsyncSse_Four(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_u_32(field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_inner_twin_sse(
      CustomNestedErrorInnerTwinSse self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinSse_Three(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinSse_Four(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_u_32(field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinSync_Three(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinSync_Four(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_u_32(field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_inner_twin_sync_sse(
      CustomNestedErrorInnerTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinSyncSse_Three(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinSyncSse_Four(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_u_32(field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinNormal_One(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinNormal_Two(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
            field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinRustAsync_One(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinRustAsync_Two(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
            field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_outer_twin_rust_async_sse(
      CustomNestedErrorOuterTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinRustAsyncSse_One(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinRustAsyncSse_Two(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
            field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_outer_twin_sse(
      CustomNestedErrorOuterTwinSse self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinSse_One(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinSse_Two(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_custom_nested_error_inner_twin_sse(
            field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinSync_One(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinSync_Two(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
            field0, serializer);
    }
  }

  void _sse_encode_custom_nested_error_outer_twin_sync_sse(
      CustomNestedErrorOuterTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinSyncSse_One(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinSyncSse_Two(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
            field0, serializer);
    }
  }

  void _sse_encode_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_custom_struct_error_twin_rust_async_sse(
      CustomStructErrorTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_custom_struct_error_twin_sse(
      CustomStructErrorTwinSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_custom_struct_error_twin_sync_sse(
      CustomStructErrorTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.a, serializer);
  }

  void _sse_encode_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    _sse_encode_String(self.message, serializer);
  }

  void _sse_encode_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_String(self.message, serializer);
  }

  void _sse_encode_custom_struct_twin_rust_async_sse(
      CustomStructTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.message, serializer);
  }

  void _sse_encode_custom_struct_twin_sse(
      CustomStructTwinSse self, SseSerializer serializer) {
    _sse_encode_String(self.message, serializer);
  }

  void _sse_encode_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    _sse_encode_String(self.message, serializer);
  }

  void _sse_encode_custom_struct_twin_sync_sse(
      CustomStructTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.message, serializer);
  }

  void _sse_encode_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    _sse_encode_String(self.finalField, serializer);
    _sse_encode_opt_String(self.nonFinalField, serializer);
  }

  void _sse_encode_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_String(self.finalField, serializer);
    _sse_encode_opt_String(self.nonFinalField, serializer);
  }

  void _sse_encode_customized_twin_rust_async_sse(
      CustomizedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.finalField, serializer);
    _sse_encode_opt_String(self.nonFinalField, serializer);
  }

  void _sse_encode_customized_twin_sse(
      CustomizedTwinSse self, SseSerializer serializer) {
    _sse_encode_String(self.finalField, serializer);
    _sse_encode_opt_String(self.nonFinalField, serializer);
  }

  void _sse_encode_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    _sse_encode_String(self.finalField, serializer);
    _sse_encode_opt_String(self.nonFinalField, serializer);
  }

  void _sse_encode_customized_twin_sync_sse(
      CustomizedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.finalField, serializer);
    _sse_encode_opt_String(self.nonFinalField, serializer);
  }

  void _sse_encode_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self.first, serializer);
    _sse_encode_DartOpaque(self.second, serializer);
  }

  void _sse_encode_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self.first, serializer);
    _sse_encode_DartOpaque(self.second, serializer);
  }

  void _sse_encode_dart_opaque_nested_twin_rust_async_sse(
      DartOpaqueNestedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self.first, serializer);
    _sse_encode_DartOpaque(self.second, serializer);
  }

  void _sse_encode_dart_opaque_nested_twin_sse(
      DartOpaqueNestedTwinSse self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self.first, serializer);
    _sse_encode_DartOpaque(self.second, serializer);
  }

  void _sse_encode_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self.first, serializer);
    _sse_encode_DartOpaque(self.second, serializer);
  }

  void _sse_encode_dart_opaque_nested_twin_sync_sse(
      DartOpaqueNestedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_DartOpaque(self.first, serializer);
    _sse_encode_DartOpaque(self.second, serializer);
  }

  void _sse_encode_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinNormal_Unknown():
        _sse_encode_i_32(0, serializer);
      case DistanceTwinNormal_Map(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinRustAsync_Unknown():
        _sse_encode_i_32(0, serializer);
      case DistanceTwinRustAsync_Map(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_distance_twin_rust_async_sse(
      DistanceTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinRustAsyncSse_Unknown():
        _sse_encode_i_32(0, serializer);
      case DistanceTwinRustAsyncSse_Map(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_distance_twin_sse(
      DistanceTwinSse self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinSse_Unknown():
        _sse_encode_i_32(0, serializer);
      case DistanceTwinSse_Map(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinSync_Unknown():
        _sse_encode_i_32(0, serializer);
      case DistanceTwinSync_Map(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_distance_twin_sync_sse(
      DistanceTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinSyncSse_Unknown():
        _sse_encode_i_32(0, serializer);
      case DistanceTwinSyncSse_Map(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {}

  void _sse_encode_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {}

  void _sse_encode_empty_twin_rust_async_sse(
      EmptyTwinRustAsyncSse self, SseSerializer serializer) {}

  void _sse_encode_empty_twin_sse(
      EmptyTwinSse self, SseSerializer serializer) {}

  void _sse_encode_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {}

  void _sse_encode_empty_twin_sync_sse(
      EmptyTwinSyncSse self, SseSerializer serializer) {}

  void _sse_encode_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinNormal_Primitive(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinNormal_Opaque(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_DartOpaque(field0, serializer);
    }
  }

  void _sse_encode_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinRustAsync_Primitive(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinRustAsync_Opaque(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_DartOpaque(field0, serializer);
    }
  }

  void _sse_encode_enum_dart_opaque_twin_rust_async_sse(
      EnumDartOpaqueTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinRustAsyncSse_Primitive(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinRustAsyncSse_Opaque(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_DartOpaque(field0, serializer);
    }
  }

  void _sse_encode_enum_dart_opaque_twin_sse(
      EnumDartOpaqueTwinSse self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinSse_Primitive(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinSse_Opaque(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_DartOpaque(field0, serializer);
    }
  }

  void _sse_encode_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinSync_Primitive(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinSync_Opaque(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_DartOpaque(field0, serializer);
    }
  }

  void _sse_encode_enum_dart_opaque_twin_sync_sse(
      EnumDartOpaqueTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinSyncSse_Primitive(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinSyncSse_Opaque(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_DartOpaque(field0, serializer);
    }
  }

  void _sse_encode_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinNormal_Struct(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_RustOpaque_hide_data(field0, serializer);
      case EnumOpaqueTwinNormal_Primitive(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinNormal_TraitObj(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_RustOpaque_box_dynDartDebugTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Mutex(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_RustOpaque_MutexHideData(field0, serializer);
      case EnumOpaqueTwinNormal_RwLock(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_RustOpaque_RwLockHideData(field0, serializer);
    }
  }

  void _sse_encode_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinRustAsync_Struct(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_RustOpaque_hide_data(field0, serializer);
      case EnumOpaqueTwinRustAsync_Primitive(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinRustAsync_TraitObj(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_RustOpaque_box_dynDartDebugTwinRustAsync(
            field0, serializer);
      case EnumOpaqueTwinRustAsync_Mutex(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_RustOpaque_MutexHideData(field0, serializer);
      case EnumOpaqueTwinRustAsync_RwLock(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_RustOpaque_RwLockHideData(field0, serializer);
    }
  }

  void _sse_encode_enum_opaque_twin_rust_async_sse(
      EnumOpaqueTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinRustAsyncSse_Struct(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_RustOpaque_hide_data(field0, serializer);
      case EnumOpaqueTwinRustAsyncSse_Primitive(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinRustAsyncSse_TraitObj(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
            field0, serializer);
      case EnumOpaqueTwinRustAsyncSse_Mutex(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_RustOpaque_MutexHideData(field0, serializer);
      case EnumOpaqueTwinRustAsyncSse_RwLock(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_RustOpaque_RwLockHideData(field0, serializer);
    }
  }

  void _sse_encode_enum_opaque_twin_sse(
      EnumOpaqueTwinSse self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinSse_Struct(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_RustOpaque_hide_data(field0, serializer);
      case EnumOpaqueTwinSse_Primitive(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinSse_TraitObj(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_RustOpaque_box_dynDartDebugTwinSse(field0, serializer);
      case EnumOpaqueTwinSse_Mutex(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_RustOpaque_MutexHideData(field0, serializer);
      case EnumOpaqueTwinSse_RwLock(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_RustOpaque_RwLockHideData(field0, serializer);
    }
  }

  void _sse_encode_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinSync_Struct(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_RustOpaque_hide_data(field0, serializer);
      case EnumOpaqueTwinSync_Primitive(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinSync_TraitObj(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_RustOpaque_box_dynDartDebugTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Mutex(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_RustOpaque_MutexHideData(field0, serializer);
      case EnumOpaqueTwinSync_RwLock(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_RustOpaque_RwLockHideData(field0, serializer);
    }
  }

  void _sse_encode_enum_opaque_twin_sync_sse(
      EnumOpaqueTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinSyncSse_Struct(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_RustOpaque_hide_data(field0, serializer);
      case EnumOpaqueTwinSyncSse_Primitive(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinSyncSse_TraitObj(field0: final field0):
        _sse_encode_i_32(2, serializer);
        _sse_encode_RustOpaque_box_dynDartDebugTwinSyncSse(field0, serializer);
      case EnumOpaqueTwinSyncSse_Mutex(field0: final field0):
        _sse_encode_i_32(3, serializer);
        _sse_encode_RustOpaque_MutexHideData(field0, serializer);
      case EnumOpaqueTwinSyncSse_RwLock(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_RustOpaque_RwLockHideData(field0, serializer);
    }
  }

  void _sse_encode_enum_simple_twin_normal(
      EnumSimpleTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_enum_simple_twin_rust_async(
      EnumSimpleTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_enum_simple_twin_rust_async_sse(
      EnumSimpleTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_enum_simple_twin_sse(
      EnumSimpleTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_enum_simple_twin_sync(
      EnumSimpleTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_enum_simple_twin_sync_sse(
      EnumSimpleTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinNormal_A():
        _sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinNormal_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemMixedTwinNormal_C(cField: final cField):
        _sse_encode_i_32(2, serializer);
        _sse_encode_String(cField, serializer);
    }
  }

  void _sse_encode_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinRustAsync_A():
        _sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinRustAsync_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemMixedTwinRustAsync_C(cField: final cField):
        _sse_encode_i_32(2, serializer);
        _sse_encode_String(cField, serializer);
    }
  }

  void _sse_encode_enum_with_item_mixed_twin_rust_async_sse(
      EnumWithItemMixedTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinRustAsyncSse_A():
        _sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinRustAsyncSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemMixedTwinRustAsyncSse_C(cField: final cField):
        _sse_encode_i_32(2, serializer);
        _sse_encode_String(cField, serializer);
    }
  }

  void _sse_encode_enum_with_item_mixed_twin_sse(
      EnumWithItemMixedTwinSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinSse_A():
        _sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemMixedTwinSse_C(cField: final cField):
        _sse_encode_i_32(2, serializer);
        _sse_encode_String(cField, serializer);
    }
  }

  void _sse_encode_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinSync_A():
        _sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinSync_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemMixedTwinSync_C(cField: final cField):
        _sse_encode_i_32(2, serializer);
        _sse_encode_String(cField, serializer);
    }
  }

  void _sse_encode_enum_with_item_mixed_twin_sync_sse(
      EnumWithItemMixedTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinSyncSse_A():
        _sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinSyncSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemMixedTwinSyncSse_C(cField: final cField):
        _sse_encode_i_32(2, serializer);
        _sse_encode_String(cField, serializer);
    }
  }

  void _sse_encode_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinNormal_A(aField: final aField):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(aField, serializer);
      case EnumWithItemStructTwinNormal_B(bField: final bField):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(bField, serializer);
    }
  }

  void _sse_encode_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinRustAsync_A(aField: final aField):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(aField, serializer);
      case EnumWithItemStructTwinRustAsync_B(bField: final bField):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(bField, serializer);
    }
  }

  void _sse_encode_enum_with_item_struct_twin_rust_async_sse(
      EnumWithItemStructTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinRustAsyncSse_A(aField: final aField):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(aField, serializer);
      case EnumWithItemStructTwinRustAsyncSse_B(bField: final bField):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(bField, serializer);
    }
  }

  void _sse_encode_enum_with_item_struct_twin_sse(
      EnumWithItemStructTwinSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinSse_A(aField: final aField):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(aField, serializer);
      case EnumWithItemStructTwinSse_B(bField: final bField):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(bField, serializer);
    }
  }

  void _sse_encode_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinSync_A(aField: final aField):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(aField, serializer);
      case EnumWithItemStructTwinSync_B(bField: final bField):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(bField, serializer);
    }
  }

  void _sse_encode_enum_with_item_struct_twin_sync_sse(
      EnumWithItemStructTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinSyncSse_A(aField: final aField):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(aField, serializer);
      case EnumWithItemStructTwinSyncSse_B(bField: final bField):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(bField, serializer);
    }
  }

  void _sse_encode_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinNormal_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemTupleTwinNormal_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(field0, serializer);
    }
  }

  void _sse_encode_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinRustAsync_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemTupleTwinRustAsync_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(field0, serializer);
    }
  }

  void _sse_encode_enum_with_item_tuple_twin_rust_async_sse(
      EnumWithItemTupleTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinRustAsyncSse_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemTupleTwinRustAsyncSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(field0, serializer);
    }
  }

  void _sse_encode_enum_with_item_tuple_twin_sse(
      EnumWithItemTupleTwinSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinSse_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemTupleTwinSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(field0, serializer);
    }
  }

  void _sse_encode_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinSync_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemTupleTwinSync_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(field0, serializer);
    }
  }

  void _sse_encode_enum_with_item_tuple_twin_sync_sse(
      EnumWithItemTupleTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinSyncSse_A(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case EnumWithItemTupleTwinSyncSse_B(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_list_prim_i_32(field0, serializer);
    }
  }

  void _sse_encode_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    _sse_encode_String(self.address, serializer);
    _sse_encode_String(self.payload, serializer);
  }

  void _sse_encode_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_String(self.address, serializer);
    _sse_encode_String(self.payload, serializer);
  }

  void _sse_encode_event_twin_rust_async_sse(
      EventTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_String(self.address, serializer);
    _sse_encode_String(self.payload, serializer);
  }

  void _sse_encode_event_twin_sse(EventTwinSse self, SseSerializer serializer) {
    _sse_encode_String(self.address, serializer);
    _sse_encode_String(self.payload, serializer);
  }

  void _sse_encode_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    _sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    _sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    _sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    _sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    _sse_encode_opt_list_prim_u_8(self.zerocopy, serializer);
    _sse_encode_opt_list_prim_i_8(self.int8List, serializer);
    _sse_encode_opt_list_prim_u_8(self.uint8List, serializer);
    _sse_encode_opt_list_prim_i_32(self.int32List, serializer);
    _sse_encode_opt_list_prim_f_32(self.float32List, serializer);
    _sse_encode_opt_list_prim_f_64(self.float64List, serializer);
    _sse_encode_opt_list_attribute_twin_normal(self.attributes, serializer);
    _sse_encode_list_opt_box_autoadd_attribute_twin_normal(
        self.attributesNullable, serializer);
    _sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
        self.nullableAttributes, serializer);
    _sse_encode_opt_box_autoadd_new_type_int_twin_normal(
        self.newtypeint, serializer);
  }

  void _sse_encode_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    _sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    _sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    _sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    _sse_encode_opt_list_prim_u_8(self.zerocopy, serializer);
    _sse_encode_opt_list_prim_i_8(self.int8List, serializer);
    _sse_encode_opt_list_prim_u_8(self.uint8List, serializer);
    _sse_encode_opt_list_prim_i_32(self.int32List, serializer);
    _sse_encode_opt_list_prim_f_32(self.float32List, serializer);
    _sse_encode_opt_list_prim_f_64(self.float64List, serializer);
    _sse_encode_opt_list_attribute_twin_rust_async(self.attributes, serializer);
    _sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
        self.attributesNullable, serializer);
    _sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
        self.nullableAttributes, serializer);
    _sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
        self.newtypeint, serializer);
  }

  void _sse_encode_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    _sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    _sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    _sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    _sse_encode_opt_list_prim_u_8(self.zerocopy, serializer);
    _sse_encode_opt_list_prim_i_8(self.int8List, serializer);
    _sse_encode_opt_list_prim_u_8(self.uint8List, serializer);
    _sse_encode_opt_list_prim_i_32(self.int32List, serializer);
    _sse_encode_opt_list_prim_f_32(self.float32List, serializer);
    _sse_encode_opt_list_prim_f_64(self.float64List, serializer);
    _sse_encode_opt_list_attribute_twin_rust_async_sse(
        self.attributes, serializer);
    _sse_encode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
        self.attributesNullable, serializer);
    _sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
        self.nullableAttributes, serializer);
    _sse_encode_opt_box_autoadd_new_type_int_twin_rust_async_sse(
        self.newtypeint, serializer);
  }

  void _sse_encode_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse self, SseSerializer serializer) {
    _sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    _sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    _sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    _sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    _sse_encode_opt_list_prim_u_8(self.zerocopy, serializer);
    _sse_encode_opt_list_prim_i_8(self.int8List, serializer);
    _sse_encode_opt_list_prim_u_8(self.uint8List, serializer);
    _sse_encode_opt_list_prim_i_32(self.int32List, serializer);
    _sse_encode_opt_list_prim_f_32(self.float32List, serializer);
    _sse_encode_opt_list_prim_f_64(self.float64List, serializer);
    _sse_encode_opt_list_attribute_twin_sse(self.attributes, serializer);
    _sse_encode_list_opt_box_autoadd_attribute_twin_sse(
        self.attributesNullable, serializer);
    _sse_encode_opt_list_opt_box_autoadd_attribute_twin_sse(
        self.nullableAttributes, serializer);
    _sse_encode_opt_box_autoadd_new_type_int_twin_sse(
        self.newtypeint, serializer);
  }

  void _sse_encode_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    _sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    _sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    _sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    _sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    _sse_encode_opt_list_prim_u_8(self.zerocopy, serializer);
    _sse_encode_opt_list_prim_i_8(self.int8List, serializer);
    _sse_encode_opt_list_prim_u_8(self.uint8List, serializer);
    _sse_encode_opt_list_prim_i_32(self.int32List, serializer);
    _sse_encode_opt_list_prim_f_32(self.float32List, serializer);
    _sse_encode_opt_list_prim_f_64(self.float64List, serializer);
    _sse_encode_opt_list_attribute_twin_sync(self.attributes, serializer);
    _sse_encode_list_opt_box_autoadd_attribute_twin_sync(
        self.attributesNullable, serializer);
    _sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
        self.nullableAttributes, serializer);
    _sse_encode_opt_box_autoadd_new_type_int_twin_sync(
        self.newtypeint, serializer);
  }

  void _sse_encode_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    _sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    _sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    _sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    _sse_encode_opt_list_prim_u_8(self.zerocopy, serializer);
    _sse_encode_opt_list_prim_i_8(self.int8List, serializer);
    _sse_encode_opt_list_prim_u_8(self.uint8List, serializer);
    _sse_encode_opt_list_prim_i_32(self.int32List, serializer);
    _sse_encode_opt_list_prim_f_32(self.float32List, serializer);
    _sse_encode_opt_list_prim_f_64(self.float64List, serializer);
    _sse_encode_opt_list_attribute_twin_sync_sse(self.attributes, serializer);
    _sse_encode_list_opt_box_autoadd_attribute_twin_sync_sse(
        self.attributesNullable, serializer);
    _sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(
        self.nullableAttributes, serializer);
    _sse_encode_opt_box_autoadd_new_type_int_twin_sync_sse(
        self.newtypeint, serializer);
  }

  void _sse_encode_f_32(double self, SseSerializer serializer) {
    serializer.buffer.putFloat32(self);
  }

  void _sse_encode_f_64(double self, SseSerializer serializer) {
    serializer.buffer.putFloat64(self);
  }

  void _sse_encode_f_64_array_16(F64Array16 self, SseSerializer serializer) {
    _sse_encode_list_prim_f_64(self.inner, serializer);
  }

  void _sse_encode_feature_chrono_twin_normal(
      FeatureChronoTwinNormal self, SseSerializer serializer) {
    _sse_encode_Chrono_Utc(self.utc, serializer);
    _sse_encode_Chrono_Local(self.local, serializer);
    _sse_encode_Chrono_Duration(self.duration, serializer);
    _sse_encode_Chrono_Naive(self.naive, serializer);
  }

  void _sse_encode_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_Chrono_Utc(self.utc, serializer);
    _sse_encode_Chrono_Local(self.local, serializer);
    _sse_encode_Chrono_Duration(self.duration, serializer);
    _sse_encode_Chrono_Naive(self.naive, serializer);
  }

  void _sse_encode_feature_chrono_twin_sync(
      FeatureChronoTwinSync self, SseSerializer serializer) {
    _sse_encode_Chrono_Utc(self.utc, serializer);
    _sse_encode_Chrono_Local(self.local, serializer);
    _sse_encode_Chrono_Duration(self.duration, serializer);
    _sse_encode_Chrono_Naive(self.naive, serializer);
  }

  void _sse_encode_feature_uuid_twin_normal(
      FeatureUuidTwinNormal self, SseSerializer serializer) {
    _sse_encode_Uuid(self.one, serializer);
  }

  void _sse_encode_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_Uuid(self.one, serializer);
  }

  void _sse_encode_feature_uuid_twin_sync(
      FeatureUuidTwinSync self, SseSerializer serializer) {
    _sse_encode_Uuid(self.one, serializer);
  }

  void _sse_encode_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_u_8_array_8(self.field0, serializer);
  }

  void _sse_encode_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_u_8_array_8(self.field0, serializer);
  }

  void _sse_encode_feed_id_twin_rust_async_sse(
      FeedIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_8(self.field0, serializer);
  }

  void _sse_encode_feed_id_twin_sse(
      FeedIdTwinSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_8(self.field0, serializer);
  }

  void _sse_encode_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    _sse_encode_u_8_array_8(self.field0, serializer);
  }

  void _sse_encode_feed_id_twin_sync_sse(
      FeedIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_8(self.field0, serializer);
  }

  void _sse_encode_i_16(int self, SseSerializer serializer) {
    serializer.buffer.putInt16(self);
  }

  void _sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  void _sse_encode_i_32_array_2(I32Array2 self, SseSerializer serializer) {
    _sse_encode_list_prim_i_32(self.inner, serializer);
  }

  void _sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  void _sse_encode_i_8(int self, SseSerializer serializer) {
    serializer.buffer.putInt8(self);
  }

  void _sse_encode_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinNormal_Empty():
        _sse_encode_i_32(0, serializer);
      case KitchenSinkTwinNormal_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        _sse_encode_i_32(1, serializer);
        _sse_encode_i_32(int32, serializer);
        _sse_encode_f_64(float64, serializer);
        _sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinNormal_Nested(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(2, serializer);
        _sse_encode_i_32(field0, serializer);
        _sse_encode_box_kitchen_sink_twin_normal(field1, serializer);
      case KitchenSinkTwinNormal_Optional(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(3, serializer);
        _sse_encode_opt_box_autoadd_i_32(field0, serializer);
        _sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinNormal_Buffer(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case KitchenSinkTwinNormal_Enums(field0: final field0):
        _sse_encode_i_32(5, serializer);
        _sse_encode_weekdays_twin_normal(field0, serializer);
    }
  }

  void _sse_encode_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinRustAsync_Empty():
        _sse_encode_i_32(0, serializer);
      case KitchenSinkTwinRustAsync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        _sse_encode_i_32(1, serializer);
        _sse_encode_i_32(int32, serializer);
        _sse_encode_f_64(float64, serializer);
        _sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinRustAsync_Nested(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(2, serializer);
        _sse_encode_i_32(field0, serializer);
        _sse_encode_box_kitchen_sink_twin_rust_async(field1, serializer);
      case KitchenSinkTwinRustAsync_Optional(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(3, serializer);
        _sse_encode_opt_box_autoadd_i_32(field0, serializer);
        _sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinRustAsync_Buffer(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case KitchenSinkTwinRustAsync_Enums(field0: final field0):
        _sse_encode_i_32(5, serializer);
        _sse_encode_weekdays_twin_rust_async(field0, serializer);
    }
  }

  void _sse_encode_kitchen_sink_twin_rust_async_sse(
      KitchenSinkTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinRustAsyncSse_Empty():
        _sse_encode_i_32(0, serializer);
      case KitchenSinkTwinRustAsyncSse_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        _sse_encode_i_32(1, serializer);
        _sse_encode_i_32(int32, serializer);
        _sse_encode_f_64(float64, serializer);
        _sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinRustAsyncSse_Nested(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(2, serializer);
        _sse_encode_i_32(field0, serializer);
        _sse_encode_box_kitchen_sink_twin_rust_async_sse(field1, serializer);
      case KitchenSinkTwinRustAsyncSse_Optional(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(3, serializer);
        _sse_encode_opt_box_autoadd_i_32(field0, serializer);
        _sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinRustAsyncSse_Buffer(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case KitchenSinkTwinRustAsyncSse_Enums(field0: final field0):
        _sse_encode_i_32(5, serializer);
        _sse_encode_weekdays_twin_rust_async_sse(field0, serializer);
    }
  }

  void _sse_encode_kitchen_sink_twin_sse(
      KitchenSinkTwinSse self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinSse_Empty():
        _sse_encode_i_32(0, serializer);
      case KitchenSinkTwinSse_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        _sse_encode_i_32(1, serializer);
        _sse_encode_i_32(int32, serializer);
        _sse_encode_f_64(float64, serializer);
        _sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinSse_Nested(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(2, serializer);
        _sse_encode_i_32(field0, serializer);
        _sse_encode_box_kitchen_sink_twin_sse(field1, serializer);
      case KitchenSinkTwinSse_Optional(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(3, serializer);
        _sse_encode_opt_box_autoadd_i_32(field0, serializer);
        _sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinSse_Buffer(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case KitchenSinkTwinSse_Enums(field0: final field0):
        _sse_encode_i_32(5, serializer);
        _sse_encode_weekdays_twin_sse(field0, serializer);
    }
  }

  void _sse_encode_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinSync_Empty():
        _sse_encode_i_32(0, serializer);
      case KitchenSinkTwinSync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        _sse_encode_i_32(1, serializer);
        _sse_encode_i_32(int32, serializer);
        _sse_encode_f_64(float64, serializer);
        _sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinSync_Nested(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(2, serializer);
        _sse_encode_i_32(field0, serializer);
        _sse_encode_box_kitchen_sink_twin_sync(field1, serializer);
      case KitchenSinkTwinSync_Optional(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(3, serializer);
        _sse_encode_opt_box_autoadd_i_32(field0, serializer);
        _sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinSync_Buffer(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case KitchenSinkTwinSync_Enums(field0: final field0):
        _sse_encode_i_32(5, serializer);
        _sse_encode_weekdays_twin_sync(field0, serializer);
    }
  }

  void _sse_encode_kitchen_sink_twin_sync_sse(
      KitchenSinkTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinSyncSse_Empty():
        _sse_encode_i_32(0, serializer);
      case KitchenSinkTwinSyncSse_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        _sse_encode_i_32(1, serializer);
        _sse_encode_i_32(int32, serializer);
        _sse_encode_f_64(float64, serializer);
        _sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinSyncSse_Nested(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(2, serializer);
        _sse_encode_i_32(field0, serializer);
        _sse_encode_box_kitchen_sink_twin_sync_sse(field1, serializer);
      case KitchenSinkTwinSyncSse_Optional(
          field0: final field0,
          field1: final field1
        ):
        _sse_encode_i_32(3, serializer);
        _sse_encode_opt_box_autoadd_i_32(field0, serializer);
        _sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinSyncSse_Buffer(field0: final field0):
        _sse_encode_i_32(4, serializer);
        _sse_encode_list_prim_u_8(field0, serializer);
      case KitchenSinkTwinSyncSse_Enums(field0: final field0):
        _sse_encode_i_32(5, serializer);
        _sse_encode_weekdays_twin_sync_sse(field0, serializer);
    }
  }

  void _sse_encode_list_Chrono_Duration(
      List<Duration> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_Chrono_Duration(item, serializer);
    }
  }

  void _sse_encode_list_Chrono_Naive(
      List<DateTime> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_Chrono_Naive(item, serializer);
    }
  }

  void _sse_encode_list_DartOpaque(
      List<Object> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_DartOpaque(item, serializer);
    }
  }

  void _sse_encode_list_RustOpaque_hide_data(
      List<HideData> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_RustOpaque_hide_data(item, serializer);
    }
  }

  void _sse_encode_list_String(List<String> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_String(item, serializer);
    }
  }

  void _sse_encode_list_application_env_var(
      List<ApplicationEnvVar> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_application_env_var(item, serializer);
    }
  }

  void _sse_encode_list_attribute_twin_normal(
      List<AttributeTwinNormal> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_attribute_twin_normal(item, serializer);
    }
  }

  void _sse_encode_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_attribute_twin_rust_async(item, serializer);
    }
  }

  void _sse_encode_list_attribute_twin_rust_async_sse(
      List<AttributeTwinRustAsyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_attribute_twin_rust_async_sse(item, serializer);
    }
  }

  void _sse_encode_list_attribute_twin_sse(
      List<AttributeTwinSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_attribute_twin_sse(item, serializer);
    }
  }

  void _sse_encode_list_attribute_twin_sync(
      List<AttributeTwinSync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_attribute_twin_sync(item, serializer);
    }
  }

  void _sse_encode_list_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_attribute_twin_sync_sse(item, serializer);
    }
  }

  void _sse_encode_list_bool(List<bool> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_bool(item, serializer);
    }
  }

  void _sse_encode_list_my_size(List<MySize> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_my_size(item, serializer);
    }
  }

  void _sse_encode_list_my_tree_node_twin_normal(
      List<MyTreeNodeTwinNormal> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_my_tree_node_twin_normal(item, serializer);
    }
  }

  void _sse_encode_list_my_tree_node_twin_rust_async(
      List<MyTreeNodeTwinRustAsync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_my_tree_node_twin_rust_async(item, serializer);
    }
  }

  void _sse_encode_list_my_tree_node_twin_rust_async_sse(
      List<MyTreeNodeTwinRustAsyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_my_tree_node_twin_rust_async_sse(item, serializer);
    }
  }

  void _sse_encode_list_my_tree_node_twin_sse(
      List<MyTreeNodeTwinSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_my_tree_node_twin_sse(item, serializer);
    }
  }

  void _sse_encode_list_my_tree_node_twin_sync(
      List<MyTreeNodeTwinSync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_my_tree_node_twin_sync(item, serializer);
    }
  }

  void _sse_encode_list_my_tree_node_twin_sync_sse(
      List<MyTreeNodeTwinSyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_my_tree_node_twin_sync_sse(item, serializer);
    }
  }

  void _sse_encode_list_opt_String(
      List<String?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_String(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_attribute_twin_normal(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_attribute_twin_rust_async(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
      List<AttributeTwinRustAsyncSse?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_attribute_twin_rust_async_sse(
          item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_attribute_twin_sse(
      List<AttributeTwinSse?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_attribute_twin_sse(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_attribute_twin_sync(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_attribute_twin_sync_sse(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_i_32(
      List<int?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_i_32(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
      List<WeekdaysTwinNormal?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_weekdays_twin_normal(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_weekdays_twin_rust_async(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(
      List<WeekdaysTwinRustAsyncSse?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_weekdays_twin_rust_async_sse(
          item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_weekdays_twin_sse(
      List<WeekdaysTwinSse?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_weekdays_twin_sse(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_weekdays_twin_sync(
      List<WeekdaysTwinSync?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_weekdays_twin_sync(item, serializer);
    }
  }

  void _sse_encode_list_opt_box_autoadd_weekdays_twin_sync_sse(
      List<WeekdaysTwinSyncSse?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_box_autoadd_weekdays_twin_sync_sse(item, serializer);
    }
  }

  void _sse_encode_list_opt_list_prim_i_32(
      List<Int32List?> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_opt_list_prim_i_32(item, serializer);
    }
  }

  void _sse_encode_list_prim_f_32(Float32List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  void _sse_encode_list_prim_f_64(Float64List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  void _sse_encode_list_prim_i_16(Int16List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt16List(self);
  }

  void _sse_encode_list_prim_i_32(Int32List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(self);
  }

  void _sse_encode_list_prim_i_64(Int64List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  void _sse_encode_list_prim_i_8(Int8List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt8List(self);
  }

  void _sse_encode_list_prim_u_16(Uint16List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint16List(self);
  }

  void _sse_encode_list_prim_u_32(Uint32List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  void _sse_encode_list_prim_u_64(Uint64List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  void _sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  void _sse_encode_list_record_string_i_32(
      List<(String, int)> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_record_string_i_32(item, serializer);
    }
  }

  void _sse_encode_list_test_id_twin_normal(
      List<TestIdTwinNormal> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_test_id_twin_normal(item, serializer);
    }
  }

  void _sse_encode_list_test_id_twin_rust_async(
      List<TestIdTwinRustAsync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_test_id_twin_rust_async(item, serializer);
    }
  }

  void _sse_encode_list_test_id_twin_rust_async_sse(
      List<TestIdTwinRustAsyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_test_id_twin_rust_async_sse(item, serializer);
    }
  }

  void _sse_encode_list_test_id_twin_sse(
      List<TestIdTwinSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_test_id_twin_sse(item, serializer);
    }
  }

  void _sse_encode_list_test_id_twin_sync(
      List<TestIdTwinSync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_test_id_twin_sync(item, serializer);
    }
  }

  void _sse_encode_list_test_id_twin_sync_sse(
      List<TestIdTwinSyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_test_id_twin_sync_sse(item, serializer);
    }
  }

  void _sse_encode_list_weekdays_twin_normal(
      List<WeekdaysTwinNormal> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_weekdays_twin_normal(item, serializer);
    }
  }

  void _sse_encode_list_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_weekdays_twin_rust_async(item, serializer);
    }
  }

  void _sse_encode_list_weekdays_twin_rust_async_sse(
      List<WeekdaysTwinRustAsyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_weekdays_twin_rust_async_sse(item, serializer);
    }
  }

  void _sse_encode_list_weekdays_twin_sse(
      List<WeekdaysTwinSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_weekdays_twin_sse(item, serializer);
    }
  }

  void _sse_encode_list_weekdays_twin_sync(
      List<WeekdaysTwinSync> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_weekdays_twin_sync(item, serializer);
    }
  }

  void _sse_encode_list_weekdays_twin_sync_sse(
      List<WeekdaysTwinSyncSse> self, SseSerializer serializer) {
    _sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      _sse_encode_weekdays_twin_sync_sse(item, serializer);
    }
  }

  void _sse_encode_macro_struct(MacroStruct self, SseSerializer serializer) {
    _sse_encode_i_32(self.data, serializer);
  }

  void _sse_encode_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinNormal_Speed(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_speed_twin_normal(field0, serializer);
      case MeasureTwinNormal_Distance(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_distance_twin_normal(field0, serializer);
    }
  }

  void _sse_encode_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinRustAsync_Speed(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_speed_twin_rust_async(field0, serializer);
      case MeasureTwinRustAsync_Distance(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_distance_twin_rust_async(field0, serializer);
    }
  }

  void _sse_encode_measure_twin_rust_async_sse(
      MeasureTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinRustAsyncSse_Speed(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_speed_twin_rust_async_sse(field0, serializer);
      case MeasureTwinRustAsyncSse_Distance(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_distance_twin_rust_async_sse(field0, serializer);
    }
  }

  void _sse_encode_measure_twin_sse(
      MeasureTwinSse self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinSse_Speed(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_speed_twin_sse(field0, serializer);
      case MeasureTwinSse_Distance(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_distance_twin_sse(field0, serializer);
    }
  }

  void _sse_encode_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinSync_Speed(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_speed_twin_sync(field0, serializer);
      case MeasureTwinSync_Distance(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_distance_twin_sync(field0, serializer);
    }
  }

  void _sse_encode_measure_twin_sync_sse(
      MeasureTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinSyncSse_Speed(field0: final field0):
        _sse_encode_i_32(0, serializer);
        _sse_encode_box_speed_twin_sync_sse(field0, serializer);
      case MeasureTwinSyncSse_Distance(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_box_distance_twin_sync_sse(field0, serializer);
    }
  }

  void _sse_encode_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_u_8_array_32(self.field0, serializer);
  }

  void _sse_encode_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_u_8_array_32(self.field0, serializer);
  }

  void _sse_encode_message_id_twin_rust_async_sse(
      MessageIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_32(self.field0, serializer);
  }

  void _sse_encode_message_id_twin_sse(
      MessageIdTwinSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_32(self.field0, serializer);
  }

  void _sse_encode_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    _sse_encode_u_8_array_32(self.field0, serializer);
  }

  void _sse_encode_message_id_twin_sync_sse(
      MessageIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_u_8_array_32(self.field0, serializer);
  }

  void _sse_encode_my_enum(MyEnum self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_normal(self.treeNode, serializer);
    _sse_encode_weekdays_twin_normal(self.weekday, serializer);
  }

  void _sse_encode_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_rust_async(self.treeNode, serializer);
    _sse_encode_weekdays_twin_rust_async(self.weekday, serializer);
  }

  void _sse_encode_my_nested_struct_twin_rust_async_sse(
      MyNestedStructTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_rust_async_sse(self.treeNode, serializer);
    _sse_encode_weekdays_twin_rust_async_sse(self.weekday, serializer);
  }

  void _sse_encode_my_nested_struct_twin_sse(
      MyNestedStructTwinSse self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_sse(self.treeNode, serializer);
    _sse_encode_weekdays_twin_sse(self.weekday, serializer);
  }

  void _sse_encode_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_sync(self.treeNode, serializer);
    _sse_encode_weekdays_twin_sync(self.weekday, serializer);
  }

  void _sse_encode_my_nested_struct_twin_sync_sse(
      MyNestedStructTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_my_tree_node_twin_sync_sse(self.treeNode, serializer);
    _sse_encode_weekdays_twin_sync_sse(self.weekday, serializer);
  }

  void _sse_encode_my_size(MySize self, SseSerializer serializer) {
    _sse_encode_i_32(self.width, serializer);
    _sse_encode_i_32(self.height, serializer);
  }

  void _sse_encode_my_struct(MyStruct self, SseSerializer serializer) {
    _sse_encode_bool(self.content, serializer);
  }

  void _sse_encode_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.valueI32, serializer);
    _sse_encode_list_prim_u_8(self.valueVecU8, serializer);
    _sse_encode_bool(self.valueBoolean, serializer);
    _sse_encode_list_my_tree_node_twin_normal(self.children, serializer);
  }

  void _sse_encode_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.valueI32, serializer);
    _sse_encode_list_prim_u_8(self.valueVecU8, serializer);
    _sse_encode_bool(self.valueBoolean, serializer);
    _sse_encode_list_my_tree_node_twin_rust_async(self.children, serializer);
  }

  void _sse_encode_my_tree_node_twin_rust_async_sse(
      MyTreeNodeTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.valueI32, serializer);
    _sse_encode_list_prim_u_8(self.valueVecU8, serializer);
    _sse_encode_bool(self.valueBoolean, serializer);
    _sse_encode_list_my_tree_node_twin_rust_async_sse(
        self.children, serializer);
  }

  void _sse_encode_my_tree_node_twin_sse(
      MyTreeNodeTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.valueI32, serializer);
    _sse_encode_list_prim_u_8(self.valueVecU8, serializer);
    _sse_encode_bool(self.valueBoolean, serializer);
    _sse_encode_list_my_tree_node_twin_sse(self.children, serializer);
  }

  void _sse_encode_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.valueI32, serializer);
    _sse_encode_list_prim_u_8(self.valueVecU8, serializer);
    _sse_encode_bool(self.valueBoolean, serializer);
    _sse_encode_list_my_tree_node_twin_sync(self.children, serializer);
  }

  void _sse_encode_my_tree_node_twin_sync_sse(
      MyTreeNodeTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.valueI32, serializer);
    _sse_encode_list_prim_u_8(self.valueVecU8, serializer);
    _sse_encode_bool(self.valueBoolean, serializer);
    _sse_encode_list_my_tree_node_twin_sync_sse(self.children, serializer);
  }

  void _sse_encode_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_64(self.field0, serializer);
  }

  void _sse_encode_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_64(self.field0, serializer);
  }

  void _sse_encode_new_type_int_twin_rust_async_sse(
      NewTypeIntTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_64(self.field0, serializer);
  }

  void _sse_encode_new_type_int_twin_sse(
      NewTypeIntTwinSse self, SseSerializer serializer) {
    _sse_encode_i_64(self.field0, serializer);
  }

  void _sse_encode_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    _sse_encode_i_64(self.field0, serializer);
  }

  void _sse_encode_new_type_int_twin_sync_sse(
      NewTypeIntTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_64(self.field0, serializer);
  }

  void _sse_encode_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    _sse_encode_box_weekdays_twin_normal(self.day, serializer);
    _sse_encode_String(self.body, serializer);
  }

  void _sse_encode_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_box_weekdays_twin_rust_async(self.day, serializer);
    _sse_encode_String(self.body, serializer);
  }

  void _sse_encode_note_twin_rust_async_sse(
      NoteTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_box_weekdays_twin_rust_async_sse(self.day, serializer);
    _sse_encode_String(self.body, serializer);
  }

  void _sse_encode_note_twin_sse(NoteTwinSse self, SseSerializer serializer) {
    _sse_encode_box_weekdays_twin_sse(self.day, serializer);
    _sse_encode_String(self.body, serializer);
  }

  void _sse_encode_note_twin_sync(NoteTwinSync self, SseSerializer serializer) {
    _sse_encode_box_weekdays_twin_sync(self.day, serializer);
    _sse_encode_String(self.body, serializer);
  }

  void _sse_encode_note_twin_sync_sse(
      NoteTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_box_weekdays_twin_sync_sse(self.day, serializer);
    _sse_encode_String(self.body, serializer);
  }

  void _sse_encode_numbers(Numbers self, SseSerializer serializer) {
    _sse_encode_list_prim_i_32(self.field0, serializer);
  }

  void _sse_encode_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    _sse_encode_RustOpaque_hide_data(self.first, serializer);
    _sse_encode_RustOpaque_hide_data(self.second, serializer);
  }

  void _sse_encode_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_RustOpaque_hide_data(self.first, serializer);
    _sse_encode_RustOpaque_hide_data(self.second, serializer);
  }

  void _sse_encode_opaque_nested_twin_rust_async_sse(
      OpaqueNestedTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_RustOpaque_hide_data(self.first, serializer);
    _sse_encode_RustOpaque_hide_data(self.second, serializer);
  }

  void _sse_encode_opaque_nested_twin_sse(
      OpaqueNestedTwinSse self, SseSerializer serializer) {
    _sse_encode_RustOpaque_hide_data(self.first, serializer);
    _sse_encode_RustOpaque_hide_data(self.second, serializer);
  }

  void _sse_encode_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    _sse_encode_RustOpaque_hide_data(self.first, serializer);
    _sse_encode_RustOpaque_hide_data(self.second, serializer);
  }

  void _sse_encode_opaque_nested_twin_sync_sse(
      OpaqueNestedTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_RustOpaque_hide_data(self.first, serializer);
    _sse_encode_RustOpaque_hide_data(self.second, serializer);
  }

  void _sse_encode_opt_String(String? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_String(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_Chrono_Utc(
      DateTime? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_DartOpaque(
      Object? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_DartOpaque(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_RustOpaque_hide_data(
      HideData? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_RustOpaque_hide_data(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_application_env(
      ApplicationEnv? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_application_env(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_attribute_twin_rust_async(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_attribute_twin_rust_async_sse(
      AttributeTwinRustAsyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_attribute_twin_rust_async_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_attribute_twin_sse(
      AttributeTwinSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_attribute_twin_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_attribute_twin_sync(
      AttributeTwinSync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_attribute_twin_sync_sse(
      AttributeTwinSyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_attribute_twin_sync_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_exotic_optionals_twin_normal(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_exotic_optionals_twin_rust_async(
          self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_exotic_optionals_twin_rust_async_sse(
          self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_exotic_optionals_twin_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_exotic_optionals_twin_sync(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_exotic_optionals_twin_sync_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_f_32(
      double? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_f_64(
      double? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_i_16(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_i_16(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_i_8(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_i_8(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_new_type_int_twin_normal(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_new_type_int_twin_rust_async(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_new_type_int_twin_rust_async_sse(
      NewTypeIntTwinRustAsyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_new_type_int_twin_rust_async_sse(
          self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_new_type_int_twin_sse(
      NewTypeIntTwinSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_new_type_int_twin_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_new_type_int_twin_sync(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_new_type_int_twin_sync_sse(
      NewTypeIntTwinSyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_new_type_int_twin_sync_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_record_string_i_32(
      (String, int)? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_record_string_i_32(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_weekdays_twin_normal(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_weekdays_twin_rust_async(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_weekdays_twin_rust_async_sse(
      WeekdaysTwinRustAsyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_weekdays_twin_rust_async_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_weekdays_twin_sse(
      WeekdaysTwinSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_weekdays_twin_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_weekdays_twin_sync(self, serializer);
    }
  }

  void _sse_encode_opt_box_autoadd_weekdays_twin_sync_sse(
      WeekdaysTwinSyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_autoadd_weekdays_twin_sync_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_bool(bool? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_bool(self, serializer);
    }
  }

  void _sse_encode_opt_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_exotic_optionals_twin_normal(self, serializer);
    }
  }

  void _sse_encode_opt_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_exotic_optionals_twin_rust_async(self, serializer);
    }
  }

  void _sse_encode_opt_box_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_exotic_optionals_twin_rust_async_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_exotic_optionals_twin_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_exotic_optionals_twin_sync(self, serializer);
    }
  }

  void _sse_encode_opt_box_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_exotic_optionals_twin_sync_sse(self, serializer);
    }
  }

  void _sse_encode_opt_box_f_64(double? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_f_64(self, serializer);
    }
  }

  void _sse_encode_opt_box_i_32(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_i_32(self, serializer);
    }
  }

  void _sse_encode_opt_box_i_64(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_i_64(self, serializer);
    }
  }

  void _sse_encode_opt_box_i_8(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_i_8(self, serializer);
    }
  }

  void _sse_encode_opt_box_u_8(int? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_box_u_8(self, serializer);
    }
  }

  void _sse_encode_opt_list_attribute_twin_normal(
      List<AttributeTwinNormal>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_attribute_twin_normal(self, serializer);
    }
  }

  void _sse_encode_opt_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_attribute_twin_rust_async(self, serializer);
    }
  }

  void _sse_encode_opt_list_attribute_twin_rust_async_sse(
      List<AttributeTwinRustAsyncSse>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_attribute_twin_rust_async_sse(self, serializer);
    }
  }

  void _sse_encode_opt_list_attribute_twin_sse(
      List<AttributeTwinSse>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_attribute_twin_sse(self, serializer);
    }
  }

  void _sse_encode_opt_list_attribute_twin_sync(
      List<AttributeTwinSync>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_attribute_twin_sync(self, serializer);
    }
  }

  void _sse_encode_opt_list_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_attribute_twin_sync_sse(self, serializer);
    }
  }

  void _sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_opt_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  void _sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
          self, serializer);
    }
  }

  void _sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
      List<AttributeTwinRustAsyncSse?>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          self, serializer);
    }
  }

  void _sse_encode_opt_list_opt_box_autoadd_attribute_twin_sse(
      List<AttributeTwinSse?>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_opt_box_autoadd_attribute_twin_sse(self, serializer);
    }
  }

  void _sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_opt_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  void _sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse?>? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_opt_box_autoadd_attribute_twin_sync_sse(
          self, serializer);
    }
  }

  void _sse_encode_opt_list_prim_f_32(
      Float32List? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_prim_f_32(self, serializer);
    }
  }

  void _sse_encode_opt_list_prim_f_64(
      Float64List? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_prim_f_64(self, serializer);
    }
  }

  void _sse_encode_opt_list_prim_i_32(
      Int32List? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_prim_i_32(self, serializer);
    }
  }

  void _sse_encode_opt_list_prim_i_8(Int8List? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_prim_i_8(self, serializer);
    }
  }

  void _sse_encode_opt_list_prim_u_8(
      Uint8List? self, SseSerializer serializer) {
    _sse_encode_bool(self != null, serializer);
    if (self != null) {
      _sse_encode_list_prim_u_8(self, serializer);
    }
  }

  void _sse_encode_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    _sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    _sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
        self.enums, serializer);
    _sse_encode_list_opt_String(self.strings, serializer);
    _sse_encode_list_opt_list_prim_i_32(self.buffers, serializer);
  }

  void _sse_encode_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    _sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
        self.enums, serializer);
    _sse_encode_list_opt_String(self.strings, serializer);
    _sse_encode_list_opt_list_prim_i_32(self.buffers, serializer);
  }

  void _sse_encode_opt_vecs_twin_rust_async_sse(
      OptVecsTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    _sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(
        self.enums, serializer);
    _sse_encode_list_opt_String(self.strings, serializer);
    _sse_encode_list_opt_list_prim_i_32(self.buffers, serializer);
  }

  void _sse_encode_opt_vecs_twin_sse(
      OptVecsTwinSse self, SseSerializer serializer) {
    _sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    _sse_encode_list_opt_box_autoadd_weekdays_twin_sse(self.enums, serializer);
    _sse_encode_list_opt_String(self.strings, serializer);
    _sse_encode_list_opt_list_prim_i_32(self.buffers, serializer);
  }

  void _sse_encode_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    _sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    _sse_encode_list_opt_box_autoadd_weekdays_twin_sync(self.enums, serializer);
    _sse_encode_list_opt_String(self.strings, serializer);
    _sse_encode_list_opt_list_prim_i_32(self.buffers, serializer);
  }

  void _sse_encode_opt_vecs_twin_sync_sse(
      OptVecsTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    _sse_encode_list_opt_box_autoadd_weekdays_twin_sync_sse(
        self.enums, serializer);
    _sse_encode_list_opt_String(self.strings, serializer);
    _sse_encode_list_opt_list_prim_i_32(self.buffers, serializer);
  }

  void _sse_encode_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    _sse_encode_String(self.$1, serializer);
    _sse_encode_i_32(self.$2, serializer);
  }

  void _sse_encode_sequences(Sequences self, SseSerializer serializer) {
    _sse_encode_list_prim_i_32(self.field0, serializer);
  }

  void _sse_encode_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_some_struct_twin_rust_async_sse(
      SomeStructTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_some_struct_twin_sse(
      SomeStructTwinSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_some_struct_twin_sync_sse(
      SomeStructTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinNormal_Unknown():
        _sse_encode_i_32(0, serializer);
      case SpeedTwinNormal_GPS(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinRustAsync_Unknown():
        _sse_encode_i_32(0, serializer);
      case SpeedTwinRustAsync_GPS(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_speed_twin_rust_async_sse(
      SpeedTwinRustAsyncSse self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinRustAsyncSse_Unknown():
        _sse_encode_i_32(0, serializer);
      case SpeedTwinRustAsyncSse_GPS(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_speed_twin_sse(SpeedTwinSse self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinSse_Unknown():
        _sse_encode_i_32(0, serializer);
      case SpeedTwinSse_GPS(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinSync_Unknown():
        _sse_encode_i_32(0, serializer);
      case SpeedTwinSync_GPS(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_speed_twin_sync_sse(
      SpeedTwinSyncSse self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinSyncSse_Unknown():
        _sse_encode_i_32(0, serializer);
      case SpeedTwinSyncSse_GPS(field0: final field0):
        _sse_encode_i_32(1, serializer);
        _sse_encode_f_64(field0, serializer);
    }
  }

  void _sse_encode_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.fieldWithComments, serializer);
  }

  void _sse_encode_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.fieldWithComments, serializer);
  }

  void _sse_encode_struct_with_comments_twin_rust_async_sse(
      StructWithCommentsTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.fieldWithComments, serializer);
  }

  void _sse_encode_struct_with_comments_twin_sse(
      StructWithCommentsTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.fieldWithComments, serializer);
  }

  void _sse_encode_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.fieldWithComments, serializer);
  }

  void _sse_encode_struct_with_comments_twin_sync_sse(
      StructWithCommentsTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.fieldWithComments, serializer);
  }

  void _sse_encode_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    _sse_encode_abc_twin_normal(self.abc1, serializer);
    _sse_encode_abc_twin_normal(self.abc2, serializer);
  }

  void _sse_encode_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_abc_twin_rust_async(self.abc1, serializer);
    _sse_encode_abc_twin_rust_async(self.abc2, serializer);
  }

  void _sse_encode_struct_with_enum_twin_rust_async_sse(
      StructWithEnumTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_abc_twin_rust_async_sse(self.abc1, serializer);
    _sse_encode_abc_twin_rust_async_sse(self.abc2, serializer);
  }

  void _sse_encode_struct_with_enum_twin_sse(
      StructWithEnumTwinSse self, SseSerializer serializer) {
    _sse_encode_abc_twin_sse(self.abc1, serializer);
    _sse_encode_abc_twin_sse(self.abc2, serializer);
  }

  void _sse_encode_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    _sse_encode_abc_twin_sync(self.abc1, serializer);
    _sse_encode_abc_twin_sync(self.abc2, serializer);
  }

  void _sse_encode_struct_with_enum_twin_sync_sse(
      StructWithEnumTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_abc_twin_sync_sse(self.abc1, serializer);
    _sse_encode_abc_twin_sync_sse(self.abc2, serializer);
  }

  void _sse_encode_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
  }

  void _sse_encode_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
  }

  void _sse_encode_struct_with_one_field_twin_rust_async_sse(
      StructWithOneFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
  }

  void _sse_encode_struct_with_one_field_twin_sse(
      StructWithOneFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
  }

  void _sse_encode_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
  }

  void _sse_encode_struct_with_one_field_twin_sync_sse(
      StructWithOneFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
  }

  void _sse_encode_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_struct_with_two_field_twin_rust_async_sse(
      StructWithTwoFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_struct_with_two_field_twin_sse(
      StructWithTwoFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_struct_with_two_field_twin_sync_sse(
      StructWithTwoFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.a, serializer);
    _sse_encode_i_32(self.b, serializer);
  }

  void _sse_encode_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {}

  void _sse_encode_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {}

  void _sse_encode_struct_with_zero_field_twin_rust_async_sse(
      StructWithZeroFieldTwinRustAsyncSse self, SseSerializer serializer) {}

  void _sse_encode_struct_with_zero_field_twin_sse(
      StructWithZeroFieldTwinSse self, SseSerializer serializer) {}

  void _sse_encode_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {}

  void _sse_encode_struct_with_zero_field_twin_sync_sse(
      StructWithZeroFieldTwinSyncSse self, SseSerializer serializer) {}

  void _sse_encode_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    _sse_encode_u_32(self.x, serializer);
  }

  void _sse_encode_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_u_32(self.x, serializer);
  }

  void _sse_encode_sum_with_twin_rust_async_sse(
      SumWithTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.x, serializer);
  }

  void _sse_encode_sum_with_twin_sse(
      SumWithTwinSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.x, serializer);
  }

  void _sse_encode_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    _sse_encode_u_32(self.x, serializer);
  }

  void _sse_encode_sum_with_twin_sync_sse(
      SumWithTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.x, serializer);
  }

  void _sse_encode_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32_array_2(self.field0, serializer);
  }

  void _sse_encode_test_id_twin_normal_array_4(
      TestIdTwinNormalArray4 self, SseSerializer serializer) {
    _sse_encode_list_test_id_twin_normal(self.inner, serializer);
  }

  void _sse_encode_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32_array_2(self.field0, serializer);
  }

  void _sse_encode_test_id_twin_rust_async_array_4(
      TestIdTwinRustAsyncArray4 self, SseSerializer serializer) {
    _sse_encode_list_test_id_twin_rust_async(self.inner, serializer);
  }

  void _sse_encode_test_id_twin_rust_async_sse(
      TestIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32_array_2(self.field0, serializer);
  }

  void _sse_encode_test_id_twin_rust_async_sse_array_4(
      TestIdTwinRustAsyncSseArray4 self, SseSerializer serializer) {
    _sse_encode_list_test_id_twin_rust_async_sse(self.inner, serializer);
  }

  void _sse_encode_test_id_twin_sse(
      TestIdTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32_array_2(self.field0, serializer);
  }

  void _sse_encode_test_id_twin_sse_array_4(
      TestIdTwinSseArray4 self, SseSerializer serializer) {
    _sse_encode_list_test_id_twin_sse(self.inner, serializer);
  }

  void _sse_encode_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32_array_2(self.field0, serializer);
  }

  void _sse_encode_test_id_twin_sync_array_4(
      TestIdTwinSyncArray4 self, SseSerializer serializer) {
    _sse_encode_list_test_id_twin_sync(self.inner, serializer);
  }

  void _sse_encode_test_id_twin_sync_sse(
      TestIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32_array_2(self.field0, serializer);
  }

  void _sse_encode_test_id_twin_sync_sse_array_4(
      TestIdTwinSyncSseArray4 self, SseSerializer serializer) {
    _sse_encode_list_test_id_twin_sync_sse(self.inner, serializer);
  }

  void _sse_encode_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
  }

  void _sse_encode_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
  }

  void _sse_encode_tuple_struct_with_one_field_twin_rust_async_sse(
      TupleStructWithOneFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
  }

  void _sse_encode_tuple_struct_with_one_field_twin_sse(
      TupleStructWithOneFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
  }

  void _sse_encode_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
  }

  void _sse_encode_tuple_struct_with_one_field_twin_sync_sse(
      TupleStructWithOneFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
  }

  void _sse_encode_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
    _sse_encode_i_32(self.field1, serializer);
  }

  void _sse_encode_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
    _sse_encode_i_32(self.field1, serializer);
  }

  void _sse_encode_tuple_struct_with_two_field_twin_rust_async_sse(
      TupleStructWithTwoFieldTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
    _sse_encode_i_32(self.field1, serializer);
  }

  void _sse_encode_tuple_struct_with_two_field_twin_sse(
      TupleStructWithTwoFieldTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
    _sse_encode_i_32(self.field1, serializer);
  }

  void _sse_encode_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
    _sse_encode_i_32(self.field1, serializer);
  }

  void _sse_encode_tuple_struct_with_two_field_twin_sync_sse(
      TupleStructWithTwoFieldTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.field0, serializer);
    _sse_encode_i_32(self.field1, serializer);
  }

  void _sse_encode_u_16(int self, SseSerializer serializer) {
    serializer.buffer.putUint16(self);
  }

  void _sse_encode_u_32(int self, SseSerializer serializer) {
    serializer.buffer.putUint32(self);
  }

  void _sse_encode_u_64(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  void _sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  void _sse_encode_u_8_array_1600(U8Array1600 self, SseSerializer serializer) {
    _sse_encode_list_prim_u_8(self.inner, serializer);
  }

  void _sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    _sse_encode_list_prim_u_8(self.inner, serializer);
  }

  void _sse_encode_u_8_array_8(U8Array8 self, SseSerializer serializer) {
    _sse_encode_list_prim_u_8(self.inner, serializer);
  }

  void _sse_encode_unit(void self, SseSerializer serializer) {}

  void _sse_encode_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_user_id_twin_rust_async_sse(
      UserIdTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_user_id_twin_sse(
      UserIdTwinSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_user_id_twin_sync_sse(
      UserIdTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_u_32(self.value, serializer);
  }

  void _sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  void _sse_encode_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_weekdays_twin_rust_async_sse(
      WeekdaysTwinRustAsyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_weekdays_twin_sse(
      WeekdaysTwinSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }

  void _sse_encode_weekdays_twin_sync_sse(
      WeekdaysTwinSyncSse self, SseSerializer serializer) {
    _sse_encode_i_32(self.index, serializer);
  }
}

// Section: dart2rust

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
        RwLockBoxFnStringString raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
        RwLockBoxHelloTraitTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
        RwLockBoxHelloTraitTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
        RwLockBoxHelloTraitTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
        RwLockBoxHelloTraitTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
        RwLockBoxMyTraitTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
        RwLockBoxMyTraitTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
        RwLockBoxMyTraitTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
        RwLockBoxMyTraitTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
        RwLockNonCloneSimpleTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
        RwLockNonCloneSimpleTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
        RwLockNonCloneSimpleTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
        RwLockNonCloneSimpleTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
        RwLockStructWithGoodAndOpaqueFieldTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
        RwLockStructWithGoodAndOpaqueFieldTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: true);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
        RwLockBoxHelloTraitTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
        RwLockBoxHelloTraitTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
        RwLockBoxHelloTraitTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
        RwLockBoxHelloTraitTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
        RwLockNonCloneSimpleTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
        RwLockNonCloneSimpleTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
        RwLockNonCloneSimpleTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
        RwLockNonCloneSimpleTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
        RwLockStructWithGoodAndOpaqueFieldTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
        RwLockStructWithGoodAndOpaqueFieldTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
        RwLockBoxHelloTraitTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
        RwLockBoxHelloTraitTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
        RwLockBoxHelloTraitTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
        RwLockBoxHelloTraitTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
        RwLockNonCloneSimpleTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
        RwLockNonCloneSimpleTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
        RwLockNonCloneSimpleTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
        RwLockNonCloneSimpleTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
        RwLockStructWithGoodAndOpaqueFieldTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
        RwLockStructWithGoodAndOpaqueFieldTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer
    cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode(move: false);
}

PlatformPointer cst_encode_RustOpaque_MutexHideData(MutexHideData raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_RwLockHideData(RwLockHideData raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_box_dynDartDebugTwinNormal(
    BoxDartDebugTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_box_dynDartDebugTwinRustAsync(
    BoxDartDebugTwinRustAsync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
    BoxDartDebugTwinRustAsyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_box_dynDartDebugTwinSse(
    BoxDartDebugTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_box_dynDartDebugTwinSync(
    BoxDartDebugTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_box_dynDartDebugTwinSyncSse(
    BoxDartDebugTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_hide_data(HideData raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_i_32(I32 raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_non_clone_data(NonCloneData raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_non_send_hide_data(NonSendHideData raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
        RwLockBoxFnStringString raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
    RwLockBoxHelloTraitTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
    RwLockBoxHelloTraitTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
    RwLockBoxHelloTraitTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
    RwLockBoxHelloTraitTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
        RwLockBoxMyTraitTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
    RwLockBoxMyTraitTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
        RwLockBoxMyTraitTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
        RwLockBoxMyTraitTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
    RwLockNonCloneSimpleTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
    RwLockNonCloneSimpleTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
    RwLockNonCloneSimpleTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer cst_encode_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
    RwLockNonCloneSimpleTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
        RwLockStructWithGoodAndOpaqueFieldTwinNormal raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
        RwLockStructWithGoodAndOpaqueFieldTwinSync raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

PlatformPointer
    cst_encode_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
        RwLockStructWithGoodAndOpaqueFieldTwinSyncSse raw) {
  // ignore: invalid_use_of_internal_member
  return raw.cstEncode();
}

int cst_encode_application_mode(ApplicationMode raw) {
  return cst_encode_i_32(raw.index);
}

bool cst_encode_bool(bool raw) {
  return raw;
}

int cst_encode_enum_simple_twin_normal(EnumSimpleTwinNormal raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_enum_simple_twin_rust_async(EnumSimpleTwinRustAsync raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_enum_simple_twin_rust_async_sse(EnumSimpleTwinRustAsyncSse raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_enum_simple_twin_sse(EnumSimpleTwinSse raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_enum_simple_twin_sync(EnumSimpleTwinSync raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_enum_simple_twin_sync_sse(EnumSimpleTwinSyncSse raw) {
  return cst_encode_i_32(raw.index);
}

double cst_encode_f_32(double raw) {
  return raw;
}

double cst_encode_f_64(double raw) {
  return raw;
}

int cst_encode_i_16(int raw) {
  return raw;
}

int cst_encode_i_32(int raw) {
  return raw;
}

int cst_encode_i_8(int raw) {
  return raw;
}

int cst_encode_my_enum(MyEnum raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_u_16(int raw) {
  return raw;
}

int cst_encode_u_32(int raw) {
  return raw;
}

int cst_encode_u_8(int raw) {
  return raw;
}

void cst_encode_unit(void raw) {
  return raw;
}

int cst_encode_usize(int raw) {
  return raw;
}

int cst_encode_weekdays_twin_normal(WeekdaysTwinNormal raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_weekdays_twin_rust_async(WeekdaysTwinRustAsync raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_weekdays_twin_rust_async_sse(WeekdaysTwinRustAsyncSse raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_weekdays_twin_sse(WeekdaysTwinSse raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_weekdays_twin_sync(WeekdaysTwinSync raw) {
  return cst_encode_i_32(raw.index);
}

int cst_encode_weekdays_twin_sync_sse(WeekdaysTwinSyncSse raw) {
  return cst_encode_i_32(raw.index);
}
