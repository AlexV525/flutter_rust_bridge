// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// ignore_for_file: unused_import, unused_element, duplicate_ignore, invalid_use_of_internal_member

import 'api/array.dart';
import 'api/async_misc.dart';
import 'api/attribute.dart';
import 'api/benchmark_api.dart';
import 'api/chrono_type.dart';
import 'api/comment.dart';
import 'api/dart_dynamic.dart';
import 'api/dart_fn.dart';
import 'api/dart_opaque.dart';
import 'api/dart_opaque_sync.dart';
import 'api/enumeration.dart';
import 'api/event_listener.dart';
import 'api/exception.dart';
import 'api/external_type_in_crate.dart';
import 'api/inside_macro.dart';
import 'api/method.dart';
import 'api/mirror.dart';
import 'api/misc_example.dart';
import 'api/misc_type.dart';
import 'api/newtype_pattern.dart';
import 'api/optional.dart';
import 'api/optional_primitive_misc.dart';
import 'api/primitive_list_misc.dart';
import 'api/primitive_misc.dart';
import 'api/pseudo_manual/array_twin_rust_async.dart';
import 'api/pseudo_manual/array_twin_rust_async_sse.dart';
import 'api/pseudo_manual/array_twin_sse.dart';
import 'api/pseudo_manual/array_twin_sync.dart';
import 'api/pseudo_manual/array_twin_sync_sse.dart';
import 'api/pseudo_manual/async_misc_twin_sse.dart';
import 'api/pseudo_manual/attribute_twin_rust_async.dart';
import 'api/pseudo_manual/attribute_twin_rust_async_sse.dart';
import 'api/pseudo_manual/attribute_twin_sse.dart';
import 'api/pseudo_manual/attribute_twin_sync.dart';
import 'api/pseudo_manual/attribute_twin_sync_sse.dart';
import 'api/pseudo_manual/benchmark_api_twin_rust_async.dart';
import 'api/pseudo_manual/benchmark_api_twin_rust_async_sse.dart';
import 'api/pseudo_manual/benchmark_api_twin_sse.dart';
import 'api/pseudo_manual/benchmark_api_twin_sync.dart';
import 'api/pseudo_manual/benchmark_api_twin_sync_sse.dart';
import 'api/pseudo_manual/chrono_type_twin_rust_async.dart';
import 'api/pseudo_manual/chrono_type_twin_sync.dart';
import 'api/pseudo_manual/comment_twin_rust_async.dart';
import 'api/pseudo_manual/comment_twin_rust_async_sse.dart';
import 'api/pseudo_manual/comment_twin_sse.dart';
import 'api/pseudo_manual/comment_twin_sync.dart';
import 'api/pseudo_manual/comment_twin_sync_sse.dart';
import 'api/pseudo_manual/dart_dynamic_twin_rust_async.dart';
import 'api/pseudo_manual/dart_dynamic_twin_rust_async_sse.dart';
import 'api/pseudo_manual/dart_dynamic_twin_sse.dart';
import 'api/pseudo_manual/dart_dynamic_twin_sync.dart';
import 'api/pseudo_manual/dart_dynamic_twin_sync_sse.dart';
import 'api/pseudo_manual/dart_fn_twin_sse.dart';
import 'api/pseudo_manual/dart_opaque_sync_twin_sse.dart';
import 'api/pseudo_manual/dart_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_rust_async_sse.dart';
import 'api/pseudo_manual/dart_opaque_twin_sse.dart';
import 'api/pseudo_manual/dart_opaque_twin_sync.dart';
import 'api/pseudo_manual/dart_opaque_twin_sync_sse.dart';
import 'api/pseudo_manual/enumeration_twin_rust_async.dart';
import 'api/pseudo_manual/enumeration_twin_rust_async_sse.dart';
import 'api/pseudo_manual/enumeration_twin_sse.dart';
import 'api/pseudo_manual/enumeration_twin_sync.dart';
import 'api/pseudo_manual/enumeration_twin_sync_sse.dart';
import 'api/pseudo_manual/event_listener_twin_rust_async.dart';
import 'api/pseudo_manual/event_listener_twin_rust_async_sse.dart';
import 'api/pseudo_manual/event_listener_twin_sse.dart';
import 'api/pseudo_manual/exception_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_rust_async_sse.dart';
import 'api/pseudo_manual/exception_twin_sse.dart';
import 'api/pseudo_manual/exception_twin_sync.dart';
import 'api/pseudo_manual/exception_twin_sync_sse.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_rust_async.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_rust_async_sse.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sse.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sync.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sync_sse.dart';
import 'api/pseudo_manual/inside_macro_twin_sse.dart';
import 'api/pseudo_manual/method_twin_rust_async.dart';
import 'api/pseudo_manual/method_twin_rust_async_sse.dart';
import 'api/pseudo_manual/method_twin_sse.dart';
import 'api/pseudo_manual/method_twin_sync.dart';
import 'api/pseudo_manual/method_twin_sync_sse.dart';
import 'api/pseudo_manual/mirror_twin_rust_async.dart';
import 'api/pseudo_manual/mirror_twin_rust_async_sse.dart';
import 'api/pseudo_manual/mirror_twin_sse.dart';
import 'api/pseudo_manual/mirror_twin_sync.dart';
import 'api/pseudo_manual/mirror_twin_sync_sse.dart';
import 'api/pseudo_manual/misc_example_twin_rust_async.dart';
import 'api/pseudo_manual/misc_example_twin_rust_async_sse.dart';
import 'api/pseudo_manual/misc_example_twin_sse.dart';
import 'api/pseudo_manual/misc_example_twin_sync.dart';
import 'api/pseudo_manual/misc_example_twin_sync_sse.dart';
import 'api/pseudo_manual/misc_type_twin_rust_async.dart';
import 'api/pseudo_manual/misc_type_twin_rust_async_sse.dart';
import 'api/pseudo_manual/misc_type_twin_sse.dart';
import 'api/pseudo_manual/misc_type_twin_sync.dart';
import 'api/pseudo_manual/misc_type_twin_sync_sse.dart';
import 'api/pseudo_manual/newtype_pattern_twin_rust_async.dart';
import 'api/pseudo_manual/newtype_pattern_twin_rust_async_sse.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sse.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sync.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sync_sse.dart';
import 'api/pseudo_manual/optional_primitive.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_rust_async_sse.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sse.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sync_sse.dart';
import 'api/pseudo_manual/optional_primitive_twin_rust_async.dart';
import 'api/pseudo_manual/optional_primitive_twin_rust_async_sse.dart';
import 'api/pseudo_manual/optional_primitive_twin_sse.dart';
import 'api/pseudo_manual/optional_primitive_twin_sync.dart';
import 'api/pseudo_manual/optional_primitive_twin_sync_sse.dart';
import 'api/pseudo_manual/optional_twin_rust_async.dart';
import 'api/pseudo_manual/optional_twin_rust_async_sse.dart';
import 'api/pseudo_manual/optional_twin_sse.dart';
import 'api/pseudo_manual/optional_twin_sync.dart';
import 'api/pseudo_manual/optional_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive.dart';
import 'api/pseudo_manual/primitive_list.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sse.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sync.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive_list_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_list_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_list_twin_sse.dart';
import 'api/pseudo_manual/primitive_list_twin_sync.dart';
import 'api/pseudo_manual/primitive_list_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_misc_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_misc_twin_sse.dart';
import 'api/pseudo_manual/primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/primitive_misc_twin_sync_sse.dart';
import 'api/pseudo_manual/primitive_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_twin_rust_async_sse.dart';
import 'api/pseudo_manual/primitive_twin_sse.dart';
import 'api/pseudo_manual/primitive_twin_sync.dart';
import 'api/pseudo_manual/primitive_twin_sync_sse.dart';
import 'api/pseudo_manual/raw_string_twin_rust_async.dart';
import 'api/pseudo_manual/raw_string_twin_rust_async_sse.dart';
import 'api/pseudo_manual/raw_string_twin_sse.dart';
import 'api/pseudo_manual/raw_string_twin_sync.dart';
import 'api/pseudo_manual/raw_string_twin_sync_sse.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sse.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync_sse.dart';
import 'api/pseudo_manual/rust_opaque_sync_twin_sse.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async_sse.dart';
import 'api/pseudo_manual/rust_opaque_twin_sse.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync_sse.dart';
import 'api/pseudo_manual/simple_twin_rust_async.dart';
import 'api/pseudo_manual/simple_twin_rust_async_sse.dart';
import 'api/pseudo_manual/simple_twin_sse.dart';
import 'api/pseudo_manual/simple_twin_sync.dart';
import 'api/pseudo_manual/simple_twin_sync_sse.dart';
import 'api/pseudo_manual/stream_misc_twin_sse.dart';
import 'api/pseudo_manual/stream_twin_rust_async.dart';
import 'api/pseudo_manual/stream_twin_rust_async_sse.dart';
import 'api/pseudo_manual/stream_twin_sse.dart';
import 'api/pseudo_manual/structure_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_rust_async_sse.dart';
import 'api/pseudo_manual/structure_twin_sse.dart';
import 'api/pseudo_manual/structure_twin_sync.dart';
import 'api/pseudo_manual/structure_twin_sync_sse.dart';
import 'api/pseudo_manual/tuple_twin_rust_async.dart';
import 'api/pseudo_manual/tuple_twin_rust_async_sse.dart';
import 'api/pseudo_manual/tuple_twin_sse.dart';
import 'api/pseudo_manual/tuple_twin_sync.dart';
import 'api/pseudo_manual/tuple_twin_sync_sse.dart';
import 'api/pseudo_manual/type_alias_twin_rust_async.dart';
import 'api/pseudo_manual/type_alias_twin_rust_async_sse.dart';
import 'api/pseudo_manual/type_alias_twin_sse.dart';
import 'api/pseudo_manual/type_alias_twin_sync.dart';
import 'api/pseudo_manual/type_alias_twin_sync_sse.dart';
import 'api/pseudo_manual/uuid_type_twin_rust_async.dart';
import 'api/pseudo_manual/uuid_type_twin_sync.dart';
import 'api/raw_string.dart';
import 'api/rust_auto_opaque.dart';
import 'api/rust_opaque.dart';
import 'api/rust_opaque_sync.dart';
import 'api/simple.dart';
import 'api/stream.dart';
import 'api/stream_misc.dart';
import 'api/structure.dart';
import 'api/tuple.dart';
import 'api/type_alias.dart';
import 'api/uuid_type.dart';
import 'auxiliary/new_module_system/sub_module.dart';
import 'auxiliary/old_module_system/sub_module.dart';
import 'auxiliary/sample_types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
import 'package:meta/meta.dart' as meta;
import 'package:uuid/uuid.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexHideData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_RwLockHideData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormalPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_HideDataPtr =>
      wire.rust_arc_decrement_strong_count_RustOpaque_hide_data;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_I32Ptr =>
      wire.rust_arc_decrement_strong_count_RustOpaque_i_32;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_non_clone_data;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonSendHideDataPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_non_send_hide_data;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxFnStringStringPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinNormalPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxHelloTraitTwinSyncSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinNormalPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockBoxMyTraitTwinSyncSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinNormalPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSsePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockNonCloneSimpleTwinSyncSsePtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinNormalPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSsePtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockStructWithGoodAndOpaqueFieldTwinSyncSsePtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse;

  @protected
  Object cst_encode_Chrono_Duration(Duration raw) {
    return cst_encode_i_64(raw.inMilliseconds);
  }

  @protected
  Object cst_encode_Chrono_Local(DateTime raw) {
    return cst_encode_i_64(raw.millisecondsSinceEpoch);
  }

  @protected
  Object cst_encode_Chrono_Naive(DateTime raw) {
    return cst_encode_i_64(raw.millisecondsSinceEpoch);
  }

  @protected
  Object cst_encode_Chrono_Utc(DateTime raw) {
    return cst_encode_i_64(raw.millisecondsSinceEpoch);
  }

  @protected
  Object cst_encode_DartFn_Inputs__Output_unit(void Function() raw) {
    return cst_encode_DartOpaque(raw);
  }

  @protected
  Object cst_encode_DartOpaque(Object raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_DartOpaque_array_1(ObjectArray1 raw) {
    return cst_encode_list_DartOpaque(raw);
  }

  @protected
  List<dynamic> cst_encode_RustOpaque_hide_data_array_2(HideDataArray2 raw) {
    return cst_encode_list_RustOpaque_hide_data(raw);
  }

  @protected
  String cst_encode_String(String raw) {
    return raw;
  }

  @protected
  Uint8List cst_encode_Uuid(UuidValue raw) {
    return cst_encode_list_prim_u_8(raw.toBytes());
  }

  @protected
  List<dynamic> cst_encode_a_twin_normal(ATwinNormal raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_a_twin_rust_async(ATwinRustAsync raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_a_twin_rust_async_sse(ATwinRustAsyncSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_a_twin_sse(ATwinSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_a_twin_sync(ATwinSync raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_a_twin_sync_sse(ATwinSyncSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_abc_twin_normal(AbcTwinNormal raw) {
    if (raw is AbcTwinNormal_A) {
      return [0, cst_encode_box_autoadd_a_twin_normal(raw.field0)];
    }
    if (raw is AbcTwinNormal_B) {
      return [1, cst_encode_box_autoadd_b_twin_normal(raw.field0)];
    }
    if (raw is AbcTwinNormal_C) {
      return [2, cst_encode_box_autoadd_c_twin_normal(raw.field0)];
    }
    if (raw is AbcTwinNormal_JustInt) {
      return [3, cst_encode_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_abc_twin_rust_async(AbcTwinRustAsync raw) {
    if (raw is AbcTwinRustAsync_A) {
      return [0, cst_encode_box_autoadd_a_twin_rust_async(raw.field0)];
    }
    if (raw is AbcTwinRustAsync_B) {
      return [1, cst_encode_box_autoadd_b_twin_rust_async(raw.field0)];
    }
    if (raw is AbcTwinRustAsync_C) {
      return [2, cst_encode_box_autoadd_c_twin_rust_async(raw.field0)];
    }
    if (raw is AbcTwinRustAsync_JustInt) {
      return [3, cst_encode_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_abc_twin_rust_async_sse(AbcTwinRustAsyncSse raw) {
    if (raw is AbcTwinRustAsyncSse_A) {
      return [0, cst_encode_box_autoadd_a_twin_rust_async_sse(raw.field0)];
    }
    if (raw is AbcTwinRustAsyncSse_B) {
      return [1, cst_encode_box_autoadd_b_twin_rust_async_sse(raw.field0)];
    }
    if (raw is AbcTwinRustAsyncSse_C) {
      return [2, cst_encode_box_autoadd_c_twin_rust_async_sse(raw.field0)];
    }
    if (raw is AbcTwinRustAsyncSse_JustInt) {
      return [3, cst_encode_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_abc_twin_sse(AbcTwinSse raw) {
    if (raw is AbcTwinSse_A) {
      return [0, cst_encode_box_autoadd_a_twin_sse(raw.field0)];
    }
    if (raw is AbcTwinSse_B) {
      return [1, cst_encode_box_autoadd_b_twin_sse(raw.field0)];
    }
    if (raw is AbcTwinSse_C) {
      return [2, cst_encode_box_autoadd_c_twin_sse(raw.field0)];
    }
    if (raw is AbcTwinSse_JustInt) {
      return [3, cst_encode_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_abc_twin_sync(AbcTwinSync raw) {
    if (raw is AbcTwinSync_A) {
      return [0, cst_encode_box_autoadd_a_twin_sync(raw.field0)];
    }
    if (raw is AbcTwinSync_B) {
      return [1, cst_encode_box_autoadd_b_twin_sync(raw.field0)];
    }
    if (raw is AbcTwinSync_C) {
      return [2, cst_encode_box_autoadd_c_twin_sync(raw.field0)];
    }
    if (raw is AbcTwinSync_JustInt) {
      return [3, cst_encode_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_abc_twin_sync_sse(AbcTwinSyncSse raw) {
    if (raw is AbcTwinSyncSse_A) {
      return [0, cst_encode_box_autoadd_a_twin_sync_sse(raw.field0)];
    }
    if (raw is AbcTwinSyncSse_B) {
      return [1, cst_encode_box_autoadd_b_twin_sync_sse(raw.field0)];
    }
    if (raw is AbcTwinSyncSse_C) {
      return [2, cst_encode_box_autoadd_c_twin_sync_sse(raw.field0)];
    }
    if (raw is AbcTwinSyncSse_JustInt) {
      return [3, cst_encode_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_application_env(ApplicationEnv raw) {
    return [cst_encode_list_application_env_var(raw.vars)];
  }

  @protected
  List<dynamic> cst_encode_application_env_var(ApplicationEnvVar raw) {
    return [cst_encode_String(raw.field0), cst_encode_bool(raw.field1)];
  }

  @protected
  List<dynamic> cst_encode_application_settings(ApplicationSettings raw) {
    return [
      cst_encode_String(raw.name),
      cst_encode_String(raw.version),
      cst_encode_application_mode(raw.mode),
      cst_encode_box_application_env(raw.env),
      cst_encode_opt_box_autoadd_application_env(raw.envOptional)
    ];
  }

  @protected
  List<dynamic> cst_encode_attribute_twin_normal(AttributeTwinNormal raw) {
    return [cst_encode_String(raw.key), cst_encode_String(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_attribute_twin_rust_async(
      AttributeTwinRustAsync raw) {
    return [cst_encode_String(raw.key), cst_encode_String(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_attribute_twin_rust_async_sse(
      AttributeTwinRustAsyncSse raw) {
    return [cst_encode_String(raw.key), cst_encode_String(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_attribute_twin_sse(AttributeTwinSse raw) {
    return [cst_encode_String(raw.key), cst_encode_String(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_attribute_twin_sync(AttributeTwinSync raw) {
    return [cst_encode_String(raw.key), cst_encode_String(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_attribute_twin_sync_sse(AttributeTwinSyncSse raw) {
    return [cst_encode_String(raw.key), cst_encode_String(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_b_twin_normal(BTwinNormal raw) {
    return [cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_b_twin_rust_async(BTwinRustAsync raw) {
    return [cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_b_twin_rust_async_sse(BTwinRustAsyncSse raw) {
    return [cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_b_twin_sse(BTwinSse raw) {
    return [cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_b_twin_sync(BTwinSync raw) {
    return [cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_b_twin_sync_sse(BTwinSyncSse raw) {
    return [cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_blob_twin_normal(BlobTwinNormal raw) {
    return [cst_encode_u_8_array_1600(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_blob_twin_rust_async(BlobTwinRustAsync raw) {
    return [cst_encode_u_8_array_1600(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_blob_twin_rust_async_sse(BlobTwinRustAsyncSse raw) {
    return [cst_encode_u_8_array_1600(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_blob_twin_sse(BlobTwinSse raw) {
    return [cst_encode_u_8_array_1600(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_blob_twin_sync(BlobTwinSync raw) {
    return [cst_encode_u_8_array_1600(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_blob_twin_sync_sse(BlobTwinSyncSse raw) {
    return [cst_encode_u_8_array_1600(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_box_application_env(ApplicationEnv raw) {
    return cst_encode_application_env(raw);
  }

  @protected
  Object cst_encode_box_autoadd_Chrono_Utc(DateTime raw) {
    return cst_encode_Chrono_Utc(raw);
  }

  @protected
  Object cst_encode_box_autoadd_DartOpaque(Object raw) {
    return cst_encode_DartOpaque(raw);
  }

  @protected
  Object cst_encode_box_autoadd_RustOpaque_hide_data(HideData raw) {
    return cst_encode_RustOpaque_hide_data(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_a_twin_normal(ATwinNormal raw) {
    return cst_encode_a_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_a_twin_rust_async(ATwinRustAsync raw) {
    return cst_encode_a_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_a_twin_rust_async_sse(
      ATwinRustAsyncSse raw) {
    return cst_encode_a_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_a_twin_sse(ATwinSse raw) {
    return cst_encode_a_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_a_twin_sync(ATwinSync raw) {
    return cst_encode_a_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_a_twin_sync_sse(ATwinSyncSse raw) {
    return cst_encode_a_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_abc_twin_normal(AbcTwinNormal raw) {
    return cst_encode_abc_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_abc_twin_rust_async(
      AbcTwinRustAsync raw) {
    return cst_encode_abc_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_abc_twin_rust_async_sse(
      AbcTwinRustAsyncSse raw) {
    return cst_encode_abc_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_abc_twin_sse(AbcTwinSse raw) {
    return cst_encode_abc_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_abc_twin_sync(AbcTwinSync raw) {
    return cst_encode_abc_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_abc_twin_sync_sse(AbcTwinSyncSse raw) {
    return cst_encode_abc_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_application_env(ApplicationEnv raw) {
    return cst_encode_application_env(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_application_settings(
      ApplicationSettings raw) {
    return cst_encode_application_settings(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal raw) {
    return cst_encode_attribute_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync raw) {
    return cst_encode_attribute_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_attribute_twin_rust_async_sse(
      AttributeTwinRustAsyncSse raw) {
    return cst_encode_attribute_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_attribute_twin_sse(
      AttributeTwinSse raw) {
    return cst_encode_attribute_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_attribute_twin_sync(
      AttributeTwinSync raw) {
    return cst_encode_attribute_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_attribute_twin_sync_sse(
      AttributeTwinSyncSse raw) {
    return cst_encode_attribute_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_b_twin_normal(BTwinNormal raw) {
    return cst_encode_b_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_b_twin_rust_async(BTwinRustAsync raw) {
    return cst_encode_b_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_b_twin_rust_async_sse(
      BTwinRustAsyncSse raw) {
    return cst_encode_b_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_b_twin_sse(BTwinSse raw) {
    return cst_encode_b_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_b_twin_sync(BTwinSync raw) {
    return cst_encode_b_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_b_twin_sync_sse(BTwinSyncSse raw) {
    return cst_encode_b_twin_sync_sse(raw);
  }

  @protected
  bool cst_encode_box_autoadd_bool(bool raw) {
    return cst_encode_bool(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_c_twin_normal(CTwinNormal raw) {
    return cst_encode_c_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_c_twin_rust_async(CTwinRustAsync raw) {
    return cst_encode_c_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_c_twin_rust_async_sse(
      CTwinRustAsyncSse raw) {
    return cst_encode_c_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_c_twin_sse(CTwinSse raw) {
    return cst_encode_c_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_c_twin_sync(CTwinSync raw) {
    return cst_encode_c_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_c_twin_sync_sse(CTwinSyncSse raw) {
    return cst_encode_c_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal raw) {
    return cst_encode_concatenate_with_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync raw) {
    return cst_encode_concatenate_with_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_concatenate_with_twin_rust_async_sse(
      ConcatenateWithTwinRustAsyncSse raw) {
    return cst_encode_concatenate_with_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_concatenate_with_twin_sse(
      ConcatenateWithTwinSse raw) {
    return cst_encode_concatenate_with_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_concatenate_with_twin_sync(
      ConcatenateWithTwinSync raw) {
    return cst_encode_concatenate_with_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_concatenate_with_twin_sync_sse(
      ConcatenateWithTwinSyncSse raw) {
    return cst_encode_concatenate_with_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal raw) {
    return cst_encode_custom_nested_error_inner_twin_normal(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          CustomNestedErrorInnerTwinRustAsync raw) {
    return cst_encode_custom_nested_error_inner_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
          CustomNestedErrorInnerTwinRustAsyncSse raw) {
    return cst_encode_custom_nested_error_inner_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_inner_twin_sse(
      CustomNestedErrorInnerTwinSse raw) {
    return cst_encode_custom_nested_error_inner_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync raw) {
    return cst_encode_custom_nested_error_inner_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
      CustomNestedErrorInnerTwinSyncSse raw) {
    return cst_encode_custom_nested_error_inner_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal raw) {
    return cst_encode_custom_nested_error_outer_twin_normal(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
          CustomNestedErrorOuterTwinRustAsync raw) {
    return cst_encode_custom_nested_error_outer_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_custom_nested_error_outer_twin_rust_async_sse(
          CustomNestedErrorOuterTwinRustAsyncSse raw) {
    return cst_encode_custom_nested_error_outer_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_outer_twin_sse(
      CustomNestedErrorOuterTwinSse raw) {
    return cst_encode_custom_nested_error_outer_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync raw) {
    return cst_encode_custom_nested_error_outer_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_nested_error_outer_twin_sync_sse(
      CustomNestedErrorOuterTwinSyncSse raw) {
    return cst_encode_custom_nested_error_outer_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal raw) {
    return cst_encode_custom_struct_error_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync raw) {
    return cst_encode_custom_struct_error_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_error_twin_rust_async_sse(
      CustomStructErrorTwinRustAsyncSse raw) {
    return cst_encode_custom_struct_error_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_error_twin_sse(
      CustomStructErrorTwinSse raw) {
    return cst_encode_custom_struct_error_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync raw) {
    return cst_encode_custom_struct_error_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_error_twin_sync_sse(
      CustomStructErrorTwinSyncSse raw) {
    return cst_encode_custom_struct_error_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_twin_normal(
      CustomStructTwinNormal raw) {
    return cst_encode_custom_struct_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync raw) {
    return cst_encode_custom_struct_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_twin_rust_async_sse(
      CustomStructTwinRustAsyncSse raw) {
    return cst_encode_custom_struct_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_twin_sse(
      CustomStructTwinSse raw) {
    return cst_encode_custom_struct_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_twin_sync(
      CustomStructTwinSync raw) {
    return cst_encode_custom_struct_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_custom_struct_twin_sync_sse(
      CustomStructTwinSyncSse raw) {
    return cst_encode_custom_struct_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_customized_twin_normal(
      CustomizedTwinNormal raw) {
    return cst_encode_customized_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_customized_twin_rust_async(
      CustomizedTwinRustAsync raw) {
    return cst_encode_customized_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_customized_twin_rust_async_sse(
      CustomizedTwinRustAsyncSse raw) {
    return cst_encode_customized_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_customized_twin_sse(
      CustomizedTwinSse raw) {
    return cst_encode_customized_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_customized_twin_sync(
      CustomizedTwinSync raw) {
    return cst_encode_customized_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_customized_twin_sync_sse(
      CustomizedTwinSyncSse raw) {
    return cst_encode_customized_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal raw) {
    return cst_encode_dart_opaque_nested_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync raw) {
    return cst_encode_dart_opaque_nested_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_dart_opaque_nested_twin_rust_async_sse(
      DartOpaqueNestedTwinRustAsyncSse raw) {
    return cst_encode_dart_opaque_nested_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_dart_opaque_nested_twin_sse(
      DartOpaqueNestedTwinSse raw) {
    return cst_encode_dart_opaque_nested_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync raw) {
    return cst_encode_dart_opaque_nested_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_dart_opaque_nested_twin_sync_sse(
      DartOpaqueNestedTwinSyncSse raw) {
    return cst_encode_dart_opaque_nested_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_empty_twin_normal(EmptyTwinNormal raw) {
    return cst_encode_empty_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_empty_twin_rust_async(
      EmptyTwinRustAsync raw) {
    return cst_encode_empty_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_empty_twin_rust_async_sse(
      EmptyTwinRustAsyncSse raw) {
    return cst_encode_empty_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_empty_twin_sse(EmptyTwinSse raw) {
    return cst_encode_empty_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_empty_twin_sync(EmptyTwinSync raw) {
    return cst_encode_empty_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_empty_twin_sync_sse(
      EmptyTwinSyncSse raw) {
    return cst_encode_empty_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal raw) {
    return cst_encode_enum_dart_opaque_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync raw) {
    return cst_encode_enum_dart_opaque_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_dart_opaque_twin_rust_async_sse(
      EnumDartOpaqueTwinRustAsyncSse raw) {
    return cst_encode_enum_dart_opaque_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_dart_opaque_twin_sse(
      EnumDartOpaqueTwinSse raw) {
    return cst_encode_enum_dart_opaque_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync raw) {
    return cst_encode_enum_dart_opaque_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_dart_opaque_twin_sync_sse(
      EnumDartOpaqueTwinSyncSse raw) {
    return cst_encode_enum_dart_opaque_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal raw) {
    return cst_encode_enum_opaque_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync raw) {
    return cst_encode_enum_opaque_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_opaque_twin_rust_async_sse(
      EnumOpaqueTwinRustAsyncSse raw) {
    return cst_encode_enum_opaque_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_opaque_twin_sse(
      EnumOpaqueTwinSse raw) {
    return cst_encode_enum_opaque_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_opaque_twin_sync(
      EnumOpaqueTwinSync raw) {
    return cst_encode_enum_opaque_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_opaque_twin_sync_sse(
      EnumOpaqueTwinSyncSse raw) {
    return cst_encode_enum_opaque_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal raw) {
    return cst_encode_enum_with_item_mixed_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync raw) {
    return cst_encode_enum_with_item_mixed_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_mixed_twin_rust_async_sse(
      EnumWithItemMixedTwinRustAsyncSse raw) {
    return cst_encode_enum_with_item_mixed_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_mixed_twin_sse(
      EnumWithItemMixedTwinSse raw) {
    return cst_encode_enum_with_item_mixed_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync raw) {
    return cst_encode_enum_with_item_mixed_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_mixed_twin_sync_sse(
      EnumWithItemMixedTwinSyncSse raw) {
    return cst_encode_enum_with_item_mixed_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal raw) {
    return cst_encode_enum_with_item_struct_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync raw) {
    return cst_encode_enum_with_item_struct_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_enum_with_item_struct_twin_rust_async_sse(
          EnumWithItemStructTwinRustAsyncSse raw) {
    return cst_encode_enum_with_item_struct_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_struct_twin_sse(
      EnumWithItemStructTwinSse raw) {
    return cst_encode_enum_with_item_struct_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync raw) {
    return cst_encode_enum_with_item_struct_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_struct_twin_sync_sse(
      EnumWithItemStructTwinSyncSse raw) {
    return cst_encode_enum_with_item_struct_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal raw) {
    return cst_encode_enum_with_item_tuple_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync raw) {
    return cst_encode_enum_with_item_tuple_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_tuple_twin_rust_async_sse(
      EnumWithItemTupleTwinRustAsyncSse raw) {
    return cst_encode_enum_with_item_tuple_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_tuple_twin_sse(
      EnumWithItemTupleTwinSse raw) {
    return cst_encode_enum_with_item_tuple_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync raw) {
    return cst_encode_enum_with_item_tuple_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_enum_with_item_tuple_twin_sync_sse(
      EnumWithItemTupleTwinSyncSse raw) {
    return cst_encode_enum_with_item_tuple_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_event_twin_normal(EventTwinNormal raw) {
    return cst_encode_event_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_event_twin_rust_async(
      EventTwinRustAsync raw) {
    return cst_encode_event_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_event_twin_rust_async_sse(
      EventTwinRustAsyncSse raw) {
    return cst_encode_event_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_event_twin_sse(EventTwinSse raw) {
    return cst_encode_event_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal raw) {
    return cst_encode_exotic_optionals_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync raw) {
    return cst_encode_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse raw) {
    return cst_encode_exotic_optionals_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse raw) {
    return cst_encode_exotic_optionals_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync raw) {
    return cst_encode_exotic_optionals_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse raw) {
    return cst_encode_exotic_optionals_twin_sync_sse(raw);
  }

  @protected
  double cst_encode_box_autoadd_f_32(double raw) {
    return cst_encode_f_32(raw);
  }

  @protected
  double cst_encode_box_autoadd_f_64(double raw) {
    return cst_encode_f_64(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feature_chrono_twin_normal(
      FeatureChronoTwinNormal raw) {
    return cst_encode_feature_chrono_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync raw) {
    return cst_encode_feature_chrono_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feature_chrono_twin_sync(
      FeatureChronoTwinSync raw) {
    return cst_encode_feature_chrono_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feature_uuid_twin_normal(
      FeatureUuidTwinNormal raw) {
    return cst_encode_feature_uuid_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync raw) {
    return cst_encode_feature_uuid_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feature_uuid_twin_sync(
      FeatureUuidTwinSync raw) {
    return cst_encode_feature_uuid_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feed_id_twin_normal(
      FeedIdTwinNormal raw) {
    return cst_encode_feed_id_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feed_id_twin_rust_async(
      FeedIdTwinRustAsync raw) {
    return cst_encode_feed_id_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feed_id_twin_rust_async_sse(
      FeedIdTwinRustAsyncSse raw) {
    return cst_encode_feed_id_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feed_id_twin_sse(FeedIdTwinSse raw) {
    return cst_encode_feed_id_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feed_id_twin_sync(FeedIdTwinSync raw) {
    return cst_encode_feed_id_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_feed_id_twin_sync_sse(
      FeedIdTwinSyncSse raw) {
    return cst_encode_feed_id_twin_sync_sse(raw);
  }

  @protected
  int cst_encode_box_autoadd_i_16(int raw) {
    return cst_encode_i_16(raw);
  }

  @protected
  int cst_encode_box_autoadd_i_32(int raw) {
    return cst_encode_i_32(raw);
  }

  @protected
  Object cst_encode_box_autoadd_i_64(int raw) {
    return cst_encode_i_64(raw);
  }

  @protected
  int cst_encode_box_autoadd_i_8(int raw) {
    return cst_encode_i_8(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal raw) {
    return cst_encode_kitchen_sink_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync raw) {
    return cst_encode_kitchen_sink_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_kitchen_sink_twin_rust_async_sse(
      KitchenSinkTwinRustAsyncSse raw) {
    return cst_encode_kitchen_sink_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_kitchen_sink_twin_sse(
      KitchenSinkTwinSse raw) {
    return cst_encode_kitchen_sink_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_kitchen_sink_twin_sync(
      KitchenSinkTwinSync raw) {
    return cst_encode_kitchen_sink_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_kitchen_sink_twin_sync_sse(
      KitchenSinkTwinSyncSse raw) {
    return cst_encode_kitchen_sink_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_macro_struct(MacroStruct raw) {
    return cst_encode_macro_struct(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_measure_twin_normal(
      MeasureTwinNormal raw) {
    return cst_encode_measure_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync raw) {
    return cst_encode_measure_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_measure_twin_rust_async_sse(
      MeasureTwinRustAsyncSse raw) {
    return cst_encode_measure_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_measure_twin_sse(MeasureTwinSse raw) {
    return cst_encode_measure_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_measure_twin_sync(MeasureTwinSync raw) {
    return cst_encode_measure_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_measure_twin_sync_sse(
      MeasureTwinSyncSse raw) {
    return cst_encode_measure_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_message_id_twin_normal(
      MessageIdTwinNormal raw) {
    return cst_encode_message_id_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_message_id_twin_rust_async(
      MessageIdTwinRustAsync raw) {
    return cst_encode_message_id_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_message_id_twin_rust_async_sse(
      MessageIdTwinRustAsyncSse raw) {
    return cst_encode_message_id_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_message_id_twin_sse(
      MessageIdTwinSse raw) {
    return cst_encode_message_id_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_message_id_twin_sync(
      MessageIdTwinSync raw) {
    return cst_encode_message_id_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_message_id_twin_sync_sse(
      MessageIdTwinSyncSse raw) {
    return cst_encode_message_id_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal raw) {
    return cst_encode_my_nested_struct_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync raw) {
    return cst_encode_my_nested_struct_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_nested_struct_twin_rust_async_sse(
      MyNestedStructTwinRustAsyncSse raw) {
    return cst_encode_my_nested_struct_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_nested_struct_twin_sse(
      MyNestedStructTwinSse raw) {
    return cst_encode_my_nested_struct_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_nested_struct_twin_sync(
      MyNestedStructTwinSync raw) {
    return cst_encode_my_nested_struct_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_nested_struct_twin_sync_sse(
      MyNestedStructTwinSyncSse raw) {
    return cst_encode_my_nested_struct_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_size(MySize raw) {
    return cst_encode_my_size(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_struct(MyStruct raw) {
    return cst_encode_my_struct(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal raw) {
    return cst_encode_my_tree_node_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync raw) {
    return cst_encode_my_tree_node_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_tree_node_twin_rust_async_sse(
      MyTreeNodeTwinRustAsyncSse raw) {
    return cst_encode_my_tree_node_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_tree_node_twin_sse(
      MyTreeNodeTwinSse raw) {
    return cst_encode_my_tree_node_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_tree_node_twin_sync(
      MyTreeNodeTwinSync raw) {
    return cst_encode_my_tree_node_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_my_tree_node_twin_sync_sse(
      MyTreeNodeTwinSyncSse raw) {
    return cst_encode_my_tree_node_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal raw) {
    return cst_encode_new_type_int_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync raw) {
    return cst_encode_new_type_int_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_new_type_int_twin_rust_async_sse(
      NewTypeIntTwinRustAsyncSse raw) {
    return cst_encode_new_type_int_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_new_type_int_twin_sse(
      NewTypeIntTwinSse raw) {
    return cst_encode_new_type_int_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync raw) {
    return cst_encode_new_type_int_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_new_type_int_twin_sync_sse(
      NewTypeIntTwinSyncSse raw) {
    return cst_encode_new_type_int_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_note_twin_normal(NoteTwinNormal raw) {
    return cst_encode_note_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_note_twin_rust_async(
      NoteTwinRustAsync raw) {
    return cst_encode_note_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_note_twin_rust_async_sse(
      NoteTwinRustAsyncSse raw) {
    return cst_encode_note_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_note_twin_sse(NoteTwinSse raw) {
    return cst_encode_note_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_note_twin_sync(NoteTwinSync raw) {
    return cst_encode_note_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_note_twin_sync_sse(NoteTwinSyncSse raw) {
    return cst_encode_note_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_numbers(Numbers raw) {
    return cst_encode_numbers(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal raw) {
    return cst_encode_opaque_nested_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync raw) {
    return cst_encode_opaque_nested_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opaque_nested_twin_rust_async_sse(
      OpaqueNestedTwinRustAsyncSse raw) {
    return cst_encode_opaque_nested_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opaque_nested_twin_sse(
      OpaqueNestedTwinSse raw) {
    return cst_encode_opaque_nested_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opaque_nested_twin_sync(
      OpaqueNestedTwinSync raw) {
    return cst_encode_opaque_nested_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opaque_nested_twin_sync_sse(
      OpaqueNestedTwinSyncSse raw) {
    return cst_encode_opaque_nested_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opt_vecs_twin_normal(
      OptVecsTwinNormal raw) {
    return cst_encode_opt_vecs_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync raw) {
    return cst_encode_opt_vecs_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opt_vecs_twin_rust_async_sse(
      OptVecsTwinRustAsyncSse raw) {
    return cst_encode_opt_vecs_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opt_vecs_twin_sse(OptVecsTwinSse raw) {
    return cst_encode_opt_vecs_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opt_vecs_twin_sync(OptVecsTwinSync raw) {
    return cst_encode_opt_vecs_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_opt_vecs_twin_sync_sse(
      OptVecsTwinSyncSse raw) {
    return cst_encode_opt_vecs_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_record_string_i_32((String, int) raw) {
    return cst_encode_record_string_i_32(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sequences(Sequences raw) {
    return cst_encode_sequences(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_some_struct_twin_normal(
      SomeStructTwinNormal raw) {
    return cst_encode_some_struct_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_some_struct_twin_rust_async(
      SomeStructTwinRustAsync raw) {
    return cst_encode_some_struct_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_some_struct_twin_rust_async_sse(
      SomeStructTwinRustAsyncSse raw) {
    return cst_encode_some_struct_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_some_struct_twin_sse(
      SomeStructTwinSse raw) {
    return cst_encode_some_struct_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_some_struct_twin_sync(
      SomeStructTwinSync raw) {
    return cst_encode_some_struct_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_some_struct_twin_sync_sse(
      SomeStructTwinSyncSse raw) {
    return cst_encode_some_struct_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal raw) {
    return cst_encode_struct_with_comments_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync raw) {
    return cst_encode_struct_with_comments_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_comments_twin_rust_async_sse(
      StructWithCommentsTwinRustAsyncSse raw) {
    return cst_encode_struct_with_comments_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_comments_twin_sse(
      StructWithCommentsTwinSse raw) {
    return cst_encode_struct_with_comments_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync raw) {
    return cst_encode_struct_with_comments_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_comments_twin_sync_sse(
      StructWithCommentsTwinSyncSse raw) {
    return cst_encode_struct_with_comments_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal raw) {
    return cst_encode_struct_with_enum_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync raw) {
    return cst_encode_struct_with_enum_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_enum_twin_rust_async_sse(
      StructWithEnumTwinRustAsyncSse raw) {
    return cst_encode_struct_with_enum_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_enum_twin_sse(
      StructWithEnumTwinSse raw) {
    return cst_encode_struct_with_enum_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_enum_twin_sync(
      StructWithEnumTwinSync raw) {
    return cst_encode_struct_with_enum_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_enum_twin_sync_sse(
      StructWithEnumTwinSyncSse raw) {
    return cst_encode_struct_with_enum_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal raw) {
    return cst_encode_struct_with_one_field_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync raw) {
    return cst_encode_struct_with_one_field_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_struct_with_one_field_twin_rust_async_sse(
          StructWithOneFieldTwinRustAsyncSse raw) {
    return cst_encode_struct_with_one_field_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_one_field_twin_sse(
      StructWithOneFieldTwinSse raw) {
    return cst_encode_struct_with_one_field_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync raw) {
    return cst_encode_struct_with_one_field_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_one_field_twin_sync_sse(
      StructWithOneFieldTwinSyncSse raw) {
    return cst_encode_struct_with_one_field_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal raw) {
    return cst_encode_struct_with_two_field_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync raw) {
    return cst_encode_struct_with_two_field_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_struct_with_two_field_twin_rust_async_sse(
          StructWithTwoFieldTwinRustAsyncSse raw) {
    return cst_encode_struct_with_two_field_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_two_field_twin_sse(
      StructWithTwoFieldTwinSse raw) {
    return cst_encode_struct_with_two_field_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync raw) {
    return cst_encode_struct_with_two_field_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_two_field_twin_sync_sse(
      StructWithTwoFieldTwinSyncSse raw) {
    return cst_encode_struct_with_two_field_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal raw) {
    return cst_encode_struct_with_zero_field_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync raw) {
    return cst_encode_struct_with_zero_field_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_struct_with_zero_field_twin_rust_async_sse(
          StructWithZeroFieldTwinRustAsyncSse raw) {
    return cst_encode_struct_with_zero_field_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_zero_field_twin_sse(
      StructWithZeroFieldTwinSse raw) {
    return cst_encode_struct_with_zero_field_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync raw) {
    return cst_encode_struct_with_zero_field_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_struct_with_zero_field_twin_sync_sse(
      StructWithZeroFieldTwinSyncSse raw) {
    return cst_encode_struct_with_zero_field_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sum_with_twin_normal(
      SumWithTwinNormal raw) {
    return cst_encode_sum_with_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sum_with_twin_rust_async(
      SumWithTwinRustAsync raw) {
    return cst_encode_sum_with_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sum_with_twin_rust_async_sse(
      SumWithTwinRustAsyncSse raw) {
    return cst_encode_sum_with_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sum_with_twin_sse(SumWithTwinSse raw) {
    return cst_encode_sum_with_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sum_with_twin_sync(SumWithTwinSync raw) {
    return cst_encode_sum_with_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sum_with_twin_sync_sse(
      SumWithTwinSyncSse raw) {
    return cst_encode_sum_with_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_test_id_twin_normal(
      TestIdTwinNormal raw) {
    return cst_encode_test_id_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_test_id_twin_rust_async(
      TestIdTwinRustAsync raw) {
    return cst_encode_test_id_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_test_id_twin_rust_async_sse(
      TestIdTwinRustAsyncSse raw) {
    return cst_encode_test_id_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_test_id_twin_sse(TestIdTwinSse raw) {
    return cst_encode_test_id_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_test_id_twin_sync(TestIdTwinSync raw) {
    return cst_encode_test_id_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_test_id_twin_sync_sse(
      TestIdTwinSyncSse raw) {
    return cst_encode_test_id_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal raw) {
    return cst_encode_tuple_struct_with_one_field_twin_normal(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
          TupleStructWithOneFieldTwinRustAsync raw) {
    return cst_encode_tuple_struct_with_one_field_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async_sse(
          TupleStructWithOneFieldTwinRustAsyncSse raw) {
    return cst_encode_tuple_struct_with_one_field_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_tuple_struct_with_one_field_twin_sse(
      TupleStructWithOneFieldTwinSse raw) {
    return cst_encode_tuple_struct_with_one_field_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync raw) {
    return cst_encode_tuple_struct_with_one_field_twin_sync(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_tuple_struct_with_one_field_twin_sync_sse(
          TupleStructWithOneFieldTwinSyncSse raw) {
    return cst_encode_tuple_struct_with_one_field_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal raw) {
    return cst_encode_tuple_struct_with_two_field_twin_normal(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
          TupleStructWithTwoFieldTwinRustAsync raw) {
    return cst_encode_tuple_struct_with_two_field_twin_rust_async(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async_sse(
          TupleStructWithTwoFieldTwinRustAsyncSse raw) {
    return cst_encode_tuple_struct_with_two_field_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_tuple_struct_with_two_field_twin_sse(
      TupleStructWithTwoFieldTwinSse raw) {
    return cst_encode_tuple_struct_with_two_field_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync raw) {
    return cst_encode_tuple_struct_with_two_field_twin_sync(raw);
  }

  @protected
  List<dynamic>
      cst_encode_box_autoadd_tuple_struct_with_two_field_twin_sync_sse(
          TupleStructWithTwoFieldTwinSyncSse raw) {
    return cst_encode_tuple_struct_with_two_field_twin_sync_sse(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_16(int raw) {
    return cst_encode_u_16(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_32(int raw) {
    return cst_encode_u_32(raw);
  }

  @protected
  Object cst_encode_box_autoadd_u_64(int raw) {
    return cst_encode_u_64(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_8(int raw) {
    return cst_encode_u_8(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_user_id_twin_normal(
      UserIdTwinNormal raw) {
    return cst_encode_user_id_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_user_id_twin_rust_async(
      UserIdTwinRustAsync raw) {
    return cst_encode_user_id_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_user_id_twin_rust_async_sse(
      UserIdTwinRustAsyncSse raw) {
    return cst_encode_user_id_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_user_id_twin_sse(UserIdTwinSse raw) {
    return cst_encode_user_id_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_user_id_twin_sync(UserIdTwinSync raw) {
    return cst_encode_user_id_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_user_id_twin_sync_sse(
      UserIdTwinSyncSse raw) {
    return cst_encode_user_id_twin_sync_sse(raw);
  }

  @protected
  int cst_encode_box_autoadd_weekdays_twin_normal(WeekdaysTwinNormal raw) {
    return cst_encode_weekdays_twin_normal(raw);
  }

  @protected
  int cst_encode_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync raw) {
    return cst_encode_weekdays_twin_rust_async(raw);
  }

  @protected
  int cst_encode_box_autoadd_weekdays_twin_rust_async_sse(
      WeekdaysTwinRustAsyncSse raw) {
    return cst_encode_weekdays_twin_rust_async_sse(raw);
  }

  @protected
  int cst_encode_box_autoadd_weekdays_twin_sse(WeekdaysTwinSse raw) {
    return cst_encode_weekdays_twin_sse(raw);
  }

  @protected
  int cst_encode_box_autoadd_weekdays_twin_sync(WeekdaysTwinSync raw) {
    return cst_encode_weekdays_twin_sync(raw);
  }

  @protected
  int cst_encode_box_autoadd_weekdays_twin_sync_sse(WeekdaysTwinSyncSse raw) {
    return cst_encode_weekdays_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_blob_twin_normal(BlobTwinNormal raw) {
    return cst_encode_blob_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_blob_twin_rust_async(BlobTwinRustAsync raw) {
    return cst_encode_blob_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_blob_twin_rust_async_sse(
      BlobTwinRustAsyncSse raw) {
    return cst_encode_blob_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_blob_twin_sse(BlobTwinSse raw) {
    return cst_encode_blob_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_blob_twin_sync(BlobTwinSync raw) {
    return cst_encode_blob_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_blob_twin_sync_sse(BlobTwinSyncSse raw) {
    return cst_encode_blob_twin_sync_sse(raw);
  }

  @protected
  bool cst_encode_box_bool(bool raw) {
    return cst_encode_bool(raw);
  }

  @protected
  List<dynamic> cst_encode_box_distance_twin_normal(DistanceTwinNormal raw) {
    return cst_encode_distance_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_distance_twin_rust_async(
      DistanceTwinRustAsync raw) {
    return cst_encode_distance_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_distance_twin_rust_async_sse(
      DistanceTwinRustAsyncSse raw) {
    return cst_encode_distance_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_distance_twin_sse(DistanceTwinSse raw) {
    return cst_encode_distance_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_distance_twin_sync(DistanceTwinSync raw) {
    return cst_encode_distance_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_distance_twin_sync_sse(DistanceTwinSyncSse raw) {
    return cst_encode_distance_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal raw) {
    return cst_encode_exotic_optionals_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync raw) {
    return cst_encode_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse raw) {
    return cst_encode_exotic_optionals_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse raw) {
    return cst_encode_exotic_optionals_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync raw) {
    return cst_encode_exotic_optionals_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse raw) {
    return cst_encode_exotic_optionals_twin_sync_sse(raw);
  }

  @protected
  double cst_encode_box_f_64(double raw) {
    return cst_encode_f_64(raw);
  }

  @protected
  int cst_encode_box_i_32(int raw) {
    return cst_encode_i_32(raw);
  }

  @protected
  Object cst_encode_box_i_64(int raw) {
    return cst_encode_i_64(raw);
  }

  @protected
  int cst_encode_box_i_8(int raw) {
    return cst_encode_i_8(raw);
  }

  @protected
  List<dynamic> cst_encode_box_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal raw) {
    return cst_encode_kitchen_sink_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync raw) {
    return cst_encode_kitchen_sink_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_kitchen_sink_twin_rust_async_sse(
      KitchenSinkTwinRustAsyncSse raw) {
    return cst_encode_kitchen_sink_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_kitchen_sink_twin_sse(KitchenSinkTwinSse raw) {
    return cst_encode_kitchen_sink_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_kitchen_sink_twin_sync(KitchenSinkTwinSync raw) {
    return cst_encode_kitchen_sink_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_kitchen_sink_twin_sync_sse(
      KitchenSinkTwinSyncSse raw) {
    return cst_encode_kitchen_sink_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_my_size(MySize raw) {
    return cst_encode_my_size(raw);
  }

  @protected
  List<dynamic> cst_encode_box_speed_twin_normal(SpeedTwinNormal raw) {
    return cst_encode_speed_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_box_speed_twin_rust_async(SpeedTwinRustAsync raw) {
    return cst_encode_speed_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_box_speed_twin_rust_async_sse(
      SpeedTwinRustAsyncSse raw) {
    return cst_encode_speed_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_speed_twin_sse(SpeedTwinSse raw) {
    return cst_encode_speed_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_box_speed_twin_sync(SpeedTwinSync raw) {
    return cst_encode_speed_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_box_speed_twin_sync_sse(SpeedTwinSyncSse raw) {
    return cst_encode_speed_twin_sync_sse(raw);
  }

  @protected
  int cst_encode_box_u_8(int raw) {
    return cst_encode_u_8(raw);
  }

  @protected
  Uint8List cst_encode_box_u_8_array_1600(U8Array1600 raw) {
    return cst_encode_u_8_array_1600(raw);
  }

  @protected
  int cst_encode_box_weekdays_twin_normal(WeekdaysTwinNormal raw) {
    return cst_encode_weekdays_twin_normal(raw);
  }

  @protected
  int cst_encode_box_weekdays_twin_rust_async(WeekdaysTwinRustAsync raw) {
    return cst_encode_weekdays_twin_rust_async(raw);
  }

  @protected
  int cst_encode_box_weekdays_twin_rust_async_sse(
      WeekdaysTwinRustAsyncSse raw) {
    return cst_encode_weekdays_twin_rust_async_sse(raw);
  }

  @protected
  int cst_encode_box_weekdays_twin_sse(WeekdaysTwinSse raw) {
    return cst_encode_weekdays_twin_sse(raw);
  }

  @protected
  int cst_encode_box_weekdays_twin_sync(WeekdaysTwinSync raw) {
    return cst_encode_weekdays_twin_sync(raw);
  }

  @protected
  int cst_encode_box_weekdays_twin_sync_sse(WeekdaysTwinSyncSse raw) {
    return cst_encode_weekdays_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_c_twin_normal(CTwinNormal raw) {
    return [cst_encode_bool(raw.c)];
  }

  @protected
  List<dynamic> cst_encode_c_twin_rust_async(CTwinRustAsync raw) {
    return [cst_encode_bool(raw.c)];
  }

  @protected
  List<dynamic> cst_encode_c_twin_rust_async_sse(CTwinRustAsyncSse raw) {
    return [cst_encode_bool(raw.c)];
  }

  @protected
  List<dynamic> cst_encode_c_twin_sse(CTwinSse raw) {
    return [cst_encode_bool(raw.c)];
  }

  @protected
  List<dynamic> cst_encode_c_twin_sync(CTwinSync raw) {
    return [cst_encode_bool(raw.c)];
  }

  @protected
  List<dynamic> cst_encode_c_twin_sync_sse(CTwinSyncSse raw) {
    return [cst_encode_bool(raw.c)];
  }

  @protected
  List<dynamic> cst_encode_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_concatenate_with_twin_rust_async_sse(
      ConcatenateWithTwinRustAsyncSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_concatenate_with_twin_sse(
      ConcatenateWithTwinSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_concatenate_with_twin_sync(
      ConcatenateWithTwinSync raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_concatenate_with_twin_sync_sse(
      ConcatenateWithTwinSyncSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal raw) {
    if (raw is CustomNestedErrorInnerTwinNormal_Three) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorInnerTwinNormal_Four) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync raw) {
    if (raw is CustomNestedErrorInnerTwinRustAsync_Three) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorInnerTwinRustAsync_Four) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_inner_twin_rust_async_sse(
      CustomNestedErrorInnerTwinRustAsyncSse raw) {
    if (raw is CustomNestedErrorInnerTwinRustAsyncSse_Three) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorInnerTwinRustAsyncSse_Four) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_inner_twin_sse(
      CustomNestedErrorInnerTwinSse raw) {
    if (raw is CustomNestedErrorInnerTwinSse_Three) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorInnerTwinSse_Four) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync raw) {
    if (raw is CustomNestedErrorInnerTwinSync_Three) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorInnerTwinSync_Four) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_inner_twin_sync_sse(
      CustomNestedErrorInnerTwinSyncSse raw) {
    if (raw is CustomNestedErrorInnerTwinSyncSse_Three) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorInnerTwinSyncSse_Four) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal raw) {
    if (raw is CustomNestedErrorOuterTwinNormal_One) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorOuterTwinNormal_Two) {
      return [
        1,
        cst_encode_box_autoadd_custom_nested_error_inner_twin_normal(raw.field0)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync raw) {
    if (raw is CustomNestedErrorOuterTwinRustAsync_One) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorOuterTwinRustAsync_Two) {
      return [
        1,
        cst_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
            raw.field0)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_outer_twin_rust_async_sse(
      CustomNestedErrorOuterTwinRustAsyncSse raw) {
    if (raw is CustomNestedErrorOuterTwinRustAsyncSse_One) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorOuterTwinRustAsyncSse_Two) {
      return [
        1,
        cst_encode_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
            raw.field0)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_outer_twin_sse(
      CustomNestedErrorOuterTwinSse raw) {
    if (raw is CustomNestedErrorOuterTwinSse_One) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorOuterTwinSse_Two) {
      return [
        1,
        cst_encode_box_autoadd_custom_nested_error_inner_twin_sse(raw.field0)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync raw) {
    if (raw is CustomNestedErrorOuterTwinSync_One) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorOuterTwinSync_Two) {
      return [
        1,
        cst_encode_box_autoadd_custom_nested_error_inner_twin_sync(raw.field0)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_nested_error_outer_twin_sync_sse(
      CustomNestedErrorOuterTwinSyncSse raw) {
    if (raw is CustomNestedErrorOuterTwinSyncSse_One) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is CustomNestedErrorOuterTwinSyncSse_Two) {
      return [
        1,
        cst_encode_box_autoadd_custom_nested_error_inner_twin_sync_sse(
            raw.field0)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_error_twin_rust_async_sse(
      CustomStructErrorTwinRustAsyncSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_error_twin_sse(
      CustomStructErrorTwinSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_error_twin_sync_sse(
      CustomStructErrorTwinSyncSse raw) {
    return [cst_encode_String(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_twin_normal(
      CustomStructTwinNormal raw) {
    return [cst_encode_String(raw.message)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync raw) {
    return [cst_encode_String(raw.message)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_twin_rust_async_sse(
      CustomStructTwinRustAsyncSse raw) {
    return [cst_encode_String(raw.message)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_twin_sse(CustomStructTwinSse raw) {
    return [cst_encode_String(raw.message)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_twin_sync(CustomStructTwinSync raw) {
    return [cst_encode_String(raw.message)];
  }

  @protected
  List<dynamic> cst_encode_custom_struct_twin_sync_sse(
      CustomStructTwinSyncSse raw) {
    return [cst_encode_String(raw.message)];
  }

  @protected
  List<dynamic> cst_encode_customized_twin_normal(CustomizedTwinNormal raw) {
    return [
      cst_encode_String(raw.finalField),
      cst_encode_opt_String(raw.nonFinalField)
    ];
  }

  @protected
  List<dynamic> cst_encode_customized_twin_rust_async(
      CustomizedTwinRustAsync raw) {
    return [
      cst_encode_String(raw.finalField),
      cst_encode_opt_String(raw.nonFinalField)
    ];
  }

  @protected
  List<dynamic> cst_encode_customized_twin_rust_async_sse(
      CustomizedTwinRustAsyncSse raw) {
    return [
      cst_encode_String(raw.finalField),
      cst_encode_opt_String(raw.nonFinalField)
    ];
  }

  @protected
  List<dynamic> cst_encode_customized_twin_sse(CustomizedTwinSse raw) {
    return [
      cst_encode_String(raw.finalField),
      cst_encode_opt_String(raw.nonFinalField)
    ];
  }

  @protected
  List<dynamic> cst_encode_customized_twin_sync(CustomizedTwinSync raw) {
    return [
      cst_encode_String(raw.finalField),
      cst_encode_opt_String(raw.nonFinalField)
    ];
  }

  @protected
  List<dynamic> cst_encode_customized_twin_sync_sse(CustomizedTwinSyncSse raw) {
    return [
      cst_encode_String(raw.finalField),
      cst_encode_opt_String(raw.nonFinalField)
    ];
  }

  @protected
  List<dynamic> cst_encode_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal raw) {
    return [
      cst_encode_DartOpaque(raw.first),
      cst_encode_DartOpaque(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync raw) {
    return [
      cst_encode_DartOpaque(raw.first),
      cst_encode_DartOpaque(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_dart_opaque_nested_twin_rust_async_sse(
      DartOpaqueNestedTwinRustAsyncSse raw) {
    return [
      cst_encode_DartOpaque(raw.first),
      cst_encode_DartOpaque(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_dart_opaque_nested_twin_sse(
      DartOpaqueNestedTwinSse raw) {
    return [
      cst_encode_DartOpaque(raw.first),
      cst_encode_DartOpaque(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync raw) {
    return [
      cst_encode_DartOpaque(raw.first),
      cst_encode_DartOpaque(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_dart_opaque_nested_twin_sync_sse(
      DartOpaqueNestedTwinSyncSse raw) {
    return [
      cst_encode_DartOpaque(raw.first),
      cst_encode_DartOpaque(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_distance_twin_normal(DistanceTwinNormal raw) {
    if (raw is DistanceTwinNormal_Unknown) {
      return [0];
    }
    if (raw is DistanceTwinNormal_Map) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_distance_twin_rust_async(DistanceTwinRustAsync raw) {
    if (raw is DistanceTwinRustAsync_Unknown) {
      return [0];
    }
    if (raw is DistanceTwinRustAsync_Map) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_distance_twin_rust_async_sse(
      DistanceTwinRustAsyncSse raw) {
    if (raw is DistanceTwinRustAsyncSse_Unknown) {
      return [0];
    }
    if (raw is DistanceTwinRustAsyncSse_Map) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_distance_twin_sse(DistanceTwinSse raw) {
    if (raw is DistanceTwinSse_Unknown) {
      return [0];
    }
    if (raw is DistanceTwinSse_Map) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_distance_twin_sync(DistanceTwinSync raw) {
    if (raw is DistanceTwinSync_Unknown) {
      return [0];
    }
    if (raw is DistanceTwinSync_Map) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_distance_twin_sync_sse(DistanceTwinSyncSse raw) {
    if (raw is DistanceTwinSyncSse_Unknown) {
      return [0];
    }
    if (raw is DistanceTwinSyncSse_Map) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_empty_twin_normal(EmptyTwinNormal raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_empty_twin_rust_async(EmptyTwinRustAsync raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_empty_twin_rust_async_sse(
      EmptyTwinRustAsyncSse raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_empty_twin_sse(EmptyTwinSse raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_empty_twin_sync(EmptyTwinSync raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_empty_twin_sync_sse(EmptyTwinSyncSse raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal raw) {
    if (raw is EnumDartOpaqueTwinNormal_Primitive) {
      return [0, cst_encode_i_32(raw.field0)];
    }
    if (raw is EnumDartOpaqueTwinNormal_Opaque) {
      return [1, cst_encode_DartOpaque(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync raw) {
    if (raw is EnumDartOpaqueTwinRustAsync_Primitive) {
      return [0, cst_encode_i_32(raw.field0)];
    }
    if (raw is EnumDartOpaqueTwinRustAsync_Opaque) {
      return [1, cst_encode_DartOpaque(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_dart_opaque_twin_rust_async_sse(
      EnumDartOpaqueTwinRustAsyncSse raw) {
    if (raw is EnumDartOpaqueTwinRustAsyncSse_Primitive) {
      return [0, cst_encode_i_32(raw.field0)];
    }
    if (raw is EnumDartOpaqueTwinRustAsyncSse_Opaque) {
      return [1, cst_encode_DartOpaque(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_dart_opaque_twin_sse(
      EnumDartOpaqueTwinSse raw) {
    if (raw is EnumDartOpaqueTwinSse_Primitive) {
      return [0, cst_encode_i_32(raw.field0)];
    }
    if (raw is EnumDartOpaqueTwinSse_Opaque) {
      return [1, cst_encode_DartOpaque(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync raw) {
    if (raw is EnumDartOpaqueTwinSync_Primitive) {
      return [0, cst_encode_i_32(raw.field0)];
    }
    if (raw is EnumDartOpaqueTwinSync_Opaque) {
      return [1, cst_encode_DartOpaque(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_dart_opaque_twin_sync_sse(
      EnumDartOpaqueTwinSyncSse raw) {
    if (raw is EnumDartOpaqueTwinSyncSse_Primitive) {
      return [0, cst_encode_i_32(raw.field0)];
    }
    if (raw is EnumDartOpaqueTwinSyncSse_Opaque) {
      return [1, cst_encode_DartOpaque(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_opaque_twin_normal(EnumOpaqueTwinNormal raw) {
    if (raw is EnumOpaqueTwinNormal_Struct) {
      return [0, cst_encode_RustOpaque_hide_data(raw.field0)];
    }
    if (raw is EnumOpaqueTwinNormal_Primitive) {
      return [1, cst_encode_RustOpaque_i_32(raw.field0)];
    }
    if (raw is EnumOpaqueTwinNormal_TraitObj) {
      return [2, cst_encode_RustOpaque_box_dynDartDebugTwinNormal(raw.field0)];
    }
    if (raw is EnumOpaqueTwinNormal_Mutex) {
      return [3, cst_encode_RustOpaque_MutexHideData(raw.field0)];
    }
    if (raw is EnumOpaqueTwinNormal_RwLock) {
      return [4, cst_encode_RustOpaque_RwLockHideData(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync raw) {
    if (raw is EnumOpaqueTwinRustAsync_Struct) {
      return [0, cst_encode_RustOpaque_hide_data(raw.field0)];
    }
    if (raw is EnumOpaqueTwinRustAsync_Primitive) {
      return [1, cst_encode_RustOpaque_i_32(raw.field0)];
    }
    if (raw is EnumOpaqueTwinRustAsync_TraitObj) {
      return [
        2,
        cst_encode_RustOpaque_box_dynDartDebugTwinRustAsync(raw.field0)
      ];
    }
    if (raw is EnumOpaqueTwinRustAsync_Mutex) {
      return [3, cst_encode_RustOpaque_MutexHideData(raw.field0)];
    }
    if (raw is EnumOpaqueTwinRustAsync_RwLock) {
      return [4, cst_encode_RustOpaque_RwLockHideData(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_opaque_twin_rust_async_sse(
      EnumOpaqueTwinRustAsyncSse raw) {
    if (raw is EnumOpaqueTwinRustAsyncSse_Struct) {
      return [0, cst_encode_RustOpaque_hide_data(raw.field0)];
    }
    if (raw is EnumOpaqueTwinRustAsyncSse_Primitive) {
      return [1, cst_encode_RustOpaque_i_32(raw.field0)];
    }
    if (raw is EnumOpaqueTwinRustAsyncSse_TraitObj) {
      return [
        2,
        cst_encode_RustOpaque_box_dynDartDebugTwinRustAsyncSse(raw.field0)
      ];
    }
    if (raw is EnumOpaqueTwinRustAsyncSse_Mutex) {
      return [3, cst_encode_RustOpaque_MutexHideData(raw.field0)];
    }
    if (raw is EnumOpaqueTwinRustAsyncSse_RwLock) {
      return [4, cst_encode_RustOpaque_RwLockHideData(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_opaque_twin_sse(EnumOpaqueTwinSse raw) {
    if (raw is EnumOpaqueTwinSse_Struct) {
      return [0, cst_encode_RustOpaque_hide_data(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSse_Primitive) {
      return [1, cst_encode_RustOpaque_i_32(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSse_TraitObj) {
      return [2, cst_encode_RustOpaque_box_dynDartDebugTwinSse(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSse_Mutex) {
      return [3, cst_encode_RustOpaque_MutexHideData(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSse_RwLock) {
      return [4, cst_encode_RustOpaque_RwLockHideData(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_opaque_twin_sync(EnumOpaqueTwinSync raw) {
    if (raw is EnumOpaqueTwinSync_Struct) {
      return [0, cst_encode_RustOpaque_hide_data(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSync_Primitive) {
      return [1, cst_encode_RustOpaque_i_32(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSync_TraitObj) {
      return [2, cst_encode_RustOpaque_box_dynDartDebugTwinSync(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSync_Mutex) {
      return [3, cst_encode_RustOpaque_MutexHideData(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSync_RwLock) {
      return [4, cst_encode_RustOpaque_RwLockHideData(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_opaque_twin_sync_sse(
      EnumOpaqueTwinSyncSse raw) {
    if (raw is EnumOpaqueTwinSyncSse_Struct) {
      return [0, cst_encode_RustOpaque_hide_data(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSyncSse_Primitive) {
      return [1, cst_encode_RustOpaque_i_32(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSyncSse_TraitObj) {
      return [2, cst_encode_RustOpaque_box_dynDartDebugTwinSyncSse(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSyncSse_Mutex) {
      return [3, cst_encode_RustOpaque_MutexHideData(raw.field0)];
    }
    if (raw is EnumOpaqueTwinSyncSse_RwLock) {
      return [4, cst_encode_RustOpaque_RwLockHideData(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal raw) {
    if (raw is EnumWithItemMixedTwinNormal_A) {
      return [0];
    }
    if (raw is EnumWithItemMixedTwinNormal_B) {
      return [1, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemMixedTwinNormal_C) {
      return [2, cst_encode_String(raw.cField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync raw) {
    if (raw is EnumWithItemMixedTwinRustAsync_A) {
      return [0];
    }
    if (raw is EnumWithItemMixedTwinRustAsync_B) {
      return [1, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemMixedTwinRustAsync_C) {
      return [2, cst_encode_String(raw.cField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_mixed_twin_rust_async_sse(
      EnumWithItemMixedTwinRustAsyncSse raw) {
    if (raw is EnumWithItemMixedTwinRustAsyncSse_A) {
      return [0];
    }
    if (raw is EnumWithItemMixedTwinRustAsyncSse_B) {
      return [1, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemMixedTwinRustAsyncSse_C) {
      return [2, cst_encode_String(raw.cField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_mixed_twin_sse(
      EnumWithItemMixedTwinSse raw) {
    if (raw is EnumWithItemMixedTwinSse_A) {
      return [0];
    }
    if (raw is EnumWithItemMixedTwinSse_B) {
      return [1, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemMixedTwinSse_C) {
      return [2, cst_encode_String(raw.cField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync raw) {
    if (raw is EnumWithItemMixedTwinSync_A) {
      return [0];
    }
    if (raw is EnumWithItemMixedTwinSync_B) {
      return [1, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemMixedTwinSync_C) {
      return [2, cst_encode_String(raw.cField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_mixed_twin_sync_sse(
      EnumWithItemMixedTwinSyncSse raw) {
    if (raw is EnumWithItemMixedTwinSyncSse_A) {
      return [0];
    }
    if (raw is EnumWithItemMixedTwinSyncSse_B) {
      return [1, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemMixedTwinSyncSse_C) {
      return [2, cst_encode_String(raw.cField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal raw) {
    if (raw is EnumWithItemStructTwinNormal_A) {
      return [0, cst_encode_list_prim_u_8(raw.aField)];
    }
    if (raw is EnumWithItemStructTwinNormal_B) {
      return [1, cst_encode_list_prim_i_32(raw.bField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync raw) {
    if (raw is EnumWithItemStructTwinRustAsync_A) {
      return [0, cst_encode_list_prim_u_8(raw.aField)];
    }
    if (raw is EnumWithItemStructTwinRustAsync_B) {
      return [1, cst_encode_list_prim_i_32(raw.bField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_struct_twin_rust_async_sse(
      EnumWithItemStructTwinRustAsyncSse raw) {
    if (raw is EnumWithItemStructTwinRustAsyncSse_A) {
      return [0, cst_encode_list_prim_u_8(raw.aField)];
    }
    if (raw is EnumWithItemStructTwinRustAsyncSse_B) {
      return [1, cst_encode_list_prim_i_32(raw.bField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_struct_twin_sse(
      EnumWithItemStructTwinSse raw) {
    if (raw is EnumWithItemStructTwinSse_A) {
      return [0, cst_encode_list_prim_u_8(raw.aField)];
    }
    if (raw is EnumWithItemStructTwinSse_B) {
      return [1, cst_encode_list_prim_i_32(raw.bField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync raw) {
    if (raw is EnumWithItemStructTwinSync_A) {
      return [0, cst_encode_list_prim_u_8(raw.aField)];
    }
    if (raw is EnumWithItemStructTwinSync_B) {
      return [1, cst_encode_list_prim_i_32(raw.bField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_struct_twin_sync_sse(
      EnumWithItemStructTwinSyncSse raw) {
    if (raw is EnumWithItemStructTwinSyncSse_A) {
      return [0, cst_encode_list_prim_u_8(raw.aField)];
    }
    if (raw is EnumWithItemStructTwinSyncSse_B) {
      return [1, cst_encode_list_prim_i_32(raw.bField)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal raw) {
    if (raw is EnumWithItemTupleTwinNormal_A) {
      return [0, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemTupleTwinNormal_B) {
      return [1, cst_encode_list_prim_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync raw) {
    if (raw is EnumWithItemTupleTwinRustAsync_A) {
      return [0, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemTupleTwinRustAsync_B) {
      return [1, cst_encode_list_prim_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_tuple_twin_rust_async_sse(
      EnumWithItemTupleTwinRustAsyncSse raw) {
    if (raw is EnumWithItemTupleTwinRustAsyncSse_A) {
      return [0, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemTupleTwinRustAsyncSse_B) {
      return [1, cst_encode_list_prim_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_tuple_twin_sse(
      EnumWithItemTupleTwinSse raw) {
    if (raw is EnumWithItemTupleTwinSse_A) {
      return [0, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemTupleTwinSse_B) {
      return [1, cst_encode_list_prim_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync raw) {
    if (raw is EnumWithItemTupleTwinSync_A) {
      return [0, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemTupleTwinSync_B) {
      return [1, cst_encode_list_prim_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_enum_with_item_tuple_twin_sync_sse(
      EnumWithItemTupleTwinSyncSse raw) {
    if (raw is EnumWithItemTupleTwinSyncSse_A) {
      return [0, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is EnumWithItemTupleTwinSyncSse_B) {
      return [1, cst_encode_list_prim_i_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_event_twin_normal(EventTwinNormal raw) {
    return [cst_encode_String(raw.address), cst_encode_String(raw.payload)];
  }

  @protected
  List<dynamic> cst_encode_event_twin_rust_async(EventTwinRustAsync raw) {
    return [cst_encode_String(raw.address), cst_encode_String(raw.payload)];
  }

  @protected
  List<dynamic> cst_encode_event_twin_rust_async_sse(
      EventTwinRustAsyncSse raw) {
    return [cst_encode_String(raw.address), cst_encode_String(raw.payload)];
  }

  @protected
  List<dynamic> cst_encode_event_twin_sse(EventTwinSse raw) {
    return [cst_encode_String(raw.address), cst_encode_String(raw.payload)];
  }

  @protected
  List<dynamic> cst_encode_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal raw) {
    return [
      cst_encode_opt_box_autoadd_i_32(raw.int32),
      cst_encode_opt_box_autoadd_i_64(raw.int64),
      cst_encode_opt_box_autoadd_f_64(raw.float64),
      cst_encode_opt_box_autoadd_bool(raw.boolean),
      cst_encode_opt_list_prim_u_8(raw.zerocopy),
      cst_encode_opt_list_prim_i_8(raw.int8List),
      cst_encode_opt_list_prim_u_8(raw.uint8List),
      cst_encode_opt_list_prim_i_32(raw.int32List),
      cst_encode_opt_list_prim_f_32(raw.float32List),
      cst_encode_opt_list_prim_f_64(raw.float64List),
      cst_encode_opt_list_attribute_twin_normal(raw.attributes),
      cst_encode_list_opt_box_autoadd_attribute_twin_normal(
          raw.attributesNullable),
      cst_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
          raw.nullableAttributes),
      cst_encode_opt_box_autoadd_new_type_int_twin_normal(raw.newtypeint)
    ];
  }

  @protected
  List<dynamic> cst_encode_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync raw) {
    return [
      cst_encode_opt_box_autoadd_i_32(raw.int32),
      cst_encode_opt_box_autoadd_i_64(raw.int64),
      cst_encode_opt_box_autoadd_f_64(raw.float64),
      cst_encode_opt_box_autoadd_bool(raw.boolean),
      cst_encode_opt_list_prim_u_8(raw.zerocopy),
      cst_encode_opt_list_prim_i_8(raw.int8List),
      cst_encode_opt_list_prim_u_8(raw.uint8List),
      cst_encode_opt_list_prim_i_32(raw.int32List),
      cst_encode_opt_list_prim_f_32(raw.float32List),
      cst_encode_opt_list_prim_f_64(raw.float64List),
      cst_encode_opt_list_attribute_twin_rust_async(raw.attributes),
      cst_encode_list_opt_box_autoadd_attribute_twin_rust_async(
          raw.attributesNullable),
      cst_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          raw.nullableAttributes),
      cst_encode_opt_box_autoadd_new_type_int_twin_rust_async(raw.newtypeint)
    ];
  }

  @protected
  List<dynamic> cst_encode_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse raw) {
    return [
      cst_encode_opt_box_autoadd_i_32(raw.int32),
      cst_encode_opt_box_autoadd_i_64(raw.int64),
      cst_encode_opt_box_autoadd_f_64(raw.float64),
      cst_encode_opt_box_autoadd_bool(raw.boolean),
      cst_encode_opt_list_prim_u_8(raw.zerocopy),
      cst_encode_opt_list_prim_i_8(raw.int8List),
      cst_encode_opt_list_prim_u_8(raw.uint8List),
      cst_encode_opt_list_prim_i_32(raw.int32List),
      cst_encode_opt_list_prim_f_32(raw.float32List),
      cst_encode_opt_list_prim_f_64(raw.float64List),
      cst_encode_opt_list_attribute_twin_rust_async_sse(raw.attributes),
      cst_encode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          raw.attributesNullable),
      cst_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          raw.nullableAttributes),
      cst_encode_opt_box_autoadd_new_type_int_twin_rust_async_sse(
          raw.newtypeint)
    ];
  }

  @protected
  List<dynamic> cst_encode_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse raw) {
    return [
      cst_encode_opt_box_autoadd_i_32(raw.int32),
      cst_encode_opt_box_autoadd_i_64(raw.int64),
      cst_encode_opt_box_autoadd_f_64(raw.float64),
      cst_encode_opt_box_autoadd_bool(raw.boolean),
      cst_encode_opt_list_prim_u_8(raw.zerocopy),
      cst_encode_opt_list_prim_i_8(raw.int8List),
      cst_encode_opt_list_prim_u_8(raw.uint8List),
      cst_encode_opt_list_prim_i_32(raw.int32List),
      cst_encode_opt_list_prim_f_32(raw.float32List),
      cst_encode_opt_list_prim_f_64(raw.float64List),
      cst_encode_opt_list_attribute_twin_sse(raw.attributes),
      cst_encode_list_opt_box_autoadd_attribute_twin_sse(
          raw.attributesNullable),
      cst_encode_opt_list_opt_box_autoadd_attribute_twin_sse(
          raw.nullableAttributes),
      cst_encode_opt_box_autoadd_new_type_int_twin_sse(raw.newtypeint)
    ];
  }

  @protected
  List<dynamic> cst_encode_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync raw) {
    return [
      cst_encode_opt_box_autoadd_i_32(raw.int32),
      cst_encode_opt_box_autoadd_i_64(raw.int64),
      cst_encode_opt_box_autoadd_f_64(raw.float64),
      cst_encode_opt_box_autoadd_bool(raw.boolean),
      cst_encode_opt_list_prim_u_8(raw.zerocopy),
      cst_encode_opt_list_prim_i_8(raw.int8List),
      cst_encode_opt_list_prim_u_8(raw.uint8List),
      cst_encode_opt_list_prim_i_32(raw.int32List),
      cst_encode_opt_list_prim_f_32(raw.float32List),
      cst_encode_opt_list_prim_f_64(raw.float64List),
      cst_encode_opt_list_attribute_twin_sync(raw.attributes),
      cst_encode_list_opt_box_autoadd_attribute_twin_sync(
          raw.attributesNullable),
      cst_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
          raw.nullableAttributes),
      cst_encode_opt_box_autoadd_new_type_int_twin_sync(raw.newtypeint)
    ];
  }

  @protected
  List<dynamic> cst_encode_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse raw) {
    return [
      cst_encode_opt_box_autoadd_i_32(raw.int32),
      cst_encode_opt_box_autoadd_i_64(raw.int64),
      cst_encode_opt_box_autoadd_f_64(raw.float64),
      cst_encode_opt_box_autoadd_bool(raw.boolean),
      cst_encode_opt_list_prim_u_8(raw.zerocopy),
      cst_encode_opt_list_prim_i_8(raw.int8List),
      cst_encode_opt_list_prim_u_8(raw.uint8List),
      cst_encode_opt_list_prim_i_32(raw.int32List),
      cst_encode_opt_list_prim_f_32(raw.float32List),
      cst_encode_opt_list_prim_f_64(raw.float64List),
      cst_encode_opt_list_attribute_twin_sync_sse(raw.attributes),
      cst_encode_list_opt_box_autoadd_attribute_twin_sync_sse(
          raw.attributesNullable),
      cst_encode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(
          raw.nullableAttributes),
      cst_encode_opt_box_autoadd_new_type_int_twin_sync_sse(raw.newtypeint)
    ];
  }

  @protected
  Float64List cst_encode_f_64_array_16(F64Array16 raw) {
    return Float64List.fromList(raw);
  }

  @protected
  List<dynamic> cst_encode_feature_chrono_twin_normal(
      FeatureChronoTwinNormal raw) {
    return [
      cst_encode_Chrono_Utc(raw.utc),
      cst_encode_Chrono_Local(raw.local),
      cst_encode_Chrono_Duration(raw.duration),
      cst_encode_Chrono_Naive(raw.naive)
    ];
  }

  @protected
  List<dynamic> cst_encode_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync raw) {
    return [
      cst_encode_Chrono_Utc(raw.utc),
      cst_encode_Chrono_Local(raw.local),
      cst_encode_Chrono_Duration(raw.duration),
      cst_encode_Chrono_Naive(raw.naive)
    ];
  }

  @protected
  List<dynamic> cst_encode_feature_chrono_twin_sync(FeatureChronoTwinSync raw) {
    return [
      cst_encode_Chrono_Utc(raw.utc),
      cst_encode_Chrono_Local(raw.local),
      cst_encode_Chrono_Duration(raw.duration),
      cst_encode_Chrono_Naive(raw.naive)
    ];
  }

  @protected
  List<dynamic> cst_encode_feature_uuid_twin_normal(FeatureUuidTwinNormal raw) {
    return [cst_encode_Uuid(raw.one)];
  }

  @protected
  List<dynamic> cst_encode_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync raw) {
    return [cst_encode_Uuid(raw.one)];
  }

  @protected
  List<dynamic> cst_encode_feature_uuid_twin_sync(FeatureUuidTwinSync raw) {
    return [cst_encode_Uuid(raw.one)];
  }

  @protected
  List<dynamic> cst_encode_feed_id_twin_normal(FeedIdTwinNormal raw) {
    return [cst_encode_u_8_array_8(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_feed_id_twin_rust_async(FeedIdTwinRustAsync raw) {
    return [cst_encode_u_8_array_8(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_feed_id_twin_rust_async_sse(
      FeedIdTwinRustAsyncSse raw) {
    return [cst_encode_u_8_array_8(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_feed_id_twin_sse(FeedIdTwinSse raw) {
    return [cst_encode_u_8_array_8(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_feed_id_twin_sync(FeedIdTwinSync raw) {
    return [cst_encode_u_8_array_8(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_feed_id_twin_sync_sse(FeedIdTwinSyncSse raw) {
    return [cst_encode_u_8_array_8(raw.field0)];
  }

  @protected
  Int32List cst_encode_i_32_array_2(I32Array2 raw) {
    return Int32List.fromList(raw);
  }

  @protected
  Object cst_encode_i_64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  List<dynamic> cst_encode_kitchen_sink_twin_normal(KitchenSinkTwinNormal raw) {
    if (raw is KitchenSinkTwinNormal_Empty) {
      return [0];
    }
    if (raw is KitchenSinkTwinNormal_Primitives) {
      return [
        1,
        cst_encode_i_32(raw.int32),
        cst_encode_f_64(raw.float64),
        cst_encode_bool(raw.boolean)
      ];
    }
    if (raw is KitchenSinkTwinNormal_Nested) {
      return [
        2,
        cst_encode_i_32(raw.field0),
        cst_encode_box_kitchen_sink_twin_normal(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinNormal_Optional) {
      return [
        3,
        cst_encode_opt_box_autoadd_i_32(raw.field0),
        cst_encode_opt_box_autoadd_i_32(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinNormal_Buffer) {
      return [4, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is KitchenSinkTwinNormal_Enums) {
      return [5, cst_encode_weekdays_twin_normal(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync raw) {
    if (raw is KitchenSinkTwinRustAsync_Empty) {
      return [0];
    }
    if (raw is KitchenSinkTwinRustAsync_Primitives) {
      return [
        1,
        cst_encode_i_32(raw.int32),
        cst_encode_f_64(raw.float64),
        cst_encode_bool(raw.boolean)
      ];
    }
    if (raw is KitchenSinkTwinRustAsync_Nested) {
      return [
        2,
        cst_encode_i_32(raw.field0),
        cst_encode_box_kitchen_sink_twin_rust_async(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinRustAsync_Optional) {
      return [
        3,
        cst_encode_opt_box_autoadd_i_32(raw.field0),
        cst_encode_opt_box_autoadd_i_32(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinRustAsync_Buffer) {
      return [4, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is KitchenSinkTwinRustAsync_Enums) {
      return [5, cst_encode_weekdays_twin_rust_async(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_kitchen_sink_twin_rust_async_sse(
      KitchenSinkTwinRustAsyncSse raw) {
    if (raw is KitchenSinkTwinRustAsyncSse_Empty) {
      return [0];
    }
    if (raw is KitchenSinkTwinRustAsyncSse_Primitives) {
      return [
        1,
        cst_encode_i_32(raw.int32),
        cst_encode_f_64(raw.float64),
        cst_encode_bool(raw.boolean)
      ];
    }
    if (raw is KitchenSinkTwinRustAsyncSse_Nested) {
      return [
        2,
        cst_encode_i_32(raw.field0),
        cst_encode_box_kitchen_sink_twin_rust_async_sse(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinRustAsyncSse_Optional) {
      return [
        3,
        cst_encode_opt_box_autoadd_i_32(raw.field0),
        cst_encode_opt_box_autoadd_i_32(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinRustAsyncSse_Buffer) {
      return [4, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is KitchenSinkTwinRustAsyncSse_Enums) {
      return [5, cst_encode_weekdays_twin_rust_async_sse(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_kitchen_sink_twin_sse(KitchenSinkTwinSse raw) {
    if (raw is KitchenSinkTwinSse_Empty) {
      return [0];
    }
    if (raw is KitchenSinkTwinSse_Primitives) {
      return [
        1,
        cst_encode_i_32(raw.int32),
        cst_encode_f_64(raw.float64),
        cst_encode_bool(raw.boolean)
      ];
    }
    if (raw is KitchenSinkTwinSse_Nested) {
      return [
        2,
        cst_encode_i_32(raw.field0),
        cst_encode_box_kitchen_sink_twin_sse(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinSse_Optional) {
      return [
        3,
        cst_encode_opt_box_autoadd_i_32(raw.field0),
        cst_encode_opt_box_autoadd_i_32(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinSse_Buffer) {
      return [4, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is KitchenSinkTwinSse_Enums) {
      return [5, cst_encode_weekdays_twin_sse(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_kitchen_sink_twin_sync(KitchenSinkTwinSync raw) {
    if (raw is KitchenSinkTwinSync_Empty) {
      return [0];
    }
    if (raw is KitchenSinkTwinSync_Primitives) {
      return [
        1,
        cst_encode_i_32(raw.int32),
        cst_encode_f_64(raw.float64),
        cst_encode_bool(raw.boolean)
      ];
    }
    if (raw is KitchenSinkTwinSync_Nested) {
      return [
        2,
        cst_encode_i_32(raw.field0),
        cst_encode_box_kitchen_sink_twin_sync(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinSync_Optional) {
      return [
        3,
        cst_encode_opt_box_autoadd_i_32(raw.field0),
        cst_encode_opt_box_autoadd_i_32(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinSync_Buffer) {
      return [4, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is KitchenSinkTwinSync_Enums) {
      return [5, cst_encode_weekdays_twin_sync(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_kitchen_sink_twin_sync_sse(
      KitchenSinkTwinSyncSse raw) {
    if (raw is KitchenSinkTwinSyncSse_Empty) {
      return [0];
    }
    if (raw is KitchenSinkTwinSyncSse_Primitives) {
      return [
        1,
        cst_encode_i_32(raw.int32),
        cst_encode_f_64(raw.float64),
        cst_encode_bool(raw.boolean)
      ];
    }
    if (raw is KitchenSinkTwinSyncSse_Nested) {
      return [
        2,
        cst_encode_i_32(raw.field0),
        cst_encode_box_kitchen_sink_twin_sync_sse(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinSyncSse_Optional) {
      return [
        3,
        cst_encode_opt_box_autoadd_i_32(raw.field0),
        cst_encode_opt_box_autoadd_i_32(raw.field1)
      ];
    }
    if (raw is KitchenSinkTwinSyncSse_Buffer) {
      return [4, cst_encode_list_prim_u_8(raw.field0)];
    }
    if (raw is KitchenSinkTwinSyncSse_Enums) {
      return [5, cst_encode_weekdays_twin_sync_sse(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_list_Chrono_Duration(List<Duration> raw) {
    return raw.map(cst_encode_Chrono_Duration).toList();
  }

  @protected
  List<dynamic> cst_encode_list_Chrono_Naive(List<DateTime> raw) {
    return raw.map(cst_encode_Chrono_Naive).toList();
  }

  @protected
  List<dynamic> cst_encode_list_DartOpaque(List<Object> raw) {
    return raw.map(cst_encode_DartOpaque).toList();
  }

  @protected
  List<dynamic> cst_encode_list_RustOpaque_hide_data(List<HideData> raw) {
    return raw.map(cst_encode_RustOpaque_hide_data).toList();
  }

  @protected
  List<dynamic> cst_encode_list_String(List<String> raw) {
    return raw.map(cst_encode_String).toList();
  }

  @protected
  List<dynamic> cst_encode_list_application_env_var(
      List<ApplicationEnvVar> raw) {
    return raw.map(cst_encode_application_env_var).toList();
  }

  @protected
  List<dynamic> cst_encode_list_attribute_twin_normal(
      List<AttributeTwinNormal> raw) {
    return raw.map(cst_encode_attribute_twin_normal).toList();
  }

  @protected
  List<dynamic> cst_encode_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync> raw) {
    return raw.map(cst_encode_attribute_twin_rust_async).toList();
  }

  @protected
  List<dynamic> cst_encode_list_attribute_twin_rust_async_sse(
      List<AttributeTwinRustAsyncSse> raw) {
    return raw.map(cst_encode_attribute_twin_rust_async_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_attribute_twin_sse(List<AttributeTwinSse> raw) {
    return raw.map(cst_encode_attribute_twin_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_attribute_twin_sync(
      List<AttributeTwinSync> raw) {
    return raw.map(cst_encode_attribute_twin_sync).toList();
  }

  @protected
  List<dynamic> cst_encode_list_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse> raw) {
    return raw.map(cst_encode_attribute_twin_sync_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_bool(List<bool> raw) {
    return raw.map(cst_encode_bool).toList();
  }

  @protected
  List<dynamic> cst_encode_list_my_size(List<MySize> raw) {
    return raw.map(cst_encode_my_size).toList();
  }

  @protected
  List<dynamic> cst_encode_list_my_tree_node_twin_normal(
      List<MyTreeNodeTwinNormal> raw) {
    return raw.map(cst_encode_my_tree_node_twin_normal).toList();
  }

  @protected
  List<dynamic> cst_encode_list_my_tree_node_twin_rust_async(
      List<MyTreeNodeTwinRustAsync> raw) {
    return raw.map(cst_encode_my_tree_node_twin_rust_async).toList();
  }

  @protected
  List<dynamic> cst_encode_list_my_tree_node_twin_rust_async_sse(
      List<MyTreeNodeTwinRustAsyncSse> raw) {
    return raw.map(cst_encode_my_tree_node_twin_rust_async_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_my_tree_node_twin_sse(
      List<MyTreeNodeTwinSse> raw) {
    return raw.map(cst_encode_my_tree_node_twin_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_my_tree_node_twin_sync(
      List<MyTreeNodeTwinSync> raw) {
    return raw.map(cst_encode_my_tree_node_twin_sync).toList();
  }

  @protected
  List<dynamic> cst_encode_list_my_tree_node_twin_sync_sse(
      List<MyTreeNodeTwinSyncSse> raw) {
    return raw.map(cst_encode_my_tree_node_twin_sync_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_String(List<String?> raw) {
    return raw.map(cst_encode_opt_String).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_attribute_twin_normal).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?> raw) {
    return raw
        .map(cst_encode_opt_box_autoadd_attribute_twin_rust_async)
        .toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_attribute_twin_rust_async_sse(
      List<AttributeTwinRustAsyncSse?> raw) {
    return raw
        .map(cst_encode_opt_box_autoadd_attribute_twin_rust_async_sse)
        .toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_attribute_twin_sse(
      List<AttributeTwinSse?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_attribute_twin_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_attribute_twin_sync).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_attribute_twin_sync_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_i_32(List<int?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_i_32).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_weekdays_twin_normal(
      List<WeekdaysTwinNormal?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_weekdays_twin_normal).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync?> raw) {
    return raw
        .map(cst_encode_opt_box_autoadd_weekdays_twin_rust_async)
        .toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(
      List<WeekdaysTwinRustAsyncSse?> raw) {
    return raw
        .map(cst_encode_opt_box_autoadd_weekdays_twin_rust_async_sse)
        .toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_weekdays_twin_sse(
      List<WeekdaysTwinSse?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_weekdays_twin_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_weekdays_twin_sync(
      List<WeekdaysTwinSync?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_weekdays_twin_sync).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_box_autoadd_weekdays_twin_sync_sse(
      List<WeekdaysTwinSyncSse?> raw) {
    return raw.map(cst_encode_opt_box_autoadd_weekdays_twin_sync_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_opt_list_prim_i_32(List<Int32List?> raw) {
    return raw.map(cst_encode_opt_list_prim_i_32).toList();
  }

  @protected
  Float32List cst_encode_list_prim_f_32(Float32List raw) {
    return raw;
  }

  @protected
  Float64List cst_encode_list_prim_f_64(Float64List raw) {
    return raw;
  }

  @protected
  Int16List cst_encode_list_prim_i_16(Int16List raw) {
    return raw;
  }

  @protected
  Int32List cst_encode_list_prim_i_32(Int32List raw) {
    return raw;
  }

  @protected
  Object /* BigInt64Array */ cst_encode_list_prim_i_64(Int64List raw) {
    return raw.inner;
  }

  @protected
  Int8List cst_encode_list_prim_i_8(Int8List raw) {
    return raw;
  }

  @protected
  Uint16List cst_encode_list_prim_u_16(Uint16List raw) {
    return raw;
  }

  @protected
  Uint32List cst_encode_list_prim_u_32(Uint32List raw) {
    return raw;
  }

  @protected
  Object /* BigInt64Array */ cst_encode_list_prim_u_64(Uint64List raw) {
    return raw.inner;
  }

  @protected
  Uint8List cst_encode_list_prim_u_8(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_list_record_string_i_32(List<(String, int)> raw) {
    return raw.map(cst_encode_record_string_i_32).toList();
  }

  @protected
  List<dynamic> cst_encode_list_test_id_twin_normal(
      List<TestIdTwinNormal> raw) {
    return raw.map(cst_encode_test_id_twin_normal).toList();
  }

  @protected
  List<dynamic> cst_encode_list_test_id_twin_rust_async(
      List<TestIdTwinRustAsync> raw) {
    return raw.map(cst_encode_test_id_twin_rust_async).toList();
  }

  @protected
  List<dynamic> cst_encode_list_test_id_twin_rust_async_sse(
      List<TestIdTwinRustAsyncSse> raw) {
    return raw.map(cst_encode_test_id_twin_rust_async_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_test_id_twin_sse(List<TestIdTwinSse> raw) {
    return raw.map(cst_encode_test_id_twin_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_test_id_twin_sync(List<TestIdTwinSync> raw) {
    return raw.map(cst_encode_test_id_twin_sync).toList();
  }

  @protected
  List<dynamic> cst_encode_list_test_id_twin_sync_sse(
      List<TestIdTwinSyncSse> raw) {
    return raw.map(cst_encode_test_id_twin_sync_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_weekdays_twin_normal(
      List<WeekdaysTwinNormal> raw) {
    return raw.map(cst_encode_weekdays_twin_normal).toList();
  }

  @protected
  List<dynamic> cst_encode_list_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync> raw) {
    return raw.map(cst_encode_weekdays_twin_rust_async).toList();
  }

  @protected
  List<dynamic> cst_encode_list_weekdays_twin_rust_async_sse(
      List<WeekdaysTwinRustAsyncSse> raw) {
    return raw.map(cst_encode_weekdays_twin_rust_async_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_weekdays_twin_sse(List<WeekdaysTwinSse> raw) {
    return raw.map(cst_encode_weekdays_twin_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_list_weekdays_twin_sync(List<WeekdaysTwinSync> raw) {
    return raw.map(cst_encode_weekdays_twin_sync).toList();
  }

  @protected
  List<dynamic> cst_encode_list_weekdays_twin_sync_sse(
      List<WeekdaysTwinSyncSse> raw) {
    return raw.map(cst_encode_weekdays_twin_sync_sse).toList();
  }

  @protected
  List<dynamic> cst_encode_macro_struct(MacroStruct raw) {
    return [cst_encode_i_32(raw.data)];
  }

  @protected
  List<dynamic> cst_encode_measure_twin_normal(MeasureTwinNormal raw) {
    if (raw is MeasureTwinNormal_Speed) {
      return [0, cst_encode_box_speed_twin_normal(raw.field0)];
    }
    if (raw is MeasureTwinNormal_Distance) {
      return [1, cst_encode_box_distance_twin_normal(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_measure_twin_rust_async(MeasureTwinRustAsync raw) {
    if (raw is MeasureTwinRustAsync_Speed) {
      return [0, cst_encode_box_speed_twin_rust_async(raw.field0)];
    }
    if (raw is MeasureTwinRustAsync_Distance) {
      return [1, cst_encode_box_distance_twin_rust_async(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_measure_twin_rust_async_sse(
      MeasureTwinRustAsyncSse raw) {
    if (raw is MeasureTwinRustAsyncSse_Speed) {
      return [0, cst_encode_box_speed_twin_rust_async_sse(raw.field0)];
    }
    if (raw is MeasureTwinRustAsyncSse_Distance) {
      return [1, cst_encode_box_distance_twin_rust_async_sse(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_measure_twin_sse(MeasureTwinSse raw) {
    if (raw is MeasureTwinSse_Speed) {
      return [0, cst_encode_box_speed_twin_sse(raw.field0)];
    }
    if (raw is MeasureTwinSse_Distance) {
      return [1, cst_encode_box_distance_twin_sse(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_measure_twin_sync(MeasureTwinSync raw) {
    if (raw is MeasureTwinSync_Speed) {
      return [0, cst_encode_box_speed_twin_sync(raw.field0)];
    }
    if (raw is MeasureTwinSync_Distance) {
      return [1, cst_encode_box_distance_twin_sync(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_measure_twin_sync_sse(MeasureTwinSyncSse raw) {
    if (raw is MeasureTwinSyncSse_Speed) {
      return [0, cst_encode_box_speed_twin_sync_sse(raw.field0)];
    }
    if (raw is MeasureTwinSyncSse_Distance) {
      return [1, cst_encode_box_distance_twin_sync_sse(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_message_id_twin_normal(MessageIdTwinNormal raw) {
    return [cst_encode_u_8_array_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_message_id_twin_rust_async(
      MessageIdTwinRustAsync raw) {
    return [cst_encode_u_8_array_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_message_id_twin_rust_async_sse(
      MessageIdTwinRustAsyncSse raw) {
    return [cst_encode_u_8_array_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_message_id_twin_sse(MessageIdTwinSse raw) {
    return [cst_encode_u_8_array_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_message_id_twin_sync(MessageIdTwinSync raw) {
    return [cst_encode_u_8_array_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_message_id_twin_sync_sse(MessageIdTwinSyncSse raw) {
    return [cst_encode_u_8_array_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal raw) {
    return [
      cst_encode_my_tree_node_twin_normal(raw.treeNode),
      cst_encode_weekdays_twin_normal(raw.weekday)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync raw) {
    return [
      cst_encode_my_tree_node_twin_rust_async(raw.treeNode),
      cst_encode_weekdays_twin_rust_async(raw.weekday)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_nested_struct_twin_rust_async_sse(
      MyNestedStructTwinRustAsyncSse raw) {
    return [
      cst_encode_my_tree_node_twin_rust_async_sse(raw.treeNode),
      cst_encode_weekdays_twin_rust_async_sse(raw.weekday)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_nested_struct_twin_sse(
      MyNestedStructTwinSse raw) {
    return [
      cst_encode_my_tree_node_twin_sse(raw.treeNode),
      cst_encode_weekdays_twin_sse(raw.weekday)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_nested_struct_twin_sync(
      MyNestedStructTwinSync raw) {
    return [
      cst_encode_my_tree_node_twin_sync(raw.treeNode),
      cst_encode_weekdays_twin_sync(raw.weekday)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_nested_struct_twin_sync_sse(
      MyNestedStructTwinSyncSse raw) {
    return [
      cst_encode_my_tree_node_twin_sync_sse(raw.treeNode),
      cst_encode_weekdays_twin_sync_sse(raw.weekday)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_size(MySize raw) {
    return [cst_encode_i_32(raw.width), cst_encode_i_32(raw.height)];
  }

  @protected
  List<dynamic> cst_encode_my_struct(MyStruct raw) {
    return [cst_encode_bool(raw.content)];
  }

  @protected
  List<dynamic> cst_encode_my_tree_node_twin_normal(MyTreeNodeTwinNormal raw) {
    return [
      cst_encode_i_32(raw.valueI32),
      cst_encode_list_prim_u_8(raw.valueVecU8),
      cst_encode_bool(raw.valueBoolean),
      cst_encode_list_my_tree_node_twin_normal(raw.children)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync raw) {
    return [
      cst_encode_i_32(raw.valueI32),
      cst_encode_list_prim_u_8(raw.valueVecU8),
      cst_encode_bool(raw.valueBoolean),
      cst_encode_list_my_tree_node_twin_rust_async(raw.children)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_tree_node_twin_rust_async_sse(
      MyTreeNodeTwinRustAsyncSse raw) {
    return [
      cst_encode_i_32(raw.valueI32),
      cst_encode_list_prim_u_8(raw.valueVecU8),
      cst_encode_bool(raw.valueBoolean),
      cst_encode_list_my_tree_node_twin_rust_async_sse(raw.children)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_tree_node_twin_sse(MyTreeNodeTwinSse raw) {
    return [
      cst_encode_i_32(raw.valueI32),
      cst_encode_list_prim_u_8(raw.valueVecU8),
      cst_encode_bool(raw.valueBoolean),
      cst_encode_list_my_tree_node_twin_sse(raw.children)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_tree_node_twin_sync(MyTreeNodeTwinSync raw) {
    return [
      cst_encode_i_32(raw.valueI32),
      cst_encode_list_prim_u_8(raw.valueVecU8),
      cst_encode_bool(raw.valueBoolean),
      cst_encode_list_my_tree_node_twin_sync(raw.children)
    ];
  }

  @protected
  List<dynamic> cst_encode_my_tree_node_twin_sync_sse(
      MyTreeNodeTwinSyncSse raw) {
    return [
      cst_encode_i_32(raw.valueI32),
      cst_encode_list_prim_u_8(raw.valueVecU8),
      cst_encode_bool(raw.valueBoolean),
      cst_encode_list_my_tree_node_twin_sync_sse(raw.children)
    ];
  }

  @protected
  List<dynamic> cst_encode_new_type_int_twin_normal(NewTypeIntTwinNormal raw) {
    return [cst_encode_i_64(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync raw) {
    return [cst_encode_i_64(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_new_type_int_twin_rust_async_sse(
      NewTypeIntTwinRustAsyncSse raw) {
    return [cst_encode_i_64(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_new_type_int_twin_sse(NewTypeIntTwinSse raw) {
    return [cst_encode_i_64(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_new_type_int_twin_sync(NewTypeIntTwinSync raw) {
    return [cst_encode_i_64(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_new_type_int_twin_sync_sse(
      NewTypeIntTwinSyncSse raw) {
    return [cst_encode_i_64(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_note_twin_normal(NoteTwinNormal raw) {
    return [
      cst_encode_box_weekdays_twin_normal(raw.day),
      cst_encode_String(raw.body)
    ];
  }

  @protected
  List<dynamic> cst_encode_note_twin_rust_async(NoteTwinRustAsync raw) {
    return [
      cst_encode_box_weekdays_twin_rust_async(raw.day),
      cst_encode_String(raw.body)
    ];
  }

  @protected
  List<dynamic> cst_encode_note_twin_rust_async_sse(NoteTwinRustAsyncSse raw) {
    return [
      cst_encode_box_weekdays_twin_rust_async_sse(raw.day),
      cst_encode_String(raw.body)
    ];
  }

  @protected
  List<dynamic> cst_encode_note_twin_sse(NoteTwinSse raw) {
    return [
      cst_encode_box_weekdays_twin_sse(raw.day),
      cst_encode_String(raw.body)
    ];
  }

  @protected
  List<dynamic> cst_encode_note_twin_sync(NoteTwinSync raw) {
    return [
      cst_encode_box_weekdays_twin_sync(raw.day),
      cst_encode_String(raw.body)
    ];
  }

  @protected
  List<dynamic> cst_encode_note_twin_sync_sse(NoteTwinSyncSse raw) {
    return [
      cst_encode_box_weekdays_twin_sync_sse(raw.day),
      cst_encode_String(raw.body)
    ];
  }

  @protected
  List<dynamic> cst_encode_numbers(Numbers raw) {
    return [cst_encode_list_prim_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal raw) {
    return [
      cst_encode_RustOpaque_hide_data(raw.first),
      cst_encode_RustOpaque_hide_data(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync raw) {
    return [
      cst_encode_RustOpaque_hide_data(raw.first),
      cst_encode_RustOpaque_hide_data(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_opaque_nested_twin_rust_async_sse(
      OpaqueNestedTwinRustAsyncSse raw) {
    return [
      cst_encode_RustOpaque_hide_data(raw.first),
      cst_encode_RustOpaque_hide_data(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_opaque_nested_twin_sse(OpaqueNestedTwinSse raw) {
    return [
      cst_encode_RustOpaque_hide_data(raw.first),
      cst_encode_RustOpaque_hide_data(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_opaque_nested_twin_sync(OpaqueNestedTwinSync raw) {
    return [
      cst_encode_RustOpaque_hide_data(raw.first),
      cst_encode_RustOpaque_hide_data(raw.second)
    ];
  }

  @protected
  List<dynamic> cst_encode_opaque_nested_twin_sync_sse(
      OpaqueNestedTwinSyncSse raw) {
    return [
      cst_encode_RustOpaque_hide_data(raw.first),
      cst_encode_RustOpaque_hide_data(raw.second)
    ];
  }

  @protected
  String? cst_encode_opt_String(String? raw) {
    return raw == null ? null : cst_encode_String(raw);
  }

  @protected
  Object? cst_encode_opt_box_autoadd_Chrono_Utc(DateTime? raw) {
    return raw == null ? null : cst_encode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  Object? cst_encode_opt_box_autoadd_DartOpaque(Object? raw) {
    return raw == null ? null : cst_encode_box_autoadd_DartOpaque(raw);
  }

  @protected
  Object? cst_encode_opt_box_autoadd_RustOpaque_hide_data(HideData? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_RustOpaque_hide_data(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_application_env(
      ApplicationEnv? raw) {
    return raw == null ? null : cst_encode_box_autoadd_application_env(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_attribute_twin_normal(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_attribute_twin_rust_async(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_attribute_twin_rust_async_sse(
      AttributeTwinRustAsyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_attribute_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_attribute_twin_sse(
      AttributeTwinSse? raw) {
    return raw == null ? null : cst_encode_box_autoadd_attribute_twin_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_attribute_twin_sync(
      AttributeTwinSync? raw) {
    return raw == null ? null : cst_encode_box_autoadd_attribute_twin_sync(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_attribute_twin_sync_sse(
      AttributeTwinSyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_attribute_twin_sync_sse(raw);
  }

  @protected
  bool? cst_encode_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? null : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_exotic_optionals_twin_normal(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  List<dynamic>?
      cst_encode_opt_box_autoadd_exotic_optionals_twin_rust_async_sse(
          ExoticOptionalsTwinRustAsyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_exotic_optionals_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_exotic_optionals_twin_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_exotic_optionals_twin_sync(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_exotic_optionals_twin_sync_sse(raw);
  }

  @protected
  double? cst_encode_opt_box_autoadd_f_32(double? raw) {
    return raw == null ? null : cst_encode_box_autoadd_f_32(raw);
  }

  @protected
  double? cst_encode_opt_box_autoadd_f_64(double? raw) {
    return raw == null ? null : cst_encode_box_autoadd_f_64(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_i_16(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_i_16(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_i_32(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_i_32(raw);
  }

  @protected
  Object? cst_encode_opt_box_autoadd_i_64(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_i_64(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_i_8(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_i_8(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_new_type_int_twin_normal(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_new_type_int_twin_rust_async(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_new_type_int_twin_rust_async_sse(
      NewTypeIntTwinRustAsyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_new_type_int_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_new_type_int_twin_sse(
      NewTypeIntTwinSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_new_type_int_twin_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_new_type_int_twin_sync(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_new_type_int_twin_sync_sse(
      NewTypeIntTwinSyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_new_type_int_twin_sync_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_record_string_i_32(
      (String, int)? raw) {
    return raw == null ? null : cst_encode_box_autoadd_record_string_i_32(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_16(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_u_16(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_32(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  Object? cst_encode_opt_box_autoadd_u_64(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_8(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_u_8(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_weekdays_twin_normal(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_weekdays_twin_rust_async(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_weekdays_twin_rust_async_sse(
      WeekdaysTwinRustAsyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_weekdays_twin_rust_async_sse(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_weekdays_twin_sse(WeekdaysTwinSse? raw) {
    return raw == null ? null : cst_encode_box_autoadd_weekdays_twin_sse(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_weekdays_twin_sync(WeekdaysTwinSync? raw) {
    return raw == null ? null : cst_encode_box_autoadd_weekdays_twin_sync(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_weekdays_twin_sync_sse(
      WeekdaysTwinSyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_autoadd_weekdays_twin_sync_sse(raw);
  }

  @protected
  bool? cst_encode_opt_box_bool(bool? raw) {
    return raw == null ? null : cst_encode_box_bool(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? raw) {
    return raw == null
        ? null
        : cst_encode_box_exotic_optionals_twin_normal(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? raw) {
    return raw == null
        ? null
        : cst_encode_box_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_exotic_optionals_twin_rust_async_sse(
      ExoticOptionalsTwinRustAsyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_exotic_optionals_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_exotic_optionals_twin_sse(
      ExoticOptionalsTwinSse? raw) {
    return raw == null ? null : cst_encode_box_exotic_optionals_twin_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? raw) {
    return raw == null ? null : cst_encode_box_exotic_optionals_twin_sync(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_exotic_optionals_twin_sync_sse(
      ExoticOptionalsTwinSyncSse? raw) {
    return raw == null
        ? null
        : cst_encode_box_exotic_optionals_twin_sync_sse(raw);
  }

  @protected
  double? cst_encode_opt_box_f_64(double? raw) {
    return raw == null ? null : cst_encode_box_f_64(raw);
  }

  @protected
  int? cst_encode_opt_box_i_32(int? raw) {
    return raw == null ? null : cst_encode_box_i_32(raw);
  }

  @protected
  Object? cst_encode_opt_box_i_64(int? raw) {
    return raw == null ? null : cst_encode_box_i_64(raw);
  }

  @protected
  int? cst_encode_opt_box_i_8(int? raw) {
    return raw == null ? null : cst_encode_box_i_8(raw);
  }

  @protected
  int? cst_encode_opt_box_u_8(int? raw) {
    return raw == null ? null : cst_encode_box_u_8(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_attribute_twin_normal(
      List<AttributeTwinNormal>? raw) {
    return raw == null ? null : cst_encode_list_attribute_twin_normal(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync>? raw) {
    return raw == null ? null : cst_encode_list_attribute_twin_rust_async(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_attribute_twin_rust_async_sse(
      List<AttributeTwinRustAsyncSse>? raw) {
    return raw == null
        ? null
        : cst_encode_list_attribute_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_attribute_twin_sse(
      List<AttributeTwinSse>? raw) {
    return raw == null ? null : cst_encode_list_attribute_twin_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_attribute_twin_sync(
      List<AttributeTwinSync>? raw) {
    return raw == null ? null : cst_encode_list_attribute_twin_sync(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse>? raw) {
    return raw == null ? null : cst_encode_list_attribute_twin_sync_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?>? raw) {
    return raw == null
        ? null
        : cst_encode_list_opt_box_autoadd_attribute_twin_normal(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?>? raw) {
    return raw == null
        ? null
        : cst_encode_list_opt_box_autoadd_attribute_twin_rust_async(raw);
  }

  @protected
  List<dynamic>?
      cst_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async_sse(
          List<AttributeTwinRustAsyncSse?>? raw) {
    return raw == null
        ? null
        : cst_encode_list_opt_box_autoadd_attribute_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_opt_box_autoadd_attribute_twin_sse(
      List<AttributeTwinSse?>? raw) {
    return raw == null
        ? null
        : cst_encode_list_opt_box_autoadd_attribute_twin_sse(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?>? raw) {
    return raw == null
        ? null
        : cst_encode_list_opt_box_autoadd_attribute_twin_sync(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_opt_box_autoadd_attribute_twin_sync_sse(
      List<AttributeTwinSyncSse?>? raw) {
    return raw == null
        ? null
        : cst_encode_list_opt_box_autoadd_attribute_twin_sync_sse(raw);
  }

  @protected
  Float32List? cst_encode_opt_list_prim_f_32(Float32List? raw) {
    return raw == null ? null : cst_encode_list_prim_f_32(raw);
  }

  @protected
  Float64List? cst_encode_opt_list_prim_f_64(Float64List? raw) {
    return raw == null ? null : cst_encode_list_prim_f_64(raw);
  }

  @protected
  Int32List? cst_encode_opt_list_prim_i_32(Int32List? raw) {
    return raw == null ? null : cst_encode_list_prim_i_32(raw);
  }

  @protected
  Int8List? cst_encode_opt_list_prim_i_8(Int8List? raw) {
    return raw == null ? null : cst_encode_list_prim_i_8(raw);
  }

  @protected
  Uint8List? cst_encode_opt_list_prim_u_8(Uint8List? raw) {
    return raw == null ? null : cst_encode_list_prim_u_8(raw);
  }

  @protected
  List<dynamic> cst_encode_opt_vecs_twin_normal(OptVecsTwinNormal raw) {
    return [
      cst_encode_list_opt_box_autoadd_i_32(raw.i32),
      cst_encode_list_opt_box_autoadd_weekdays_twin_normal(raw.enums),
      cst_encode_list_opt_String(raw.strings),
      cst_encode_list_opt_list_prim_i_32(raw.buffers)
    ];
  }

  @protected
  List<dynamic> cst_encode_opt_vecs_twin_rust_async(OptVecsTwinRustAsync raw) {
    return [
      cst_encode_list_opt_box_autoadd_i_32(raw.i32),
      cst_encode_list_opt_box_autoadd_weekdays_twin_rust_async(raw.enums),
      cst_encode_list_opt_String(raw.strings),
      cst_encode_list_opt_list_prim_i_32(raw.buffers)
    ];
  }

  @protected
  List<dynamic> cst_encode_opt_vecs_twin_rust_async_sse(
      OptVecsTwinRustAsyncSse raw) {
    return [
      cst_encode_list_opt_box_autoadd_i_32(raw.i32),
      cst_encode_list_opt_box_autoadd_weekdays_twin_rust_async_sse(raw.enums),
      cst_encode_list_opt_String(raw.strings),
      cst_encode_list_opt_list_prim_i_32(raw.buffers)
    ];
  }

  @protected
  List<dynamic> cst_encode_opt_vecs_twin_sse(OptVecsTwinSse raw) {
    return [
      cst_encode_list_opt_box_autoadd_i_32(raw.i32),
      cst_encode_list_opt_box_autoadd_weekdays_twin_sse(raw.enums),
      cst_encode_list_opt_String(raw.strings),
      cst_encode_list_opt_list_prim_i_32(raw.buffers)
    ];
  }

  @protected
  List<dynamic> cst_encode_opt_vecs_twin_sync(OptVecsTwinSync raw) {
    return [
      cst_encode_list_opt_box_autoadd_i_32(raw.i32),
      cst_encode_list_opt_box_autoadd_weekdays_twin_sync(raw.enums),
      cst_encode_list_opt_String(raw.strings),
      cst_encode_list_opt_list_prim_i_32(raw.buffers)
    ];
  }

  @protected
  List<dynamic> cst_encode_opt_vecs_twin_sync_sse(OptVecsTwinSyncSse raw) {
    return [
      cst_encode_list_opt_box_autoadd_i_32(raw.i32),
      cst_encode_list_opt_box_autoadd_weekdays_twin_sync_sse(raw.enums),
      cst_encode_list_opt_String(raw.strings),
      cst_encode_list_opt_list_prim_i_32(raw.buffers)
    ];
  }

  @protected
  List<dynamic> cst_encode_record_string_i_32((String, int) raw) {
    return [cst_encode_String(raw.$1), cst_encode_i_32(raw.$2)];
  }

  @protected
  List<dynamic> cst_encode_sequences(Sequences raw) {
    return [cst_encode_list_prim_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_some_struct_twin_normal(SomeStructTwinNormal raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_some_struct_twin_rust_async(
      SomeStructTwinRustAsync raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_some_struct_twin_rust_async_sse(
      SomeStructTwinRustAsyncSse raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_some_struct_twin_sse(SomeStructTwinSse raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_some_struct_twin_sync(SomeStructTwinSync raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_some_struct_twin_sync_sse(
      SomeStructTwinSyncSse raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_speed_twin_normal(SpeedTwinNormal raw) {
    if (raw is SpeedTwinNormal_Unknown) {
      return [0];
    }
    if (raw is SpeedTwinNormal_GPS) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_speed_twin_rust_async(SpeedTwinRustAsync raw) {
    if (raw is SpeedTwinRustAsync_Unknown) {
      return [0];
    }
    if (raw is SpeedTwinRustAsync_GPS) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_speed_twin_rust_async_sse(
      SpeedTwinRustAsyncSse raw) {
    if (raw is SpeedTwinRustAsyncSse_Unknown) {
      return [0];
    }
    if (raw is SpeedTwinRustAsyncSse_GPS) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_speed_twin_sse(SpeedTwinSse raw) {
    if (raw is SpeedTwinSse_Unknown) {
      return [0];
    }
    if (raw is SpeedTwinSse_GPS) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_speed_twin_sync(SpeedTwinSync raw) {
    if (raw is SpeedTwinSync_Unknown) {
      return [0];
    }
    if (raw is SpeedTwinSync_GPS) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_speed_twin_sync_sse(SpeedTwinSyncSse raw) {
    if (raw is SpeedTwinSyncSse_Unknown) {
      return [0];
    }
    if (raw is SpeedTwinSyncSse_GPS) {
      return [1, cst_encode_f_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal raw) {
    return [cst_encode_i_32(raw.fieldWithComments)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync raw) {
    return [cst_encode_i_32(raw.fieldWithComments)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_comments_twin_rust_async_sse(
      StructWithCommentsTwinRustAsyncSse raw) {
    return [cst_encode_i_32(raw.fieldWithComments)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_comments_twin_sse(
      StructWithCommentsTwinSse raw) {
    return [cst_encode_i_32(raw.fieldWithComments)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync raw) {
    return [cst_encode_i_32(raw.fieldWithComments)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_comments_twin_sync_sse(
      StructWithCommentsTwinSyncSse raw) {
    return [cst_encode_i_32(raw.fieldWithComments)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal raw) {
    return [
      cst_encode_abc_twin_normal(raw.abc1),
      cst_encode_abc_twin_normal(raw.abc2)
    ];
  }

  @protected
  List<dynamic> cst_encode_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync raw) {
    return [
      cst_encode_abc_twin_rust_async(raw.abc1),
      cst_encode_abc_twin_rust_async(raw.abc2)
    ];
  }

  @protected
  List<dynamic> cst_encode_struct_with_enum_twin_rust_async_sse(
      StructWithEnumTwinRustAsyncSse raw) {
    return [
      cst_encode_abc_twin_rust_async_sse(raw.abc1),
      cst_encode_abc_twin_rust_async_sse(raw.abc2)
    ];
  }

  @protected
  List<dynamic> cst_encode_struct_with_enum_twin_sse(
      StructWithEnumTwinSse raw) {
    return [
      cst_encode_abc_twin_sse(raw.abc1),
      cst_encode_abc_twin_sse(raw.abc2)
    ];
  }

  @protected
  List<dynamic> cst_encode_struct_with_enum_twin_sync(
      StructWithEnumTwinSync raw) {
    return [
      cst_encode_abc_twin_sync(raw.abc1),
      cst_encode_abc_twin_sync(raw.abc2)
    ];
  }

  @protected
  List<dynamic> cst_encode_struct_with_enum_twin_sync_sse(
      StructWithEnumTwinSyncSse raw) {
    return [
      cst_encode_abc_twin_sync_sse(raw.abc1),
      cst_encode_abc_twin_sync_sse(raw.abc2)
    ];
  }

  @protected
  List<dynamic> cst_encode_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal raw) {
    return [cst_encode_i_32(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync raw) {
    return [cst_encode_i_32(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_one_field_twin_rust_async_sse(
      StructWithOneFieldTwinRustAsyncSse raw) {
    return [cst_encode_i_32(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_one_field_twin_sse(
      StructWithOneFieldTwinSse raw) {
    return [cst_encode_i_32(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync raw) {
    return [cst_encode_i_32(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_one_field_twin_sync_sse(
      StructWithOneFieldTwinSyncSse raw) {
    return [cst_encode_i_32(raw.a)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal raw) {
    return [cst_encode_i_32(raw.a), cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync raw) {
    return [cst_encode_i_32(raw.a), cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_two_field_twin_rust_async_sse(
      StructWithTwoFieldTwinRustAsyncSse raw) {
    return [cst_encode_i_32(raw.a), cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_two_field_twin_sse(
      StructWithTwoFieldTwinSse raw) {
    return [cst_encode_i_32(raw.a), cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync raw) {
    return [cst_encode_i_32(raw.a), cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_two_field_twin_sync_sse(
      StructWithTwoFieldTwinSyncSse raw) {
    return [cst_encode_i_32(raw.a), cst_encode_i_32(raw.b)];
  }

  @protected
  List<dynamic> cst_encode_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_struct_with_zero_field_twin_rust_async_sse(
      StructWithZeroFieldTwinRustAsyncSse raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_struct_with_zero_field_twin_sse(
      StructWithZeroFieldTwinSse raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_struct_with_zero_field_twin_sync_sse(
      StructWithZeroFieldTwinSyncSse raw) {
    return [];
  }

  @protected
  List<dynamic> cst_encode_sum_with_twin_normal(SumWithTwinNormal raw) {
    return [cst_encode_u_32(raw.x)];
  }

  @protected
  List<dynamic> cst_encode_sum_with_twin_rust_async(SumWithTwinRustAsync raw) {
    return [cst_encode_u_32(raw.x)];
  }

  @protected
  List<dynamic> cst_encode_sum_with_twin_rust_async_sse(
      SumWithTwinRustAsyncSse raw) {
    return [cst_encode_u_32(raw.x)];
  }

  @protected
  List<dynamic> cst_encode_sum_with_twin_sse(SumWithTwinSse raw) {
    return [cst_encode_u_32(raw.x)];
  }

  @protected
  List<dynamic> cst_encode_sum_with_twin_sync(SumWithTwinSync raw) {
    return [cst_encode_u_32(raw.x)];
  }

  @protected
  List<dynamic> cst_encode_sum_with_twin_sync_sse(SumWithTwinSyncSse raw) {
    return [cst_encode_u_32(raw.x)];
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_normal(TestIdTwinNormal raw) {
    return [cst_encode_i_32_array_2(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_normal_array_4(
      TestIdTwinNormalArray4 raw) {
    return cst_encode_list_test_id_twin_normal(raw);
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_rust_async(TestIdTwinRustAsync raw) {
    return [cst_encode_i_32_array_2(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_rust_async_array_4(
      TestIdTwinRustAsyncArray4 raw) {
    return cst_encode_list_test_id_twin_rust_async(raw);
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_rust_async_sse(
      TestIdTwinRustAsyncSse raw) {
    return [cst_encode_i_32_array_2(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_rust_async_sse_array_4(
      TestIdTwinRustAsyncSseArray4 raw) {
    return cst_encode_list_test_id_twin_rust_async_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_sse(TestIdTwinSse raw) {
    return [cst_encode_i_32_array_2(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_sse_array_4(TestIdTwinSseArray4 raw) {
    return cst_encode_list_test_id_twin_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_sync(TestIdTwinSync raw) {
    return [cst_encode_i_32_array_2(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_sync_array_4(TestIdTwinSyncArray4 raw) {
    return cst_encode_list_test_id_twin_sync(raw);
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_sync_sse(TestIdTwinSyncSse raw) {
    return [cst_encode_i_32_array_2(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_test_id_twin_sync_sse_array_4(
      TestIdTwinSyncSseArray4 raw) {
    return cst_encode_list_test_id_twin_sync_sse(raw);
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal raw) {
    return [cst_encode_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync raw) {
    return [cst_encode_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_one_field_twin_rust_async_sse(
      TupleStructWithOneFieldTwinRustAsyncSse raw) {
    return [cst_encode_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_one_field_twin_sse(
      TupleStructWithOneFieldTwinSse raw) {
    return [cst_encode_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync raw) {
    return [cst_encode_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_one_field_twin_sync_sse(
      TupleStructWithOneFieldTwinSyncSse raw) {
    return [cst_encode_i_32(raw.field0)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal raw) {
    return [cst_encode_i_32(raw.field0), cst_encode_i_32(raw.field1)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync raw) {
    return [cst_encode_i_32(raw.field0), cst_encode_i_32(raw.field1)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_two_field_twin_rust_async_sse(
      TupleStructWithTwoFieldTwinRustAsyncSse raw) {
    return [cst_encode_i_32(raw.field0), cst_encode_i_32(raw.field1)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_two_field_twin_sse(
      TupleStructWithTwoFieldTwinSse raw) {
    return [cst_encode_i_32(raw.field0), cst_encode_i_32(raw.field1)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync raw) {
    return [cst_encode_i_32(raw.field0), cst_encode_i_32(raw.field1)];
  }

  @protected
  List<dynamic> cst_encode_tuple_struct_with_two_field_twin_sync_sse(
      TupleStructWithTwoFieldTwinSyncSse raw) {
    return [cst_encode_i_32(raw.field0), cst_encode_i_32(raw.field1)];
  }

  @protected
  Object cst_encode_u_64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_1600(U8Array1600 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_32(U8Array32 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_8(U8Array8 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  List<dynamic> cst_encode_user_id_twin_normal(UserIdTwinNormal raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_user_id_twin_rust_async(UserIdTwinRustAsync raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_user_id_twin_rust_async_sse(
      UserIdTwinRustAsyncSse raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_user_id_twin_sse(UserIdTwinSse raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_user_id_twin_sync(UserIdTwinSync raw) {
    return [cst_encode_u_32(raw.value)];
  }

  @protected
  List<dynamic> cst_encode_user_id_twin_sync_sse(UserIdTwinSyncSse raw) {
    return [cst_encode_u_32(raw.value)];
  }
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void frb_initialize_rust(NativePortType dart_opaque_drop_port,
          NativePortType dart_fn_invoke_port) =>
      wasmModule.frb_initialize_rust(
          dart_opaque_drop_port, dart_fn_invoke_port);

  void wire_boxed_blob_twin_normal(NativePortType port_, Uint8List blob) =>
      wasmModule.wire_boxed_blob_twin_normal(port_, blob);

  void wire_func_test_id_twin_normal(NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_func_test_id_twin_normal(port_, id);

  void wire_get_array_twin_normal(NativePortType port_) =>
      wasmModule.wire_get_array_twin_normal(port_);

  void wire_get_complex_array_twin_normal(NativePortType port_) =>
      wasmModule.wire_get_complex_array_twin_normal(port_);

  void wire_last_number_twin_normal(NativePortType port_, Float64List array) =>
      wasmModule.wire_last_number_twin_normal(port_, array);

  void wire_nested_id_twin_normal(NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_nested_id_twin_normal(port_, id);

  void wire_new_msgid_twin_normal(NativePortType port_, Uint8List id) =>
      wasmModule.wire_new_msgid_twin_normal(port_, id);

  void wire_return_boxed_feed_id_twin_normal(
          NativePortType port_, Uint8List id) =>
      wasmModule.wire_return_boxed_feed_id_twin_normal(port_, id);

  void wire_return_boxed_raw_feed_id_twin_normal(
          NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_return_boxed_raw_feed_id_twin_normal(port_, id);

  void wire_use_boxed_blob_twin_normal(
          NativePortType port_, List<dynamic> blob) =>
      wasmModule.wire_use_boxed_blob_twin_normal(port_, blob);

  void wire_use_msgid_twin_normal(NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_use_msgid_twin_normal(port_, id);

  void wire_func_async_simple_add(NativePortType port_, int a, int b) =>
      wasmModule.wire_func_async_simple_add(port_, a, b);

  void wire_func_async_void(NativePortType port_) =>
      wasmModule.wire_func_async_void(port_);

  void wire_handle_customized_struct_twin_normal(
          NativePortType port_, List<dynamic> val) =>
      wasmModule.wire_handle_customized_struct_twin_normal(port_, val);

  void wire_next_user_id_twin_normal(
          NativePortType port_, List<dynamic> user_id) =>
      wasmModule.wire_next_user_id_twin_normal(port_, user_id);

  void wire_benchmark_input_bytes_twin_normal(
          NativePortType port_, Uint8List bytes) =>
      wasmModule.wire_benchmark_input_bytes_twin_normal(port_, bytes);

  void wire_benchmark_output_bytes_twin_normal(
          NativePortType port_, int size) =>
      wasmModule.wire_benchmark_output_bytes_twin_normal(port_, size);

  void wire_benchmark_void_twin_normal(NativePortType port_) =>
      wasmModule.wire_benchmark_void_twin_normal(port_);

  void wire_datetime_local_twin_normal(NativePortType port_, Object d) =>
      wasmModule.wire_datetime_local_twin_normal(port_, d);

  void wire_datetime_utc_twin_normal(NativePortType port_, Object d) =>
      wasmModule.wire_datetime_utc_twin_normal(port_, d);

  void wire_duration_twin_normal(NativePortType port_, Object d) =>
      wasmModule.wire_duration_twin_normal(port_, d);

  void wire_handle_durations_twin_normal(
          NativePortType port_, List<dynamic> durations, Object since) =>
      wasmModule.wire_handle_durations_twin_normal(port_, durations, since);

  void wire_handle_timestamps_twin_normal(
          NativePortType port_, List<dynamic> timestamps, Object epoch) =>
      wasmModule.wire_handle_timestamps_twin_normal(port_, timestamps, epoch);

  void wire_how_long_does_it_take_twin_normal(
          NativePortType port_, List<dynamic> mine) =>
      wasmModule.wire_how_long_does_it_take_twin_normal(port_, mine);

  void wire_naivedatetime_twin_normal(NativePortType port_, Object d) =>
      wasmModule.wire_naivedatetime_twin_normal(port_, d);

  void wire_optional_empty_datetime_utc_twin_normal(
          NativePortType port_, Object? d) =>
      wasmModule.wire_optional_empty_datetime_utc_twin_normal(port_, d);

  void wire_test_chrono_twin_normal(NativePortType port_) =>
      wasmModule.wire_test_chrono_twin_normal(port_);

  void wire_test_precise_chrono_twin_normal(NativePortType port_) =>
      wasmModule.wire_test_precise_chrono_twin_normal(port_);

  void wire_StructWithCommentsTwinNormal_instance_method_twin_normal(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_StructWithCommentsTwinNormal_instance_method_twin_normal(
          port_, that);

  void wire_StructWithCommentsTwinNormal_static_method_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_StructWithCommentsTwinNormal_static_method_twin_normal(port_);

  void wire_function_with_comments_slash_star_star_twin_normal(
          NativePortType port_) =>
      wasmModule.wire_function_with_comments_slash_star_star_twin_normal(port_);

  void wire_function_with_comments_triple_slash_multi_line_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_function_with_comments_triple_slash_multi_line_twin_normal(
              port_);

  void wire_function_with_comments_triple_slash_single_line_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_function_with_comments_triple_slash_single_line_twin_normal(
              port_);

  void wire_return_dart_dynamic_twin_normal(NativePortType port_) =>
      wasmModule.wire_return_dart_dynamic_twin_normal(port_);

  void wire_rust_call_dart_simple(NativePortType port_, Object callback) =>
      wasmModule.wire_rust_call_dart_simple(port_, callback);

  void wire_async_accept_dart_opaque_twin_normal(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_async_accept_dart_opaque_twin_normal(port_, opaque);

  void wire_clone_dart_opaque_twin_normal(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_clone_dart_opaque_twin_normal(port_, opaque);

  void wire_create_enum_dart_opaque_twin_normal(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_create_enum_dart_opaque_twin_normal(port_, opaque);

  void wire_create_nested_dart_opaque_twin_normal(
          NativePortType port_, Object opaque1, Object opaque2) =>
      wasmModule.wire_create_nested_dart_opaque_twin_normal(
          port_, opaque1, opaque2);

  void wire_drop_static_dart_opaque_twin_normal(NativePortType port_, int id) =>
      wasmModule.wire_drop_static_dart_opaque_twin_normal(port_, id);

  void wire_get_enum_dart_opaque_twin_normal(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_get_enum_dart_opaque_twin_normal(port_, opaque);

  void wire_get_nested_dart_opaque_twin_normal(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_get_nested_dart_opaque_twin_normal(port_, opaque);

  void wire_loop_back_array_get_twin_normal(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_loop_back_array_get_twin_normal(port_, opaque);

  void wire_loop_back_array_twin_normal(NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_array_twin_normal(port_, opaque);

  void wire_loop_back_option_get_twin_normal(
          NativePortType port_, Object? opaque) =>
      wasmModule.wire_loop_back_option_get_twin_normal(port_, opaque);

  void wire_loop_back_option_twin_normal(NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_option_twin_normal(port_, opaque);

  void wire_loop_back_twin_normal(NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_twin_normal(port_, opaque);

  void wire_loop_back_vec_get_twin_normal(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_loop_back_vec_get_twin_normal(port_, opaque);

  void wire_loop_back_vec_twin_normal(NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_vec_twin_normal(port_, opaque);

  void wire_panic_unwrap_dart_opaque_twin_normal(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_panic_unwrap_dart_opaque_twin_normal(port_, opaque);

  void wire_set_static_dart_opaque_twin_normal(
          NativePortType port_, int id, Object opaque) =>
      wasmModule.wire_set_static_dart_opaque_twin_normal(port_, id, opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_accept_dart_opaque_twin_normal(Object opaque) =>
          wasmModule.wire_sync_accept_dart_opaque_twin_normal(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_loopback_twin_normal(Object opaque) =>
          wasmModule.wire_sync_loopback_twin_normal(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_option_dart_opaque_twin_normal(Object opaque) =>
          wasmModule.wire_sync_option_dart_opaque_twin_normal(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_option_loopback_twin_normal(Object? opaque) =>
          wasmModule.wire_sync_option_loopback_twin_normal(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_unwrap_dart_opaque_twin_normal(Object opaque) =>
          wasmModule.wire_unwrap_dart_opaque_twin_normal(opaque);

  void wire_func_enum_simple_twin_normal(NativePortType port_, int arg) =>
      wasmModule.wire_func_enum_simple_twin_normal(port_, arg);

  void wire_func_enum_with_item_mixed_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_enum_with_item_mixed_twin_normal(port_, arg);

  void wire_func_enum_with_item_struct_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_enum_with_item_struct_twin_normal(port_, arg);

  void wire_func_enum_with_item_tuple_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_enum_with_item_tuple_twin_normal(port_, arg);

  void wire_handle_enum_parameter_twin_normal(
          NativePortType port_, int weekday) =>
      wasmModule.wire_handle_enum_parameter_twin_normal(port_, weekday);

  void wire_handle_enum_struct_twin_normal(
          NativePortType port_, List<dynamic> val) =>
      wasmModule.wire_handle_enum_struct_twin_normal(port_, val);

  void wire_handle_return_enum_twin_normal(
          NativePortType port_, String input) =>
      wasmModule.wire_handle_return_enum_twin_normal(port_, input);

  void wire_multiply_by_ten_twin_normal(
          NativePortType port_, List<dynamic> measure) =>
      wasmModule.wire_multiply_by_ten_twin_normal(port_, measure);

  void wire_print_note_twin_normal(NativePortType port_, List<dynamic> note) =>
      wasmModule.wire_print_note_twin_normal(port_, note);

  void wire_EventTwinNormal_as_string_twin_normal(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_EventTwinNormal_as_string_twin_normal(port_, that);

  void wire_close_event_listener_twin_normal(NativePortType port_) =>
      wasmModule.wire_close_event_listener_twin_normal(port_);

  void wire_create_event_twin_normal(
          NativePortType port_, String address, String payload) =>
      wasmModule.wire_create_event_twin_normal(port_, address, payload);

  void wire_register_event_listener_twin_normal(NativePortType port_) =>
      wasmModule.wire_register_event_listener_twin_normal(port_);

  void wire_CustomStructTwinNormal_new_twin_normal(
          NativePortType port_, String message) =>
      wasmModule.wire_CustomStructTwinNormal_new_twin_normal(port_, message);

  void wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal(
              port_, that);

  void wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal(
              port_, that);

  void wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal(
              port_);

  void wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal(
              port_);

  void wire_SomeStructTwinNormal_new_twin_normal(
          NativePortType port_, int value) =>
      wasmModule.wire_SomeStructTwinNormal_new_twin_normal(port_, value);

  void wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal(
              port_, that);

  void wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal(
              port_, that);

  void wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal(
              port_);

  void wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal(
              port_);

  void wire_custom_enum_error_panic_twin_normal(NativePortType port_) =>
      wasmModule.wire_custom_enum_error_panic_twin_normal(port_);

  void wire_custom_enum_error_return_error_twin_normal(NativePortType port_) =>
      wasmModule.wire_custom_enum_error_return_error_twin_normal(port_);

  void wire_custom_enum_error_return_ok_twin_normal(
          NativePortType port_, int arg) =>
      wasmModule.wire_custom_enum_error_return_ok_twin_normal(port_, arg);

  void wire_custom_nested_error_return_error_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_custom_nested_error_return_error_twin_normal(port_, arg);

  void wire_custom_struct_error_return_error_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_custom_struct_error_return_error_twin_normal(port_, arg);

  void wire_func_return_error_twin_normal(NativePortType port_) =>
      wasmModule.wire_func_return_error_twin_normal(port_);

  void wire_func_type_fallible_panic_twin_normal(NativePortType port_) =>
      wasmModule.wire_func_type_fallible_panic_twin_normal(port_);

  void wire_func_type_infallible_panic_twin_normal(NativePortType port_) =>
      wasmModule.wire_func_type_infallible_panic_twin_normal(port_);

  void wire_panic_with_custom_result_twin_normal(NativePortType port_) =>
      wasmModule.wire_panic_with_custom_result_twin_normal(port_);

  void wire_return_custom_nested_error_1_twin_normal(NativePortType port_) =>
      wasmModule.wire_return_custom_nested_error_1_twin_normal(port_);

  void wire_return_custom_nested_error_1_variant1_twin_normal(
          NativePortType port_) =>
      wasmModule.wire_return_custom_nested_error_1_variant1_twin_normal(port_);

  void wire_return_custom_nested_error_2_twin_normal(NativePortType port_) =>
      wasmModule.wire_return_custom_nested_error_2_twin_normal(port_);

  void wire_return_custom_struct_error_twin_normal(NativePortType port_) =>
      wasmModule.wire_return_custom_struct_error_twin_normal(port_);

  void wire_return_custom_struct_ok_twin_normal(NativePortType port_) =>
      wasmModule.wire_return_custom_struct_ok_twin_normal(port_);

  void wire_return_err_custom_error_twin_normal(NativePortType port_) =>
      wasmModule.wire_return_err_custom_error_twin_normal(port_);

  void wire_return_error_variant_twin_normal(
          NativePortType port_, int variant) =>
      wasmModule.wire_return_error_variant_twin_normal(port_, variant);

  void wire_return_ok_custom_error_twin_normal(NativePortType port_) =>
      wasmModule.wire_return_ok_custom_error_twin_normal(port_);

  void wire_stream_sink_throw_anyhow_twin_normal(NativePortType port_) =>
      wasmModule.wire_stream_sink_throw_anyhow_twin_normal(port_);

  void wire_throw_anyhow_twin_normal(NativePortType port_) =>
      wasmModule.wire_throw_anyhow_twin_normal(port_);

  void wire_call_new_module_system_twin_normal(NativePortType port_) =>
      wasmModule.wire_call_new_module_system_twin_normal(port_);

  void wire_call_old_module_system_twin_normal(NativePortType port_) =>
      wasmModule.wire_call_old_module_system_twin_normal(port_);

  void wire_use_imported_enum_twin_normal(NativePortType port_, int my_enum) =>
      wasmModule.wire_use_imported_enum_twin_normal(port_, my_enum);

  void wire_use_imported_struct_twin_normal(
          NativePortType port_, List<dynamic> my_struct) =>
      wasmModule.wire_use_imported_struct_twin_normal(port_, my_struct);

  void wire_another_macro_struct_twin_normal(NativePortType port_) =>
      wasmModule.wire_another_macro_struct_twin_normal(port_);

  void wire_func_macro_struct_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_macro_struct_twin_normal(port_, arg);

  void wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal(
          NativePortType port_, String a, String b) =>
      wasmModule.wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal(
          port_, a, b);

  void wire_ConcatenateWithTwinNormal_concatenate_twin_normal(
          NativePortType port_, List<dynamic> that, String b) =>
      wasmModule.wire_ConcatenateWithTwinNormal_concatenate_twin_normal(
          port_, that, b);

  void wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal(
              port_);

  void wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal(
          NativePortType port_, int key, int max) =>
      wasmModule
          .wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal(
              port_, key, max);

  void wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal(
              port_, that);

  void wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal(
          NativePortType port_, List<dynamic> that, int key, int max) =>
      wasmModule
          .wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal(
              port_, that, key, max);

  void wire_ConcatenateWithTwinNormal_new_twin_normal(
          NativePortType port_, String a) =>
      wasmModule.wire_ConcatenateWithTwinNormal_new_twin_normal(port_, a);

  void wire_SumWithTwinNormal_sum_twin_normal(
          NativePortType port_, List<dynamic> that, int y, int z) =>
      wasmModule.wire_SumWithTwinNormal_sum_twin_normal(port_, that, y, z);

  void wire_get_sum_array_twin_normal(
          NativePortType port_, int a, int b, int c) =>
      wasmModule.wire_get_sum_array_twin_normal(port_, a, b, c);

  void wire_get_sum_struct_twin_normal(NativePortType port_) =>
      wasmModule.wire_get_sum_struct_twin_normal(port_);

  void wire_app_settings_stream_twin_normal(NativePortType port_) =>
      wasmModule.wire_app_settings_stream_twin_normal(port_);

  void wire_app_settings_vec_stream_twin_normal(NativePortType port_) =>
      wasmModule.wire_app_settings_vec_stream_twin_normal(port_);

  void wire_first_number_twin_normal(
          NativePortType port_, List<dynamic> nums) =>
      wasmModule.wire_first_number_twin_normal(port_, nums);

  void wire_first_sequence_twin_normal(
          NativePortType port_, List<dynamic> seqs) =>
      wasmModule.wire_first_sequence_twin_normal(port_, seqs);

  void wire_get_app_settings_twin_normal(NativePortType port_) =>
      wasmModule.wire_get_app_settings_twin_normal(port_);

  void wire_get_fallible_app_settings_twin_normal(NativePortType port_) =>
      wasmModule.wire_get_fallible_app_settings_twin_normal(port_);

  void wire_get_message_twin_normal(NativePortType port_) =>
      wasmModule.wire_get_message_twin_normal(port_);

  void wire_is_app_embedded_twin_normal(
          NativePortType port_, List<dynamic> app_settings) =>
      wasmModule.wire_is_app_embedded_twin_normal(port_, app_settings);

  void wire_mirror_struct_stream_twin_normal(NativePortType port_) =>
      wasmModule.wire_mirror_struct_stream_twin_normal(port_);

  void wire_mirror_tuple_stream_twin_normal(NativePortType port_) =>
      wasmModule.wire_mirror_tuple_stream_twin_normal(port_);

  void wire_repeat_number_twin_normal(
          NativePortType port_, int num, int times) =>
      wasmModule.wire_repeat_number_twin_normal(port_, num, times);

  void wire_repeat_sequence_twin_normal(
          NativePortType port_, int seq, int times) =>
      wasmModule.wire_repeat_sequence_twin_normal(port_, seq, times);

  void wire_test_contains_mirrored_sub_struct_twin_normal(
          NativePortType port_) =>
      wasmModule.wire_test_contains_mirrored_sub_struct_twin_normal(port_);

  void wire_test_fallible_of_raw_string_mirrored_twin_normal(
          NativePortType port_) =>
      wasmModule.wire_test_fallible_of_raw_string_mirrored_twin_normal(port_);

  void wire_test_list_of_nested_enums_mirrored_twin_normal(
          NativePortType port_) =>
      wasmModule.wire_test_list_of_nested_enums_mirrored_twin_normal(port_);

  void wire_test_list_of_raw_nested_string_mirrored_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_test_list_of_raw_nested_string_mirrored_twin_normal(port_);

  void wire_test_nested_raw_string_mirrored_twin_normal(NativePortType port_) =>
      wasmModule.wire_test_nested_raw_string_mirrored_twin_normal(port_);

  void wire_test_raw_string_enum_mirrored_twin_normal(
          NativePortType port_, bool nested) =>
      wasmModule.wire_test_raw_string_enum_mirrored_twin_normal(port_, nested);

  void wire_test_raw_string_mirrored_twin_normal(NativePortType port_) =>
      wasmModule.wire_test_raw_string_mirrored_twin_normal(port_);

  void wire_handle_big_buffers_twin_normal(NativePortType port_) =>
      wasmModule.wire_handle_big_buffers_twin_normal(port_);

  void wire_handle_complex_struct_twin_normal(
          NativePortType port_, List<dynamic> s) =>
      wasmModule.wire_handle_complex_struct_twin_normal(port_, s);

  void wire_handle_nested_struct_twin_normal(
          NativePortType port_, List<dynamic> s) =>
      wasmModule.wire_handle_nested_struct_twin_normal(port_, s);

  void wire_handle_string_twin_normal(NativePortType port_, String s) =>
      wasmModule.wire_handle_string_twin_normal(port_, s);

  void wire_handle_struct_twin_normal(
          NativePortType port_, List<dynamic> arg, List<dynamic> boxed) =>
      wasmModule.wire_handle_struct_twin_normal(port_, arg, boxed);

  void wire_handle_vec_u8_twin_normal(NativePortType port_, Uint8List v) =>
      wasmModule.wire_handle_vec_u8_twin_normal(port_, v);

  void wire_list_of_primitive_enums_twin_normal(
          NativePortType port_, List<dynamic> weekdays) =>
      wasmModule.wire_list_of_primitive_enums_twin_normal(port_, weekdays);

  void wire_test_abc_enum_twin_normal(
          NativePortType port_, List<dynamic> abc) =>
      wasmModule.wire_test_abc_enum_twin_normal(port_, abc);

  void wire_test_struct_with_enum_twin_normal(
          NativePortType port_, List<dynamic> se) =>
      wasmModule.wire_test_struct_with_enum_twin_normal(port_, se);

  void wire_empty_struct_twin_normal(
          NativePortType port_, List<dynamic> empty) =>
      wasmModule.wire_empty_struct_twin_normal(port_, empty);

  void wire_func_return_unit_twin_normal(NativePortType port_) =>
      wasmModule.wire_func_return_unit_twin_normal(port_);

  void wire_func_string_twin_normal(NativePortType port_, String arg) =>
      wasmModule.wire_func_string_twin_normal(port_, arg);

  void wire_handle_list_of_struct_twin_normal(
          NativePortType port_, List<dynamic> l) =>
      wasmModule.wire_handle_list_of_struct_twin_normal(port_, l);

  void wire_handle_string_list_twin_normal(
          NativePortType port_, List<dynamic> names) =>
      wasmModule.wire_handle_string_list_twin_normal(port_, names);

  void wire_handle_newtype_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_handle_newtype_twin_normal(port_, arg);

  void wire_handle_increment_boxed_optional_twin_normal(
          NativePortType port_, double? opt) =>
      wasmModule.wire_handle_increment_boxed_optional_twin_normal(port_, opt);

  void wire_handle_option_box_arguments_twin_normal(
          NativePortType port_,
          int? i8box,
          int? u8box,
          int? i32box,
          Object? i64box,
          double? f64box,
          bool? boolbox,
          List<dynamic>? structbox) =>
      wasmModule.wire_handle_option_box_arguments_twin_normal(
          port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox);

  void wire_handle_optional_increment_twin_normal(
          NativePortType port_, List<dynamic>? opt) =>
      wasmModule.wire_handle_optional_increment_twin_normal(port_, opt);

  void wire_handle_optional_return_twin_normal(
          NativePortType port_, double left, double right) =>
      wasmModule.wire_handle_optional_return_twin_normal(port_, left, right);

  void wire_handle_optional_struct_twin_normal(
          NativePortType port_, String? document) =>
      wasmModule.wire_handle_optional_struct_twin_normal(port_, document);

  void wire_handle_vec_of_opts_twin_normal(
          NativePortType port_, List<dynamic> opt) =>
      wasmModule.wire_handle_vec_of_opts_twin_normal(port_, opt);

  void wire_primitive_optional_types_twin_normal(NativePortType port_,
          int? my_i32, Object? my_i64, double? my_f64, bool? my_bool) =>
      wasmModule.wire_primitive_optional_types_twin_normal(
          port_, my_i32, my_i64, my_f64, my_bool);

  void wire_handle_vec_of_primitive_twin_normal(NativePortType port_, int n) =>
      wasmModule.wire_handle_vec_of_primitive_twin_normal(port_, n);

  void wire_primitive_types_twin_normal(NativePortType port_, int my_i32,
          Object my_i64, double my_f64, bool my_bool) =>
      wasmModule.wire_primitive_types_twin_normal(
          port_, my_i32, my_i64, my_f64, my_bool);

  void wire_primitive_u32_twin_normal(NativePortType port_, int my_u32) =>
      wasmModule.wire_primitive_u32_twin_normal(port_, my_u32);

  void wire_boxed_blob_twin_rust_async(NativePortType port_, Uint8List blob) =>
      wasmModule.wire_boxed_blob_twin_rust_async(port_, blob);

  void wire_func_test_id_twin_rust_async(
          NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_func_test_id_twin_rust_async(port_, id);

  void wire_get_array_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_get_array_twin_rust_async(port_);

  void wire_get_complex_array_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_get_complex_array_twin_rust_async(port_);

  void wire_last_number_twin_rust_async(
          NativePortType port_, Float64List array) =>
      wasmModule.wire_last_number_twin_rust_async(port_, array);

  void wire_nested_id_twin_rust_async(NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_nested_id_twin_rust_async(port_, id);

  void wire_new_msgid_twin_rust_async(NativePortType port_, Uint8List id) =>
      wasmModule.wire_new_msgid_twin_rust_async(port_, id);

  void wire_return_boxed_feed_id_twin_rust_async(
          NativePortType port_, Uint8List id) =>
      wasmModule.wire_return_boxed_feed_id_twin_rust_async(port_, id);

  void wire_return_boxed_raw_feed_id_twin_rust_async(
          NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_return_boxed_raw_feed_id_twin_rust_async(port_, id);

  void wire_use_boxed_blob_twin_rust_async(
          NativePortType port_, List<dynamic> blob) =>
      wasmModule.wire_use_boxed_blob_twin_rust_async(port_, blob);

  void wire_use_msgid_twin_rust_async(NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_use_msgid_twin_rust_async(port_, id);

  void wire_boxed_blob_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_boxed_blob_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_test_id_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_test_id_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_array_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_array_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_complex_array_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_complex_array_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_last_number_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_last_number_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_nested_id_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_nested_id_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_new_msgid_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_new_msgid_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_boxed_feed_id_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_boxed_feed_id_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_boxed_raw_feed_id_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_boxed_raw_feed_id_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_boxed_blob_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_boxed_blob_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_msgid_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_msgid_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_boxed_blob_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_boxed_blob_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_test_id_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_test_id_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_array_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_array_twin_sse(port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_complex_array_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_complex_array_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_last_number_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_last_number_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_nested_id_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_nested_id_twin_sse(port_, ptr_, rust_vec_len_, data_len_);

  void wire_new_msgid_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_new_msgid_twin_sse(port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_boxed_feed_id_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_boxed_feed_id_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_boxed_raw_feed_id_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_boxed_raw_feed_id_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_boxed_blob_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_boxed_blob_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_msgid_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_msgid_twin_sse(port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_boxed_blob_twin_sync(Uint8List blob) =>
          wasmModule.wire_boxed_blob_twin_sync(blob);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_test_id_twin_sync(List<dynamic> id) =>
          wasmModule.wire_func_test_id_twin_sync(id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_array_twin_sync() => wasmModule.wire_get_array_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_complex_array_twin_sync() =>
          wasmModule.wire_get_complex_array_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_last_number_twin_sync(Float64List array) =>
          wasmModule.wire_last_number_twin_sync(array);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_nested_id_twin_sync(List<dynamic> id) =>
          wasmModule.wire_nested_id_twin_sync(id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_new_msgid_twin_sync(Uint8List id) =>
          wasmModule.wire_new_msgid_twin_sync(id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_boxed_feed_id_twin_sync(Uint8List id) =>
          wasmModule.wire_return_boxed_feed_id_twin_sync(id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_boxed_raw_feed_id_twin_sync(List<dynamic> id) =>
          wasmModule.wire_return_boxed_raw_feed_id_twin_sync(id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_boxed_blob_twin_sync(List<dynamic> blob) =>
          wasmModule.wire_use_boxed_blob_twin_sync(blob);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_msgid_twin_sync(List<dynamic> id) =>
          wasmModule.wire_use_msgid_twin_sync(id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_boxed_blob_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_boxed_blob_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_test_id_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_test_id_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_array_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_array_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_complex_array_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_complex_array_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_last_number_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_last_number_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_nested_id_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_nested_id_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_new_msgid_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_new_msgid_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_boxed_feed_id_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_boxed_feed_id_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_boxed_raw_feed_id_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_boxed_raw_feed_id_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_boxed_blob_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_use_boxed_blob_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_msgid_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_use_msgid_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_func_async_simple_add(NativePortType port_, int a, int b) =>
      wasmModule.wire_func_async_simple_add(port_, a, b);

  void wire_func_async_void(NativePortType port_) =>
      wasmModule.wire_func_async_void(port_);

  void wire_handle_customized_struct_twin_rust_async(
          NativePortType port_, List<dynamic> val) =>
      wasmModule.wire_handle_customized_struct_twin_rust_async(port_, val);

  void wire_next_user_id_twin_rust_async(
          NativePortType port_, List<dynamic> user_id) =>
      wasmModule.wire_next_user_id_twin_rust_async(port_, user_id);

  void wire_handle_customized_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_customized_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_next_user_id_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_next_user_id_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_customized_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_customized_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_next_user_id_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_next_user_id_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_customized_struct_twin_sync(List<dynamic> val) =>
          wasmModule.wire_handle_customized_struct_twin_sync(val);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_next_user_id_twin_sync(List<dynamic> user_id) =>
          wasmModule.wire_next_user_id_twin_sync(user_id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_customized_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_customized_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_next_user_id_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_next_user_id_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_benchmark_input_bytes_twin_rust_async(
          NativePortType port_, Uint8List bytes) =>
      wasmModule.wire_benchmark_input_bytes_twin_rust_async(port_, bytes);

  void wire_benchmark_output_bytes_twin_rust_async(
          NativePortType port_, int size) =>
      wasmModule.wire_benchmark_output_bytes_twin_rust_async(port_, size);

  void wire_benchmark_void_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_benchmark_void_twin_rust_async(port_);

  void wire_benchmark_input_bytes_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_benchmark_input_bytes_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_benchmark_output_bytes_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_benchmark_output_bytes_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_benchmark_void_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_benchmark_void_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_benchmark_input_bytes_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_benchmark_input_bytes_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_benchmark_output_bytes_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_benchmark_output_bytes_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_benchmark_void_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_benchmark_void_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_benchmark_input_bytes_twin_sync(Uint8List bytes) =>
          wasmModule.wire_benchmark_input_bytes_twin_sync(bytes);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_benchmark_output_bytes_twin_sync(int size) =>
          wasmModule.wire_benchmark_output_bytes_twin_sync(size);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_benchmark_void_twin_sync() =>
          wasmModule.wire_benchmark_void_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_benchmark_input_bytes_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_benchmark_input_bytes_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_benchmark_output_bytes_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_benchmark_output_bytes_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_benchmark_void_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_benchmark_void_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_datetime_local_twin_rust_async(NativePortType port_, Object d) =>
      wasmModule.wire_datetime_local_twin_rust_async(port_, d);

  void wire_datetime_utc_twin_rust_async(NativePortType port_, Object d) =>
      wasmModule.wire_datetime_utc_twin_rust_async(port_, d);

  void wire_duration_twin_rust_async(NativePortType port_, Object d) =>
      wasmModule.wire_duration_twin_rust_async(port_, d);

  void wire_handle_durations_twin_rust_async(
          NativePortType port_, List<dynamic> durations, Object since) =>
      wasmModule.wire_handle_durations_twin_rust_async(port_, durations, since);

  void wire_handle_timestamps_twin_rust_async(
          NativePortType port_, List<dynamic> timestamps, Object epoch) =>
      wasmModule.wire_handle_timestamps_twin_rust_async(
          port_, timestamps, epoch);

  void wire_how_long_does_it_take_twin_rust_async(
          NativePortType port_, List<dynamic> mine) =>
      wasmModule.wire_how_long_does_it_take_twin_rust_async(port_, mine);

  void wire_naivedatetime_twin_rust_async(NativePortType port_, Object d) =>
      wasmModule.wire_naivedatetime_twin_rust_async(port_, d);

  void wire_optional_empty_datetime_utc_twin_rust_async(
          NativePortType port_, Object? d) =>
      wasmModule.wire_optional_empty_datetime_utc_twin_rust_async(port_, d);

  void wire_test_chrono_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_test_chrono_twin_rust_async(port_);

  void wire_test_precise_chrono_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_test_precise_chrono_twin_rust_async(port_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_datetime_local_twin_sync(Object d) =>
          wasmModule.wire_datetime_local_twin_sync(d);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_datetime_utc_twin_sync(Object d) =>
          wasmModule.wire_datetime_utc_twin_sync(d);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_duration_twin_sync(Object d) =>
          wasmModule.wire_duration_twin_sync(d);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_durations_twin_sync(List<dynamic> durations, Object since) =>
          wasmModule.wire_handle_durations_twin_sync(durations, since);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_timestamps_twin_sync(
              List<dynamic> timestamps, Object epoch) =>
          wasmModule.wire_handle_timestamps_twin_sync(timestamps, epoch);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_how_long_does_it_take_twin_sync(List<dynamic> mine) =>
          wasmModule.wire_how_long_does_it_take_twin_sync(mine);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_naivedatetime_twin_sync(Object d) =>
          wasmModule.wire_naivedatetime_twin_sync(d);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_optional_empty_datetime_utc_twin_sync(Object? d) =>
          wasmModule.wire_optional_empty_datetime_utc_twin_sync(d);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_chrono_twin_sync() => wasmModule.wire_test_chrono_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_precise_chrono_twin_sync() =>
          wasmModule.wire_test_precise_chrono_twin_sync();

  void wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async(
              port_, that);

  void wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async(
              port_);

  void wire_function_with_comments_slash_star_star_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_function_with_comments_slash_star_star_twin_rust_async(port_);

  void wire_function_with_comments_triple_slash_multi_line_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_function_with_comments_triple_slash_multi_line_twin_rust_async(
              port_);

  void wire_function_with_comments_triple_slash_single_line_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_function_with_comments_triple_slash_single_line_twin_rust_async(
              port_);

  void wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_function_with_comments_slash_star_star_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_function_with_comments_slash_star_star_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_StructWithCommentsTwinSse_instance_method_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_StructWithCommentsTwinSse_instance_method_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_StructWithCommentsTwinSse_static_method_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_StructWithCommentsTwinSse_static_method_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_function_with_comments_slash_star_star_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_function_with_comments_slash_star_star_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_function_with_comments_triple_slash_multi_line_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_function_with_comments_triple_slash_multi_line_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_function_with_comments_triple_slash_single_line_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_function_with_comments_triple_slash_single_line_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_StructWithCommentsTwinSync_instance_method_twin_sync(
              List<dynamic> that) =>
          wasmModule
              .wire_StructWithCommentsTwinSync_instance_method_twin_sync(that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_StructWithCommentsTwinSync_static_method_twin_sync() =>
          wasmModule.wire_StructWithCommentsTwinSync_static_method_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_function_with_comments_slash_star_star_twin_sync() =>
          wasmModule.wire_function_with_comments_slash_star_star_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_function_with_comments_triple_slash_multi_line_twin_sync() =>
          wasmModule
              .wire_function_with_comments_triple_slash_multi_line_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_function_with_comments_triple_slash_single_line_twin_sync() =>
          wasmModule
              .wire_function_with_comments_triple_slash_single_line_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_function_with_comments_slash_star_star_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_function_with_comments_slash_star_star_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_function_with_comments_triple_slash_multi_line_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_function_with_comments_triple_slash_multi_line_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_function_with_comments_triple_slash_single_line_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_function_with_comments_triple_slash_single_line_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  void wire_return_dart_dynamic_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_return_dart_dynamic_twin_rust_async(port_);

  void wire_return_dart_dynamic_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_dart_dynamic_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_dart_dynamic_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_dart_dynamic_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_dart_dynamic_twin_sync() =>
          wasmModule.wire_return_dart_dynamic_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_dart_dynamic_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_dart_dynamic_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_rust_call_dart_simple(NativePortType port_, Object callback) =>
      wasmModule.wire_rust_call_dart_simple(port_, callback);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_accept_dart_opaque_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_accept_dart_opaque_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_loopback_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_loopback_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_option_dart_opaque_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_option_dart_opaque_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_option_loopback_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_option_loopback_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_unwrap_dart_opaque_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_unwrap_dart_opaque_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_async_accept_dart_opaque_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_async_accept_dart_opaque_twin_rust_async(port_, opaque);

  void wire_clone_dart_opaque_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_clone_dart_opaque_twin_rust_async(port_, opaque);

  void wire_create_enum_dart_opaque_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_create_enum_dart_opaque_twin_rust_async(port_, opaque);

  void wire_create_nested_dart_opaque_twin_rust_async(
          NativePortType port_, Object opaque1, Object opaque2) =>
      wasmModule.wire_create_nested_dart_opaque_twin_rust_async(
          port_, opaque1, opaque2);

  void wire_drop_static_dart_opaque_twin_rust_async(
          NativePortType port_, int id) =>
      wasmModule.wire_drop_static_dart_opaque_twin_rust_async(port_, id);

  void wire_get_enum_dart_opaque_twin_rust_async(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_get_enum_dart_opaque_twin_rust_async(port_, opaque);

  void wire_get_nested_dart_opaque_twin_rust_async(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_get_nested_dart_opaque_twin_rust_async(port_, opaque);

  void wire_loop_back_array_get_twin_rust_async(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_loop_back_array_get_twin_rust_async(port_, opaque);

  void wire_loop_back_array_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_array_twin_rust_async(port_, opaque);

  void wire_loop_back_option_get_twin_rust_async(
          NativePortType port_, Object? opaque) =>
      wasmModule.wire_loop_back_option_get_twin_rust_async(port_, opaque);

  void wire_loop_back_option_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_option_twin_rust_async(port_, opaque);

  void wire_loop_back_twin_rust_async(NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_twin_rust_async(port_, opaque);

  void wire_loop_back_vec_get_twin_rust_async(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_loop_back_vec_get_twin_rust_async(port_, opaque);

  void wire_loop_back_vec_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_loop_back_vec_twin_rust_async(port_, opaque);

  void wire_panic_unwrap_dart_opaque_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_panic_unwrap_dart_opaque_twin_rust_async(port_, opaque);

  void wire_set_static_dart_opaque_twin_rust_async(
          NativePortType port_, int id, Object opaque) =>
      wasmModule.wire_set_static_dart_opaque_twin_rust_async(port_, id, opaque);

  void wire_async_accept_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_async_accept_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_clone_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_clone_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_enum_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_enum_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_nested_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_nested_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_drop_static_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_drop_static_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_enum_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_enum_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_nested_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_nested_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_array_get_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_array_get_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_array_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_array_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_option_get_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_option_get_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_option_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_option_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_vec_get_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_vec_get_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_vec_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_vec_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_panic_unwrap_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_panic_unwrap_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_set_static_dart_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_set_static_dart_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_async_accept_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_async_accept_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_clone_dart_opaque_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_clone_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_enum_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_enum_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_nested_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_nested_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_drop_static_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_drop_static_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_enum_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_enum_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_nested_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_nested_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_array_get_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_array_get_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_array_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_array_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_option_get_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_option_get_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_option_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_option_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_twin_sse(port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_vec_get_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_vec_get_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_loop_back_vec_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_loop_back_vec_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_panic_unwrap_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_panic_unwrap_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_set_static_dart_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_set_static_dart_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_async_accept_dart_opaque_twin_sync(Object opaque) =>
          wasmModule.wire_async_accept_dart_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_clone_dart_opaque_twin_sync(Object opaque) =>
          wasmModule.wire_clone_dart_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_enum_dart_opaque_twin_sync(Object opaque) =>
          wasmModule.wire_create_enum_dart_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_nested_dart_opaque_twin_sync(
              Object opaque1, Object opaque2) =>
          wasmModule.wire_create_nested_dart_opaque_twin_sync(opaque1, opaque2);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_drop_static_dart_opaque_twin_sync(int id) =>
          wasmModule.wire_drop_static_dart_opaque_twin_sync(id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_enum_dart_opaque_twin_sync(List<dynamic> opaque) =>
          wasmModule.wire_get_enum_dart_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_nested_dart_opaque_twin_sync(List<dynamic> opaque) =>
          wasmModule.wire_get_nested_dart_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_array_get_twin_sync(List<dynamic> opaque) =>
          wasmModule.wire_loop_back_array_get_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_array_twin_sync(Object opaque) =>
          wasmModule.wire_loop_back_array_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_option_get_twin_sync(Object? opaque) =>
          wasmModule.wire_loop_back_option_get_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_option_twin_sync(Object opaque) =>
          wasmModule.wire_loop_back_option_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_twin_sync(Object opaque) =>
          wasmModule.wire_loop_back_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_vec_get_twin_sync(List<dynamic> opaque) =>
          wasmModule.wire_loop_back_vec_get_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_vec_twin_sync(Object opaque) =>
          wasmModule.wire_loop_back_vec_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_panic_unwrap_dart_opaque_twin_sync(Object opaque) =>
          wasmModule.wire_panic_unwrap_dart_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_set_static_dart_opaque_twin_sync(int id, Object opaque) =>
          wasmModule.wire_set_static_dart_opaque_twin_sync(id, opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_async_accept_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_async_accept_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_clone_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_clone_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_enum_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_create_enum_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_nested_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_create_nested_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_drop_static_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_drop_static_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_enum_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_enum_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_nested_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_nested_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_array_get_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_loop_back_array_get_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_array_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_loop_back_array_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_option_get_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_loop_back_option_get_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_option_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_loop_back_option_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_loop_back_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_vec_get_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_loop_back_vec_get_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_vec_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_loop_back_vec_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_panic_unwrap_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_panic_unwrap_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_set_static_dart_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_set_static_dart_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_simple_twin_rust_async(NativePortType port_, int arg) =>
      wasmModule.wire_func_enum_simple_twin_rust_async(port_, arg);

  void wire_func_enum_with_item_mixed_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_enum_with_item_mixed_twin_rust_async(port_, arg);

  void wire_func_enum_with_item_struct_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_enum_with_item_struct_twin_rust_async(port_, arg);

  void wire_func_enum_with_item_tuple_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_enum_with_item_tuple_twin_rust_async(port_, arg);

  void wire_handle_enum_parameter_twin_rust_async(
          NativePortType port_, int weekday) =>
      wasmModule.wire_handle_enum_parameter_twin_rust_async(port_, weekday);

  void wire_handle_enum_struct_twin_rust_async(
          NativePortType port_, List<dynamic> val) =>
      wasmModule.wire_handle_enum_struct_twin_rust_async(port_, val);

  void wire_handle_return_enum_twin_rust_async(
          NativePortType port_, String input) =>
      wasmModule.wire_handle_return_enum_twin_rust_async(port_, input);

  void wire_multiply_by_ten_twin_rust_async(
          NativePortType port_, List<dynamic> measure) =>
      wasmModule.wire_multiply_by_ten_twin_rust_async(port_, measure);

  void wire_print_note_twin_rust_async(
          NativePortType port_, List<dynamic> note) =>
      wasmModule.wire_print_note_twin_rust_async(port_, note);

  void wire_func_enum_simple_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_simple_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_with_item_mixed_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_with_item_mixed_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_with_item_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_with_item_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_with_item_tuple_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_with_item_tuple_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_enum_parameter_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_enum_parameter_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_enum_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_enum_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_return_enum_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_return_enum_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_multiply_by_ten_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_multiply_by_ten_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_print_note_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_print_note_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_simple_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_simple_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_with_item_mixed_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_with_item_mixed_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_with_item_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_with_item_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_enum_with_item_tuple_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_enum_with_item_tuple_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_enum_parameter_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_enum_parameter_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_enum_struct_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_enum_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_return_enum_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_return_enum_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_multiply_by_ten_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_multiply_by_ten_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_print_note_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_print_note_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_simple_twin_sync(int arg) =>
          wasmModule.wire_func_enum_simple_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_with_item_mixed_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_enum_with_item_mixed_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_with_item_struct_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_enum_with_item_struct_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_with_item_tuple_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_enum_with_item_tuple_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_enum_parameter_twin_sync(int weekday) =>
          wasmModule.wire_handle_enum_parameter_twin_sync(weekday);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_enum_struct_twin_sync(List<dynamic> val) =>
          wasmModule.wire_handle_enum_struct_twin_sync(val);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_return_enum_twin_sync(String input) =>
          wasmModule.wire_handle_return_enum_twin_sync(input);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_multiply_by_ten_twin_sync(List<dynamic> measure) =>
          wasmModule.wire_multiply_by_ten_twin_sync(measure);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_print_note_twin_sync(List<dynamic> note) =>
          wasmModule.wire_print_note_twin_sync(note);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_simple_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_enum_simple_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_with_item_mixed_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_enum_with_item_mixed_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_with_item_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_enum_with_item_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_with_item_tuple_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_enum_with_item_tuple_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_enum_parameter_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_enum_parameter_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_enum_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_enum_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_return_enum_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_return_enum_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_multiply_by_ten_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_multiply_by_ten_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_print_note_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_print_note_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_EventTwinRustAsync_as_string_twin_rust_async(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_EventTwinRustAsync_as_string_twin_rust_async(port_, that);

  void wire_close_event_listener_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_close_event_listener_twin_rust_async(port_);

  void wire_create_event_twin_rust_async(
          NativePortType port_, String address, String payload) =>
      wasmModule.wire_create_event_twin_rust_async(port_, address, payload);

  void wire_register_event_listener_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_register_event_listener_twin_rust_async(port_);

  void wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_close_event_listener_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_close_event_listener_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_event_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_event_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_register_event_listener_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_register_event_listener_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_EventTwinSse_as_string_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_EventTwinSse_as_string_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_close_event_listener_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_close_event_listener_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_event_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_event_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_register_event_listener_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_register_event_listener_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinRustAsync_new_twin_rust_async(
          NativePortType port_, String message) =>
      wasmModule.wire_CustomStructTwinRustAsync_new_twin_rust_async(
          port_, message);

  void wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async(
              port_, that);

  void wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async(
              port_, that);

  void wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async(
              port_);

  void wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async(
              port_);

  void wire_SomeStructTwinRustAsync_new_twin_rust_async(
          NativePortType port_, int value) =>
      wasmModule.wire_SomeStructTwinRustAsync_new_twin_rust_async(port_, value);

  void wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async(
              port_, that);

  void wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async(
              port_, that);

  void wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async(
              port_);

  void wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async(
              port_);

  void wire_custom_enum_error_panic_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_custom_enum_error_panic_twin_rust_async(port_);

  void wire_custom_enum_error_return_error_twin_rust_async(
          NativePortType port_) =>
      wasmModule.wire_custom_enum_error_return_error_twin_rust_async(port_);

  void wire_custom_enum_error_return_ok_twin_rust_async(
          NativePortType port_, int arg) =>
      wasmModule.wire_custom_enum_error_return_ok_twin_rust_async(port_, arg);

  void wire_custom_nested_error_return_error_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_custom_nested_error_return_error_twin_rust_async(
          port_, arg);

  void wire_custom_struct_error_return_error_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_custom_struct_error_return_error_twin_rust_async(
          port_, arg);

  void wire_func_return_error_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_func_return_error_twin_rust_async(port_);

  void wire_func_type_fallible_panic_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_func_type_fallible_panic_twin_rust_async(port_);

  void wire_func_type_infallible_panic_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_func_type_infallible_panic_twin_rust_async(port_);

  void wire_panic_with_custom_result_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_panic_with_custom_result_twin_rust_async(port_);

  void wire_return_custom_nested_error_1_twin_rust_async(
          NativePortType port_) =>
      wasmModule.wire_return_custom_nested_error_1_twin_rust_async(port_);

  void wire_return_custom_nested_error_1_variant1_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_return_custom_nested_error_1_variant1_twin_rust_async(port_);

  void wire_return_custom_nested_error_2_twin_rust_async(
          NativePortType port_) =>
      wasmModule.wire_return_custom_nested_error_2_twin_rust_async(port_);

  void wire_return_custom_struct_error_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_return_custom_struct_error_twin_rust_async(port_);

  void wire_return_custom_struct_ok_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_return_custom_struct_ok_twin_rust_async(port_);

  void wire_return_err_custom_error_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_return_err_custom_error_twin_rust_async(port_);

  void wire_return_error_variant_twin_rust_async(
          NativePortType port_, int variant) =>
      wasmModule.wire_return_error_variant_twin_rust_async(port_, variant);

  void wire_return_ok_custom_error_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_return_ok_custom_error_twin_rust_async(port_);

  void wire_stream_sink_throw_anyhow_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_stream_sink_throw_anyhow_twin_rust_async(port_);

  void wire_throw_anyhow_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_throw_anyhow_twin_rust_async(port_);

  void wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_enum_error_panic_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_enum_error_panic_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_enum_error_return_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_enum_error_return_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_enum_error_return_ok_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_enum_error_return_ok_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_nested_error_return_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_nested_error_return_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_struct_error_return_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_struct_error_return_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_return_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_return_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_type_fallible_panic_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_type_fallible_panic_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_type_infallible_panic_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_type_infallible_panic_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_panic_with_custom_result_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_panic_with_custom_result_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_nested_error_1_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_nested_error_1_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_nested_error_1_variant1_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_nested_error_1_variant1_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_nested_error_2_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_nested_error_2_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_struct_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_struct_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_struct_ok_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_struct_ok_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_err_custom_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_err_custom_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_error_variant_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_error_variant_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_ok_custom_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_ok_custom_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_stream_sink_throw_anyhow_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_stream_sink_throw_anyhow_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_throw_anyhow_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_throw_anyhow_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinSse_new_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_CustomStructTwinSse_new_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinSse_new_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_SomeStructTwinSse_new_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_enum_error_panic_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_enum_error_panic_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_enum_error_return_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_enum_error_return_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_enum_error_return_ok_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_enum_error_return_ok_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_nested_error_return_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_nested_error_return_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_custom_struct_error_return_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_custom_struct_error_return_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_return_error_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_return_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_type_fallible_panic_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_type_fallible_panic_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_type_infallible_panic_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_type_infallible_panic_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_panic_with_custom_result_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_panic_with_custom_result_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_nested_error_1_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_nested_error_1_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_nested_error_1_variant1_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_nested_error_1_variant1_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_nested_error_2_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_nested_error_2_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_struct_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_struct_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_custom_struct_ok_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_custom_struct_ok_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_err_custom_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_err_custom_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_error_variant_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_error_variant_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_return_ok_custom_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_return_ok_custom_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_stream_sink_throw_anyhow_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_stream_sink_throw_anyhow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_throw_anyhow_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_throw_anyhow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_new_twin_sync(String message) =>
          wasmModule.wire_CustomStructTwinSync_new_twin_sync(message);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync(
              List<dynamic> that) =>
          wasmModule
              .wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync(
              List<dynamic> that) =>
          wasmModule
              .wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync() =>
          wasmModule
              .wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync() =>
          wasmModule
              .wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_new_twin_sync(int value) =>
          wasmModule.wire_SomeStructTwinSync_new_twin_sync(value);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync(
              List<dynamic> that) =>
          wasmModule
              .wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync(
              List<dynamic> that) =>
          wasmModule
              .wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync() =>
          wasmModule
              .wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync() =>
          wasmModule
              .wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_enum_error_panic_twin_sync() =>
          wasmModule.wire_custom_enum_error_panic_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_enum_error_return_error_twin_sync() =>
          wasmModule.wire_custom_enum_error_return_error_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_enum_error_return_ok_twin_sync(int arg) =>
          wasmModule.wire_custom_enum_error_return_ok_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_nested_error_return_error_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_custom_nested_error_return_error_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_struct_error_return_error_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_custom_struct_error_return_error_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_return_error_twin_sync() =>
          wasmModule.wire_func_return_error_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_type_fallible_panic_twin_sync() =>
          wasmModule.wire_func_type_fallible_panic_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_type_infallible_panic_twin_sync() =>
          wasmModule.wire_func_type_infallible_panic_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_panic_with_custom_result_twin_sync() =>
          wasmModule.wire_panic_with_custom_result_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_nested_error_1_twin_sync() =>
          wasmModule.wire_return_custom_nested_error_1_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_nested_error_1_variant1_twin_sync() =>
          wasmModule.wire_return_custom_nested_error_1_variant1_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_nested_error_2_twin_sync() =>
          wasmModule.wire_return_custom_nested_error_2_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_struct_error_twin_sync() =>
          wasmModule.wire_return_custom_struct_error_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_struct_ok_twin_sync() =>
          wasmModule.wire_return_custom_struct_ok_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_err_custom_error_twin_sync() =>
          wasmModule.wire_return_err_custom_error_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_error_variant_twin_sync(int variant) =>
          wasmModule.wire_return_error_variant_twin_sync(variant);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_ok_custom_error_twin_sync() =>
          wasmModule.wire_return_ok_custom_error_twin_sync();

  void wire_stream_sink_throw_anyhow_twin_sync(NativePortType port_) =>
      wasmModule.wire_stream_sink_throw_anyhow_twin_sync(port_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_throw_anyhow_twin_sync() => wasmModule.wire_throw_anyhow_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_new_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_CustomStructTwinSyncSse_new_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_new_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_SomeStructTwinSyncSse_new_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_enum_error_panic_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_custom_enum_error_panic_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_enum_error_return_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_custom_enum_error_return_error_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_enum_error_return_ok_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_custom_enum_error_return_ok_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_nested_error_return_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_custom_nested_error_return_error_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_struct_error_return_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_custom_struct_error_return_error_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_return_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_return_error_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_type_fallible_panic_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_type_fallible_panic_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_type_infallible_panic_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_type_infallible_panic_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_panic_with_custom_result_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_panic_with_custom_result_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_nested_error_1_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_custom_nested_error_1_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_nested_error_1_variant1_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_custom_nested_error_1_variant1_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_nested_error_2_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_custom_nested_error_2_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_struct_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_custom_struct_error_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_struct_ok_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_custom_struct_ok_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_err_custom_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_err_custom_error_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_error_variant_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_error_variant_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_ok_custom_error_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_return_ok_custom_error_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_stream_sink_throw_anyhow_twin_sync_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_stream_sink_throw_anyhow_twin_sync_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_throw_anyhow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_throw_anyhow_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_call_new_module_system_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_call_new_module_system_twin_rust_async(port_);

  void wire_call_old_module_system_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_call_old_module_system_twin_rust_async(port_);

  void wire_use_imported_enum_twin_rust_async(
          NativePortType port_, int my_enum) =>
      wasmModule.wire_use_imported_enum_twin_rust_async(port_, my_enum);

  void wire_use_imported_struct_twin_rust_async(
          NativePortType port_, List<dynamic> my_struct) =>
      wasmModule.wire_use_imported_struct_twin_rust_async(port_, my_struct);

  void wire_call_new_module_system_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_call_new_module_system_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_call_old_module_system_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_call_old_module_system_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_imported_enum_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_imported_enum_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_imported_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_imported_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_call_new_module_system_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_call_new_module_system_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_call_old_module_system_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_call_old_module_system_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_imported_enum_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_imported_enum_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_use_imported_struct_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_use_imported_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_call_new_module_system_twin_sync() =>
          wasmModule.wire_call_new_module_system_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_call_old_module_system_twin_sync() =>
          wasmModule.wire_call_old_module_system_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_imported_enum_twin_sync(int my_enum) =>
          wasmModule.wire_use_imported_enum_twin_sync(my_enum);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_imported_struct_twin_sync(List<dynamic> my_struct) =>
          wasmModule.wire_use_imported_struct_twin_sync(my_struct);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_call_new_module_system_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_call_new_module_system_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_call_old_module_system_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_call_old_module_system_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_imported_enum_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_use_imported_enum_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_imported_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_use_imported_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_another_macro_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_another_macro_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_macro_struct_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_macro_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async(
          NativePortType port_, String a, String b) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async(
              port_, a, b);

  void wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async(
          NativePortType port_, List<dynamic> that, String b) =>
      wasmModule.wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async(
          port_, that, b);

  void wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async(
              port_);

  void wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async(
          NativePortType port_, int key, int max) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async(
              port_, key, max);

  void wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async(
              port_, that);

  void wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async(
          NativePortType port_, List<dynamic> that, int key, int max) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async(
              port_, that, key, max);

  void wire_ConcatenateWithTwinRustAsync_new_twin_rust_async(
          NativePortType port_, String a) =>
      wasmModule.wire_ConcatenateWithTwinRustAsync_new_twin_rust_async(
          port_, a);

  void wire_SumWithTwinRustAsync_sum_twin_rust_async(
          NativePortType port_, List<dynamic> that, int y, int z) =>
      wasmModule.wire_SumWithTwinRustAsync_sum_twin_rust_async(
          port_, that, y, z);

  void wire_get_sum_array_twin_rust_async(
          NativePortType port_, int a, int b, int c) =>
      wasmModule.wire_get_sum_array_twin_rust_async(port_, a, b, c);

  void wire_get_sum_struct_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_get_sum_struct_twin_rust_async(port_);

  void wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_sum_array_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_sum_array_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_sum_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_sum_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSse_concatenate_static_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_ConcatenateWithTwinSse_concatenate_static_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSse_concatenate_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_ConcatenateWithTwinSse_concatenate_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSse_new_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_ConcatenateWithTwinSse_new_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_SumWithTwinSse_sum_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_SumWithTwinSse_sum_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_sum_array_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_sum_array_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_sum_struct_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_sum_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_ConcatenateWithTwinSync_concatenate_static_twin_sync(
              String a, String b) =>
          wasmModule.wire_ConcatenateWithTwinSync_concatenate_static_twin_sync(
              a, b);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_ConcatenateWithTwinSync_concatenate_twin_sync(
              List<dynamic> that, String b) =>
          wasmModule.wire_ConcatenateWithTwinSync_concatenate_twin_sync(
              that, b);

  void wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync(
          NativePortType port_) =>
      wasmModule
          .wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync(
              port_);

  void wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync(
          NativePortType port_, int key, int max) =>
      wasmModule
          .wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync(
              port_, key, max);

  void wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync(
          NativePortType port_, List<dynamic> that) =>
      wasmModule
          .wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync(
              port_, that);

  void wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync(
          NativePortType port_, List<dynamic> that, int key, int max) =>
      wasmModule.wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync(
          port_, that, key, max);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_ConcatenateWithTwinSync_new_twin_sync(String a) =>
          wasmModule.wire_ConcatenateWithTwinSync_new_twin_sync(a);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SumWithTwinSync_sum_twin_sync(List<dynamic> that, int y, int z) =>
          wasmModule.wire_SumWithTwinSync_sum_twin_sync(that, y, z);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_sum_array_twin_sync(int a, int b, int c) =>
          wasmModule.wire_get_sum_array_twin_sync(a, b, c);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_sum_struct_twin_sync() =>
          wasmModule.wire_get_sum_struct_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SumWithTwinSyncSse_sum_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_SumWithTwinSyncSse_sum_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_sum_array_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_sum_array_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_sum_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_sum_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_app_settings_stream_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_app_settings_stream_twin_rust_async(port_);

  void wire_app_settings_vec_stream_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_app_settings_vec_stream_twin_rust_async(port_);

  void wire_first_number_twin_rust_async(
          NativePortType port_, List<dynamic> nums) =>
      wasmModule.wire_first_number_twin_rust_async(port_, nums);

  void wire_first_sequence_twin_rust_async(
          NativePortType port_, List<dynamic> seqs) =>
      wasmModule.wire_first_sequence_twin_rust_async(port_, seqs);

  void wire_get_app_settings_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_get_app_settings_twin_rust_async(port_);

  void wire_get_fallible_app_settings_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_get_fallible_app_settings_twin_rust_async(port_);

  void wire_get_message_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_get_message_twin_rust_async(port_);

  void wire_is_app_embedded_twin_rust_async(
          NativePortType port_, List<dynamic> app_settings) =>
      wasmModule.wire_is_app_embedded_twin_rust_async(port_, app_settings);

  void wire_mirror_struct_stream_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_mirror_struct_stream_twin_rust_async(port_);

  void wire_mirror_tuple_stream_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_mirror_tuple_stream_twin_rust_async(port_);

  void wire_repeat_number_twin_rust_async(
          NativePortType port_, int num, int times) =>
      wasmModule.wire_repeat_number_twin_rust_async(port_, num, times);

  void wire_repeat_sequence_twin_rust_async(
          NativePortType port_, int seq, int times) =>
      wasmModule.wire_repeat_sequence_twin_rust_async(port_, seq, times);

  void wire_test_contains_mirrored_sub_struct_twin_rust_async(
          NativePortType port_) =>
      wasmModule.wire_test_contains_mirrored_sub_struct_twin_rust_async(port_);

  void wire_test_fallible_of_raw_string_mirrored_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_test_fallible_of_raw_string_mirrored_twin_rust_async(port_);

  void wire_test_list_of_nested_enums_mirrored_twin_rust_async(
          NativePortType port_) =>
      wasmModule.wire_test_list_of_nested_enums_mirrored_twin_rust_async(port_);

  void wire_test_list_of_raw_nested_string_mirrored_twin_rust_async(
          NativePortType port_) =>
      wasmModule
          .wire_test_list_of_raw_nested_string_mirrored_twin_rust_async(port_);

  void wire_test_nested_raw_string_mirrored_twin_rust_async(
          NativePortType port_) =>
      wasmModule.wire_test_nested_raw_string_mirrored_twin_rust_async(port_);

  void wire_test_raw_string_enum_mirrored_twin_rust_async(
          NativePortType port_, bool nested) =>
      wasmModule.wire_test_raw_string_enum_mirrored_twin_rust_async(
          port_, nested);

  void wire_test_raw_string_mirrored_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_test_raw_string_mirrored_twin_rust_async(port_);

  void wire_app_settings_stream_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_app_settings_stream_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_app_settings_vec_stream_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_app_settings_vec_stream_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_first_number_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_first_number_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_first_sequence_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_first_sequence_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_app_settings_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_app_settings_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_fallible_app_settings_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_fallible_app_settings_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_message_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_message_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_is_app_embedded_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_is_app_embedded_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_mirror_struct_stream_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_mirror_struct_stream_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_mirror_tuple_stream_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_mirror_tuple_stream_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_repeat_number_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_repeat_number_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_repeat_sequence_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_repeat_sequence_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_contains_mirrored_sub_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_contains_mirrored_sub_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_nested_raw_string_mirrored_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_nested_raw_string_mirrored_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_raw_string_enum_mirrored_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_raw_string_enum_mirrored_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_raw_string_mirrored_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_raw_string_mirrored_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_app_settings_stream_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_app_settings_stream_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_app_settings_vec_stream_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_app_settings_vec_stream_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_first_number_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_first_number_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_first_sequence_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_first_sequence_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_app_settings_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_app_settings_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_fallible_app_settings_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_fallible_app_settings_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_get_message_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_get_message_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_is_app_embedded_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_is_app_embedded_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_mirror_struct_stream_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_mirror_struct_stream_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_mirror_tuple_stream_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_mirror_tuple_stream_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_repeat_number_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_repeat_number_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_repeat_sequence_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_repeat_sequence_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_contains_mirrored_sub_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_contains_mirrored_sub_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_fallible_of_raw_string_mirrored_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_fallible_of_raw_string_mirrored_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_list_of_nested_enums_mirrored_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_list_of_nested_enums_mirrored_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_list_of_raw_nested_string_mirrored_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_list_of_raw_nested_string_mirrored_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_nested_raw_string_mirrored_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_nested_raw_string_mirrored_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_raw_string_enum_mirrored_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_raw_string_enum_mirrored_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_raw_string_mirrored_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_raw_string_mirrored_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_app_settings_stream_twin_sync(NativePortType port_) =>
      wasmModule.wire_app_settings_stream_twin_sync(port_);

  void wire_app_settings_vec_stream_twin_sync(NativePortType port_) =>
      wasmModule.wire_app_settings_vec_stream_twin_sync(port_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_first_number_twin_sync(List<dynamic> nums) =>
          wasmModule.wire_first_number_twin_sync(nums);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_first_sequence_twin_sync(List<dynamic> seqs) =>
          wasmModule.wire_first_sequence_twin_sync(seqs);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_app_settings_twin_sync() =>
          wasmModule.wire_get_app_settings_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_fallible_app_settings_twin_sync() =>
          wasmModule.wire_get_fallible_app_settings_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_message_twin_sync() => wasmModule.wire_get_message_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_is_app_embedded_twin_sync(List<dynamic> app_settings) =>
          wasmModule.wire_is_app_embedded_twin_sync(app_settings);

  void wire_mirror_struct_stream_twin_sync(NativePortType port_) =>
      wasmModule.wire_mirror_struct_stream_twin_sync(port_);

  void wire_mirror_tuple_stream_twin_sync(NativePortType port_) =>
      wasmModule.wire_mirror_tuple_stream_twin_sync(port_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_repeat_number_twin_sync(int num, int times) =>
          wasmModule.wire_repeat_number_twin_sync(num, times);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_repeat_sequence_twin_sync(int seq, int times) =>
          wasmModule.wire_repeat_sequence_twin_sync(seq, times);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_contains_mirrored_sub_struct_twin_sync() =>
          wasmModule.wire_test_contains_mirrored_sub_struct_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_fallible_of_raw_string_mirrored_twin_sync() =>
          wasmModule.wire_test_fallible_of_raw_string_mirrored_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_list_of_nested_enums_mirrored_twin_sync() =>
          wasmModule.wire_test_list_of_nested_enums_mirrored_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_list_of_raw_nested_string_mirrored_twin_sync() =>
          wasmModule.wire_test_list_of_raw_nested_string_mirrored_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_nested_raw_string_mirrored_twin_sync() =>
          wasmModule.wire_test_nested_raw_string_mirrored_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_raw_string_enum_mirrored_twin_sync(bool nested) =>
          wasmModule.wire_test_raw_string_enum_mirrored_twin_sync(nested);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_raw_string_mirrored_twin_sync() =>
          wasmModule.wire_test_raw_string_mirrored_twin_sync();

  void wire_app_settings_stream_twin_sync_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_app_settings_stream_twin_sync_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_app_settings_vec_stream_twin_sync_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_app_settings_vec_stream_twin_sync_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_first_number_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_first_number_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_first_sequence_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_first_sequence_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_app_settings_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_app_settings_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_fallible_app_settings_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_fallible_app_settings_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_message_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_get_message_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_is_app_embedded_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_is_app_embedded_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_mirror_struct_stream_twin_sync_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_mirror_struct_stream_twin_sync_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_mirror_tuple_stream_twin_sync_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_mirror_tuple_stream_twin_sync_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_repeat_number_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_repeat_number_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_repeat_sequence_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_repeat_sequence_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_contains_mirrored_sub_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_contains_mirrored_sub_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_fallible_of_raw_string_mirrored_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_fallible_of_raw_string_mirrored_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_list_of_nested_enums_mirrored_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_list_of_nested_enums_mirrored_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_nested_raw_string_mirrored_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_nested_raw_string_mirrored_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_raw_string_enum_mirrored_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_raw_string_enum_mirrored_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_raw_string_mirrored_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_raw_string_mirrored_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_handle_big_buffers_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_handle_big_buffers_twin_rust_async(port_);

  void wire_handle_complex_struct_twin_rust_async(
          NativePortType port_, List<dynamic> s) =>
      wasmModule.wire_handle_complex_struct_twin_rust_async(port_, s);

  void wire_handle_nested_struct_twin_rust_async(
          NativePortType port_, List<dynamic> s) =>
      wasmModule.wire_handle_nested_struct_twin_rust_async(port_, s);

  void wire_handle_string_twin_rust_async(NativePortType port_, String s) =>
      wasmModule.wire_handle_string_twin_rust_async(port_, s);

  void wire_handle_struct_twin_rust_async(
          NativePortType port_, List<dynamic> arg, List<dynamic> boxed) =>
      wasmModule.wire_handle_struct_twin_rust_async(port_, arg, boxed);

  void wire_handle_vec_u8_twin_rust_async(NativePortType port_, Uint8List v) =>
      wasmModule.wire_handle_vec_u8_twin_rust_async(port_, v);

  void wire_list_of_primitive_enums_twin_rust_async(
          NativePortType port_, List<dynamic> weekdays) =>
      wasmModule.wire_list_of_primitive_enums_twin_rust_async(port_, weekdays);

  void wire_test_abc_enum_twin_rust_async(
          NativePortType port_, List<dynamic> abc) =>
      wasmModule.wire_test_abc_enum_twin_rust_async(port_, abc);

  void wire_test_struct_with_enum_twin_rust_async(
          NativePortType port_, List<dynamic> se) =>
      wasmModule.wire_test_struct_with_enum_twin_rust_async(port_, se);

  void wire_handle_big_buffers_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_big_buffers_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_complex_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_complex_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_nested_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_nested_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_string_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_string_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_vec_u8_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_vec_u8_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_list_of_primitive_enums_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_list_of_primitive_enums_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_abc_enum_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_abc_enum_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_struct_with_enum_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_struct_with_enum_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_big_buffers_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_big_buffers_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_complex_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_complex_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_nested_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_nested_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_string_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_string_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_struct_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_vec_u8_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_vec_u8_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_list_of_primitive_enums_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_list_of_primitive_enums_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_abc_enum_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_abc_enum_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_struct_with_enum_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_struct_with_enum_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_big_buffers_twin_sync() =>
          wasmModule.wire_handle_big_buffers_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_complex_struct_twin_sync(List<dynamic> s) =>
          wasmModule.wire_handle_complex_struct_twin_sync(s);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_nested_struct_twin_sync(List<dynamic> s) =>
          wasmModule.wire_handle_nested_struct_twin_sync(s);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_string_twin_sync(String s) =>
          wasmModule.wire_handle_string_twin_sync(s);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_struct_twin_sync(List<dynamic> arg, List<dynamic> boxed) =>
          wasmModule.wire_handle_struct_twin_sync(arg, boxed);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_vec_u8_twin_sync(Uint8List v) =>
          wasmModule.wire_handle_vec_u8_twin_sync(v);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_list_of_primitive_enums_twin_sync(List<dynamic> weekdays) =>
          wasmModule.wire_list_of_primitive_enums_twin_sync(weekdays);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_abc_enum_twin_sync(List<dynamic> abc) =>
          wasmModule.wire_test_abc_enum_twin_sync(abc);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_struct_with_enum_twin_sync(List<dynamic> se) =>
          wasmModule.wire_test_struct_with_enum_twin_sync(se);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_big_buffers_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_big_buffers_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_complex_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_complex_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_nested_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_nested_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_string_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_string_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_vec_u8_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_vec_u8_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_list_of_primitive_enums_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_list_of_primitive_enums_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_abc_enum_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_abc_enum_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_struct_with_enum_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_struct_with_enum_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_empty_struct_twin_rust_async(
          NativePortType port_, List<dynamic> empty) =>
      wasmModule.wire_empty_struct_twin_rust_async(port_, empty);

  void wire_func_return_unit_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_func_return_unit_twin_rust_async(port_);

  void wire_func_string_twin_rust_async(NativePortType port_, String arg) =>
      wasmModule.wire_func_string_twin_rust_async(port_, arg);

  void wire_handle_list_of_struct_twin_rust_async(
          NativePortType port_, List<dynamic> l) =>
      wasmModule.wire_handle_list_of_struct_twin_rust_async(port_, l);

  void wire_handle_string_list_twin_rust_async(
          NativePortType port_, List<dynamic> names) =>
      wasmModule.wire_handle_string_list_twin_rust_async(port_, names);

  void wire_empty_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_empty_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_return_unit_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_return_unit_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_string_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_string_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_list_of_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_list_of_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_string_list_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_string_list_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_empty_struct_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_empty_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_return_unit_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_return_unit_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_string_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_string_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_list_of_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_list_of_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_string_list_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_string_list_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_empty_struct_twin_sync(List<dynamic> empty) =>
          wasmModule.wire_empty_struct_twin_sync(empty);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_return_unit_twin_sync() =>
          wasmModule.wire_func_return_unit_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_string_twin_sync(String arg) =>
          wasmModule.wire_func_string_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_list_of_struct_twin_sync(List<dynamic> l) =>
          wasmModule.wire_handle_list_of_struct_twin_sync(l);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_string_list_twin_sync(List<dynamic> names) =>
          wasmModule.wire_handle_string_list_twin_sync(names);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_empty_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_empty_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_return_unit_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_return_unit_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_string_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_string_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_list_of_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_list_of_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_string_list_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_string_list_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_handle_newtype_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_handle_newtype_twin_rust_async(port_, arg);

  void wire_handle_newtype_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_newtype_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_newtype_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_newtype_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_newtype_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_handle_newtype_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_newtype_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_newtype_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_bool_twin_normal(
          NativePortType port_, bool? arg) =>
      wasmModule.wire_example_optional_primitive_type_bool_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_f32_twin_normal(
          NativePortType port_, double? arg) =>
      wasmModule.wire_example_optional_primitive_type_f32_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_f64_twin_normal(
          NativePortType port_, double? arg) =>
      wasmModule.wire_example_optional_primitive_type_f64_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_i16_twin_normal(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_i16_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_i32_twin_normal(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_i32_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_i64_twin_normal(
          NativePortType port_, Object? arg) =>
      wasmModule.wire_example_optional_primitive_type_i64_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_i8_twin_normal(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_i8_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_u16_twin_normal(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_u16_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_u32_twin_normal(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_u32_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_u64_twin_normal(
          NativePortType port_, Object? arg) =>
      wasmModule.wire_example_optional_primitive_type_u64_twin_normal(
          port_, arg);

  void wire_example_optional_primitive_type_u8_twin_normal(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_u8_twin_normal(
          port_, arg);

  void wire_primitive_optional_types_twin_rust_async(NativePortType port_,
          int? my_i32, Object? my_i64, double? my_f64, bool? my_bool) =>
      wasmModule.wire_primitive_optional_types_twin_rust_async(
          port_, my_i32, my_i64, my_f64, my_bool);

  void wire_primitive_optional_types_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_primitive_optional_types_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_primitive_optional_types_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_primitive_optional_types_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_primitive_optional_types_twin_sync(
              int? my_i32, Object? my_i64, double? my_f64, bool? my_bool) =>
          wasmModule.wire_primitive_optional_types_twin_sync(
              my_i32, my_i64, my_f64, my_bool);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_primitive_optional_types_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_primitive_optional_types_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_bool_twin_rust_async(
          NativePortType port_, bool? arg) =>
      wasmModule.wire_example_optional_primitive_type_bool_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_f32_twin_rust_async(
          NativePortType port_, double? arg) =>
      wasmModule.wire_example_optional_primitive_type_f32_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_f64_twin_rust_async(
          NativePortType port_, double? arg) =>
      wasmModule.wire_example_optional_primitive_type_f64_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_i16_twin_rust_async(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_i16_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_i32_twin_rust_async(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_i32_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_i64_twin_rust_async(
          NativePortType port_, Object? arg) =>
      wasmModule.wire_example_optional_primitive_type_i64_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_i8_twin_rust_async(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_i8_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_u16_twin_rust_async(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_u16_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_u32_twin_rust_async(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_u32_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_u64_twin_rust_async(
          NativePortType port_, Object? arg) =>
      wasmModule.wire_example_optional_primitive_type_u64_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_u8_twin_rust_async(
          NativePortType port_, int? arg) =>
      wasmModule.wire_example_optional_primitive_type_u8_twin_rust_async(
          port_, arg);

  void wire_example_optional_primitive_type_bool_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_bool_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_f32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_f32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_f64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_f64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i16_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i16_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i8_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i8_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u16_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u16_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u8_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u8_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_bool_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_bool_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_f32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_f32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_f64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_f64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i16_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i16_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_i8_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_i8_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u16_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u16_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_optional_primitive_type_u8_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_optional_primitive_type_u8_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_bool_twin_sync(bool? arg) =>
          wasmModule.wire_example_optional_primitive_type_bool_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_f32_twin_sync(double? arg) =>
          wasmModule.wire_example_optional_primitive_type_f32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_f64_twin_sync(double? arg) =>
          wasmModule.wire_example_optional_primitive_type_f64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i16_twin_sync(int? arg) =>
          wasmModule.wire_example_optional_primitive_type_i16_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i32_twin_sync(int? arg) =>
          wasmModule.wire_example_optional_primitive_type_i32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i64_twin_sync(Object? arg) =>
          wasmModule.wire_example_optional_primitive_type_i64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i8_twin_sync(int? arg) =>
          wasmModule.wire_example_optional_primitive_type_i8_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u16_twin_sync(int? arg) =>
          wasmModule.wire_example_optional_primitive_type_u16_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u32_twin_sync(int? arg) =>
          wasmModule.wire_example_optional_primitive_type_u32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u64_twin_sync(Object? arg) =>
          wasmModule.wire_example_optional_primitive_type_u64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u8_twin_sync(int? arg) =>
          wasmModule.wire_example_optional_primitive_type_u8_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_bool_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_bool_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_f32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_f32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_f64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_f64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i16_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_i16_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_i32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_i64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i8_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_i8_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u16_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_u16_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_u32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_u64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u8_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_optional_primitive_type_u8_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_handle_increment_boxed_optional_twin_rust_async(
          NativePortType port_, double? opt) =>
      wasmModule.wire_handle_increment_boxed_optional_twin_rust_async(
          port_, opt);

  void wire_handle_option_box_arguments_twin_rust_async(
          NativePortType port_,
          int? i8box,
          int? u8box,
          int? i32box,
          Object? i64box,
          double? f64box,
          bool? boolbox,
          List<dynamic>? structbox) =>
      wasmModule.wire_handle_option_box_arguments_twin_rust_async(
          port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox);

  void wire_handle_optional_increment_twin_rust_async(
          NativePortType port_, List<dynamic>? opt) =>
      wasmModule.wire_handle_optional_increment_twin_rust_async(port_, opt);

  void wire_handle_optional_return_twin_rust_async(
          NativePortType port_, double left, double right) =>
      wasmModule.wire_handle_optional_return_twin_rust_async(
          port_, left, right);

  void wire_handle_optional_struct_twin_rust_async(
          NativePortType port_, String? document) =>
      wasmModule.wire_handle_optional_struct_twin_rust_async(port_, document);

  void wire_handle_vec_of_opts_twin_rust_async(
          NativePortType port_, List<dynamic> opt) =>
      wasmModule.wire_handle_vec_of_opts_twin_rust_async(port_, opt);

  void wire_handle_increment_boxed_optional_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_increment_boxed_optional_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_option_box_arguments_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_option_box_arguments_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_optional_increment_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_optional_increment_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_optional_return_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_optional_return_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_optional_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_optional_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_vec_of_opts_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_vec_of_opts_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_increment_boxed_optional_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_increment_boxed_optional_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_option_box_arguments_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_option_box_arguments_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_optional_increment_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_optional_increment_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_optional_return_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_optional_return_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_optional_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_optional_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_vec_of_opts_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_vec_of_opts_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_increment_boxed_optional_twin_sync(double? opt) =>
          wasmModule.wire_handle_increment_boxed_optional_twin_sync(opt);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_option_box_arguments_twin_sync(
              int? i8box,
              int? u8box,
              int? i32box,
              Object? i64box,
              double? f64box,
              bool? boolbox,
              List<dynamic>? structbox) =>
          wasmModule.wire_handle_option_box_arguments_twin_sync(
              i8box, u8box, i32box, i64box, f64box, boolbox, structbox);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_optional_increment_twin_sync(List<dynamic>? opt) =>
          wasmModule.wire_handle_optional_increment_twin_sync(opt);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_optional_return_twin_sync(double left, double right) =>
          wasmModule.wire_handle_optional_return_twin_sync(left, right);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_optional_struct_twin_sync(String? document) =>
          wasmModule.wire_handle_optional_struct_twin_sync(document);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_vec_of_opts_twin_sync(List<dynamic> opt) =>
          wasmModule.wire_handle_vec_of_opts_twin_sync(opt);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_increment_boxed_optional_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_increment_boxed_optional_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_option_box_arguments_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_option_box_arguments_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_optional_increment_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_optional_increment_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_optional_return_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_optional_return_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_optional_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_optional_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_vec_of_opts_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_vec_of_opts_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_bool_twin_normal(
          NativePortType port_, bool arg) =>
      wasmModule.wire_example_primitive_type_bool_twin_normal(port_, arg);

  void wire_example_primitive_type_f32_twin_normal(
          NativePortType port_, double arg) =>
      wasmModule.wire_example_primitive_type_f32_twin_normal(port_, arg);

  void wire_example_primitive_type_f64_twin_normal(
          NativePortType port_, double arg) =>
      wasmModule.wire_example_primitive_type_f64_twin_normal(port_, arg);

  void wire_example_primitive_type_i16_twin_normal(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_i16_twin_normal(port_, arg);

  void wire_example_primitive_type_i32_twin_normal(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_i32_twin_normal(port_, arg);

  void wire_example_primitive_type_i64_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule.wire_example_primitive_type_i64_twin_normal(port_, arg);

  void wire_example_primitive_type_i8_twin_normal(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_i8_twin_normal(port_, arg);

  void wire_example_primitive_type_u16_twin_normal(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_u16_twin_normal(port_, arg);

  void wire_example_primitive_type_u32_twin_normal(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_u32_twin_normal(port_, arg);

  void wire_example_primitive_type_u64_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule.wire_example_primitive_type_u64_twin_normal(port_, arg);

  void wire_example_primitive_type_u8_twin_normal(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_u8_twin_normal(port_, arg);

  void wire_example_primitive_list_type_bool_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_example_primitive_list_type_bool_twin_normal(port_, arg);

  void wire_example_primitive_list_type_f32_twin_normal(
          NativePortType port_, Float32List arg) =>
      wasmModule.wire_example_primitive_list_type_f32_twin_normal(port_, arg);

  void wire_example_primitive_list_type_f64_twin_normal(
          NativePortType port_, Float64List arg) =>
      wasmModule.wire_example_primitive_list_type_f64_twin_normal(port_, arg);

  void wire_example_primitive_list_type_i16_twin_normal(
          NativePortType port_, Int16List arg) =>
      wasmModule.wire_example_primitive_list_type_i16_twin_normal(port_, arg);

  void wire_example_primitive_list_type_i32_twin_normal(
          NativePortType port_, Int32List arg) =>
      wasmModule.wire_example_primitive_list_type_i32_twin_normal(port_, arg);

  void wire_example_primitive_list_type_i64_twin_normal(
          NativePortType port_, Object /* BigInt64Array */ arg) =>
      wasmModule.wire_example_primitive_list_type_i64_twin_normal(port_, arg);

  void wire_example_primitive_list_type_i8_twin_normal(
          NativePortType port_, Int8List arg) =>
      wasmModule.wire_example_primitive_list_type_i8_twin_normal(port_, arg);

  void wire_example_primitive_list_type_u16_twin_normal(
          NativePortType port_, Uint16List arg) =>
      wasmModule.wire_example_primitive_list_type_u16_twin_normal(port_, arg);

  void wire_example_primitive_list_type_u32_twin_normal(
          NativePortType port_, Uint32List arg) =>
      wasmModule.wire_example_primitive_list_type_u32_twin_normal(port_, arg);

  void wire_example_primitive_list_type_u64_twin_normal(
          NativePortType port_, Object /* BigInt64Array */ arg) =>
      wasmModule.wire_example_primitive_list_type_u64_twin_normal(port_, arg);

  void wire_example_primitive_list_type_u8_twin_normal(
          NativePortType port_, Uint8List arg) =>
      wasmModule.wire_example_primitive_list_type_u8_twin_normal(port_, arg);

  void wire_handle_vec_of_primitive_twin_rust_async(
          NativePortType port_, int n) =>
      wasmModule.wire_handle_vec_of_primitive_twin_rust_async(port_, n);

  void wire_handle_vec_of_primitive_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_vec_of_primitive_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_vec_of_primitive_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_vec_of_primitive_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_vec_of_primitive_twin_sync(int n) =>
          wasmModule.wire_handle_vec_of_primitive_twin_sync(n);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_vec_of_primitive_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_vec_of_primitive_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_bool_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_example_primitive_list_type_bool_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_f32_twin_rust_async(
          NativePortType port_, Float32List arg) =>
      wasmModule.wire_example_primitive_list_type_f32_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_f64_twin_rust_async(
          NativePortType port_, Float64List arg) =>
      wasmModule.wire_example_primitive_list_type_f64_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_i16_twin_rust_async(
          NativePortType port_, Int16List arg) =>
      wasmModule.wire_example_primitive_list_type_i16_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_i32_twin_rust_async(
          NativePortType port_, Int32List arg) =>
      wasmModule.wire_example_primitive_list_type_i32_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_i64_twin_rust_async(
          NativePortType port_, Object /* BigInt64Array */ arg) =>
      wasmModule.wire_example_primitive_list_type_i64_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_i8_twin_rust_async(
          NativePortType port_, Int8List arg) =>
      wasmModule.wire_example_primitive_list_type_i8_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_u16_twin_rust_async(
          NativePortType port_, Uint16List arg) =>
      wasmModule.wire_example_primitive_list_type_u16_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_u32_twin_rust_async(
          NativePortType port_, Uint32List arg) =>
      wasmModule.wire_example_primitive_list_type_u32_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_u64_twin_rust_async(
          NativePortType port_, Object /* BigInt64Array */ arg) =>
      wasmModule.wire_example_primitive_list_type_u64_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_u8_twin_rust_async(
          NativePortType port_, Uint8List arg) =>
      wasmModule.wire_example_primitive_list_type_u8_twin_rust_async(
          port_, arg);

  void wire_example_primitive_list_type_bool_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_bool_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_f32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_f32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_f64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_f64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i16_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i16_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i8_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i8_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u16_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u16_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u8_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u8_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_bool_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_bool_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_f32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_f32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_f64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_f64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i16_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i16_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_i8_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_i8_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u16_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u16_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_list_type_u8_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_list_type_u8_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_bool_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_example_primitive_list_type_bool_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_f32_twin_sync(Float32List arg) =>
          wasmModule.wire_example_primitive_list_type_f32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_f64_twin_sync(Float64List arg) =>
          wasmModule.wire_example_primitive_list_type_f64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i16_twin_sync(Int16List arg) =>
          wasmModule.wire_example_primitive_list_type_i16_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i32_twin_sync(Int32List arg) =>
          wasmModule.wire_example_primitive_list_type_i32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i64_twin_sync(
              Object /* BigInt64Array */ arg) =>
          wasmModule.wire_example_primitive_list_type_i64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i8_twin_sync(Int8List arg) =>
          wasmModule.wire_example_primitive_list_type_i8_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u16_twin_sync(Uint16List arg) =>
          wasmModule.wire_example_primitive_list_type_u16_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u32_twin_sync(Uint32List arg) =>
          wasmModule.wire_example_primitive_list_type_u32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u64_twin_sync(
              Object /* BigInt64Array */ arg) =>
          wasmModule.wire_example_primitive_list_type_u64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u8_twin_sync(Uint8List arg) =>
          wasmModule.wire_example_primitive_list_type_u8_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_bool_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_bool_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_f32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_f32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_f64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_f64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i16_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_i16_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_i32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_i64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i8_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_i8_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u16_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_u16_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_u32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_u64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u8_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_list_type_u8_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_primitive_types_twin_rust_async(NativePortType port_, int my_i32,
          Object my_i64, double my_f64, bool my_bool) =>
      wasmModule.wire_primitive_types_twin_rust_async(
          port_, my_i32, my_i64, my_f64, my_bool);

  void wire_primitive_u32_twin_rust_async(NativePortType port_, int my_u32) =>
      wasmModule.wire_primitive_u32_twin_rust_async(port_, my_u32);

  void wire_primitive_types_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_primitive_types_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_primitive_u32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_primitive_u32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_primitive_types_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_primitive_types_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_primitive_u32_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_primitive_u32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_primitive_types_twin_sync(
              int my_i32, Object my_i64, double my_f64, bool my_bool) =>
          wasmModule.wire_primitive_types_twin_sync(
              my_i32, my_i64, my_f64, my_bool);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_primitive_u32_twin_sync(int my_u32) =>
          wasmModule.wire_primitive_u32_twin_sync(my_u32);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_primitive_types_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_primitive_types_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_primitive_u32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_primitive_u32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_bool_twin_rust_async(
          NativePortType port_, bool arg) =>
      wasmModule.wire_example_primitive_type_bool_twin_rust_async(port_, arg);

  void wire_example_primitive_type_f32_twin_rust_async(
          NativePortType port_, double arg) =>
      wasmModule.wire_example_primitive_type_f32_twin_rust_async(port_, arg);

  void wire_example_primitive_type_f64_twin_rust_async(
          NativePortType port_, double arg) =>
      wasmModule.wire_example_primitive_type_f64_twin_rust_async(port_, arg);

  void wire_example_primitive_type_i16_twin_rust_async(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_i16_twin_rust_async(port_, arg);

  void wire_example_primitive_type_i32_twin_rust_async(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_i32_twin_rust_async(port_, arg);

  void wire_example_primitive_type_i64_twin_rust_async(
          NativePortType port_, Object arg) =>
      wasmModule.wire_example_primitive_type_i64_twin_rust_async(port_, arg);

  void wire_example_primitive_type_i8_twin_rust_async(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_i8_twin_rust_async(port_, arg);

  void wire_example_primitive_type_u16_twin_rust_async(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_u16_twin_rust_async(port_, arg);

  void wire_example_primitive_type_u32_twin_rust_async(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_u32_twin_rust_async(port_, arg);

  void wire_example_primitive_type_u64_twin_rust_async(
          NativePortType port_, Object arg) =>
      wasmModule.wire_example_primitive_type_u64_twin_rust_async(port_, arg);

  void wire_example_primitive_type_u8_twin_rust_async(
          NativePortType port_, int arg) =>
      wasmModule.wire_example_primitive_type_u8_twin_rust_async(port_, arg);

  void wire_example_primitive_type_bool_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_bool_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_f32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_f32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_f64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_f64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i16_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i16_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i8_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i8_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u16_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u16_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u32_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u32_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u64_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u64_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u8_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u8_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_bool_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_bool_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_f32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_f32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_f64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_f64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i16_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i16_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_i8_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_i8_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u16_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u16_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u32_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u32_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u64_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u64_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_example_primitive_type_u8_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_example_primitive_type_u8_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_bool_twin_sync(bool arg) =>
          wasmModule.wire_example_primitive_type_bool_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_f32_twin_sync(double arg) =>
          wasmModule.wire_example_primitive_type_f32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_f64_twin_sync(double arg) =>
          wasmModule.wire_example_primitive_type_f64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i16_twin_sync(int arg) =>
          wasmModule.wire_example_primitive_type_i16_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i32_twin_sync(int arg) =>
          wasmModule.wire_example_primitive_type_i32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i64_twin_sync(Object arg) =>
          wasmModule.wire_example_primitive_type_i64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i8_twin_sync(int arg) =>
          wasmModule.wire_example_primitive_type_i8_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u16_twin_sync(int arg) =>
          wasmModule.wire_example_primitive_type_u16_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u32_twin_sync(int arg) =>
          wasmModule.wire_example_primitive_type_u32_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u64_twin_sync(Object arg) =>
          wasmModule.wire_example_primitive_type_u64_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u8_twin_sync(int arg) =>
          wasmModule.wire_example_primitive_type_u8_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_bool_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_bool_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_f32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_f32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_f64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_f64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i16_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_i16_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_i32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_i64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i8_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_i8_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u16_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_u16_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u32_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_u32_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u64_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_u64_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u8_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_example_primitive_type_u8_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_test_more_than_just_one_raw_string_struct_twin_rust_async(
          NativePortType port_) =>
      wasmModule.wire_test_more_than_just_one_raw_string_struct_twin_rust_async(
          port_);

  void wire_test_raw_string_item_struct_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_test_raw_string_item_struct_twin_rust_async(port_);

  void wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_raw_string_item_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_raw_string_item_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_more_than_just_one_raw_string_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_more_than_just_one_raw_string_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_raw_string_item_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_raw_string_item_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_more_than_just_one_raw_string_struct_twin_sync() =>
          wasmModule.wire_test_more_than_just_one_raw_string_struct_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_raw_string_item_struct_twin_sync() =>
          wasmModule.wire_test_raw_string_item_struct_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_more_than_just_one_raw_string_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_test_more_than_just_one_raw_string_struct_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_raw_string_item_struct_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_raw_string_item_struct_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_new_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_new_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_arg_borrow_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_arg_borrow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_arg_mut_borrow_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_arg_mut_borrow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_arg_own_and_return_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_arg_own_and_return_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_arg_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_arg_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_callable_arg_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_callable_arg_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_callable_return_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_callable_return_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_plus_sign_arg_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_plus_sign_arg_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_plus_sign_return_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_plus_sign_return_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_return_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_return_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse(
              port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_trait_object_arg_own_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_trait_object_arg_own_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_trait_object_return_own_one_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_trait_object_return_own_one_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_trait_object_return_own_two_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_trait_object_return_own_two_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_rust_auto_opaque_two_args_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_rust_auto_opaque_two_args_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync(
              Object that) =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync(
              Object that) =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync(
              Object that) =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync(
              Object that) =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync(
                  that);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync() =>
          wasmModule.wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_new_twin_sync() =>
          wasmModule.wire_NonCloneSimpleTwinSync_new_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync(
              Object arg) =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync(
                  arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync(
              Object arg) =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync(
                  arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync(Object arg) =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync() =>
          wasmModule
              .wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_borrow_twin_sync(Object arg, int expect) =>
          wasmModule.wire_rust_auto_opaque_arg_borrow_twin_sync(arg, expect);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_mut_borrow_twin_sync(
              Object arg, int expect, int adder) =>
          wasmModule.wire_rust_auto_opaque_arg_mut_borrow_twin_sync(
              arg, expect, adder);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_own_and_return_own_twin_sync(Object arg) =>
          wasmModule
              .wire_rust_auto_opaque_arg_own_and_return_own_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_own_twin_sync(Object arg, int expect) =>
          wasmModule.wire_rust_auto_opaque_arg_own_twin_sync(arg, expect);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_callable_arg_twin_sync(Object arg) =>
          wasmModule.wire_rust_auto_opaque_callable_arg_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_callable_return_twin_sync() =>
          wasmModule.wire_rust_auto_opaque_callable_return_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync(
              Object a, String b) =>
          wasmModule.wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync(
              a, b);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_plus_sign_arg_twin_sync(Object arg) =>
          wasmModule.wire_rust_auto_opaque_plus_sign_arg_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_plus_sign_return_twin_sync() =>
          wasmModule.wire_rust_auto_opaque_plus_sign_return_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_return_own_twin_sync(int initial) =>
          wasmModule.wire_rust_auto_opaque_return_own_twin_sync(initial);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(
              Object arg) =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(
                  arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(
              Object arg) =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(
                  arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(
              Object arg) =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(
                  arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync() =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync(
              Object arg, String expect) =>
          wasmModule.wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync(
              arg, expect);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(
              Object arg, String expect) =>
          wasmModule
              .wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(
                  arg, expect);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_arg_own_twin_sync(
              Object arg, String expect) =>
          wasmModule.wire_rust_auto_opaque_trait_object_arg_own_twin_sync(
              arg, expect);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_return_own_one_twin_sync() =>
          wasmModule
              .wire_rust_auto_opaque_trait_object_return_own_one_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_return_own_two_twin_sync() =>
          wasmModule
              .wire_rust_auto_opaque_trait_object_return_own_two_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_two_args_twin_sync(Object a, Object b) =>
          wasmModule.wire_rust_auto_opaque_two_args_twin_sync(a, b);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_arg_borrow_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_arg_own_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_callable_arg_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_callable_arg_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_callable_return_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_callable_return_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_plus_sign_return_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_plus_sign_return_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_return_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_return_own_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule
              .wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse(
                  ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_two_args_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_rust_auto_opaque_two_args_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_frb_sync_generator_test_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_frb_sync_generator_test_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_create_non_clone_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_create_non_clone_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_create_opaque_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_create_opaque_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_create_sync_opaque_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_create_sync_opaque_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_option_rust_opaque_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_option_rust_opaque_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_run_opaque_twin_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_sync_run_opaque_twin_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_create_array_opaque_enum_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_create_array_opaque_enum_twin_rust_async(port_);

  void wire_create_nested_opaque_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_create_nested_opaque_twin_rust_async(port_);

  void wire_create_opaque_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_create_opaque_twin_rust_async(port_);

  void wire_create_option_opaque_twin_rust_async(
          NativePortType port_, Object? opaque) =>
      wasmModule.wire_create_option_opaque_twin_rust_async(port_, opaque);

  void wire_create_sync_opaque_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_create_sync_opaque_twin_rust_async(port_);

  void wire_frb_generator_test_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_frb_generator_test_twin_rust_async(port_);

  void wire_opaque_array_run_twin_rust_async(
          NativePortType port_, List<dynamic> data) =>
      wasmModule.wire_opaque_array_run_twin_rust_async(port_, data);

  void wire_opaque_array_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_opaque_array_twin_rust_async(port_);

  void wire_opaque_vec_run_twin_rust_async(
          NativePortType port_, List<dynamic> data) =>
      wasmModule.wire_opaque_vec_run_twin_rust_async(port_, data);

  void wire_opaque_vec_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_opaque_vec_twin_rust_async(port_);

  void wire_run_enum_opaque_twin_rust_async(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_run_enum_opaque_twin_rust_async(port_, opaque);

  void wire_run_nested_opaque_twin_rust_async(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_run_nested_opaque_twin_rust_async(port_, opaque);

  void wire_run_non_clone_twin_rust_async(NativePortType port_, Object clone) =>
      wasmModule.wire_run_non_clone_twin_rust_async(port_, clone);

  void wire_run_opaque_twin_rust_async(NativePortType port_, Object opaque) =>
      wasmModule.wire_run_opaque_twin_rust_async(port_, opaque);

  void wire_run_opaque_with_delay_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_run_opaque_with_delay_twin_rust_async(port_, opaque);

  void wire_unwrap_rust_opaque_twin_rust_async(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_unwrap_rust_opaque_twin_rust_async(port_, opaque);

  void wire_create_array_opaque_enum_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_array_opaque_enum_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_nested_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_nested_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_option_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_option_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_sync_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_sync_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_frb_generator_test_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_frb_generator_test_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_array_run_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_array_run_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_array_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_array_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_vec_run_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_vec_run_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_vec_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_vec_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_enum_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_enum_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_nested_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_nested_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_non_clone_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_non_clone_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_opaque_with_delay_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_opaque_with_delay_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_unwrap_rust_opaque_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_unwrap_rust_opaque_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_array_opaque_enum_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_array_opaque_enum_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_nested_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_nested_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_opaque_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_option_opaque_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_option_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_create_sync_opaque_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_create_sync_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_frb_generator_test_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_frb_generator_test_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_array_run_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_array_run_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_array_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_array_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_vec_run_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_vec_run_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_opaque_vec_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_opaque_vec_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_enum_opaque_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_enum_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_nested_opaque_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_nested_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_non_clone_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_non_clone_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_opaque_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_run_opaque_with_delay_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_run_opaque_with_delay_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_unwrap_rust_opaque_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_unwrap_rust_opaque_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_array_opaque_enum_twin_sync() =>
          wasmModule.wire_create_array_opaque_enum_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_nested_opaque_twin_sync() =>
          wasmModule.wire_create_nested_opaque_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_opaque_twin_sync() =>
          wasmModule.wire_create_opaque_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_option_opaque_twin_sync(Object? opaque) =>
          wasmModule.wire_create_option_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_sync_opaque_twin_sync() =>
          wasmModule.wire_create_sync_opaque_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_frb_generator_test_twin_sync() =>
          wasmModule.wire_frb_generator_test_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_array_run_twin_sync(List<dynamic> data) =>
          wasmModule.wire_opaque_array_run_twin_sync(data);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_array_twin_sync() => wasmModule.wire_opaque_array_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_vec_run_twin_sync(List<dynamic> data) =>
          wasmModule.wire_opaque_vec_run_twin_sync(data);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_vec_twin_sync() => wasmModule.wire_opaque_vec_twin_sync();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_enum_opaque_twin_sync(List<dynamic> opaque) =>
          wasmModule.wire_run_enum_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_nested_opaque_twin_sync(List<dynamic> opaque) =>
          wasmModule.wire_run_nested_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_non_clone_twin_sync(Object clone) =>
          wasmModule.wire_run_non_clone_twin_sync(clone);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_opaque_twin_sync(Object opaque) =>
          wasmModule.wire_run_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_opaque_with_delay_twin_sync(Object opaque) =>
          wasmModule.wire_run_opaque_with_delay_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_unwrap_rust_opaque_twin_sync(Object opaque) =>
          wasmModule.wire_unwrap_rust_opaque_twin_sync(opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_array_opaque_enum_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_create_array_opaque_enum_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_nested_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_create_nested_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_create_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_option_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_create_option_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_sync_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_create_sync_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_frb_generator_test_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_frb_generator_test_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_array_run_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_opaque_array_run_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_array_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_opaque_array_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_vec_run_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_opaque_vec_run_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_vec_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_opaque_vec_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_enum_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_run_enum_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_nested_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_run_nested_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_non_clone_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_run_non_clone_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_run_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_opaque_with_delay_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_run_opaque_with_delay_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_unwrap_rust_opaque_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_unwrap_rust_opaque_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_simple_adder_twin_rust_async(NativePortType port_, int a, int b) =>
      wasmModule.wire_simple_adder_twin_rust_async(port_, a, b);

  void wire_simple_adder_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_simple_adder_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_simple_adder_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_simple_adder_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_simple_adder_twin_sync(int a, int b) =>
          wasmModule.wire_simple_adder_twin_sync(a, b);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_simple_adder_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_simple_adder_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_func_stream_realistic_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_stream_realistic_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_stream_return_error_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_func_stream_return_error_twin_rust_async(port_);

  void wire_func_stream_return_panic_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_func_stream_return_panic_twin_rust_async(port_);

  void wire_func_stream_sink_arg_position_twin_rust_async(
          NativePortType port_, int a, int b) =>
      wasmModule.wire_func_stream_sink_arg_position_twin_rust_async(
          port_, a, b);

  void wire_handle_stream_of_struct_twin_rust_async(NativePortType port_) =>
      wasmModule.wire_handle_stream_of_struct_twin_rust_async(port_);

  void wire_handle_stream_sink_at_1_twin_rust_async(
          NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_1_twin_rust_async(port_, key, max);

  void wire_handle_stream_sink_at_2_twin_rust_async(
          NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_2_twin_rust_async(port_, key, max);

  void wire_handle_stream_sink_at_3_twin_rust_async(
          NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_3_twin_rust_async(port_, key, max);

  void wire_func_stream_return_error_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_stream_return_error_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_stream_return_panic_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_stream_return_panic_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_stream_sink_arg_position_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_stream_sink_arg_position_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_of_struct_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_of_struct_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_sink_at_1_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_sink_at_1_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_sink_at_2_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_sink_at_2_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_sink_at_3_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_sink_at_3_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_stream_return_error_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_stream_return_error_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_stream_return_panic_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_stream_return_panic_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_stream_sink_arg_position_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_stream_sink_arg_position_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_of_struct_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_of_struct_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_sink_at_1_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_sink_at_1_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_sink_at_2_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_sink_at_2_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_stream_sink_at_3_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_stream_sink_at_3_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_struct_with_one_field_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_struct_with_one_field_twin_rust_async(port_, arg);

  void wire_func_struct_with_two_field_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_struct_with_two_field_twin_rust_async(port_, arg);

  void wire_func_struct_with_zero_field_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_struct_with_zero_field_twin_rust_async(port_, arg);

  void wire_func_tuple_struct_with_one_field_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_tuple_struct_with_one_field_twin_rust_async(
          port_, arg);

  void wire_func_tuple_struct_with_two_field_twin_rust_async(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_tuple_struct_with_two_field_twin_rust_async(
          port_, arg);

  void wire_func_struct_with_one_field_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_struct_with_one_field_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_struct_with_two_field_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_struct_with_two_field_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_struct_with_zero_field_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_struct_with_zero_field_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_tuple_struct_with_one_field_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_tuple_struct_with_one_field_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_tuple_struct_with_two_field_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_tuple_struct_with_two_field_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_struct_with_one_field_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_struct_with_one_field_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_struct_with_two_field_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_struct_with_two_field_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_struct_with_zero_field_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_struct_with_zero_field_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_tuple_struct_with_one_field_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_tuple_struct_with_one_field_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_func_tuple_struct_with_two_field_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_func_tuple_struct_with_two_field_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_struct_with_one_field_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_struct_with_one_field_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_struct_with_two_field_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_struct_with_two_field_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_struct_with_zero_field_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_struct_with_zero_field_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_tuple_struct_with_one_field_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_tuple_struct_with_one_field_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_tuple_struct_with_two_field_twin_sync(List<dynamic> arg) =>
          wasmModule.wire_func_tuple_struct_with_two_field_twin_sync(arg);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_struct_with_one_field_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_struct_with_one_field_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_struct_with_two_field_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_struct_with_two_field_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_struct_with_zero_field_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_struct_with_zero_field_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_tuple_struct_with_one_field_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_tuple_struct_with_one_field_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_tuple_struct_with_two_field_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_func_tuple_struct_with_two_field_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_test_tuple_2_twin_rust_async(
          NativePortType port_, List<dynamic> value) =>
      wasmModule.wire_test_tuple_2_twin_rust_async(port_, value);

  void wire_test_tuple_twin_rust_async(
          NativePortType port_, List<dynamic>? value) =>
      wasmModule.wire_test_tuple_twin_rust_async(port_, value);

  void wire_test_tuple_2_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_tuple_2_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_tuple_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_tuple_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_tuple_2_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_tuple_2_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_test_tuple_twin_sse(int port_, ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.wire_test_tuple_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_tuple_2_twin_sync(List<dynamic> value) =>
          wasmModule.wire_test_tuple_2_twin_sync(value);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_tuple_twin_sync(List<dynamic>? value) =>
          wasmModule.wire_test_tuple_twin_sync(value);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_tuple_2_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_tuple_2_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_tuple_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_test_tuple_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_handle_type_alias_id_twin_rust_async(
          NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_alias_id_twin_rust_async(port_, input);

  void wire_handle_type_alias_model_twin_rust_async(
          NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_alias_model_twin_rust_async(port_, input);

  void wire_handle_type_nest_alias_id_twin_rust_async(
          NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_nest_alias_id_twin_rust_async(port_, input);

  void wire_handle_type_alias_id_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_type_alias_id_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_type_alias_model_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_type_alias_model_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_type_nest_alias_id_twin_rust_async_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_type_nest_alias_id_twin_rust_async_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_type_alias_id_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_type_alias_id_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_type_alias_model_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_type_alias_model_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  void wire_handle_type_nest_alias_id_twin_sse(int port_,
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
      wasmModule.wire_handle_type_nest_alias_id_twin_sse(
          port_, ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_type_alias_id_twin_sync(Object input) =>
          wasmModule.wire_handle_type_alias_id_twin_sync(input);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_type_alias_model_twin_sync(Object input) =>
          wasmModule.wire_handle_type_alias_model_twin_sync(input);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_type_nest_alias_id_twin_sync(Object input) =>
          wasmModule.wire_handle_type_nest_alias_id_twin_sync(input);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_type_alias_id_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_type_alias_id_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_type_alias_model_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_type_alias_model_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_type_nest_alias_id_twin_sync_sse(
              ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_) =>
          wasmModule.wire_handle_type_nest_alias_id_twin_sync_sse(
              ptr_, rust_vec_len_, data_len_);

  void wire_handle_nested_uuids_twin_rust_async(
          NativePortType port_, List<dynamic> ids) =>
      wasmModule.wire_handle_nested_uuids_twin_rust_async(port_, ids);

  void wire_handle_uuid_twin_rust_async(NativePortType port_, Uint8List id) =>
      wasmModule.wire_handle_uuid_twin_rust_async(port_, id);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_nested_uuids_twin_sync(List<dynamic> ids) =>
          wasmModule.wire_handle_nested_uuids_twin_sync(ids);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_uuid_twin_sync(Uint8List id) =>
          wasmModule.wire_handle_uuid_twin_sync(id);

  void wire_test_more_than_just_one_raw_string_struct_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_test_more_than_just_one_raw_string_struct_twin_normal(port_);

  void wire_test_raw_string_item_struct_twin_normal(NativePortType port_) =>
      wasmModule.wire_test_raw_string_item_struct_twin_normal(port_);

  void wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal(
          NativePortType port_, Object that) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal(
              port_, that);

  void wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal(
          NativePortType port_, Object that) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal(
              port_, that);

  void wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal(
          NativePortType port_, Object that) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal(
              port_, that);

  void wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal(
          NativePortType port_, Object that) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal(
              port_, that);

  void wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal(port_);

  void wire_NonCloneSimpleTwinNormal_new_twin_normal(NativePortType port_) =>
      wasmModule.wire_NonCloneSimpleTwinNormal_new_twin_normal(port_);

  void wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal(
              port_, arg);

  void wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal(
              port_, arg);

  void wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal(
              port_, arg);

  void wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal(
              port_);

  void wire_rust_auto_opaque_arg_borrow_twin_normal(
          NativePortType port_, Object arg, int expect) =>
      wasmModule.wire_rust_auto_opaque_arg_borrow_twin_normal(
          port_, arg, expect);

  void wire_rust_auto_opaque_arg_mut_borrow_twin_normal(
          NativePortType port_, Object arg, int expect, int adder) =>
      wasmModule.wire_rust_auto_opaque_arg_mut_borrow_twin_normal(
          port_, arg, expect, adder);

  void wire_rust_auto_opaque_arg_own_and_return_own_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule.wire_rust_auto_opaque_arg_own_and_return_own_twin_normal(
          port_, arg);

  void wire_rust_auto_opaque_arg_own_twin_normal(
          NativePortType port_, Object arg, int expect) =>
      wasmModule.wire_rust_auto_opaque_arg_own_twin_normal(port_, arg, expect);

  void wire_rust_auto_opaque_callable_arg_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule.wire_rust_auto_opaque_callable_arg_twin_normal(port_, arg);

  void wire_rust_auto_opaque_callable_return_twin_normal(
          NativePortType port_) =>
      wasmModule.wire_rust_auto_opaque_callable_return_twin_normal(port_);

  void wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal(
          NativePortType port_, Object a, String b) =>
      wasmModule.wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal(
          port_, a, b);

  void wire_rust_auto_opaque_plus_sign_arg_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule.wire_rust_auto_opaque_plus_sign_arg_twin_normal(port_, arg);

  void wire_rust_auto_opaque_plus_sign_return_twin_normal(
          NativePortType port_) =>
      wasmModule.wire_rust_auto_opaque_plus_sign_return_twin_normal(port_);

  void wire_rust_auto_opaque_return_own_twin_normal(
          NativePortType port_, int initial) =>
      wasmModule.wire_rust_auto_opaque_return_own_twin_normal(port_, initial);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(
              port_, arg);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(
              port_, arg);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(
          NativePortType port_, Object arg) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(
              port_, arg);

  void wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal(
              port_);

  void wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal(
          NativePortType port_, Object arg, String expect) =>
      wasmModule.wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal(
          port_, arg, expect);

  void wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(
          NativePortType port_, Object arg, String expect) =>
      wasmModule.wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(
          port_, arg, expect);

  void wire_rust_auto_opaque_trait_object_arg_own_twin_normal(
          NativePortType port_, Object arg, String expect) =>
      wasmModule.wire_rust_auto_opaque_trait_object_arg_own_twin_normal(
          port_, arg, expect);

  void wire_rust_auto_opaque_trait_object_return_own_one_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_rust_auto_opaque_trait_object_return_own_one_twin_normal(port_);

  void wire_rust_auto_opaque_trait_object_return_own_two_twin_normal(
          NativePortType port_) =>
      wasmModule
          .wire_rust_auto_opaque_trait_object_return_own_two_twin_normal(port_);

  void wire_rust_auto_opaque_two_args_twin_normal(
          NativePortType port_, Object a, Object b) =>
      wasmModule.wire_rust_auto_opaque_two_args_twin_normal(port_, a, b);

  void wire_create_array_opaque_enum_twin_normal(NativePortType port_) =>
      wasmModule.wire_create_array_opaque_enum_twin_normal(port_);

  void wire_create_nested_opaque_twin_normal(NativePortType port_) =>
      wasmModule.wire_create_nested_opaque_twin_normal(port_);

  void wire_create_opaque_twin_normal(NativePortType port_) =>
      wasmModule.wire_create_opaque_twin_normal(port_);

  void wire_create_option_opaque_twin_normal(
          NativePortType port_, Object? opaque) =>
      wasmModule.wire_create_option_opaque_twin_normal(port_, opaque);

  void wire_create_sync_opaque_twin_normal(NativePortType port_) =>
      wasmModule.wire_create_sync_opaque_twin_normal(port_);

  void wire_frb_generator_test_twin_normal(NativePortType port_) =>
      wasmModule.wire_frb_generator_test_twin_normal(port_);

  void wire_opaque_array_run_twin_normal(
          NativePortType port_, List<dynamic> data) =>
      wasmModule.wire_opaque_array_run_twin_normal(port_, data);

  void wire_opaque_array_twin_normal(NativePortType port_) =>
      wasmModule.wire_opaque_array_twin_normal(port_);

  void wire_opaque_vec_run_twin_normal(
          NativePortType port_, List<dynamic> data) =>
      wasmModule.wire_opaque_vec_run_twin_normal(port_, data);

  void wire_opaque_vec_twin_normal(NativePortType port_) =>
      wasmModule.wire_opaque_vec_twin_normal(port_);

  void wire_run_enum_opaque_twin_normal(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_run_enum_opaque_twin_normal(port_, opaque);

  void wire_run_nested_opaque_twin_normal(
          NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_run_nested_opaque_twin_normal(port_, opaque);

  void wire_run_non_clone_twin_normal(NativePortType port_, Object clone) =>
      wasmModule.wire_run_non_clone_twin_normal(port_, clone);

  void wire_run_opaque_twin_normal(NativePortType port_, Object opaque) =>
      wasmModule.wire_run_opaque_twin_normal(port_, opaque);

  void wire_run_opaque_with_delay_twin_normal(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_run_opaque_with_delay_twin_normal(port_, opaque);

  void wire_unwrap_rust_opaque_twin_normal(
          NativePortType port_, Object opaque) =>
      wasmModule.wire_unwrap_rust_opaque_twin_normal(port_, opaque);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_frb_sync_generator_test_twin_normal() =>
          wasmModule.wire_frb_sync_generator_test_twin_normal();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_create_non_clone_twin_normal() =>
          wasmModule.wire_sync_create_non_clone_twin_normal();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_create_opaque_twin_normal() =>
          wasmModule.wire_sync_create_opaque_twin_normal();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_create_sync_opaque_twin_normal() =>
          wasmModule.wire_sync_create_sync_opaque_twin_normal();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_option_rust_opaque_twin_normal() =>
          wasmModule.wire_sync_option_rust_opaque_twin_normal();

  dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_run_opaque_twin_normal(Object opaque) =>
          wasmModule.wire_sync_run_opaque_twin_normal(opaque);

  void wire_simple_adder_twin_normal(NativePortType port_, int a, int b) =>
      wasmModule.wire_simple_adder_twin_normal(port_, a, b);

  void wire_func_stream_return_error_twin_normal(NativePortType port_) =>
      wasmModule.wire_func_stream_return_error_twin_normal(port_);

  void wire_func_stream_return_panic_twin_normal(NativePortType port_) =>
      wasmModule.wire_func_stream_return_panic_twin_normal(port_);

  void wire_func_stream_sink_arg_position_twin_normal(
          NativePortType port_, int a, int b) =>
      wasmModule.wire_func_stream_sink_arg_position_twin_normal(port_, a, b);

  void wire_handle_stream_of_struct_twin_normal(NativePortType port_) =>
      wasmModule.wire_handle_stream_of_struct_twin_normal(port_);

  void wire_handle_stream_sink_at_1_twin_normal(
          NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_1_twin_normal(port_, key, max);

  void wire_handle_stream_sink_at_2_twin_normal(
          NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_2_twin_normal(port_, key, max);

  void wire_handle_stream_sink_at_3_twin_normal(
          NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_3_twin_normal(port_, key, max);

  void wire_func_stream_realistic_twin_normal(
          NativePortType port_, String arg) =>
      wasmModule.wire_func_stream_realistic_twin_normal(port_, arg);

  void wire_func_struct_with_one_field_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_struct_with_one_field_twin_normal(port_, arg);

  void wire_func_struct_with_two_field_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_struct_with_two_field_twin_normal(port_, arg);

  void wire_func_struct_with_zero_field_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_struct_with_zero_field_twin_normal(port_, arg);

  void wire_func_tuple_struct_with_one_field_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_tuple_struct_with_one_field_twin_normal(port_, arg);

  void wire_func_tuple_struct_with_two_field_twin_normal(
          NativePortType port_, List<dynamic> arg) =>
      wasmModule.wire_func_tuple_struct_with_two_field_twin_normal(port_, arg);

  void wire_test_tuple_2_twin_normal(
          NativePortType port_, List<dynamic> value) =>
      wasmModule.wire_test_tuple_2_twin_normal(port_, value);

  void wire_test_tuple_twin_normal(
          NativePortType port_, List<dynamic>? value) =>
      wasmModule.wire_test_tuple_twin_normal(port_, value);

  void wire_handle_type_alias_id_twin_normal(
          NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_alias_id_twin_normal(port_, input);

  void wire_handle_type_alias_model_twin_normal(
          NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_alias_model_twin_normal(port_, input);

  void wire_handle_type_nest_alias_id_twin_normal(
          NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_nest_alias_id_twin_normal(port_, input);

  void wire_handle_nested_uuids_twin_normal(
          NativePortType port_, List<dynamic> ids) =>
      wasmModule.wire_handle_nested_uuids_twin_normal(port_, ids);

  void wire_handle_uuid_twin_normal(NativePortType port_, Uint8List id) =>
      wasmModule.wire_handle_uuid_twin_normal(port_, id);

  void rust_arc_increment_strong_count_RustOpaque_MutexHideData(dynamic ptr) =>
      wasmModule.rust_arc_increment_strong_count_RustOpaque_MutexHideData(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_MutexHideData(dynamic ptr) =>
      wasmModule.rust_arc_decrement_strong_count_RustOpaque_MutexHideData(ptr);

  void rust_arc_increment_strong_count_RustOpaque_RwLockHideData(dynamic ptr) =>
      wasmModule.rust_arc_increment_strong_count_RustOpaque_RwLockHideData(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_RwLockHideData(dynamic ptr) =>
      wasmModule.rust_arc_decrement_strong_count_RustOpaque_RwLockHideData(ptr);

  void rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_frb_opaque_return(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_return(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return(ptr);

  void rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_hide_data(dynamic ptr) =>
      wasmModule.rust_arc_increment_strong_count_RustOpaque_hide_data(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_hide_data(dynamic ptr) =>
      wasmModule.rust_arc_decrement_strong_count_RustOpaque_hide_data(ptr);

  void rust_arc_increment_strong_count_RustOpaque_i_32(dynamic ptr) =>
      wasmModule.rust_arc_increment_strong_count_RustOpaque_i_32(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_i_32(dynamic ptr) =>
      wasmModule.rust_arc_decrement_strong_count_RustOpaque_i_32(ptr);

  void rust_arc_increment_strong_count_RustOpaque_non_clone_data(dynamic ptr) =>
      wasmModule.rust_arc_increment_strong_count_RustOpaque_non_clone_data(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_non_clone_data(dynamic ptr) =>
      wasmModule.rust_arc_decrement_strong_count_RustOpaque_non_clone_data(ptr);

  void rust_arc_increment_strong_count_RustOpaque_non_send_hide_data(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_non_send_hide_data(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_non_send_hide_data(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_non_send_hide_data(ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
              ptr);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void frb_initialize_rust(
      NativePortType dart_opaque_drop_port, NativePortType dart_fn_invoke_port);

  external void wire_boxed_blob_twin_normal(
      NativePortType port_, Uint8List blob);

  external void wire_func_test_id_twin_normal(
      NativePortType port_, List<dynamic> id);

  external void wire_get_array_twin_normal(NativePortType port_);

  external void wire_get_complex_array_twin_normal(NativePortType port_);

  external void wire_last_number_twin_normal(
      NativePortType port_, Float64List array);

  external void wire_nested_id_twin_normal(
      NativePortType port_, List<dynamic> id);

  external void wire_new_msgid_twin_normal(NativePortType port_, Uint8List id);

  external void wire_return_boxed_feed_id_twin_normal(
      NativePortType port_, Uint8List id);

  external void wire_return_boxed_raw_feed_id_twin_normal(
      NativePortType port_, List<dynamic> id);

  external void wire_use_boxed_blob_twin_normal(
      NativePortType port_, List<dynamic> blob);

  external void wire_use_msgid_twin_normal(
      NativePortType port_, List<dynamic> id);

  external void wire_func_async_simple_add(NativePortType port_, int a, int b);

  external void wire_func_async_void(NativePortType port_);

  external void wire_handle_customized_struct_twin_normal(
      NativePortType port_, List<dynamic> val);

  external void wire_next_user_id_twin_normal(
      NativePortType port_, List<dynamic> user_id);

  external void wire_benchmark_input_bytes_twin_normal(
      NativePortType port_, Uint8List bytes);

  external void wire_benchmark_output_bytes_twin_normal(
      NativePortType port_, int size);

  external void wire_benchmark_void_twin_normal(NativePortType port_);

  external void wire_datetime_local_twin_normal(NativePortType port_, Object d);

  external void wire_datetime_utc_twin_normal(NativePortType port_, Object d);

  external void wire_duration_twin_normal(NativePortType port_, Object d);

  external void wire_handle_durations_twin_normal(
      NativePortType port_, List<dynamic> durations, Object since);

  external void wire_handle_timestamps_twin_normal(
      NativePortType port_, List<dynamic> timestamps, Object epoch);

  external void wire_how_long_does_it_take_twin_normal(
      NativePortType port_, List<dynamic> mine);

  external void wire_naivedatetime_twin_normal(NativePortType port_, Object d);

  external void wire_optional_empty_datetime_utc_twin_normal(
      NativePortType port_, Object? d);

  external void wire_test_chrono_twin_normal(NativePortType port_);

  external void wire_test_precise_chrono_twin_normal(NativePortType port_);

  external void wire_StructWithCommentsTwinNormal_instance_method_twin_normal(
      NativePortType port_, List<dynamic> that);

  external void wire_StructWithCommentsTwinNormal_static_method_twin_normal(
      NativePortType port_);

  external void wire_function_with_comments_slash_star_star_twin_normal(
      NativePortType port_);

  external void wire_function_with_comments_triple_slash_multi_line_twin_normal(
      NativePortType port_);

  external void
      wire_function_with_comments_triple_slash_single_line_twin_normal(
          NativePortType port_);

  external void wire_return_dart_dynamic_twin_normal(NativePortType port_);

  external void wire_rust_call_dart_simple(
      NativePortType port_, Object callback);

  external void wire_async_accept_dart_opaque_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_clone_dart_opaque_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_create_enum_dart_opaque_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_create_nested_dart_opaque_twin_normal(
      NativePortType port_, Object opaque1, Object opaque2);

  external void wire_drop_static_dart_opaque_twin_normal(
      NativePortType port_, int id);

  external void wire_get_enum_dart_opaque_twin_normal(
      NativePortType port_, List<dynamic> opaque);

  external void wire_get_nested_dart_opaque_twin_normal(
      NativePortType port_, List<dynamic> opaque);

  external void wire_loop_back_array_get_twin_normal(
      NativePortType port_, List<dynamic> opaque);

  external void wire_loop_back_array_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_loop_back_option_get_twin_normal(
      NativePortType port_, Object? opaque);

  external void wire_loop_back_option_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_loop_back_twin_normal(NativePortType port_, Object opaque);

  external void wire_loop_back_vec_get_twin_normal(
      NativePortType port_, List<dynamic> opaque);

  external void wire_loop_back_vec_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_panic_unwrap_dart_opaque_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_set_static_dart_opaque_twin_normal(
      NativePortType port_, int id, Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_accept_dart_opaque_twin_normal(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_loopback_twin_normal(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_option_dart_opaque_twin_normal(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_option_loopback_twin_normal(Object? opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_unwrap_dart_opaque_twin_normal(Object opaque);

  external void wire_func_enum_simple_twin_normal(
      NativePortType port_, int arg);

  external void wire_func_enum_with_item_mixed_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_enum_with_item_struct_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_enum_with_item_tuple_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_handle_enum_parameter_twin_normal(
      NativePortType port_, int weekday);

  external void wire_handle_enum_struct_twin_normal(
      NativePortType port_, List<dynamic> val);

  external void wire_handle_return_enum_twin_normal(
      NativePortType port_, String input);

  external void wire_multiply_by_ten_twin_normal(
      NativePortType port_, List<dynamic> measure);

  external void wire_print_note_twin_normal(
      NativePortType port_, List<dynamic> note);

  external void wire_EventTwinNormal_as_string_twin_normal(
      NativePortType port_, List<dynamic> that);

  external void wire_close_event_listener_twin_normal(NativePortType port_);

  external void wire_create_event_twin_normal(
      NativePortType port_, String address, String payload);

  external void wire_register_event_listener_twin_normal(NativePortType port_);

  external void wire_CustomStructTwinNormal_new_twin_normal(
      NativePortType port_, String message);

  external void
      wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal(
          NativePortType port_, List<dynamic> that);

  external void
      wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal(
          NativePortType port_, List<dynamic> that);

  external void
      wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal(
          NativePortType port_);

  external void
      wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal(
          NativePortType port_);

  external void wire_SomeStructTwinNormal_new_twin_normal(
      NativePortType port_, int value);

  external void
      wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal(
          NativePortType port_, List<dynamic> that);

  external void
      wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal(
          NativePortType port_, List<dynamic> that);

  external void
      wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal(
          NativePortType port_);

  external void
      wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal(
          NativePortType port_);

  external void wire_custom_enum_error_panic_twin_normal(NativePortType port_);

  external void wire_custom_enum_error_return_error_twin_normal(
      NativePortType port_);

  external void wire_custom_enum_error_return_ok_twin_normal(
      NativePortType port_, int arg);

  external void wire_custom_nested_error_return_error_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_custom_struct_error_return_error_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_return_error_twin_normal(NativePortType port_);

  external void wire_func_type_fallible_panic_twin_normal(NativePortType port_);

  external void wire_func_type_infallible_panic_twin_normal(
      NativePortType port_);

  external void wire_panic_with_custom_result_twin_normal(NativePortType port_);

  external void wire_return_custom_nested_error_1_twin_normal(
      NativePortType port_);

  external void wire_return_custom_nested_error_1_variant1_twin_normal(
      NativePortType port_);

  external void wire_return_custom_nested_error_2_twin_normal(
      NativePortType port_);

  external void wire_return_custom_struct_error_twin_normal(
      NativePortType port_);

  external void wire_return_custom_struct_ok_twin_normal(NativePortType port_);

  external void wire_return_err_custom_error_twin_normal(NativePortType port_);

  external void wire_return_error_variant_twin_normal(
      NativePortType port_, int variant);

  external void wire_return_ok_custom_error_twin_normal(NativePortType port_);

  external void wire_stream_sink_throw_anyhow_twin_normal(NativePortType port_);

  external void wire_throw_anyhow_twin_normal(NativePortType port_);

  external void wire_call_new_module_system_twin_normal(NativePortType port_);

  external void wire_call_old_module_system_twin_normal(NativePortType port_);

  external void wire_use_imported_enum_twin_normal(
      NativePortType port_, int my_enum);

  external void wire_use_imported_struct_twin_normal(
      NativePortType port_, List<dynamic> my_struct);

  external void wire_another_macro_struct_twin_normal(NativePortType port_);

  external void wire_func_macro_struct_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal(
      NativePortType port_, String a, String b);

  external void wire_ConcatenateWithTwinNormal_concatenate_twin_normal(
      NativePortType port_, List<dynamic> that, String b);

  external void
      wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal(
          NativePortType port_);

  external void
      wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal(
          NativePortType port_, int key, int max);

  external void
      wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal(
          NativePortType port_, List<dynamic> that);

  external void
      wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal(
          NativePortType port_, List<dynamic> that, int key, int max);

  external void wire_ConcatenateWithTwinNormal_new_twin_normal(
      NativePortType port_, String a);

  external void wire_SumWithTwinNormal_sum_twin_normal(
      NativePortType port_, List<dynamic> that, int y, int z);

  external void wire_get_sum_array_twin_normal(
      NativePortType port_, int a, int b, int c);

  external void wire_get_sum_struct_twin_normal(NativePortType port_);

  external void wire_app_settings_stream_twin_normal(NativePortType port_);

  external void wire_app_settings_vec_stream_twin_normal(NativePortType port_);

  external void wire_first_number_twin_normal(
      NativePortType port_, List<dynamic> nums);

  external void wire_first_sequence_twin_normal(
      NativePortType port_, List<dynamic> seqs);

  external void wire_get_app_settings_twin_normal(NativePortType port_);

  external void wire_get_fallible_app_settings_twin_normal(
      NativePortType port_);

  external void wire_get_message_twin_normal(NativePortType port_);

  external void wire_is_app_embedded_twin_normal(
      NativePortType port_, List<dynamic> app_settings);

  external void wire_mirror_struct_stream_twin_normal(NativePortType port_);

  external void wire_mirror_tuple_stream_twin_normal(NativePortType port_);

  external void wire_repeat_number_twin_normal(
      NativePortType port_, int num, int times);

  external void wire_repeat_sequence_twin_normal(
      NativePortType port_, int seq, int times);

  external void wire_test_contains_mirrored_sub_struct_twin_normal(
      NativePortType port_);

  external void wire_test_fallible_of_raw_string_mirrored_twin_normal(
      NativePortType port_);

  external void wire_test_list_of_nested_enums_mirrored_twin_normal(
      NativePortType port_);

  external void wire_test_list_of_raw_nested_string_mirrored_twin_normal(
      NativePortType port_);

  external void wire_test_nested_raw_string_mirrored_twin_normal(
      NativePortType port_);

  external void wire_test_raw_string_enum_mirrored_twin_normal(
      NativePortType port_, bool nested);

  external void wire_test_raw_string_mirrored_twin_normal(NativePortType port_);

  external void wire_handle_big_buffers_twin_normal(NativePortType port_);

  external void wire_handle_complex_struct_twin_normal(
      NativePortType port_, List<dynamic> s);

  external void wire_handle_nested_struct_twin_normal(
      NativePortType port_, List<dynamic> s);

  external void wire_handle_string_twin_normal(NativePortType port_, String s);

  external void wire_handle_struct_twin_normal(
      NativePortType port_, List<dynamic> arg, List<dynamic> boxed);

  external void wire_handle_vec_u8_twin_normal(
      NativePortType port_, Uint8List v);

  external void wire_list_of_primitive_enums_twin_normal(
      NativePortType port_, List<dynamic> weekdays);

  external void wire_test_abc_enum_twin_normal(
      NativePortType port_, List<dynamic> abc);

  external void wire_test_struct_with_enum_twin_normal(
      NativePortType port_, List<dynamic> se);

  external void wire_empty_struct_twin_normal(
      NativePortType port_, List<dynamic> empty);

  external void wire_func_return_unit_twin_normal(NativePortType port_);

  external void wire_func_string_twin_normal(NativePortType port_, String arg);

  external void wire_handle_list_of_struct_twin_normal(
      NativePortType port_, List<dynamic> l);

  external void wire_handle_string_list_twin_normal(
      NativePortType port_, List<dynamic> names);

  external void wire_handle_newtype_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_handle_increment_boxed_optional_twin_normal(
      NativePortType port_, double? opt);

  external void wire_handle_option_box_arguments_twin_normal(
      NativePortType port_,
      int? i8box,
      int? u8box,
      int? i32box,
      Object? i64box,
      double? f64box,
      bool? boolbox,
      List<dynamic>? structbox);

  external void wire_handle_optional_increment_twin_normal(
      NativePortType port_, List<dynamic>? opt);

  external void wire_handle_optional_return_twin_normal(
      NativePortType port_, double left, double right);

  external void wire_handle_optional_struct_twin_normal(
      NativePortType port_, String? document);

  external void wire_handle_vec_of_opts_twin_normal(
      NativePortType port_, List<dynamic> opt);

  external void wire_primitive_optional_types_twin_normal(NativePortType port_,
      int? my_i32, Object? my_i64, double? my_f64, bool? my_bool);

  external void wire_handle_vec_of_primitive_twin_normal(
      NativePortType port_, int n);

  external void wire_primitive_types_twin_normal(NativePortType port_,
      int my_i32, Object my_i64, double my_f64, bool my_bool);

  external void wire_primitive_u32_twin_normal(
      NativePortType port_, int my_u32);

  external void wire_boxed_blob_twin_rust_async(
      NativePortType port_, Uint8List blob);

  external void wire_func_test_id_twin_rust_async(
      NativePortType port_, List<dynamic> id);

  external void wire_get_array_twin_rust_async(NativePortType port_);

  external void wire_get_complex_array_twin_rust_async(NativePortType port_);

  external void wire_last_number_twin_rust_async(
      NativePortType port_, Float64List array);

  external void wire_nested_id_twin_rust_async(
      NativePortType port_, List<dynamic> id);

  external void wire_new_msgid_twin_rust_async(
      NativePortType port_, Uint8List id);

  external void wire_return_boxed_feed_id_twin_rust_async(
      NativePortType port_, Uint8List id);

  external void wire_return_boxed_raw_feed_id_twin_rust_async(
      NativePortType port_, List<dynamic> id);

  external void wire_use_boxed_blob_twin_rust_async(
      NativePortType port_, List<dynamic> blob);

  external void wire_use_msgid_twin_rust_async(
      NativePortType port_, List<dynamic> id);

  external void wire_boxed_blob_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_test_id_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_array_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_complex_array_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_last_number_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_nested_id_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_new_msgid_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_boxed_feed_id_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_boxed_raw_feed_id_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_boxed_blob_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_msgid_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_boxed_blob_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_test_id_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_array_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_complex_array_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_last_number_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_nested_id_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_new_msgid_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_boxed_feed_id_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_boxed_raw_feed_id_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_boxed_blob_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_msgid_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_boxed_blob_twin_sync(Uint8List blob);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_test_id_twin_sync(List<dynamic> id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_array_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_complex_array_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_last_number_twin_sync(Float64List array);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_nested_id_twin_sync(List<dynamic> id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_new_msgid_twin_sync(Uint8List id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_boxed_feed_id_twin_sync(Uint8List id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_boxed_raw_feed_id_twin_sync(List<dynamic> id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_boxed_blob_twin_sync(List<dynamic> blob);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_msgid_twin_sync(List<dynamic> id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_boxed_blob_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_test_id_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_array_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_complex_array_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_last_number_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_nested_id_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_new_msgid_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_boxed_feed_id_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_boxed_raw_feed_id_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_boxed_blob_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_msgid_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_async_simple_add(NativePortType port_, int a, int b);

  external void wire_func_async_void(NativePortType port_);

  external void wire_handle_customized_struct_twin_rust_async(
      NativePortType port_, List<dynamic> val);

  external void wire_next_user_id_twin_rust_async(
      NativePortType port_, List<dynamic> user_id);

  external void wire_handle_customized_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_next_user_id_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_customized_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_next_user_id_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_customized_struct_twin_sync(List<dynamic> val);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_next_user_id_twin_sync(List<dynamic> user_id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_customized_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_next_user_id_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_benchmark_input_bytes_twin_rust_async(
      NativePortType port_, Uint8List bytes);

  external void wire_benchmark_output_bytes_twin_rust_async(
      NativePortType port_, int size);

  external void wire_benchmark_void_twin_rust_async(NativePortType port_);

  external void wire_benchmark_input_bytes_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_benchmark_output_bytes_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_benchmark_void_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_benchmark_input_bytes_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_benchmark_output_bytes_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_benchmark_void_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_benchmark_input_bytes_twin_sync(Uint8List bytes);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_benchmark_output_bytes_twin_sync(int size);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_benchmark_void_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_benchmark_input_bytes_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_benchmark_output_bytes_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_benchmark_void_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_datetime_local_twin_rust_async(
      NativePortType port_, Object d);

  external void wire_datetime_utc_twin_rust_async(
      NativePortType port_, Object d);

  external void wire_duration_twin_rust_async(NativePortType port_, Object d);

  external void wire_handle_durations_twin_rust_async(
      NativePortType port_, List<dynamic> durations, Object since);

  external void wire_handle_timestamps_twin_rust_async(
      NativePortType port_, List<dynamic> timestamps, Object epoch);

  external void wire_how_long_does_it_take_twin_rust_async(
      NativePortType port_, List<dynamic> mine);

  external void wire_naivedatetime_twin_rust_async(
      NativePortType port_, Object d);

  external void wire_optional_empty_datetime_utc_twin_rust_async(
      NativePortType port_, Object? d);

  external void wire_test_chrono_twin_rust_async(NativePortType port_);

  external void wire_test_precise_chrono_twin_rust_async(NativePortType port_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_datetime_local_twin_sync(Object d);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_datetime_utc_twin_sync(Object d);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_duration_twin_sync(Object d);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_durations_twin_sync(List<dynamic> durations, Object since);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_timestamps_twin_sync(List<dynamic> timestamps, Object epoch);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_how_long_does_it_take_twin_sync(List<dynamic> mine);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_naivedatetime_twin_sync(Object d);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_optional_empty_datetime_utc_twin_sync(Object? d);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_chrono_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_precise_chrono_twin_sync();

  external void
      wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async(
          NativePortType port_, List<dynamic> that);

  external void
      wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async(
          NativePortType port_);

  external void wire_function_with_comments_slash_star_star_twin_rust_async(
      NativePortType port_);

  external void
      wire_function_with_comments_triple_slash_multi_line_twin_rust_async(
          NativePortType port_);

  external void
      wire_function_with_comments_triple_slash_single_line_twin_rust_async(
          NativePortType port_);

  external void
      wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_function_with_comments_slash_star_star_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_StructWithCommentsTwinSse_instance_method_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_StructWithCommentsTwinSse_static_method_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_function_with_comments_slash_star_star_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_function_with_comments_triple_slash_multi_line_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_function_with_comments_triple_slash_single_line_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_StructWithCommentsTwinSync_instance_method_twin_sync(
          List<dynamic> that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_StructWithCommentsTwinSync_static_method_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_function_with_comments_slash_star_star_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_function_with_comments_triple_slash_multi_line_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_function_with_comments_triple_slash_single_line_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_function_with_comments_slash_star_star_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_function_with_comments_triple_slash_multi_line_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_function_with_comments_triple_slash_single_line_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_dart_dynamic_twin_rust_async(NativePortType port_);

  external void wire_return_dart_dynamic_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_dart_dynamic_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_dart_dynamic_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_dart_dynamic_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_call_dart_simple(
      NativePortType port_, Object callback);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_accept_dart_opaque_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_loopback_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_option_dart_opaque_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_option_loopback_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_unwrap_dart_opaque_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_async_accept_dart_opaque_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_clone_dart_opaque_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_create_enum_dart_opaque_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_create_nested_dart_opaque_twin_rust_async(
      NativePortType port_, Object opaque1, Object opaque2);

  external void wire_drop_static_dart_opaque_twin_rust_async(
      NativePortType port_, int id);

  external void wire_get_enum_dart_opaque_twin_rust_async(
      NativePortType port_, List<dynamic> opaque);

  external void wire_get_nested_dart_opaque_twin_rust_async(
      NativePortType port_, List<dynamic> opaque);

  external void wire_loop_back_array_get_twin_rust_async(
      NativePortType port_, List<dynamic> opaque);

  external void wire_loop_back_array_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_loop_back_option_get_twin_rust_async(
      NativePortType port_, Object? opaque);

  external void wire_loop_back_option_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_loop_back_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_loop_back_vec_get_twin_rust_async(
      NativePortType port_, List<dynamic> opaque);

  external void wire_loop_back_vec_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_panic_unwrap_dart_opaque_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_set_static_dart_opaque_twin_rust_async(
      NativePortType port_, int id, Object opaque);

  external void wire_async_accept_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_clone_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_enum_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_nested_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_drop_static_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_enum_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_nested_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_array_get_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_array_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_option_get_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_option_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_vec_get_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_vec_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_panic_unwrap_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_set_static_dart_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_async_accept_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_clone_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_enum_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_nested_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_drop_static_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_enum_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_nested_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_array_get_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_array_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_option_get_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_option_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_vec_get_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_loop_back_vec_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_panic_unwrap_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_set_static_dart_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_async_accept_dart_opaque_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_clone_dart_opaque_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_enum_dart_opaque_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_nested_dart_opaque_twin_sync(Object opaque1, Object opaque2);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_drop_static_dart_opaque_twin_sync(int id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_enum_dart_opaque_twin_sync(List<dynamic> opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_nested_dart_opaque_twin_sync(List<dynamic> opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_array_get_twin_sync(List<dynamic> opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_array_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_option_get_twin_sync(Object? opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_option_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_vec_get_twin_sync(List<dynamic> opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_loop_back_vec_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_panic_unwrap_dart_opaque_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_set_static_dart_opaque_twin_sync(int id, Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_async_accept_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_clone_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_enum_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_nested_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_drop_static_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_enum_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_nested_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_array_get_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_array_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_option_get_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_option_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_vec_get_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_loop_back_vec_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_panic_unwrap_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_set_static_dart_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_simple_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_func_enum_with_item_mixed_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_enum_with_item_struct_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_enum_with_item_tuple_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_handle_enum_parameter_twin_rust_async(
      NativePortType port_, int weekday);

  external void wire_handle_enum_struct_twin_rust_async(
      NativePortType port_, List<dynamic> val);

  external void wire_handle_return_enum_twin_rust_async(
      NativePortType port_, String input);

  external void wire_multiply_by_ten_twin_rust_async(
      NativePortType port_, List<dynamic> measure);

  external void wire_print_note_twin_rust_async(
      NativePortType port_, List<dynamic> note);

  external void wire_func_enum_simple_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_with_item_mixed_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_with_item_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_with_item_tuple_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_enum_parameter_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_enum_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_return_enum_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_multiply_by_ten_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_print_note_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_simple_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_with_item_mixed_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_with_item_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_enum_with_item_tuple_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_enum_parameter_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_enum_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_return_enum_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_multiply_by_ten_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_print_note_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_simple_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_with_item_mixed_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_with_item_struct_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_enum_with_item_tuple_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_enum_parameter_twin_sync(int weekday);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_enum_struct_twin_sync(List<dynamic> val);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_return_enum_twin_sync(String input);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_multiply_by_ten_twin_sync(List<dynamic> measure);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_print_note_twin_sync(List<dynamic> note);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_simple_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_with_item_mixed_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_with_item_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_enum_with_item_tuple_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_enum_parameter_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_enum_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_return_enum_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_multiply_by_ten_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_print_note_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_EventTwinRustAsync_as_string_twin_rust_async(
      NativePortType port_, List<dynamic> that);

  external void wire_close_event_listener_twin_rust_async(NativePortType port_);

  external void wire_create_event_twin_rust_async(
      NativePortType port_, String address, String payload);

  external void wire_register_event_listener_twin_rust_async(
      NativePortType port_);

  external void wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_close_event_listener_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_event_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_register_event_listener_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_EventTwinSse_as_string_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_close_event_listener_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_event_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_register_event_listener_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_CustomStructTwinRustAsync_new_twin_rust_async(
      NativePortType port_, String message);

  external void
      wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async(
          NativePortType port_, List<dynamic> that);

  external void
      wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async(
          NativePortType port_, List<dynamic> that);

  external void
      wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async(
          NativePortType port_);

  external void
      wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async(
          NativePortType port_);

  external void wire_SomeStructTwinRustAsync_new_twin_rust_async(
      NativePortType port_, int value);

  external void
      wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async(
          NativePortType port_, List<dynamic> that);

  external void
      wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async(
          NativePortType port_, List<dynamic> that);

  external void
      wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async(
          NativePortType port_);

  external void
      wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async(
          NativePortType port_);

  external void wire_custom_enum_error_panic_twin_rust_async(
      NativePortType port_);

  external void wire_custom_enum_error_return_error_twin_rust_async(
      NativePortType port_);

  external void wire_custom_enum_error_return_ok_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_custom_nested_error_return_error_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_custom_struct_error_return_error_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_return_error_twin_rust_async(NativePortType port_);

  external void wire_func_type_fallible_panic_twin_rust_async(
      NativePortType port_);

  external void wire_func_type_infallible_panic_twin_rust_async(
      NativePortType port_);

  external void wire_panic_with_custom_result_twin_rust_async(
      NativePortType port_);

  external void wire_return_custom_nested_error_1_twin_rust_async(
      NativePortType port_);

  external void wire_return_custom_nested_error_1_variant1_twin_rust_async(
      NativePortType port_);

  external void wire_return_custom_nested_error_2_twin_rust_async(
      NativePortType port_);

  external void wire_return_custom_struct_error_twin_rust_async(
      NativePortType port_);

  external void wire_return_custom_struct_ok_twin_rust_async(
      NativePortType port_);

  external void wire_return_err_custom_error_twin_rust_async(
      NativePortType port_);

  external void wire_return_error_variant_twin_rust_async(
      NativePortType port_, int variant);

  external void wire_return_ok_custom_error_twin_rust_async(
      NativePortType port_);

  external void wire_stream_sink_throw_anyhow_twin_rust_async(
      NativePortType port_);

  external void wire_throw_anyhow_twin_rust_async(NativePortType port_);

  external void wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_custom_enum_error_panic_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_enum_error_return_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_enum_error_return_ok_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_nested_error_return_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_struct_error_return_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_return_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_type_fallible_panic_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_type_infallible_panic_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_panic_with_custom_result_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_nested_error_1_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_nested_error_1_variant1_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_nested_error_2_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_struct_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_struct_ok_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_err_custom_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_error_variant_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_ok_custom_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_stream_sink_throw_anyhow_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_throw_anyhow_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_CustomStructTwinSse_new_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_SomeStructTwinSse_new_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_enum_error_panic_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_enum_error_return_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_enum_error_return_ok_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_nested_error_return_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_custom_struct_error_return_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_return_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_type_fallible_panic_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_type_infallible_panic_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_panic_with_custom_result_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_nested_error_1_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_nested_error_1_variant1_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_nested_error_2_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_struct_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_custom_struct_ok_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_err_custom_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_error_variant_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_return_ok_custom_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_stream_sink_throw_anyhow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_throw_anyhow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_new_twin_sync(String message);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync(
          List<dynamic> that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync(
          List<dynamic> that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_new_twin_sync(int value);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync(
          List<dynamic> that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync(
          List<dynamic> that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_enum_error_panic_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_enum_error_return_error_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_enum_error_return_ok_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_nested_error_return_error_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_custom_struct_error_return_error_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_return_error_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_type_fallible_panic_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_type_infallible_panic_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_panic_with_custom_result_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_nested_error_1_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_nested_error_1_variant1_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_nested_error_2_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_struct_error_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_custom_struct_ok_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_err_custom_error_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_error_variant_twin_sync(int variant);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_return_ok_custom_error_twin_sync();

  external void wire_stream_sink_throw_anyhow_twin_sync(NativePortType port_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_throw_anyhow_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_new_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_new_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_enum_error_panic_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_enum_error_return_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_enum_error_return_ok_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_nested_error_return_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_custom_struct_error_return_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_return_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_type_fallible_panic_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_type_infallible_panic_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_panic_with_custom_result_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_nested_error_1_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_nested_error_1_variant1_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_nested_error_2_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_struct_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_custom_struct_ok_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_err_custom_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_error_variant_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_return_ok_custom_error_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_stream_sink_throw_anyhow_twin_sync_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_throw_anyhow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_call_new_module_system_twin_rust_async(
      NativePortType port_);

  external void wire_call_old_module_system_twin_rust_async(
      NativePortType port_);

  external void wire_use_imported_enum_twin_rust_async(
      NativePortType port_, int my_enum);

  external void wire_use_imported_struct_twin_rust_async(
      NativePortType port_, List<dynamic> my_struct);

  external void wire_call_new_module_system_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_call_old_module_system_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_imported_enum_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_imported_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_call_new_module_system_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_call_old_module_system_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_imported_enum_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_use_imported_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_call_new_module_system_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_call_old_module_system_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_imported_enum_twin_sync(int my_enum);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_use_imported_struct_twin_sync(List<dynamic> my_struct);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_call_new_module_system_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_call_old_module_system_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_imported_enum_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_use_imported_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_another_macro_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_macro_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async(
          NativePortType port_, String a, String b);

  external void wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async(
      NativePortType port_, List<dynamic> that, String b);

  external void
      wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async(
          NativePortType port_);

  external void
      wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async(
          NativePortType port_, int key, int max);

  external void
      wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async(
          NativePortType port_, List<dynamic> that);

  external void
      wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async(
          NativePortType port_, List<dynamic> that, int key, int max);

  external void wire_ConcatenateWithTwinRustAsync_new_twin_rust_async(
      NativePortType port_, String a);

  external void wire_SumWithTwinRustAsync_sum_twin_rust_async(
      NativePortType port_, List<dynamic> that, int y, int z);

  external void wire_get_sum_array_twin_rust_async(
      NativePortType port_, int a, int b, int c);

  external void wire_get_sum_struct_twin_rust_async(NativePortType port_);

  external void
      wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_sum_array_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_sum_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_ConcatenateWithTwinSse_concatenate_static_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_ConcatenateWithTwinSse_concatenate_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_ConcatenateWithTwinSse_new_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_SumWithTwinSse_sum_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_sum_array_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_sum_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_ConcatenateWithTwinSync_concatenate_static_twin_sync(
          String a, String b);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_ConcatenateWithTwinSync_concatenate_twin_sync(
          List<dynamic> that, String b);

  external void
      wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync(
          NativePortType port_);

  external void
      wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync(
          NativePortType port_, int key, int max);

  external void
      wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync(
          NativePortType port_, List<dynamic> that);

  external void wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync(
      NativePortType port_, List<dynamic> that, int key, int max);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_ConcatenateWithTwinSync_new_twin_sync(String a);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_SumWithTwinSync_sum_twin_sync(List<dynamic> that, int y, int z);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_sum_array_twin_sync(int a, int b, int c);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_sum_struct_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_SumWithTwinSyncSse_sum_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_sum_array_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_sum_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_app_settings_stream_twin_rust_async(NativePortType port_);

  external void wire_app_settings_vec_stream_twin_rust_async(
      NativePortType port_);

  external void wire_first_number_twin_rust_async(
      NativePortType port_, List<dynamic> nums);

  external void wire_first_sequence_twin_rust_async(
      NativePortType port_, List<dynamic> seqs);

  external void wire_get_app_settings_twin_rust_async(NativePortType port_);

  external void wire_get_fallible_app_settings_twin_rust_async(
      NativePortType port_);

  external void wire_get_message_twin_rust_async(NativePortType port_);

  external void wire_is_app_embedded_twin_rust_async(
      NativePortType port_, List<dynamic> app_settings);

  external void wire_mirror_struct_stream_twin_rust_async(NativePortType port_);

  external void wire_mirror_tuple_stream_twin_rust_async(NativePortType port_);

  external void wire_repeat_number_twin_rust_async(
      NativePortType port_, int num, int times);

  external void wire_repeat_sequence_twin_rust_async(
      NativePortType port_, int seq, int times);

  external void wire_test_contains_mirrored_sub_struct_twin_rust_async(
      NativePortType port_);

  external void wire_test_fallible_of_raw_string_mirrored_twin_rust_async(
      NativePortType port_);

  external void wire_test_list_of_nested_enums_mirrored_twin_rust_async(
      NativePortType port_);

  external void wire_test_list_of_raw_nested_string_mirrored_twin_rust_async(
      NativePortType port_);

  external void wire_test_nested_raw_string_mirrored_twin_rust_async(
      NativePortType port_);

  external void wire_test_raw_string_enum_mirrored_twin_rust_async(
      NativePortType port_, bool nested);

  external void wire_test_raw_string_mirrored_twin_rust_async(
      NativePortType port_);

  external void wire_app_settings_stream_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_app_settings_vec_stream_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_first_number_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_first_sequence_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_app_settings_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_fallible_app_settings_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_message_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_is_app_embedded_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_mirror_struct_stream_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_mirror_tuple_stream_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_repeat_number_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_repeat_sequence_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_contains_mirrored_sub_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_test_nested_raw_string_mirrored_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_raw_string_enum_mirrored_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_raw_string_mirrored_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_app_settings_stream_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_app_settings_vec_stream_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_first_number_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_first_sequence_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_app_settings_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_fallible_app_settings_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_get_message_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_is_app_embedded_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_mirror_struct_stream_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_mirror_tuple_stream_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_repeat_number_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_repeat_sequence_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_contains_mirrored_sub_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_fallible_of_raw_string_mirrored_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_list_of_nested_enums_mirrored_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_list_of_raw_nested_string_mirrored_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_nested_raw_string_mirrored_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_raw_string_enum_mirrored_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_raw_string_mirrored_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_app_settings_stream_twin_sync(NativePortType port_);

  external void wire_app_settings_vec_stream_twin_sync(NativePortType port_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_first_number_twin_sync(List<dynamic> nums);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_first_sequence_twin_sync(List<dynamic> seqs);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_app_settings_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_fallible_app_settings_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_get_message_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_is_app_embedded_twin_sync(List<dynamic> app_settings);

  external void wire_mirror_struct_stream_twin_sync(NativePortType port_);

  external void wire_mirror_tuple_stream_twin_sync(NativePortType port_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_repeat_number_twin_sync(int num, int times);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_repeat_sequence_twin_sync(int seq, int times);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_contains_mirrored_sub_struct_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_fallible_of_raw_string_mirrored_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_list_of_nested_enums_mirrored_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_list_of_raw_nested_string_mirrored_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_nested_raw_string_mirrored_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_raw_string_enum_mirrored_twin_sync(bool nested);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_raw_string_mirrored_twin_sync();

  external void wire_app_settings_stream_twin_sync_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_app_settings_vec_stream_twin_sync_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_first_number_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_first_sequence_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_app_settings_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_fallible_app_settings_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_get_message_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_is_app_embedded_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_mirror_struct_stream_twin_sync_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_mirror_tuple_stream_twin_sync_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_repeat_number_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_repeat_sequence_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_contains_mirrored_sub_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_fallible_of_raw_string_mirrored_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_list_of_nested_enums_mirrored_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_nested_raw_string_mirrored_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_raw_string_enum_mirrored_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_raw_string_mirrored_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_big_buffers_twin_rust_async(NativePortType port_);

  external void wire_handle_complex_struct_twin_rust_async(
      NativePortType port_, List<dynamic> s);

  external void wire_handle_nested_struct_twin_rust_async(
      NativePortType port_, List<dynamic> s);

  external void wire_handle_string_twin_rust_async(
      NativePortType port_, String s);

  external void wire_handle_struct_twin_rust_async(
      NativePortType port_, List<dynamic> arg, List<dynamic> boxed);

  external void wire_handle_vec_u8_twin_rust_async(
      NativePortType port_, Uint8List v);

  external void wire_list_of_primitive_enums_twin_rust_async(
      NativePortType port_, List<dynamic> weekdays);

  external void wire_test_abc_enum_twin_rust_async(
      NativePortType port_, List<dynamic> abc);

  external void wire_test_struct_with_enum_twin_rust_async(
      NativePortType port_, List<dynamic> se);

  external void wire_handle_big_buffers_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_complex_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_nested_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_string_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_vec_u8_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_list_of_primitive_enums_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_abc_enum_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_struct_with_enum_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_big_buffers_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_complex_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_nested_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_string_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_vec_u8_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_list_of_primitive_enums_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_abc_enum_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_struct_with_enum_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_big_buffers_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_complex_struct_twin_sync(List<dynamic> s);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_nested_struct_twin_sync(List<dynamic> s);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_string_twin_sync(String s);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_struct_twin_sync(List<dynamic> arg, List<dynamic> boxed);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_vec_u8_twin_sync(Uint8List v);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_list_of_primitive_enums_twin_sync(List<dynamic> weekdays);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_abc_enum_twin_sync(List<dynamic> abc);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_struct_with_enum_twin_sync(List<dynamic> se);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_big_buffers_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_complex_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_nested_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_string_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_vec_u8_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_list_of_primitive_enums_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_abc_enum_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_struct_with_enum_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_empty_struct_twin_rust_async(
      NativePortType port_, List<dynamic> empty);

  external void wire_func_return_unit_twin_rust_async(NativePortType port_);

  external void wire_func_string_twin_rust_async(
      NativePortType port_, String arg);

  external void wire_handle_list_of_struct_twin_rust_async(
      NativePortType port_, List<dynamic> l);

  external void wire_handle_string_list_twin_rust_async(
      NativePortType port_, List<dynamic> names);

  external void wire_empty_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_return_unit_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_string_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_list_of_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_string_list_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_empty_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_return_unit_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_string_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_list_of_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_string_list_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_empty_struct_twin_sync(List<dynamic> empty);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_return_unit_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_string_twin_sync(String arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_list_of_struct_twin_sync(List<dynamic> l);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_string_list_twin_sync(List<dynamic> names);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_empty_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_return_unit_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_string_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_list_of_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_string_list_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_newtype_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_handle_newtype_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_newtype_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_newtype_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_newtype_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_bool_twin_normal(
      NativePortType port_, bool? arg);

  external void wire_example_optional_primitive_type_f32_twin_normal(
      NativePortType port_, double? arg);

  external void wire_example_optional_primitive_type_f64_twin_normal(
      NativePortType port_, double? arg);

  external void wire_example_optional_primitive_type_i16_twin_normal(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_i32_twin_normal(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_i64_twin_normal(
      NativePortType port_, Object? arg);

  external void wire_example_optional_primitive_type_i8_twin_normal(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_u16_twin_normal(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_u32_twin_normal(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_u64_twin_normal(
      NativePortType port_, Object? arg);

  external void wire_example_optional_primitive_type_u8_twin_normal(
      NativePortType port_, int? arg);

  external void wire_primitive_optional_types_twin_rust_async(
      NativePortType port_,
      int? my_i32,
      Object? my_i64,
      double? my_f64,
      bool? my_bool);

  external void wire_primitive_optional_types_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_primitive_optional_types_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_primitive_optional_types_twin_sync(
          int? my_i32, Object? my_i64, double? my_f64, bool? my_bool);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_primitive_optional_types_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_bool_twin_rust_async(
      NativePortType port_, bool? arg);

  external void wire_example_optional_primitive_type_f32_twin_rust_async(
      NativePortType port_, double? arg);

  external void wire_example_optional_primitive_type_f64_twin_rust_async(
      NativePortType port_, double? arg);

  external void wire_example_optional_primitive_type_i16_twin_rust_async(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_i32_twin_rust_async(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_i64_twin_rust_async(
      NativePortType port_, Object? arg);

  external void wire_example_optional_primitive_type_i8_twin_rust_async(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_u16_twin_rust_async(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_u32_twin_rust_async(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_u64_twin_rust_async(
      NativePortType port_, Object? arg);

  external void wire_example_optional_primitive_type_u8_twin_rust_async(
      NativePortType port_, int? arg);

  external void wire_example_optional_primitive_type_bool_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_f32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_f64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i16_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i8_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u16_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u8_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_bool_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_f32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_f64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i16_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_i8_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u16_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_optional_primitive_type_u8_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_bool_twin_sync(bool? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_f32_twin_sync(double? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_f64_twin_sync(double? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i16_twin_sync(int? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i32_twin_sync(int? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i64_twin_sync(Object? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_i8_twin_sync(int? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u16_twin_sync(int? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u32_twin_sync(int? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u64_twin_sync(Object? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_optional_primitive_type_u8_twin_sync(int? arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_bool_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_f32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_f64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i16_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_i8_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u16_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_optional_primitive_type_u8_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_increment_boxed_optional_twin_rust_async(
      NativePortType port_, double? opt);

  external void wire_handle_option_box_arguments_twin_rust_async(
      NativePortType port_,
      int? i8box,
      int? u8box,
      int? i32box,
      Object? i64box,
      double? f64box,
      bool? boolbox,
      List<dynamic>? structbox);

  external void wire_handle_optional_increment_twin_rust_async(
      NativePortType port_, List<dynamic>? opt);

  external void wire_handle_optional_return_twin_rust_async(
      NativePortType port_, double left, double right);

  external void wire_handle_optional_struct_twin_rust_async(
      NativePortType port_, String? document);

  external void wire_handle_vec_of_opts_twin_rust_async(
      NativePortType port_, List<dynamic> opt);

  external void wire_handle_increment_boxed_optional_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_option_box_arguments_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_optional_increment_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_optional_return_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_optional_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_vec_of_opts_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_increment_boxed_optional_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_option_box_arguments_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_optional_increment_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_optional_return_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_optional_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_vec_of_opts_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_increment_boxed_optional_twin_sync(double? opt);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_option_box_arguments_twin_sync(
          int? i8box,
          int? u8box,
          int? i32box,
          Object? i64box,
          double? f64box,
          bool? boolbox,
          List<dynamic>? structbox);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_optional_increment_twin_sync(List<dynamic>? opt);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_optional_return_twin_sync(double left, double right);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_optional_struct_twin_sync(String? document);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_vec_of_opts_twin_sync(List<dynamic> opt);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_increment_boxed_optional_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_option_box_arguments_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_optional_increment_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_optional_return_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_optional_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_vec_of_opts_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_bool_twin_normal(
      NativePortType port_, bool arg);

  external void wire_example_primitive_type_f32_twin_normal(
      NativePortType port_, double arg);

  external void wire_example_primitive_type_f64_twin_normal(
      NativePortType port_, double arg);

  external void wire_example_primitive_type_i16_twin_normal(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_i32_twin_normal(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_i64_twin_normal(
      NativePortType port_, Object arg);

  external void wire_example_primitive_type_i8_twin_normal(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_u16_twin_normal(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_u32_twin_normal(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_u64_twin_normal(
      NativePortType port_, Object arg);

  external void wire_example_primitive_type_u8_twin_normal(
      NativePortType port_, int arg);

  external void wire_example_primitive_list_type_bool_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_example_primitive_list_type_f32_twin_normal(
      NativePortType port_, Float32List arg);

  external void wire_example_primitive_list_type_f64_twin_normal(
      NativePortType port_, Float64List arg);

  external void wire_example_primitive_list_type_i16_twin_normal(
      NativePortType port_, Int16List arg);

  external void wire_example_primitive_list_type_i32_twin_normal(
      NativePortType port_, Int32List arg);

  external void wire_example_primitive_list_type_i64_twin_normal(
      NativePortType port_, Object /* BigInt64Array */ arg);

  external void wire_example_primitive_list_type_i8_twin_normal(
      NativePortType port_, Int8List arg);

  external void wire_example_primitive_list_type_u16_twin_normal(
      NativePortType port_, Uint16List arg);

  external void wire_example_primitive_list_type_u32_twin_normal(
      NativePortType port_, Uint32List arg);

  external void wire_example_primitive_list_type_u64_twin_normal(
      NativePortType port_, Object /* BigInt64Array */ arg);

  external void wire_example_primitive_list_type_u8_twin_normal(
      NativePortType port_, Uint8List arg);

  external void wire_handle_vec_of_primitive_twin_rust_async(
      NativePortType port_, int n);

  external void wire_handle_vec_of_primitive_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_vec_of_primitive_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_vec_of_primitive_twin_sync(int n);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_vec_of_primitive_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_bool_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_example_primitive_list_type_f32_twin_rust_async(
      NativePortType port_, Float32List arg);

  external void wire_example_primitive_list_type_f64_twin_rust_async(
      NativePortType port_, Float64List arg);

  external void wire_example_primitive_list_type_i16_twin_rust_async(
      NativePortType port_, Int16List arg);

  external void wire_example_primitive_list_type_i32_twin_rust_async(
      NativePortType port_, Int32List arg);

  external void wire_example_primitive_list_type_i64_twin_rust_async(
      NativePortType port_, Object /* BigInt64Array */ arg);

  external void wire_example_primitive_list_type_i8_twin_rust_async(
      NativePortType port_, Int8List arg);

  external void wire_example_primitive_list_type_u16_twin_rust_async(
      NativePortType port_, Uint16List arg);

  external void wire_example_primitive_list_type_u32_twin_rust_async(
      NativePortType port_, Uint32List arg);

  external void wire_example_primitive_list_type_u64_twin_rust_async(
      NativePortType port_, Object /* BigInt64Array */ arg);

  external void wire_example_primitive_list_type_u8_twin_rust_async(
      NativePortType port_, Uint8List arg);

  external void wire_example_primitive_list_type_bool_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_f32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_f64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i16_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i8_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u16_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u8_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_bool_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_f32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_f64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i16_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_i8_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u16_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_list_type_u8_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_bool_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_f32_twin_sync(Float32List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_f64_twin_sync(Float64List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i16_twin_sync(Int16List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i32_twin_sync(Int32List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i64_twin_sync(
          Object /* BigInt64Array */ arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_i8_twin_sync(Int8List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u16_twin_sync(Uint16List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u32_twin_sync(Uint32List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u64_twin_sync(
          Object /* BigInt64Array */ arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_list_type_u8_twin_sync(Uint8List arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_bool_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_f32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_f64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i16_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_i8_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u16_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_list_type_u8_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_primitive_types_twin_rust_async(NativePortType port_,
      int my_i32, Object my_i64, double my_f64, bool my_bool);

  external void wire_primitive_u32_twin_rust_async(
      NativePortType port_, int my_u32);

  external void wire_primitive_types_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_primitive_u32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_primitive_types_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_primitive_u32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_primitive_types_twin_sync(
          int my_i32, Object my_i64, double my_f64, bool my_bool);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_primitive_u32_twin_sync(int my_u32);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_primitive_types_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_primitive_u32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_bool_twin_rust_async(
      NativePortType port_, bool arg);

  external void wire_example_primitive_type_f32_twin_rust_async(
      NativePortType port_, double arg);

  external void wire_example_primitive_type_f64_twin_rust_async(
      NativePortType port_, double arg);

  external void wire_example_primitive_type_i16_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_i32_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_i64_twin_rust_async(
      NativePortType port_, Object arg);

  external void wire_example_primitive_type_i8_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_u16_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_u32_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_u64_twin_rust_async(
      NativePortType port_, Object arg);

  external void wire_example_primitive_type_u8_twin_rust_async(
      NativePortType port_, int arg);

  external void wire_example_primitive_type_bool_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_f32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_f64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i16_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i8_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u16_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u32_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u64_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u8_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_bool_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_f32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_f64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i16_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_i8_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u16_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u32_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u64_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_example_primitive_type_u8_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_bool_twin_sync(bool arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_f32_twin_sync(double arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_f64_twin_sync(double arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i16_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i32_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i64_twin_sync(Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_i8_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u16_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u32_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u64_twin_sync(Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_example_primitive_type_u8_twin_sync(int arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_bool_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_f32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_f64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i16_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_i8_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u16_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u32_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u64_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_example_primitive_type_u8_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_more_than_just_one_raw_string_struct_twin_rust_async(
      NativePortType port_);

  external void wire_test_raw_string_item_struct_twin_rust_async(
      NativePortType port_);

  external void
      wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_test_raw_string_item_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_more_than_just_one_raw_string_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_raw_string_item_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_more_than_just_one_raw_string_struct_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_raw_string_item_struct_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_more_than_just_one_raw_string_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_raw_string_item_struct_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_NonCloneSimpleTwinSse_new_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_arg_borrow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_arg_mut_borrow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_arg_own_and_return_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_arg_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_callable_arg_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_callable_return_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_plus_sign_arg_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_plus_sign_return_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_return_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse(
          int port_,
          ffi.Pointer<ffi.Uint8> ptr_,
          int rust_vec_len_,
          int data_len_);

  external void wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_trait_object_arg_own_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_trait_object_return_own_one_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_trait_object_return_own_two_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_rust_auto_opaque_two_args_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync(
          Object that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync(
          Object that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync(
          Object that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync(
          Object that);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_new_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync(
          Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync(
          Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync(Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_borrow_twin_sync(Object arg, int expect);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_mut_borrow_twin_sync(
          Object arg, int expect, int adder);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_own_and_return_own_twin_sync(Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_arg_own_twin_sync(Object arg, int expect);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_callable_arg_twin_sync(Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_callable_return_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync(Object a, String b);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_plus_sign_arg_twin_sync(Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_plus_sign_return_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_return_own_twin_sync(int initial);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(
          Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(
          Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(
          Object arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync(
          Object arg, String expect);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(
          Object arg, String expect);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_arg_own_twin_sync(
          Object arg, String expect);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_return_own_one_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_trait_object_return_own_two_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_rust_auto_opaque_two_args_twin_sync(Object a, Object b);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_arg_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_callable_arg_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_callable_return_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_plus_sign_return_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_return_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_rust_auto_opaque_two_args_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_frb_sync_generator_test_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_create_non_clone_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_create_opaque_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_create_sync_opaque_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_option_rust_opaque_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_sync_run_opaque_twin_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_array_opaque_enum_twin_rust_async(
      NativePortType port_);

  external void wire_create_nested_opaque_twin_rust_async(NativePortType port_);

  external void wire_create_opaque_twin_rust_async(NativePortType port_);

  external void wire_create_option_opaque_twin_rust_async(
      NativePortType port_, Object? opaque);

  external void wire_create_sync_opaque_twin_rust_async(NativePortType port_);

  external void wire_frb_generator_test_twin_rust_async(NativePortType port_);

  external void wire_opaque_array_run_twin_rust_async(
      NativePortType port_, List<dynamic> data);

  external void wire_opaque_array_twin_rust_async(NativePortType port_);

  external void wire_opaque_vec_run_twin_rust_async(
      NativePortType port_, List<dynamic> data);

  external void wire_opaque_vec_twin_rust_async(NativePortType port_);

  external void wire_run_enum_opaque_twin_rust_async(
      NativePortType port_, List<dynamic> opaque);

  external void wire_run_nested_opaque_twin_rust_async(
      NativePortType port_, List<dynamic> opaque);

  external void wire_run_non_clone_twin_rust_async(
      NativePortType port_, Object clone);

  external void wire_run_opaque_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_run_opaque_with_delay_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_unwrap_rust_opaque_twin_rust_async(
      NativePortType port_, Object opaque);

  external void wire_create_array_opaque_enum_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_nested_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_option_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_sync_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_frb_generator_test_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_array_run_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_array_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_vec_run_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_vec_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_enum_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_nested_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_non_clone_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_opaque_with_delay_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_unwrap_rust_opaque_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_array_opaque_enum_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_nested_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_option_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_sync_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_frb_generator_test_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_array_run_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_array_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_vec_run_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_opaque_vec_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_enum_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_nested_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_non_clone_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_run_opaque_with_delay_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_unwrap_rust_opaque_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_array_opaque_enum_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_nested_opaque_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_opaque_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_option_opaque_twin_sync(Object? opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_create_sync_opaque_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_frb_generator_test_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_array_run_twin_sync(List<dynamic> data);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_array_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_vec_run_twin_sync(List<dynamic> data);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_opaque_vec_twin_sync();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_enum_opaque_twin_sync(List<dynamic> opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_nested_opaque_twin_sync(List<dynamic> opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_non_clone_twin_sync(Object clone);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_opaque_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_run_opaque_with_delay_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_unwrap_rust_opaque_twin_sync(Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_array_opaque_enum_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_nested_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_option_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_create_sync_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_frb_generator_test_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_array_run_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_array_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_vec_run_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_opaque_vec_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_enum_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_nested_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_non_clone_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_run_opaque_with_delay_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_unwrap_rust_opaque_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_simple_adder_twin_rust_async(
      NativePortType port_, int a, int b);

  external void wire_simple_adder_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_simple_adder_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_simple_adder_twin_sync(int a, int b);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_simple_adder_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_stream_realistic_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_stream_return_error_twin_rust_async(
      NativePortType port_);

  external void wire_func_stream_return_panic_twin_rust_async(
      NativePortType port_);

  external void wire_func_stream_sink_arg_position_twin_rust_async(
      NativePortType port_, int a, int b);

  external void wire_handle_stream_of_struct_twin_rust_async(
      NativePortType port_);

  external void wire_handle_stream_sink_at_1_twin_rust_async(
      NativePortType port_, int key, int max);

  external void wire_handle_stream_sink_at_2_twin_rust_async(
      NativePortType port_, int key, int max);

  external void wire_handle_stream_sink_at_3_twin_rust_async(
      NativePortType port_, int key, int max);

  external void wire_func_stream_return_error_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_stream_return_panic_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_stream_sink_arg_position_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_of_struct_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_sink_at_1_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_sink_at_2_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_sink_at_3_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_stream_return_error_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_stream_return_panic_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_stream_sink_arg_position_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_of_struct_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_sink_at_1_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_sink_at_2_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_stream_sink_at_3_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_struct_with_one_field_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_struct_with_two_field_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_struct_with_zero_field_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_tuple_struct_with_one_field_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_tuple_struct_with_two_field_twin_rust_async(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_struct_with_one_field_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_struct_with_two_field_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_struct_with_zero_field_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_tuple_struct_with_one_field_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_tuple_struct_with_two_field_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_struct_with_one_field_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_struct_with_two_field_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_struct_with_zero_field_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_tuple_struct_with_one_field_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_func_tuple_struct_with_two_field_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_struct_with_one_field_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_struct_with_two_field_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_struct_with_zero_field_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_tuple_struct_with_one_field_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_func_tuple_struct_with_two_field_twin_sync(List<dynamic> arg);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_struct_with_one_field_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_struct_with_two_field_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_struct_with_zero_field_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_tuple_struct_with_one_field_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_func_tuple_struct_with_two_field_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_tuple_2_twin_rust_async(
      NativePortType port_, List<dynamic> value);

  external void wire_test_tuple_twin_rust_async(
      NativePortType port_, List<dynamic>? value);

  external void wire_test_tuple_2_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_tuple_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_tuple_2_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_test_tuple_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_tuple_2_twin_sync(List<dynamic> value);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_test_tuple_twin_sync(List<dynamic>? value);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_tuple_2_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_test_tuple_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_type_alias_id_twin_rust_async(
      NativePortType port_, Object input);

  external void wire_handle_type_alias_model_twin_rust_async(
      NativePortType port_, Object input);

  external void wire_handle_type_nest_alias_id_twin_rust_async(
      NativePortType port_, Object input);

  external void wire_handle_type_alias_id_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_type_alias_model_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_type_nest_alias_id_twin_rust_async_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_type_alias_id_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_type_alias_model_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_type_nest_alias_id_twin_sse(
      int port_, ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_type_alias_id_twin_sync(Object input);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_type_alias_model_twin_sync(Object input);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_type_nest_alias_id_twin_sync(Object input);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_type_alias_id_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_type_alias_model_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnSse */
      wire_handle_type_nest_alias_id_twin_sync_sse(
          ffi.Pointer<ffi.Uint8> ptr_, int rust_vec_len_, int data_len_);

  external void wire_handle_nested_uuids_twin_rust_async(
      NativePortType port_, List<dynamic> ids);

  external void wire_handle_uuid_twin_rust_async(
      NativePortType port_, Uint8List id);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_nested_uuids_twin_sync(List<dynamic> ids);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_handle_uuid_twin_sync(Uint8List id);

  external void wire_test_more_than_just_one_raw_string_struct_twin_normal(
      NativePortType port_);

  external void wire_test_raw_string_item_struct_twin_normal(
      NativePortType port_);

  external void
      wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal(
          NativePortType port_, Object that);

  external void
      wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal(
          NativePortType port_, Object that);

  external void
      wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal(
          NativePortType port_, Object that);

  external void
      wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal(
          NativePortType port_, Object that);

  external void wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal(
      NativePortType port_);

  external void wire_NonCloneSimpleTwinNormal_new_twin_normal(
      NativePortType port_);

  external void
      wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal(
          NativePortType port_, Object arg);

  external void
      wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal(
          NativePortType port_, Object arg);

  external void wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal(
      NativePortType port_, Object arg);

  external void
      wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal(
          NativePortType port_);

  external void wire_rust_auto_opaque_arg_borrow_twin_normal(
      NativePortType port_, Object arg, int expect);

  external void wire_rust_auto_opaque_arg_mut_borrow_twin_normal(
      NativePortType port_, Object arg, int expect, int adder);

  external void wire_rust_auto_opaque_arg_own_and_return_own_twin_normal(
      NativePortType port_, Object arg);

  external void wire_rust_auto_opaque_arg_own_twin_normal(
      NativePortType port_, Object arg, int expect);

  external void wire_rust_auto_opaque_callable_arg_twin_normal(
      NativePortType port_, Object arg);

  external void wire_rust_auto_opaque_callable_return_twin_normal(
      NativePortType port_);

  external void wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal(
      NativePortType port_, Object a, String b);

  external void wire_rust_auto_opaque_plus_sign_arg_twin_normal(
      NativePortType port_, Object arg);

  external void wire_rust_auto_opaque_plus_sign_return_twin_normal(
      NativePortType port_);

  external void wire_rust_auto_opaque_return_own_twin_normal(
      NativePortType port_, int initial);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(
          NativePortType port_, Object arg);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(
          NativePortType port_, Object arg);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(
          NativePortType port_, Object arg);

  external void
      wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal(
          NativePortType port_);

  external void wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal(
      NativePortType port_, Object arg, String expect);

  external void wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(
      NativePortType port_, Object arg, String expect);

  external void wire_rust_auto_opaque_trait_object_arg_own_twin_normal(
      NativePortType port_, Object arg, String expect);

  external void wire_rust_auto_opaque_trait_object_return_own_one_twin_normal(
      NativePortType port_);

  external void wire_rust_auto_opaque_trait_object_return_own_two_twin_normal(
      NativePortType port_);

  external void wire_rust_auto_opaque_two_args_twin_normal(
      NativePortType port_, Object a, Object b);

  external void wire_create_array_opaque_enum_twin_normal(NativePortType port_);

  external void wire_create_nested_opaque_twin_normal(NativePortType port_);

  external void wire_create_opaque_twin_normal(NativePortType port_);

  external void wire_create_option_opaque_twin_normal(
      NativePortType port_, Object? opaque);

  external void wire_create_sync_opaque_twin_normal(NativePortType port_);

  external void wire_frb_generator_test_twin_normal(NativePortType port_);

  external void wire_opaque_array_run_twin_normal(
      NativePortType port_, List<dynamic> data);

  external void wire_opaque_array_twin_normal(NativePortType port_);

  external void wire_opaque_vec_run_twin_normal(
      NativePortType port_, List<dynamic> data);

  external void wire_opaque_vec_twin_normal(NativePortType port_);

  external void wire_run_enum_opaque_twin_normal(
      NativePortType port_, List<dynamic> opaque);

  external void wire_run_nested_opaque_twin_normal(
      NativePortType port_, List<dynamic> opaque);

  external void wire_run_non_clone_twin_normal(
      NativePortType port_, Object clone);

  external void wire_run_opaque_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_run_opaque_with_delay_twin_normal(
      NativePortType port_, Object opaque);

  external void wire_unwrap_rust_opaque_twin_normal(
      NativePortType port_, Object opaque);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_frb_sync_generator_test_twin_normal();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_create_non_clone_twin_normal();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_create_opaque_twin_normal();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_create_sync_opaque_twin_normal();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_option_rust_opaque_twin_normal();

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncReturnDco */
      wire_sync_run_opaque_twin_normal(Object opaque);

  external void wire_simple_adder_twin_normal(
      NativePortType port_, int a, int b);

  external void wire_func_stream_return_error_twin_normal(NativePortType port_);

  external void wire_func_stream_return_panic_twin_normal(NativePortType port_);

  external void wire_func_stream_sink_arg_position_twin_normal(
      NativePortType port_, int a, int b);

  external void wire_handle_stream_of_struct_twin_normal(NativePortType port_);

  external void wire_handle_stream_sink_at_1_twin_normal(
      NativePortType port_, int key, int max);

  external void wire_handle_stream_sink_at_2_twin_normal(
      NativePortType port_, int key, int max);

  external void wire_handle_stream_sink_at_3_twin_normal(
      NativePortType port_, int key, int max);

  external void wire_func_stream_realistic_twin_normal(
      NativePortType port_, String arg);

  external void wire_func_struct_with_one_field_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_struct_with_two_field_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_struct_with_zero_field_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_tuple_struct_with_one_field_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_func_tuple_struct_with_two_field_twin_normal(
      NativePortType port_, List<dynamic> arg);

  external void wire_test_tuple_2_twin_normal(
      NativePortType port_, List<dynamic> value);

  external void wire_test_tuple_twin_normal(
      NativePortType port_, List<dynamic>? value);

  external void wire_handle_type_alias_id_twin_normal(
      NativePortType port_, Object input);

  external void wire_handle_type_alias_model_twin_normal(
      NativePortType port_, Object input);

  external void wire_handle_type_nest_alias_id_twin_normal(
      NativePortType port_, Object input);

  external void wire_handle_nested_uuids_twin_normal(
      NativePortType port_, List<dynamic> ids);

  external void wire_handle_uuid_twin_normal(
      NativePortType port_, Uint8List id);

  external void rust_arc_increment_strong_count_RustOpaque_MutexHideData(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_MutexHideData(
      dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_RwLockHideData(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_RwLockHideData(
      dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSse(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
          dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_frb_opaque_return(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return(
      dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return(
          dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_hide_data(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_hide_data(
      dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_i_32(dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_i_32(dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_non_clone_data(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_non_clone_data(
      dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_non_send_hide_data(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_non_send_hide_data(
      dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
          dynamic ptr);
}
