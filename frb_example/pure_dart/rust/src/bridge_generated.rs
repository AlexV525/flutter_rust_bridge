// Section: file_attributes
#![allow(non_camel_case_types, unused, clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg, clippy::double_parens, non_snake_case, clippy::too_many_arguments)]// Section: code_header
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.// Section: imports

        use crate::bridge_generated::*;
        use flutter_rust_bridge::*;
        use core::panic::UnwindSafe;
        use std::sync::Arc;
        use std::ffi::c_void;
        use flutter_rust_bridge::rust2dart::IntoIntoDart;
        // Section: wire_funcs
fn wire_simple_adder_impl(port_: MessagePort,a: impl Wire2Api<i32> + UnwindSafe,b: impl Wire2Api<i32> + UnwindSafe)  { FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,i32,_>(WrapInfo{ debug_name: "simple_adder", port: Some(port_), mode: FfiCallMode::Normal }, move || { let api_a = a.wire2api();let api_b = b.wire2api(); move |task_callback| Result::<_,()>::Ok(simple_adder(api_a, api_b)) }) }// Section: wrapper_structs
// Section: static_checks
// Section: executor
support::lazy_static! {
                pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
            }// Section: allocate_funcs
// Section: related_funcs
// Section: impl_wire2api

            pub trait Wire2Api<T> {
                fn wire2api(self) -> T;
            }

            impl<T, S> Wire2Api<Option<T>> for *mut S
            where
                *mut S: Wire2Api<T>
            {
                fn wire2api(self) -> Option<T> {
                    (!self.is_null()).then(|| self.wire2api())
                }
            }
        impl Wire2Api<i32> for i32 {
            fn wire2api(self) -> i32 {
                self
            }
        }// Section: wire2api_class
// Section: impl_new_with_nullptr
// Section: impl_into_dart


        
        
        #[cfg(not(target_family = "wasm"))]
        #[path = "/Volumes/MyExternal/ExternalRefCode/flutter_rust_bridge/frb_example/pure_dart/rust/src/bridge_generated.io.rs"]
        mod io;
        #[cfg(not(target_family = "wasm"))]
        pub use io::*;
        
        
        