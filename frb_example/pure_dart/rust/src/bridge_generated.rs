#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use flutter_rust_bridge::{opaque::Opaque, *};
use std::sync::RwLock;

// Section: imports

use crate::data::TestOpaque;

// Section: wire functions

fn wire_handle_opaque_aaa_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_opaque_aaa",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| handle_opaque_aaa(),
    )
}
fn wire_magic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "magic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(magic()),
    )
}
fn wire_handle_magic_impl(
    port_: MessagePort,
    magic: impl Wire2Api<Opaque<Box<RwLock<dyn Wtffi>>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_magic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_magic = magic.wire2api();
            move |task_callback| Ok(handle_magic(api_magic))
        },
    )
}
fn wire_handle_opaque_bbb_impl(
    port_: MessagePort,
    value: impl Wire2Api<Option<TestOpaque>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_opaque_bbb",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| Ok(handle_opaque_bbb(api_value))
        },
    )
}
fn wire_handle_opaque_impl(
    port_: MessagePort,
    value: impl Wire2Api<Option<OpaqueBag>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| handle_opaque(api_value)
        },
    )
}
fn wire_handle_opaque_repr_impl(
    port_: MessagePort,
    value: impl Wire2Api<Opaque<RwLock<i32>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_opaque_repr",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| handle_opaque_repr(api_value)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

// Section: impl IntoDart

impl support::IntoDart for OpaqueBag {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.primitive.into_dart(),
            self.array.into_dart(),
            self.lifetime.into_dart(),
            self.trait_obj.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OpaqueBag {}

impl support::IntoDart for TestOpaque {
    fn into_dart(self) -> support::DartAbi {
        vec![self.magic.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TestOpaque {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
