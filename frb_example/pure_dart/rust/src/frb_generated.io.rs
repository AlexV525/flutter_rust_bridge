// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use super::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_sse::*;
use crate::api::rust_auto_opaque::*;
use crate::api::rust_opaque::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<anyhow::Error> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<backtrace::Backtrace> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> backtrace::Backtrace {
        unimplemented!()
    }
}
impl CstDecode<chrono::Duration> for i64 {
    fn cst_decode(self) -> chrono::Duration {
        chrono::Duration::microseconds(self)
    }
}
impl CstDecode<flutter_rust_bridge::DartOpaque> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self) }
    }
}
impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]> for *mut wire_cst_list_DartOpaque {
    fn cst_decode(self) -> [flutter_rust_bridge::DartOpaque; 1] {
        let vec: Vec<flutter_rust_bridge::DartOpaque> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<Mutex<HideData>>> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Mutex<HideData>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<RwLock<HideData>>> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<RwLock<HideData>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsyncSse>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsyncSse>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSse>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSse>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSyncSse>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSyncSse>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::FrbOpaqueReturn>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::FrbOpaqueReturn> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::FrbOpaqueSyncReturn>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::FrbOpaqueSyncReturn> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<[flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2]>
    for *mut wire_cst_list_RustOpaque_hide_data
{
    fn cst_decode(
        self,
    ) -> [flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2] {
        let vec: Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<i32>> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<i32> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<
            std::sync::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
            >,
        >,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<
        std::sync::RwLock<Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>>,
    > {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSse>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSse>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSyncSse>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSyncSse>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<
            std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>,
        >,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSse + Send + Sync>>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSse + Send + Sync>>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<
            std::sync::RwLock<Box<dyn MyTraitTwinSyncSse + Send + Sync>>,
        >,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSyncSse + Send + Sync>>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSse>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSse>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSyncSse>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSyncSse>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSse>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSse>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecode<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSse>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSse>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<uuid::Uuid> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> uuid::Uuid {
        let single: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::decode_uuid(single)
    }
}
impl CstDecode<crate::api::misc_example::ATwinNormal> for wire_cst_a_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::ATwinNormal {
        crate::api::misc_example::ATwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>
    for wire_cst_a_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse>
    for wire_cst_a_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse> for wire_cst_a_twin_sse {
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
        crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for wire_cst_a_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse>
    for wire_cst_a_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
        crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::AbcTwinNormal> for wire_cst_abc_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::AbcTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::misc_example::AbcTwinNormal::A(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::misc_example::AbcTwinNormal::B(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::misc_example::AbcTwinNormal::C(ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::misc_example::AbcTwinNormal::JustInt(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
    for wire_cst_abc_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>
    for wire_cst_abc_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::C(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::JustInt( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>
    for wire_cst_abc_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::C(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::JustInt(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
    for wire_cst_abc_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>
    for wire_cst_abc_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::C(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::JustInt(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::inside_macro::AnotherMacroStructTwinNormal>
    for wire_cst_another_macro_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::inside_macro::AnotherMacroStructTwinNormal {
        crate::api::inside_macro::AnotherMacroStructTwinNormal {
            data: self.data.cst_decode(),
            non_final_data: self.non_final_data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::mirror::AnotherTwinNormal> for wire_cst_another_twin_normal {
    fn cst_decode(self) -> crate::api::mirror::AnotherTwinNormal {
        crate::api::mirror::AnotherTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync>
    for wire_cst_another_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
        crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse>
    for wire_cst_another_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
        crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse>
    for wire_cst_another_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
        crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>
    for wire_cst_another_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
        crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse>
    for wire_cst_another_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse {
        crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>
    for wire_cst_application_env
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
            vars: self.vars.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>
    for wire_cst_application_env_var
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage>
    for wire_cst_application_message
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.DisplayMessage);
                crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::DisplayMessage(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RenderPixel);
                crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::RenderPixel {
                    x: ans.x.cst_decode(),
                    y: ans.y.cst_decode(),
                }
            },
            2 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::Exit,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>
    for wire_cst_application_settings
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
            name: self.name.cst_decode(),
            version: self.version.cst_decode(),
            mode: self.mode.cst_decode(),
            env: self.env.cst_decode(),
            env_optional: self.env_optional.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::AttributeTwinNormal> for wire_cst_attribute_twin_normal {
    fn cst_decode(self) -> crate::api::optional::AttributeTwinNormal {
        crate::api::optional::AttributeTwinNormal {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
    for wire_cst_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
    for wire_cst_attribute_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse {
        crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>
    for wire_cst_attribute_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
        crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>
    for wire_cst_attribute_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>
    for wire_cst_attribute_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
        crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::BTwinNormal> for wire_cst_b_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::BTwinNormal {
        crate::api::misc_example::BTwinNormal {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>
    for wire_cst_b_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse>
    for wire_cst_b_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse> for wire_cst_b_twin_sse {
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
        crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for wire_cst_b_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse>
    for wire_cst_b_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
        crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::BigBuffersTwinNormal>
    for wire_cst_big_buffers_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::BigBuffersTwinNormal {
        crate::api::misc_example::BigBuffersTwinNormal {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync>
    for wire_cst_big_buffers_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse,
    > for wire_cst_big_buffers_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
    {
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse>
    for wire_cst_big_buffers_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
        crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync>
    for wire_cst_big_buffers_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse>
    for wire_cst_big_buffers_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
        crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::BlobTwinNormal> for wire_cst_blob_twin_normal {
    fn cst_decode(self) -> crate::api::array::BlobTwinNormal {
        crate::api::array::BlobTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>
    for wire_cst_blob_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>
    for wire_cst_blob_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse {
        crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse> for wire_cst_blob_twin_sse {
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::BlobTwinSse {
        crate::api::pseudo_manual::array_twin_sse::BlobTwinSse(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>
    for wire_cst_blob_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
        crate::api::pseudo_manual::array_twin_sync::BlobTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>
    for wire_cst_blob_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse {
        crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse(self.field0.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>>
    for *mut wire_cst_application_env
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<chrono::Duration> for *mut i64 {
    fn cst_decode(self) -> chrono::Duration {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::Duration>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::NaiveDateTime> for *mut i64 {
    fn cst_decode(self) -> chrono::NaiveDateTime {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::NaiveDateTime>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::DateTime<chrono::Utc>> for *mut i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::DateTime<chrono::Utc>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<flutter_rust_bridge::DartOpaque> for *mut *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<flutter_rust_bridge::DartOpaque>::cst_decode(*wrap).into()
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
    for *mut *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::ATwinNormal> for *mut wire_cst_a_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::ATwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::ATwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>
    for *mut wire_cst_a_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse>
    for *mut wire_cst_a_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse>
    for *mut wire_cst_a_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for *mut wire_cst_a_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse>
    for *mut wire_cst_a_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::AbcTwinNormal> for *mut wire_cst_abc_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::AbcTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::AbcTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
    for *mut wire_cst_abc_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>
    for *mut wire_cst_abc_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>
    for *mut wire_cst_abc_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
    for *mut wire_cst_abc_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>
    for *mut wire_cst_abc_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>
    for *mut wire_cst_application_env
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>
    for *mut wire_cst_application_settings
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::optional::AttributeTwinNormal> for *mut wire_cst_attribute_twin_normal {
    fn cst_decode(self) -> crate::api::optional::AttributeTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::AttributeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
    for *mut wire_cst_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
    for *mut wire_cst_attribute_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>
    for *mut wire_cst_attribute_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>
    for *mut wire_cst_attribute_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>
    for *mut wire_cst_attribute_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::BTwinNormal> for *mut wire_cst_b_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::BTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::BTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>
    for *mut wire_cst_b_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse>
    for *mut wire_cst_b_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse>
    for *mut wire_cst_b_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for *mut wire_cst_b_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse>
    for *mut wire_cst_b_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<bool> for *mut bool {
    fn cst_decode(self) -> bool {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::misc_example::CTwinNormal> for *mut wire_cst_c_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::CTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::CTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>
    for *mut wire_cst_c_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse>
    for *mut wire_cst_c_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse>
    for *mut wire_cst_c_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for *mut wire_cst_c_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse>
    for *mut wire_cst_c_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>
    for *mut wire_cst_concatenate_with_twin_normal
{
    fn cst_decode(self) -> crate::api::method::ConcatenateWithTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::method::ConcatenateWithTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
    for *mut wire_cst_concatenate_with_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse,
    > for *mut wire_cst_concatenate_with_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>
    for *mut wire_cst_concatenate_with_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
    for *mut wire_cst_concatenate_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>
    for *mut wire_cst_concatenate_with_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomNestedError2TwinNormal>
    for *mut wire_cst_custom_nested_error_2_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedError2TwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomNestedError2TwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>
    for *mut wire_cst_custom_nested_error_2_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse> for *mut wire_cst_custom_nested_error_2_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse>
    for *mut wire_cst_custom_nested_error_2_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>
    for *mut wire_cst_custom_nested_error_2_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse>
    for *mut wire_cst_custom_nested_error_2_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for *mut wire_cst_custom_nested_error_inner_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomNestedErrorInnerTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    > for *mut wire_cst_custom_nested_error_inner_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse> for *mut wire_cst_custom_nested_error_inner_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse>
    for *mut wire_cst_custom_nested_error_inner_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>
    for *mut wire_cst_custom_nested_error_inner_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse>
    for *mut wire_cst_custom_nested_error_inner_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for *mut wire_cst_custom_nested_error_outer_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomNestedErrorOuterTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    > for *mut wire_cst_custom_nested_error_outer_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse> for *mut wire_cst_custom_nested_error_outer_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse>
    for *mut wire_cst_custom_nested_error_outer_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
    for *mut wire_cst_custom_nested_error_outer_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse>
    for *mut wire_cst_custom_nested_error_outer_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorTwinNormal>
    for *mut wire_cst_custom_struct_error_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomStructErrorTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync>
    for *mut wire_cst_custom_struct_error_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse,
    > for *mut wire_cst_custom_struct_error_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse>
    for *mut wire_cst_custom_struct_error_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
    for *mut wire_cst_custom_struct_error_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse>
    for *mut wire_cst_custom_struct_error_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomStructTwinNormal>
    for *mut wire_cst_custom_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
    for *mut wire_cst_custom_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse,
    > for *mut wire_cst_custom_struct_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse>
    for *mut wire_cst_custom_struct_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
    for *mut wire_cst_custom_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse>
    for *mut wire_cst_custom_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::attribute::CustomizedTwinNormal>
    for *mut wire_cst_customized_twin_normal
{
    fn cst_decode(self) -> crate::api::attribute::CustomizedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::attribute::CustomizedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
    for *mut wire_cst_customized_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse>
    for *mut wire_cst_customized_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse>
    for *mut wire_cst_customized_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
    for *mut wire_cst_customized_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse>
    for *mut wire_cst_customized_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for *mut wire_cst_dart_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync>
    for *mut wire_cst_dart_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse> for *mut wire_cst_dart_opaque_nested_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse>
    for *mut wire_cst_dart_opaque_nested_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
    for *mut wire_cst_dart_opaque_nested_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse>
    for *mut wire_cst_dart_opaque_nested_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::optional::ElementTwinNormal> for *mut wire_cst_element_twin_normal {
    fn cst_decode(self) -> crate::api::optional::ElementTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::ElementTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
    for *mut wire_cst_element_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>
    for *mut wire_cst_element_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>
    for *mut wire_cst_element_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>
    for *mut wire_cst_element_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>
    for *mut wire_cst_element_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_type::EmptyTwinNormal> for *mut wire_cst_empty_twin_normal {
    fn cst_decode(self) -> crate::api::misc_type::EmptyTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_type::EmptyTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
    for *mut wire_cst_empty_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse>
    for *mut wire_cst_empty_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse>
    for *mut wire_cst_empty_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for *mut wire_cst_empty_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse>
    for *mut wire_cst_empty_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for *mut wire_cst_enum_dart_opaque_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync>
    for *mut wire_cst_enum_dart_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse,
    > for *mut wire_cst_enum_dart_opaque_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse>
    for *mut wire_cst_enum_dart_opaque_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
    for *mut wire_cst_enum_dart_opaque_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse>
    for *mut wire_cst_enum_dart_opaque_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::rust_opaque::EnumOpaqueTwinNormal>
    for *mut wire_cst_enum_opaque_twin_normal
{
    fn cst_decode(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::rust_opaque::EnumOpaqueTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
    for *mut wire_cst_enum_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
    > for *mut wire_cst_enum_opaque_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>
    for *mut wire_cst_enum_opaque_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
    for *mut wire_cst_enum_opaque_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>
    for *mut wire_cst_enum_opaque_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for *mut wire_cst_enum_with_item_mixed_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::EnumWithItemMixedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for *mut wire_cst_enum_with_item_mixed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse> for *mut wire_cst_enum_with_item_mixed_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse>
    for *mut wire_cst_enum_with_item_mixed_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
    for *mut wire_cst_enum_with_item_mixed_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse>
    for *mut wire_cst_enum_with_item_mixed_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for *mut wire_cst_enum_with_item_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::EnumWithItemStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for *mut wire_cst_enum_with_item_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse> for *mut wire_cst_enum_with_item_struct_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse>
    for *mut wire_cst_enum_with_item_struct_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
    for *mut wire_cst_enum_with_item_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse>
    for *mut wire_cst_enum_with_item_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for *mut wire_cst_enum_with_item_tuple_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::EnumWithItemTupleTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for *mut wire_cst_enum_with_item_tuple_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse> for *mut wire_cst_enum_with_item_tuple_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse>
    for *mut wire_cst_enum_with_item_tuple_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
    for *mut wire_cst_enum_with_item_tuple_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse>
    for *mut wire_cst_enum_with_item_tuple_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::event_listener::EventTwinNormal> for *mut wire_cst_event_twin_normal {
    fn cst_decode(self) -> crate::api::event_listener::EventTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::event_listener::EventTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
    for *mut wire_cst_event_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse>
    for *mut wire_cst_event_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse>
    for *mut wire_cst_event_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::optional::ExoticOptionalsTwinNormal>
    for *mut wire_cst_exotic_optionals_twin_normal
{
    fn cst_decode(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::ExoticOptionalsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    for *mut wire_cst_exotic_optionals_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    > for *mut wire_cst_exotic_optionals_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>
    for *mut wire_cst_exotic_optionals_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>
    for *mut wire_cst_exotic_optionals_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>
    for *mut wire_cst_exotic_optionals_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<f32> for *mut f32 {
    fn cst_decode(self) -> f32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<f64> for *mut f64 {
    fn cst_decode(self) -> f64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::chrono_type::FeatureChronoTwinNormal>
    for *mut wire_cst_feature_chrono_twin_normal
{
    fn cst_decode(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::chrono_type::FeatureChronoTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync>
    for *mut wire_cst_feature_chrono_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
    for *mut wire_cst_feature_chrono_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uuid_type::FeatureUuidTwinNormal>
    for *mut wire_cst_feature_uuid_twin_normal
{
    fn cst_decode(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uuid_type::FeatureUuidTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
    for *mut wire_cst_feature_uuid_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
    for *mut wire_cst_feature_uuid_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::array::FeedIdTwinNormal> for *mut wire_cst_feed_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::FeedIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::FeedIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
    for *mut wire_cst_feed_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>
    for *mut wire_cst_feed_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>
    for *mut wire_cst_feed_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for *mut wire_cst_feed_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>
    for *mut wire_cst_feed_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<i16> for *mut i16 {
    fn cst_decode(self) -> i16 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i32> for *mut i32 {
    fn cst_decode(self) -> i32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i64> for *mut i64 {
    fn cst_decode(self) -> i64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i8> for *mut i8 {
    fn cst_decode(self) -> i8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::enumeration::KitchenSinkTwinNormal>
    for *mut wire_cst_kitchen_sink_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::KitchenSinkTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
    for *mut wire_cst_kitchen_sink_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    > for *mut wire_cst_kitchen_sink_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>
    for *mut wire_cst_kitchen_sink_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
    for *mut wire_cst_kitchen_sink_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>
    for *mut wire_cst_kitchen_sink_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>
    for *mut wire_cst_list_of_nested_raw_string_mirrored
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::inside_macro::MacroStruct> for *mut wire_cst_macro_struct {
    fn cst_decode(self) -> crate::api::inside_macro::MacroStruct {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::inside_macro::MacroStruct>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::MeasureTwinNormal> for *mut wire_cst_measure_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::MeasureTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::MeasureTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
    for *mut wire_cst_measure_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>
    for *mut wire_cst_measure_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse>
    for *mut wire_cst_measure_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
    for *mut wire_cst_measure_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>
    for *mut wire_cst_measure_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::array::MessageIdTwinNormal> for *mut wire_cst_message_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::MessageIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::MessageIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
    for *mut wire_cst_message_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse>
    for *mut wire_cst_message_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse>
    for *mut wire_cst_message_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for *mut wire_cst_message_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse>
    for *mut wire_cst_message_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::MyNestedStructTwinNormal>
    for *mut wire_cst_my_nested_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::MyNestedStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync>
    for *mut wire_cst_my_nested_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse,
    > for *mut wire_cst_my_nested_struct_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse>
    for *mut wire_cst_my_nested_struct_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
    for *mut wire_cst_my_nested_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse>
    for *mut wire_cst_my_nested_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::auxiliary::sample_types::MySize> for *mut wire_cst_my_size {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MySize {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::auxiliary::sample_types::MySize>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyStruct> for *mut wire_cst_my_struct {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyStruct {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::auxiliary::sample_types::MyStruct>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::MyTreeNodeTwinNormal>
    for *mut wire_cst_my_tree_node_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::MyTreeNodeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
    for *mut wire_cst_my_tree_node_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
    > for *mut wire_cst_my_tree_node_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>
    for *mut wire_cst_my_tree_node_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
    for *mut wire_cst_my_tree_node_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>
    for *mut wire_cst_my_tree_node_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>
    for *mut wire_cst_nested_raw_string_mirrored
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for *mut wire_cst_new_type_int_twin_normal
{
    fn cst_decode(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::newtype_pattern::NewTypeIntTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
    for *mut wire_cst_new_type_int_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse,
    > for *mut wire_cst_new_type_int_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>
    for *mut wire_cst_new_type_int_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
    for *mut wire_cst_new_type_int_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>
    for *mut wire_cst_new_type_int_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::NoteTwinNormal> for *mut wire_cst_note_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::NoteTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::NoteTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
    for *mut wire_cst_note_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse>
    for *mut wire_cst_note_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse>
    for *mut wire_cst_note_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
    for *mut wire_cst_note_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse>
    for *mut wire_cst_note_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers> for *mut wire_cst_numbers {
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for *mut wire_cst_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::rust_opaque::OpaqueNestedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
    for *mut wire_cst_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse,
    > for *mut wire_cst_opaque_nested_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse>
    for *mut wire_cst_opaque_nested_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
    for *mut wire_cst_opaque_nested_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse>
    for *mut wire_cst_opaque_nested_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::optional::OptVecsTwinNormal> for *mut wire_cst_opt_vecs_twin_normal {
    fn cst_decode(self) -> crate::api::optional::OptVecsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::OptVecsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
    for *mut wire_cst_opt_vecs_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse>
    for *mut wire_cst_opt_vecs_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse>
    for *mut wire_cst_opt_vecs_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
    for *mut wire_cst_opt_vecs_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse>
    for *mut wire_cst_opt_vecs_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>
    for *mut wire_cst_raw_string_mirrored
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<(String, i32)> for *mut wire_cst_record_string_i_32 {
    fn cst_decode(self) -> (String, i32) {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<(String, i32)>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>
    for *mut wire_cst_sequences
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::exception::SomeStructTwinNormal>
    for *mut wire_cst_some_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::SomeStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::SomeStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
    for *mut wire_cst_some_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse>
    for *mut wire_cst_some_struct_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse>
    for *mut wire_cst_some_struct_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
    for *mut wire_cst_some_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse>
    for *mut wire_cst_some_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::comment::StructWithCommentsTwinNormal>
    for *mut wire_cst_struct_with_comments_twin_normal
{
    fn cst_decode(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::comment::StructWithCommentsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync>
    for *mut wire_cst_struct_with_comments_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse,
    > for *mut wire_cst_struct_with_comments_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse>
    for *mut wire_cst_struct_with_comments_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
    for *mut wire_cst_struct_with_comments_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse>
    for *mut wire_cst_struct_with_comments_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::StructWithEnumTwinNormal>
    for *mut wire_cst_struct_with_enum_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::StructWithEnumTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync>
    for *mut wire_cst_struct_with_enum_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse,
    > for *mut wire_cst_struct_with_enum_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse>
    for *mut wire_cst_struct_with_enum_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
    for *mut wire_cst_struct_with_enum_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse>
    for *mut wire_cst_struct_with_enum_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::structure::StructWithOneFieldTwinNormal>
    for *mut wire_cst_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::StructWithOneFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync>
    for *mut wire_cst_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse> for *mut wire_cst_struct_with_one_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse>
    for *mut wire_cst_struct_with_one_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
    for *mut wire_cst_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse>
    for *mut wire_cst_struct_with_one_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::structure::StructWithTwoFieldTwinNormal>
    for *mut wire_cst_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::StructWithTwoFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync>
    for *mut wire_cst_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse> for *mut wire_cst_struct_with_two_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse>
    for *mut wire_cst_struct_with_two_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
    for *mut wire_cst_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse>
    for *mut wire_cst_struct_with_two_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::structure::StructWithZeroFieldTwinNormal>
    for *mut wire_cst_struct_with_zero_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::StructWithZeroFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for *mut wire_cst_struct_with_zero_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse> for *mut wire_cst_struct_with_zero_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse>
    for *mut wire_cst_struct_with_zero_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
    for *mut wire_cst_struct_with_zero_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse>
    for *mut wire_cst_struct_with_zero_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::method::SumWithTwinNormal> for *mut wire_cst_sum_with_twin_normal {
    fn cst_decode(self) -> crate::api::method::SumWithTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::method::SumWithTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
    for *mut wire_cst_sum_with_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>
    for *mut wire_cst_sum_with_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>
    for *mut wire_cst_sum_with_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for *mut wire_cst_sum_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>
    for *mut wire_cst_sum_with_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::array::TestIdTwinNormal> for *mut wire_cst_test_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::TestIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::TestIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
    for *mut wire_cst_test_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>
    for *mut wire_cst_test_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>
    for *mut wire_cst_test_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for *mut wire_cst_test_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>
    for *mut wire_cst_test_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for *mut wire_cst_tuple_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::TupleStructWithOneFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    > for *mut wire_cst_tuple_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse> for *mut wire_cst_tuple_struct_with_one_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse>
    for *mut wire_cst_tuple_struct_with_one_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
    for *mut wire_cst_tuple_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse,
    > for *mut wire_cst_tuple_struct_with_one_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for *mut wire_cst_tuple_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::TupleStructWithTwoFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    > for *mut wire_cst_tuple_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse> for *mut wire_cst_tuple_struct_with_two_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse>
    for *mut wire_cst_tuple_struct_with_two_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
    for *mut wire_cst_tuple_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse,
    > for *mut wire_cst_tuple_struct_with_two_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<u16> for *mut u16 {
    fn cst_decode(self) -> u16 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u32> for *mut u32 {
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u64> for *mut u64 {
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u8> for *mut u8 {
    fn cst_decode(self) -> u8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::attribute::UserIdTwinNormal> for *mut wire_cst_user_id_twin_normal {
    fn cst_decode(self) -> crate::api::attribute::UserIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::attribute::UserIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
    for *mut wire_cst_user_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse>
    for *mut wire_cst_user_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse>
    for *mut wire_cst_user_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
    for *mut wire_cst_user_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse>
    for *mut wire_cst_user_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::WeekdaysTwinNormal> for *mut i32 {
    fn cst_decode(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::WeekdaysTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> for *mut i32 {
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> for *mut i32 {
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::array::BlobTwinNormal>> for *mut wire_cst_blob_twin_normal {
    fn cst_decode(self) -> Box<crate::api::array::BlobTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::BlobTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>>
    for *mut wire_cst_blob_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>>
    for *mut wire_cst_blob_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>>
    for *mut wire_cst_blob_twin_sse
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>>
    for *mut wire_cst_blob_twin_sync
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>>
    for *mut wire_cst_blob_twin_sync_sse
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<bool>> for *mut bool {
    fn cst_decode(self) -> Box<bool> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<crate::api::enumeration::DistanceTwinNormal>>
    for *mut wire_cst_distance_twin_normal
{
    fn cst_decode(self) -> Box<crate::api::enumeration::DistanceTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::DistanceTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>>
    for *mut wire_cst_distance_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>,
    > for *mut wire_cst_distance_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>>
    for *mut wire_cst_distance_twin_sse
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>>
    for *mut wire_cst_distance_twin_sync
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>>
    for *mut wire_cst_distance_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::optional::ExoticOptionalsTwinNormal>>
    for *mut wire_cst_exotic_optionals_twin_normal
{
    fn cst_decode(self) -> Box<crate::api::optional::ExoticOptionalsTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::ExoticOptionalsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    > for *mut wire_cst_exotic_optionals_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>> for *mut wire_cst_exotic_optionals_twin_rust_async_sse {
            fn cst_decode(self) -> Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse> {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>>
    for *mut wire_cst_exotic_optionals_twin_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
    for *mut wire_cst_exotic_optionals_twin_sync
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>>
    for *mut wire_cst_exotic_optionals_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<f64>> for *mut f64 {
    fn cst_decode(self) -> Box<f64> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<crate::api::array::FeedIdTwinNormal>> for *mut wire_cst_feed_id_twin_normal {
    fn cst_decode(self) -> Box<crate::api::array::FeedIdTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::FeedIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>>
    for *mut wire_cst_feed_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>>
    for *mut wire_cst_feed_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>>
    for *mut wire_cst_feed_id_twin_sse
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>>
    for *mut wire_cst_feed_id_twin_sync
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>>
    for *mut wire_cst_feed_id_twin_sync_sse
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<i32>> for *mut i32 {
    fn cst_decode(self) -> Box<i32> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<i64>> for *mut i64 {
    fn cst_decode(self) -> Box<i64> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<i8>> for *mut i8 {
    fn cst_decode(self) -> Box<i8> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<crate::api::enumeration::KitchenSinkTwinNormal>>
    for *mut wire_cst_kitchen_sink_twin_normal
{
    fn cst_decode(self) -> Box<crate::api::enumeration::KitchenSinkTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::KitchenSinkTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>>
    for *mut wire_cst_kitchen_sink_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        Box<
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        >,
    > for *mut wire_cst_kitchen_sink_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>>
    for *mut wire_cst_kitchen_sink_twin_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>>
    for *mut wire_cst_kitchen_sink_twin_sync
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>>
    for *mut wire_cst_kitchen_sink_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::auxiliary::sample_types::MySize>> for *mut wire_cst_my_size {
    fn cst_decode(self) -> Box<crate::auxiliary::sample_types::MySize> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::auxiliary::sample_types::MySize>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::enumeration::SpeedTwinNormal>> for *mut wire_cst_speed_twin_normal {
    fn cst_decode(self) -> Box<crate::api::enumeration::SpeedTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::SpeedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>>
    for *mut wire_cst_speed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>,
    > for *mut wire_cst_speed_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>>
    for *mut wire_cst_speed_twin_sse
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>>
    for *mut wire_cst_speed_twin_sync
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>>
    for *mut wire_cst_speed_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<u8>> for *mut u8 {
    fn cst_decode(self) -> Box<u8> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<[u8; 1600]>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Box<[u8; 1600]> {
        CstDecode::<[u8; 1600]>::cst_decode(self).into()
    }
}
impl CstDecode<Box<[u8; 8]>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Box<[u8; 8]> {
        CstDecode::<[u8; 8]>::cst_decode(self).into()
    }
}
impl CstDecode<Box<crate::api::misc_example::WeekdaysTwinNormal>> for *mut i32 {
    fn cst_decode(self) -> Box<crate::api::misc_example::WeekdaysTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::WeekdaysTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>,
    > for *mut i32
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>
    for *mut i32
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::CTwinNormal> for wire_cst_c_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::CTwinNormal {
        crate::api::misc_example::CTwinNormal {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>
    for wire_cst_c_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse>
    for wire_cst_c_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse> for wire_cst_c_twin_sse {
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
        crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for wire_cst_c_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse>
    for wire_cst_c_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
        crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>
    for wire_cst_concatenate_with_twin_normal
{
    fn cst_decode(self) -> crate::api::method::ConcatenateWithTwinNormal {
        crate::api::method::ConcatenateWithTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
    for wire_cst_concatenate_with_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse,
    > for wire_cst_concatenate_with_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
    {
        crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>
    for wire_cst_concatenate_with_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
        crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
    for wire_cst_concatenate_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>
    for wire_cst_concatenate_with_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
        crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::mirror::ContainsMirroredSubStructTwinNormal>
    for wire_cst_contains_mirrored_sub_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::mirror::ContainsMirroredSubStructTwinNormal {
        crate::api::mirror::ContainsMirroredSubStructTwinNormal {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync,
    > for wire_cst_contains_mirrored_sub_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
    {
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse> for wire_cst_contains_mirrored_sub_struct_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {
                crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse{test:  self.test.cst_decode(),test2:  self.test2.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse>
    for wire_cst_contains_mirrored_sub_struct_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
        crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync>
    for wire_cst_contains_mirrored_sub_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
        crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse>
    for wire_cst_contains_mirrored_sub_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomEnumErrorTwinNormal>
    for wire_cst_custom_enum_error_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomEnumErrorTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::exception::CustomEnumErrorTwinNormal::One {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::exception::CustomEnumErrorTwinNormal::Two {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync>
    for wire_cst_custom_enum_error_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse,
    > for wire_cst_custom_enum_error_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::One{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::Two{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse>
    for wire_cst_custom_enum_error_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::One {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::Two {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync>
    for wire_cst_custom_enum_error_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse>
    for wire_cst_custom_enum_error_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::One{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::Two{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomErrorTwinNormal> for wire_cst_custom_error_twin_normal {
    fn cst_decode(self) -> crate::api::exception::CustomErrorTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error0);
                crate::api::exception::CustomErrorTwinNormal::Error0 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error1);
                crate::api::exception::CustomErrorTwinNormal::Error1 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync>
    for wire_cst_custom_error_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error0);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e:  ans.e.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error1);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e:  ans.e.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse>
    for wire_cst_custom_error_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error0);
                crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error0{e:  ans.e.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error1);
                crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error1{e:  ans.e.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse>
    for wire_cst_custom_error_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error0);
                crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error0 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error1);
                crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error1 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync>
    for wire_cst_custom_error_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error0);
                crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error1);
                crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse>
    for wire_cst_custom_error_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error0);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error0 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Error1);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error1 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedError1TwinNormal>
    for wire_cst_custom_nested_error_1_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedError1TwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested1);
                crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.ErrorNested);
                crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync>
    for wire_cst_custom_nested_error_1_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested1);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.ErrorNested);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse> for wire_cst_custom_nested_error_1_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse {
                match self.tag {
                    0 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested1);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::CustomNested1( ans.field0.cst_decode())
                    }
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.ErrorNested);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::ErrorNested( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse>
    for wire_cst_custom_nested_error_1_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested1);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::CustomNested1( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.ErrorNested);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::ErrorNested( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync>
    for wire_cst_custom_nested_error_1_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested1);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.ErrorNested);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse>
    for wire_cst_custom_nested_error_1_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested1);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::CustomNested1( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.ErrorNested);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::ErrorNested( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedError2TwinNormal>
    for wire_cst_custom_nested_error_2_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedError2TwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2);
                crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans =
                    flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2Number);
                crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>
    for wire_cst_custom_nested_error_2_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans =
                    flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2Number);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse> for wire_cst_custom_nested_error_2_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse {
                match self.tag {
                    0 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2( ans.field0.cst_decode())
                    }
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2Number);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2Number( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse>
    for wire_cst_custom_nested_error_2_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans =
                    flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2Number);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2Number( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>
    for wire_cst_custom_nested_error_2_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans =
                    flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2Number);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse>
    for wire_cst_custom_nested_error_2_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans =
                    flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.CustomNested2Number);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2Number( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for wire_cst_custom_nested_error_inner_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    > for wire_cst_custom_nested_error_inner_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse> for wire_cst_custom_nested_error_inner_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
                match self.tag {
                    0 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Three( ans.field0.cst_decode())
                    }
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Four( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse>
    for wire_cst_custom_nested_error_inner_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Three(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Four(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>
    for wire_cst_custom_nested_error_inner_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse>
    for wire_cst_custom_nested_error_inner_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Three( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Four( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for wire_cst_custom_nested_error_outer_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::exception::CustomNestedErrorOuterTwinNormal::One(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    > for wire_cst_custom_nested_error_outer_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse> for wire_cst_custom_nested_error_outer_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
                match self.tag {
                    0 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::One( ans.field0.cst_decode())
                    }
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::Two( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse>
    for wire_cst_custom_nested_error_outer_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::One(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::Two(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
    for wire_cst_custom_nested_error_outer_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse>
    for wire_cst_custom_nested_error_outer_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::One( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::Two( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorAnotherTwinNormal>
    for wire_cst_custom_struct_error_another_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorAnotherTwinNormal {
        crate::api::exception::CustomStructErrorAnotherTwinNormal {
            message: self.message.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync,
    > for wire_cst_custom_struct_error_another_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
    {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync{message:  self.message.cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse> for wire_cst_custom_struct_error_another_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {
                crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse{message:  self.message.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse>
    for wire_cst_custom_struct_error_another_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
        crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync>
    for wire_cst_custom_struct_error_another_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
            message: self.message.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse,
    > for wire_cst_custom_struct_error_another_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
    {
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorTwinNormal>
    for wire_cst_custom_struct_error_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        crate::api::exception::CustomStructErrorTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync>
    for wire_cst_custom_struct_error_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse,
    > for wire_cst_custom_struct_error_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
    {
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse{a:  self.a.cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse>
    for wire_cst_custom_struct_error_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
        crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
    for wire_cst_custom_struct_error_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse>
    for wire_cst_custom_struct_error_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse {
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructTwinNormal>
    for wire_cst_custom_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructTwinNormal {
        crate::api::exception::CustomStructTwinNormal {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
    for wire_cst_custom_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
            message: self.message.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse,
    > for wire_cst_custom_struct_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
    {
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse>
    for wire_cst_custom_struct_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
        crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
    for wire_cst_custom_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse>
    for wire_cst_custom_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::attribute::CustomizedTwinNormal> for wire_cst_customized_twin_normal {
    fn cst_decode(self) -> crate::api::attribute::CustomizedTwinNormal {
        crate::api::attribute::CustomizedTwinNormal {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
    for wire_cst_customized_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse>
    for wire_cst_customized_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse {
        crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse>
    for wire_cst_customized_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
        crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
    for wire_cst_customized_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse>
    for wire_cst_customized_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
        crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for wire_cst_dart_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync>
    for wire_cst_dart_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse> for wire_cst_dart_opaque_nested_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse {
                crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse{first:  self.first.cst_decode(),second:  self.second.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse>
    for wire_cst_dart_opaque_nested_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
        crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
    for wire_cst_dart_opaque_nested_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse>
    for wire_cst_dart_opaque_nested_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse {
        crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::dart_fn::DemoStructForRustCallDartTwinNormal>
    for wire_cst_demo_struct_for_rust_call_dart_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
        crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
            name: self.name.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::DistanceTwinNormal> for wire_cst_distance_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::DistanceTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::DistanceTwinNormal::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                crate::api::enumeration::DistanceTwinNormal::Map(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
    for wire_cst_distance_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>
    for wire_cst_distance_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Unknown,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Map( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>
    for wire_cst_distance_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Map(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>
    for wire_cst_distance_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>
    for wire_cst_distance_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Map(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::optional::ElementTwinNormal> for wire_cst_element_twin_normal {
    fn cst_decode(self) -> crate::api::optional::ElementTwinNormal {
        crate::api::optional::ElementTwinNormal {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
    for wire_cst_element_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>
    for wire_cst_element_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse {
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>
    for wire_cst_element_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
        crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>
    for wire_cst_element_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>
    for wire_cst_element_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
        crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_type::EmptyTwinNormal> for wire_cst_empty_twin_normal {
    fn cst_decode(self) -> crate::api::misc_type::EmptyTwinNormal {
        crate::api::misc_type::EmptyTwinNormal {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
    for wire_cst_empty_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse>
    for wire_cst_empty_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {
        crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse>
    for wire_cst_empty_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {
        crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for wire_cst_empty_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse>
    for wire_cst_empty_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {
        crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {}
    }
}
impl CstDecode<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for wire_cst_enum_dart_opaque_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync>
    for wire_cst_enum_dart_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse,
    > for wire_cst_enum_dart_opaque_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Primitive( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Opaque( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse>
    for wire_cst_enum_dart_opaque_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Opaque(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
    for wire_cst_enum_dart_opaque_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse>
    for wire_cst_enum_dart_opaque_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Primitive( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Opaque( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::rust_opaque::EnumOpaqueTwinNormal> for wire_cst_enum_opaque_twin_normal {
    fn cst_decode(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(ans.field0.cst_decode())
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::rust_opaque::EnumOpaqueTwinNormal; 5]>
    for *mut wire_cst_list_enum_opaque_twin_normal
{
    fn cst_decode(self) -> [crate::api::rust_opaque::EnumOpaqueTwinNormal; 5] {
        let vec: Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
    for wire_cst_enum_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive( ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj( ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex( ans.field0.cst_decode())
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5]>
    for *mut wire_cst_list_enum_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5] {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
    > for wire_cst_enum_opaque_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Struct( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Primitive( ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::TraitObj( ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Mutex( ans.field0.cst_decode())
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::RwLock( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse; 5],
    > for *mut wire_cst_list_enum_opaque_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse; 5]
    {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>
    for wire_cst_enum_opaque_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Struct(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::TraitObj(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Mutex(
                    ans.field0.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::RwLock(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse; 5]>
    for *mut wire_cst_list_enum_opaque_twin_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
    for wire_cst_enum_opaque_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(
                    ans.field0.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5]>
    for *mut wire_cst_list_enum_opaque_twin_sync
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>
    for wire_cst_enum_opaque_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Struct(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Primitive( ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::TraitObj( ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Mutex(
                    ans.field0.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::RwLock(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse; 5]>
    for *mut wire_cst_list_enum_opaque_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for wire_cst_enum_with_item_mixed_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::EnumWithItemMixedTwinNormal::A,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::enumeration::EnumWithItemMixedTwinNormal::B(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::enumeration::EnumWithItemMixedTwinNormal::C {
                    c_field: ans.c_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for wire_cst_enum_with_item_mixed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B( ans.field0.cst_decode())
                    }
2 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field:  ans.c_field.cst_decode()}
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse> for wire_cst_enum_with_item_mixed_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
                match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::A,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::B( ans.field0.cst_decode())
                    }
2 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::C{c_field:  ans.c_field.cst_decode()}
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse>
    for wire_cst_enum_with_item_mixed_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::A,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::C {
                    c_field: ans.c_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
    for wire_cst_enum_with_item_mixed_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                    c_field: ans.c_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse>
    for wire_cst_enum_with_item_mixed_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::A,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::B( ans.field0.cst_decode())
                    }
2 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::C{c_field:  ans.c_field.cst_decode()}
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for wire_cst_enum_with_item_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::enumeration::EnumWithItemStructTwinNormal::A {
                    a_field: ans.a_field.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::enumeration::EnumWithItemStructTwinNormal::B {
                    b_field: ans.b_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for wire_cst_enum_with_item_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field:  ans.a_field.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field:  ans.b_field.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse> for wire_cst_enum_with_item_struct_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
                match self.tag {
                    0 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::A{a_field:  ans.a_field.cst_decode()}
                    }
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::B{b_field:  ans.b_field.cst_decode()}
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse>
    for wire_cst_enum_with_item_struct_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::A {
                    a_field: ans.a_field.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::B {
                    b_field: ans.b_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
    for wire_cst_enum_with_item_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                    a_field: ans.a_field.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                    b_field: ans.b_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse>
    for wire_cst_enum_with_item_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::A{a_field:  ans.a_field.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::B{b_field:  ans.b_field.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for wire_cst_enum_with_item_tuple_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::enumeration::EnumWithItemTupleTwinNormal::A(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::enumeration::EnumWithItemTupleTwinNormal::B(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for wire_cst_enum_with_item_tuple_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse> for wire_cst_enum_with_item_tuple_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
                match self.tag {
                    0 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::A( ans.field0.cst_decode())
                    }
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::B( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse>
    for wire_cst_enum_with_item_tuple_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::B(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
    for wire_cst_enum_with_item_tuple_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse>
    for wire_cst_enum_with_item_tuple_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::A( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::B( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::event_listener::EventTwinNormal> for wire_cst_event_twin_normal {
    fn cst_decode(self) -> crate::api::event_listener::EventTwinNormal {
        crate::api::event_listener::EventTwinNormal {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
    for wire_cst_event_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse>
    for wire_cst_event_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse {
        crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse>
    for wire_cst_event_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
        crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::ExoticOptionalsTwinNormal>
    for wire_cst_exotic_optionals_twin_normal
{
    fn cst_decode(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        crate::api::optional::ExoticOptionalsTwinNormal {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    for wire_cst_exotic_optionals_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    > for wire_cst_exotic_optionals_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
    {
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>
    for wire_cst_exotic_optionals_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
        crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>
    for wire_cst_exotic_optionals_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>
    for wire_cst_exotic_optionals_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
        crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<[f64; 16]> for *mut wire_cst_list_prim_f_64 {
    fn cst_decode(self) -> [f64; 16] {
        let vec: Vec<f64> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::chrono_type::FeatureChronoTwinNormal>
    for wire_cst_feature_chrono_twin_normal
{
    fn cst_decode(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        crate::api::chrono_type::FeatureChronoTwinNormal {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync>
    for wire_cst_feature_chrono_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
    for wire_cst_feature_chrono_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::uuid_type::FeatureUuidTwinNormal> for wire_cst_feature_uuid_twin_normal {
    fn cst_decode(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        crate::api::uuid_type::FeatureUuidTwinNormal {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
    for wire_cst_feature_uuid_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
    for wire_cst_feature_uuid_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::FeedIdTwinNormal> for wire_cst_feed_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::FeedIdTwinNormal {
        crate::api::array::FeedIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
    for wire_cst_feed_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>
    for wire_cst_feed_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse {
        crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>
    for wire_cst_feed_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse {
        crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for wire_cst_feed_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>
    for wire_cst_feed_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse {
        crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse(self.field0.cst_decode())
    }
}
impl CstDecode<[i32; 2]> for *mut wire_cst_list_prim_i_32 {
    fn cst_decode(self) -> [i32; 2] {
        let vec: Vec<i32> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::enumeration::KitchenSinkTwinNormal>
    for wire_cst_kitchen_sink_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::KitchenSinkTwinNormal::Empty,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                    int32: ans.int32.cst_decode(),
                    float64: ans.float64.cst_decode(),
                    boolean: ans.boolean.cst_decode(),
                }
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                crate::api::enumeration::KitchenSinkTwinNormal::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                crate::api::enumeration::KitchenSinkTwinNormal::Optional(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                crate::api::enumeration::KitchenSinkTwinNormal::Buffer(ans.field0.cst_decode())
            },
            5 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                crate::api::enumeration::KitchenSinkTwinNormal::Enums(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
    for wire_cst_kitchen_sink_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32:  ans.int32.cst_decode(),float64:  ans.float64.cst_decode(),boolean:  ans.boolean.cst_decode()}
                    }
2 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
3 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
4 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer( ans.field0.cst_decode())
                    }
5 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    > for wire_cst_kitchen_sink_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
    {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Empty,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Primitives{int32:  ans.int32.cst_decode(),float64:  ans.float64.cst_decode(),boolean:  ans.boolean.cst_decode()}
                    }
2 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Nested( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
3 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Optional( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
4 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Buffer( ans.field0.cst_decode())
                    }
5 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Enums( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>
    for wire_cst_kitchen_sink_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Empty,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Primitives {
                    int32: ans.int32.cst_decode(),
                    float64: ans.float64.cst_decode(),
                    boolean: ans.boolean.cst_decode(),
                }
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Optional(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Buffer(
                    ans.field0.cst_decode(),
                )
            },
            5 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Enums(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
    for wire_cst_kitchen_sink_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                    int32: ans.int32.cst_decode(),
                    float64: ans.float64.cst_decode(),
                    boolean: ans.boolean.cst_decode(),
                }
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                    ans.field0.cst_decode(),
                )
            },
            5 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>
    for wire_cst_kitchen_sink_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse {
        match self.tag {
            0 => {
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Empty
            }
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Primitives{int32:  ans.int32.cst_decode(),float64:  ans.float64.cst_decode(),boolean:  ans.boolean.cst_decode()}
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Optional( ans.field0.cst_decode(), ans.field1.cst_decode())
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Buffer(
                    ans.field0.cst_decode(),
                )
            },
            5 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Enums(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<Vec<chrono::Duration>> for *mut wire_cst_list_Chrono_Duration {
    fn cst_decode(self) -> Vec<chrono::Duration> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<chrono::DateTime<chrono::Local>>> for *mut wire_cst_list_Chrono_Local {
    fn cst_decode(self) -> Vec<chrono::DateTime<chrono::Local>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<chrono::NaiveDateTime>> for *mut wire_cst_list_Chrono_Naive {
    fn cst_decode(self) -> Vec<chrono::NaiveDateTime> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>> for *mut wire_cst_list_DartOpaque {
    fn cst_decode(self) -> Vec<flutter_rust_bridge::DartOpaque> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
    for *mut wire_cst_list_RustOpaque_hide_data
{
    fn cst_decode(
        self,
    ) -> Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>>
    for *mut wire_cst_list_application_env_var
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>
    for *mut wire_cst_list_application_settings
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::optional::AttributeTwinNormal>>
    for *mut wire_cst_list_attribute_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::optional::AttributeTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    for *mut wire_cst_list_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    > for *mut wire_cst_list_attribute_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>
    for *mut wire_cst_list_attribute_twin_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>
    for *mut wire_cst_list_attribute_twin_sync
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>
    for *mut wire_cst_list_attribute_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<bool>> for *mut wire_cst_list_bool {
    fn cst_decode(self) -> Vec<bool> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::optional::ElementTwinNormal>>
    for *mut wire_cst_list_element_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::optional::ElementTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>
    for *mut wire_cst_list_element_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>>
    for *mut wire_cst_list_element_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>>
    for *mut wire_cst_list_element_twin_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>>
    for *mut wire_cst_list_element_twin_sync
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>>
    for *mut wire_cst_list_element_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal>>
    for *mut wire_cst_list_enum_opaque_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>>
    for *mut wire_cst_list_enum_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>,
    > for *mut wire_cst_list_enum_opaque_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>>
    for *mut wire_cst_list_enum_opaque_twin_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>>
    for *mut wire_cst_list_enum_opaque_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>>
    for *mut wire_cst_list_enum_opaque_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::auxiliary::sample_types::MyEnum>> for *mut wire_cst_list_my_enum {
    fn cst_decode(self) -> Vec<crate::auxiliary::sample_types::MyEnum> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>> for *mut wire_cst_list_my_size {
    fn cst_decode(self) -> Vec<crate::auxiliary::sample_types::MySize> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>
    for *mut wire_cst_list_my_tree_node_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>>
    for *mut wire_cst_list_my_tree_node_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
        >,
    > for *mut wire_cst_list_my_tree_node_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>>
    for *mut wire_cst_list_my_tree_node_twin_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>>
    for *mut wire_cst_list_my_tree_node_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>>
    for *mut wire_cst_list_my_tree_node_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>>
    for *mut wire_cst_list_nested_raw_string_mirrored
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>
    for wire_cst_list_of_nested_raw_string_mirrored
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
            raw: self.raw.cst_decode(),
        }
    }
}
impl CstDecode<Vec<Option<String>>> for *mut wire_cst_list_opt_String {
    fn cst_decode(self) -> Vec<Option<String>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::optional::AttributeTwinNormal>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal
{
    fn cst_decode(self) -> Vec<Option<crate::api::optional::AttributeTwinNormal>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    > for *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<
            Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >,
        >,
    > for *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<
        Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    > {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_sse
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<i32>>> for *mut wire_cst_list_opt_box_autoadd_i_32 {
    fn cst_decode(self) -> Vec<Option<i32>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>
    for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal
{
    fn cst_decode(self) -> Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>,
    > for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>> for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async_sse {
            fn cst_decode(self) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>>
    for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sse
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>>
    for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>,
    > for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<Vec<i32>>>> for *mut wire_cst_list_opt_list_prim_i_32 {
    fn cst_decode(self) -> Vec<Option<Vec<i32>>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::array::PointTwinNormal>> for *mut wire_cst_list_point_twin_normal {
    fn cst_decode(self) -> Vec<crate::api::array::PointTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>>
    for *mut wire_cst_list_point_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>>
    for *mut wire_cst_list_point_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse>>
    for *mut wire_cst_list_point_twin_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>>
    for *mut wire_cst_list_point_twin_sync
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>>
    for *mut wire_cst_list_point_twin_sync_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<f32>> for *mut wire_cst_list_prim_f_32 {
    fn cst_decode(self) -> Vec<f32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64 {
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i16>> for *mut wire_cst_list_prim_i_16 {
    fn cst_decode(self) -> Vec<i16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i32>> for *mut wire_cst_list_prim_i_32 {
    fn cst_decode(self) -> Vec<i32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i64>> for *mut wire_cst_list_prim_i_64 {
    fn cst_decode(self) -> Vec<i64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i8>> for *mut wire_cst_list_prim_i_8 {
    fn cst_decode(self) -> Vec<i8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u16>> for *mut wire_cst_list_prim_u_16 {
    fn cst_decode(self) -> Vec<u16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u32>> for *mut wire_cst_list_prim_u_32 {
    fn cst_decode(self) -> Vec<u32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u64>> for *mut wire_cst_list_prim_u_64 {
    fn cst_decode(self) -> Vec<u64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>>
    for *mut wire_cst_list_raw_string_enum_mirrored
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>>
    for *mut wire_cst_list_raw_string_mirrored
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(String, i32)>> for *mut wire_cst_list_record_string_i_32 {
    fn cst_decode(self) -> Vec<(String, i32)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::method::SumWithTwinNormal>>
    for *mut wire_cst_list_sum_with_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::method::SumWithTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>>
    for *mut wire_cst_list_sum_with_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>>
    for *mut wire_cst_list_sum_with_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>>
    for *mut wire_cst_list_sum_with_twin_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>>
    for *mut wire_cst_list_sum_with_twin_sync
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>>
    for *mut wire_cst_list_sum_with_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::array::TestIdTwinNormal>>
    for *mut wire_cst_list_test_id_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::array::TestIdTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>>
    for *mut wire_cst_list_test_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>>
    for *mut wire_cst_list_test_id_twin_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>
    for *mut wire_cst_list_test_id_twin_sync
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>>
    for *mut wire_cst_list_test_id_twin_sync_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::misc_example::WeekdaysTwinNormal>>
    for *mut wire_cst_list_weekdays_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::misc_example::WeekdaysTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    for *mut wire_cst_list_weekdays_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>,
    > for *mut wire_cst_list_weekdays_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>
    for *mut wire_cst_list_weekdays_twin_sse
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for *mut wire_cst_list_weekdays_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
    for *mut wire_cst_list_weekdays_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::api::method::Log2TwinNormal> for wire_cst_log_2_twin_normal {
    fn cst_decode(self) -> crate::api::method::Log2TwinNormal {
        crate::api::method::Log2TwinNormal {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync>
    for wire_cst_log_2_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse>
    for wire_cst_log_2_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
        crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::Log2TwinSse>
    for wire_cst_log_2_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
        crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>
    for wire_cst_log_2_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
        crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse>
    for wire_cst_log_2_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
        crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::stream::LogTwinNormal> for wire_cst_log_twin_normal {
    fn cst_decode(self) -> crate::api::stream::LogTwinNormal {
        crate::api::stream::LogTwinNormal {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>
    for wire_cst_log_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
        crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse>
    for wire_cst_log_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
        crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_sse::LogTwinSse> for wire_cst_log_twin_sse {
    fn cst_decode(self) -> crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
        crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::inside_macro::MacroStruct> for wire_cst_macro_struct {
    fn cst_decode(self) -> crate::api::inside_macro::MacroStruct {
        crate::api::inside_macro::MacroStruct {
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::MeasureTwinNormal> for wire_cst_measure_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::MeasureTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::enumeration::MeasureTwinNormal::Speed(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::enumeration::MeasureTwinNormal::Distance(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
    for wire_cst_measure_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>
    for wire_cst_measure_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Speed( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Distance( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse>
    for wire_cst_measure_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Speed(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Distance(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
    for wire_cst_measure_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>
    for wire_cst_measure_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Speed(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Distance(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::array::MessageIdTwinNormal> for wire_cst_message_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::MessageIdTwinNormal {
        crate::api::array::MessageIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
    for wire_cst_message_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse>
    for wire_cst_message_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse {
        crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse>
    for wire_cst_message_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse {
        crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for wire_cst_message_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse>
    for wire_cst_message_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse {
        crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::mirror::MirrorStructTwinNormal> for wire_cst_mirror_struct_twin_normal {
    fn cst_decode(self) -> crate::api::mirror::MirrorStructTwinNormal {
        crate::api::mirror::MirrorStructTwinNormal {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync>
    for wire_cst_mirror_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
        crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse>
    for wire_cst_mirror_struct_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse {
        crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse>
    for wire_cst_mirror_struct_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
        crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync>
    for wire_cst_mirror_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
        crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse>
    for wire_cst_mirror_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
        crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal>
    for wire_cst_more_than_just_one_raw_string_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
        crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
            regular: self.regular.cst_decode(),
            r#type: self.r#type.cst_decode(),
            r#async: self.r#async.cst_decode(),
            another: self.another.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync> for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync{regular:  self.regular.cst_decode(),r#type:  self.r#type.cst_decode(),r#async:  self.r#async.cst_decode(),another:  self.another.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse> for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {
                crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse{regular:  self.regular.cst_decode(),r#type:  self.r#type.cst_decode(),r#async:  self.r#async.cst_decode(),another:  self.another.cst_decode()}
            }
        }
impl
    CstDecode<crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse>
    for wire_cst_more_than_just_one_raw_string_struct_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse {
        crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse {
            regular: self.regular.cst_decode(),
            r#type: self.r#type.cst_decode(),
            r#async: self.r#async.cst_decode(),
            another: self.another.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync,
    > for wire_cst_more_than_just_one_raw_string_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
    {
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync {
            regular: self.regular.cst_decode(),
            r#type: self.r#type.cst_decode(),
            r#async: self.r#async.cst_decode(),
            another: self.another.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse> for wire_cst_more_than_just_one_raw_string_struct_twin_sync_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {
                crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse{regular:  self.regular.cst_decode(),r#type:  self.r#type.cst_decode(),r#async:  self.r#async.cst_decode(),another:  self.another.cst_decode()}
            }
        }
impl CstDecode<crate::api::misc_example::MyNestedStructTwinNormal>
    for wire_cst_my_nested_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        crate::api::misc_example::MyNestedStructTwinNormal {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync>
    for wire_cst_my_nested_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse,
    > for wire_cst_my_nested_struct_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
    {
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse{tree_node:  self.tree_node.cst_decode(),weekday:  self.weekday.cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse>
    for wire_cst_my_nested_struct_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
        crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
    for wire_cst_my_nested_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse>
    for wire_cst_my_nested_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse {
        crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::sample_types::MySize> for wire_cst_my_size {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MySize {
        crate::auxiliary::sample_types::MySize {
            width: self.width.cst_decode(),
            height: self.height.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::stream::MyStreamEntryTwinNormal>
    for wire_cst_my_stream_entry_twin_normal
{
    fn cst_decode(self) -> crate::api::stream::MyStreamEntryTwinNormal {
        crate::api::stream::MyStreamEntryTwinNormal {
            hello: self.hello.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync>
    for wire_cst_my_stream_entry_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
        crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
            hello: self.hello.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse>
    for wire_cst_my_stream_entry_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse {
        crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse {
            hello: self.hello.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse>
    for wire_cst_my_stream_entry_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
        crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
            hello: self.hello.cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyStruct> for wire_cst_my_struct {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyStruct {
        crate::auxiliary::sample_types::MyStruct {
            content: self.content.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::MyTreeNodeTwinNormal>
    for wire_cst_my_tree_node_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        crate::api::misc_example::MyTreeNodeTwinNormal {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
    for wire_cst_my_tree_node_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
    > for wire_cst_my_tree_node_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
    {
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>
    for wire_cst_my_tree_node_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
        crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
    for wire_cst_my_tree_node_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>
    for wire_cst_my_tree_node_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
        crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>
    for wire_cst_nested_raw_string_mirrored
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
        crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
            raw: self.raw.cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::new_module_system::sub_module::NewSimpleStruct>
    for wire_cst_new_simple_struct
{
    fn cst_decode(self) -> crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
        crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
            field: self.field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for wire_cst_new_type_int_twin_normal
{
    fn cst_decode(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        crate::api::newtype_pattern::NewTypeIntTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
    for wire_cst_new_type_int_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse,
    > for wire_cst_new_type_int_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
    {
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>
    for wire_cst_new_type_int_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse {
        crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
    for wire_cst_new_type_int_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>
    for wire_cst_new_type_int_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse {
        crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::enumeration::NoteTwinNormal> for wire_cst_note_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::NoteTwinNormal {
        crate::api::enumeration::NoteTwinNormal {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
    for wire_cst_note_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse>
    for wire_cst_note_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse {
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse>
    for wire_cst_note_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
        crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
    for wire_cst_note_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse>
    for wire_cst_note_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
        crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers> for wire_cst_numbers {
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers {
        crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers(self.field0.cst_decode())
    }
}
impl CstDecode<crate::auxiliary::old_module_system::sub_module::OldSimpleStruct>
    for wire_cst_old_simple_struct
{
    fn cst_decode(self) -> crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
        crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
            field: self.field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for wire_cst_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        crate::api::rust_opaque::OpaqueNestedTwinNormal {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
    for wire_cst_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse,
    > for wire_cst_opaque_nested_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
    {
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse>
    for wire_cst_opaque_nested_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
        crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
    for wire_cst_opaque_nested_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse>
    for wire_cst_opaque_nested_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::OptVecsTwinNormal> for wire_cst_opt_vecs_twin_normal {
    fn cst_decode(self) -> crate::api::optional::OptVecsTwinNormal {
        crate::api::optional::OptVecsTwinNormal {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
    for wire_cst_opt_vecs_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse>
    for wire_cst_opt_vecs_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse {
        crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse>
    for wire_cst_opt_vecs_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
        crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
    for wire_cst_opt_vecs_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse>
    for wire_cst_opt_vecs_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
        crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::PointTwinNormal> for wire_cst_point_twin_normal {
    fn cst_decode(self) -> crate::api::array::PointTwinNormal {
        crate::api::array::PointTwinNormal {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::array::PointTwinNormal; 2]> for *mut wire_cst_list_point_twin_normal {
    fn cst_decode(self) -> [crate::api::array::PointTwinNormal; 2] {
        let vec: Vec<crate::api::array::PointTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>
    for wire_cst_point_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2]>
    for *mut wire_cst_list_point_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>
    for wire_cst_point_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
        crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse; 2]>
    for *mut wire_cst_list_point_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::PointTwinSse>
    for wire_cst_point_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
        crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sse::PointTwinSse; 2]>
    for *mut wire_cst_list_point_twin_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sse::PointTwinSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>
    for wire_cst_point_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
        crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2]>
    for *mut wire_cst_list_point_twin_sync
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>
    for wire_cst_point_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
        crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse; 2]>
    for *mut wire_cst_list_point_twin_sync_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>
    for wire_cst_raw_string_enum_mirrored
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Raw);
                crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Raw(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Nested(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.ListOfNested);
                crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::ListOfNested(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::raw_string::RawStringItemStructTwinNormal>
    for wire_cst_raw_string_item_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::raw_string::RawStringItemStructTwinNormal {
        crate::api::raw_string::RawStringItemStructTwinNormal {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync,
    > for wire_cst_raw_string_item_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
    {
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse> for wire_cst_raw_string_item_struct_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {
                crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse{r#type:  self.r#type.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse>
    for wire_cst_raw_string_item_struct_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
        crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync>
    for wire_cst_raw_string_item_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
        crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse>
    for wire_cst_raw_string_item_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse {
        crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>
    for wire_cst_raw_string_mirrored
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
            value: self.value.cst_decode(),
        }
    }
}
impl
    CstDecode<(
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    )> for wire_cst_record_application_settings_raw_string_enum_mirrored
{
    fn cst_decode(
        self,
    ) -> (
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, i32)> for wire_cst_record_string_i_32 {
    fn cst_decode(self) -> (String, i32) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences> for wire_cst_sequences {
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences {
        crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::exception::SomeStructTwinNormal> for wire_cst_some_struct_twin_normal {
    fn cst_decode(self) -> crate::api::exception::SomeStructTwinNormal {
        crate::api::exception::SomeStructTwinNormal {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
    for wire_cst_some_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse>
    for wire_cst_some_struct_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse {
        crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse>
    for wire_cst_some_struct_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
        crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
    for wire_cst_some_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse>
    for wire_cst_some_struct_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
        crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::SpeedTwinNormal> for wire_cst_speed_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::SpeedTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::SpeedTwinNormal::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::enumeration::SpeedTwinNormal::GPS(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>
    for wire_cst_speed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
        match self.tag {
            0 => {
                crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown
            }
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>
    for wire_cst_speed_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::Unknown,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::GPS( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>
    for wire_cst_speed_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::GPS(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>
    for wire_cst_speed_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>
    for wire_cst_speed_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::GPS(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::comment::StructWithCommentsTwinNormal>
    for wire_cst_struct_with_comments_twin_normal
{
    fn cst_decode(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        crate::api::comment::StructWithCommentsTwinNormal {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync>
    for wire_cst_struct_with_comments_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse,
    > for wire_cst_struct_with_comments_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
    {
        crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse>
    for wire_cst_struct_with_comments_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
        crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
    for wire_cst_struct_with_comments_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse>
    for wire_cst_struct_with_comments_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
        crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::StructWithEnumTwinNormal>
    for wire_cst_struct_with_enum_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        crate::api::misc_example::StructWithEnumTwinNormal {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync>
    for wire_cst_struct_with_enum_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse,
    > for wire_cst_struct_with_enum_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
    {
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse{abc1:  self.abc1.cst_decode(),abc2:  self.abc2.cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse>
    for wire_cst_struct_with_enum_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
        crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
    for wire_cst_struct_with_enum_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse>
    for wire_cst_struct_with_enum_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse {
        crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithOneFieldTwinNormal>
    for wire_cst_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        crate::api::structure::StructWithOneFieldTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync>
    for wire_cst_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse> for wire_cst_struct_with_one_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse {
                crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse{a:  self.a.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse>
    for wire_cst_struct_with_one_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
        crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
    for wire_cst_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse>
    for wire_cst_struct_with_one_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse {
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithTwoFieldTwinNormal>
    for wire_cst_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        crate::api::structure::StructWithTwoFieldTwinNormal {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync>
    for wire_cst_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse> for wire_cst_struct_with_two_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse {
                crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse{a:  self.a.cst_decode(),b:  self.b.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse>
    for wire_cst_struct_with_two_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
        crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
    for wire_cst_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse>
    for wire_cst_struct_with_two_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse {
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithZeroFieldTwinNormal>
    for wire_cst_struct_with_zero_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        crate::api::structure::StructWithZeroFieldTwinNormal {}
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for wire_cst_struct_with_zero_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse> for wire_cst_struct_with_zero_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
                crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse{}
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse>
    for wire_cst_struct_with_zero_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {
        crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {}
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
    for wire_cst_struct_with_zero_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse>
    for wire_cst_struct_with_zero_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse {
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse {}
    }
}
impl CstDecode<crate::api::method::SumWithTwinNormal> for wire_cst_sum_with_twin_normal {
    fn cst_decode(self) -> crate::api::method::SumWithTwinNormal {
        crate::api::method::SumWithTwinNormal {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::method::SumWithTwinNormal; 3]>
    for *mut wire_cst_list_sum_with_twin_normal
{
    fn cst_decode(self) -> [crate::api::method::SumWithTwinNormal; 3] {
        let vec: Vec<crate::api::method::SumWithTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
    for wire_cst_sum_with_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3]>
    for *mut wire_cst_list_sum_with_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>
    for wire_cst_sum_with_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
        crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse; 3]>
    for *mut wire_cst_list_sum_with_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse; 3] {
        let vec: Vec<
            crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>
    for wire_cst_sum_with_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
        crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse; 3]>
    for *mut wire_cst_list_sum_with_twin_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for wire_cst_sum_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3]>
    for *mut wire_cst_list_sum_with_twin_sync
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>
    for wire_cst_sum_with_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
        crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse; 3]>
    for *mut wire_cst_list_sum_with_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::chrono_type::TestChronoTwinNormal> for wire_cst_test_chrono_twin_normal {
    fn cst_decode(self) -> crate::api::chrono_type::TestChronoTwinNormal {
        crate::api::chrono_type::TestChronoTwinNormal {
            dt: self.dt.cst_decode(),
            dt2: self.dt2.cst_decode(),
            du: self.du.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync>
    for wire_cst_test_chrono_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
        crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
            dt: self.dt.cst_decode(),
            dt2: self.dt2.cst_decode(),
            du: self.du.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync>
    for wire_cst_test_chrono_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
        crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
            dt: self.dt.cst_decode(),
            dt2: self.dt2.cst_decode(),
            du: self.du.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::TestIdTwinNormal> for wire_cst_test_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::TestIdTwinNormal {
        crate::api::array::TestIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<[crate::api::array::TestIdTwinNormal; 2]>
    for *mut wire_cst_list_test_id_twin_normal
{
    fn cst_decode(self) -> [crate::api::array::TestIdTwinNormal; 2] {
        let vec: Vec<crate::api::array::TestIdTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::array::TestIdTwinNormal; 4]>
    for *mut wire_cst_list_test_id_twin_normal
{
    fn cst_decode(self) -> [crate::api::array::TestIdTwinNormal; 4] {
        let vec: Vec<crate::api::array::TestIdTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
    for wire_cst_test_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2]>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4]>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>
    for wire_cst_test_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse {
        crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 2]>
    for *mut wire_cst_list_test_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 4]>
    for *mut wire_cst_list_test_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>
    for wire_cst_test_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse {
        crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse(self.field0.cst_decode())
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 2]>
    for *mut wire_cst_list_test_id_twin_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 4]>
    for *mut wire_cst_list_test_id_twin_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for wire_cst_test_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2]>
    for *mut wire_cst_list_test_id_twin_sync
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4]>
    for *mut wire_cst_list_test_id_twin_sync
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>
    for wire_cst_test_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse {
        crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse(self.field0.cst_decode())
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 2]>
    for *mut wire_cst_list_test_id_twin_sync_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 4]>
    for *mut wire_cst_list_test_id_twin_sync_sse
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::type_alias::TestModelTwinNormal> for wire_cst_test_model_twin_normal {
    fn cst_decode(self) -> crate::api::type_alias::TestModelTwinNormal {
        crate::api::type_alias::TestModelTwinNormal {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync>
    for wire_cst_test_model_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
        crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse>
    for wire_cst_test_model_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse {
        crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse>
    for wire_cst_test_model_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
        crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync>
    for wire_cst_test_model_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
        crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse>
    for wire_cst_test_model_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
        crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for wire_cst_tuple_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        crate::api::structure::TupleStructWithOneFieldTwinNormal(self.field0.cst_decode())
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    > for wire_cst_tuple_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse> for wire_cst_tuple_struct_with_one_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
                crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse( self.field0.cst_decode())
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse>
    for wire_cst_tuple_struct_with_one_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse {
        crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
    for wire_cst_tuple_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync(
            self.field0.cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse,
    > for wire_cst_tuple_struct_with_one_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
    {
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for wire_cst_tuple_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        crate::api::structure::TupleStructWithTwoFieldTwinNormal(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    > for wire_cst_tuple_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse> for wire_cst_tuple_struct_with_two_field_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
                crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse( self.field0.cst_decode(), self.field1.cst_decode())
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse>
    for wire_cst_tuple_struct_with_two_field_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse {
        crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
    for wire_cst_tuple_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse,
    > for wire_cst_tuple_struct_with_two_field_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
    {
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecode<[u8; 1600]> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> [u8; 1600] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 32]> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> [u8; 32] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 5]> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> [u8; 5] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 8]> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> [u8; 8] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::attribute::UserIdTwinNormal> for wire_cst_user_id_twin_normal {
    fn cst_decode(self) -> crate::api::attribute::UserIdTwinNormal {
        crate::api::attribute::UserIdTwinNormal {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
    for wire_cst_user_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse>
    for wire_cst_user_id_twin_rust_async_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse {
        crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse>
    for wire_cst_user_id_twin_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
        crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
    for wire_cst_user_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse>
    for wire_cst_user_id_twin_sync_sse
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
        crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal>
    for wire_cst_vec_of_primitive_pack_twin_normal
{
    fn cst_decode(self) -> crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
        crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int16list: self.int16list.cst_decode(),
            uint16list: self.uint16list.cst_decode(),
            uint32list: self.uint32list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            uint64list: self.uint64list.cst_decode(),
            int64list: self.int64list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            bool_list: self.bool_list.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync> for wire_cst_vec_of_primitive_pack_twin_rust_async {
            fn cst_decode(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync{int8list:  self.int8list.cst_decode(),uint8list:  self.uint8list.cst_decode(),int16list:  self.int16list.cst_decode(),uint16list:  self.uint16list.cst_decode(),uint32list:  self.uint32list.cst_decode(),int32list:  self.int32list.cst_decode(),uint64list:  self.uint64list.cst_decode(),int64list:  self.int64list.cst_decode(),float32list:  self.float32list.cst_decode(),float64list:  self.float64list.cst_decode(),bool_list:  self.bool_list.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse> for wire_cst_vec_of_primitive_pack_twin_rust_async_sse {
            fn cst_decode(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {
                crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse{int8list:  self.int8list.cst_decode(),uint8list:  self.uint8list.cst_decode(),int16list:  self.int16list.cst_decode(),uint16list:  self.uint16list.cst_decode(),uint32list:  self.uint32list.cst_decode(),int32list:  self.int32list.cst_decode(),uint64list:  self.uint64list.cst_decode(),int64list:  self.int64list.cst_decode(),float32list:  self.float32list.cst_decode(),float64list:  self.float64list.cst_decode(),bool_list:  self.bool_list.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse>
    for wire_cst_vec_of_primitive_pack_twin_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse {
        crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse {
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int16list: self.int16list.cst_decode(),
            uint16list: self.uint16list.cst_decode(),
            uint32list: self.uint32list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            uint64list: self.uint64list.cst_decode(),
            int64list: self.int64list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            bool_list: self.bool_list.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync>
    for wire_cst_vec_of_primitive_pack_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
        crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int16list: self.int16list.cst_decode(),
            uint16list: self.uint16list.cst_decode(),
            uint32list: self.uint32list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            uint64list: self.uint64list.cst_decode(),
            int64list: self.int64list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            bool_list: self.bool_list.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse,
    > for wire_cst_vec_of_primitive_pack_twin_sync_sse
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
    {
        crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse{int8list:  self.int8list.cst_decode(),uint8list:  self.uint8list.cst_decode(),int16list:  self.int16list.cst_decode(),uint16list:  self.uint16list.cst_decode(),uint32list:  self.uint32list.cst_decode(),int32list:  self.int32list.cst_decode(),uint64list:  self.uint64list.cst_decode(),int64list:  self.int64list.cst_decode(),float32list:  self.float32list.cst_decode(),float64list:  self.float64list.cst_decode(),bool_list:  self.bool_list.cst_decode()}
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_macro_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
            non_final_data: Default::default(),
        }
    }
}
impl Default for wire_cst_another_macro_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_env {
    fn new_with_null_ptr() -> Self {
        Self {
            vars: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_application_env {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_env_var {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_application_env_var {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_message {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_application_message {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_settings {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            version: core::ptr::null_mut(),
            mode: Default::default(),
            env: core::ptr::null_mut(),
            env_optional: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_application_settings {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_error_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_error_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_error_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_error_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_error_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_error_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_demo_struct_for_rust_call_dart_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_demo_struct_for_rust_call_dart_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_list_of_nested_raw_string_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            raw: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_list_of_nested_raw_string_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_log_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_log_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_log_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_log_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_macro_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
        }
    }
}
impl Default for wire_cst_macro_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_size {
    fn new_with_null_ptr() -> Self {
        Self {
            width: Default::default(),
            height: Default::default(),
        }
    }
}
impl Default for wire_cst_my_size {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_stream_entry_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            hello: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_stream_entry_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_stream_entry_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            hello: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_stream_entry_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_stream_entry_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            hello: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_stream_entry_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_stream_entry_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            hello: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_stream_entry_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            content: Default::default(),
        }
    }
}
impl Default for wire_cst_my_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_nested_raw_string_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            raw: Default::default(),
        }
    }
}
impl Default for wire_cst_nested_raw_string_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_simple_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            field: Default::default(),
        }
    }
}
impl Default for wire_cst_new_simple_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_numbers {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_numbers {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_old_simple_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            field: Default::default(),
        }
    }
}
impl Default for wire_cst_old_simple_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_enum_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_enum_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_application_settings_raw_string_enum_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_application_settings_raw_string_enum_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_i_32 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_i_32 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sequences {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_sequences {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_chrono_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            dt: core::ptr::null_mut(),
            dt2: core::ptr::null_mut(),
            du: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_chrono_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_chrono_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            dt: core::ptr::null_mut(),
            dt2: core::ptr::null_mut(),
            du: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_chrono_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_chrono_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            dt: core::ptr::null_mut(),
            dt2: core::ptr::null_mut(),
            du: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_chrono_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_rust_async_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_rust_async_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_sync_sse {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_sync_sse {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frb_initialize_rust(
    dart_opaque_drop_port: flutter_rust_bridge::for_generated::MessagePort,
    dart_fn_invoke_port: flutter_rust_bridge::for_generated::MessagePort,
) {
    flutter_rust_bridge::for_generated::handler_initialize(
        &*FLUTTER_RUST_BRIDGE_HANDLER,
        dart_opaque_drop_port,
        dart_fn_invoke_port,
    )
}

#[no_mangle]
pub extern "C" fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_normal(port_: i64, blob: *mut wire_cst_list_prim_u_8) {
    wire_boxed_blob_twin_normal_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_normal(port_: i64, id: *mut wire_cst_test_id_twin_normal) {
    wire_func_test_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_normal(port_: i64) {
    wire_get_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_normal(port_: i64) {
    wire_get_complex_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_normal(port_: i64, array: *mut wire_cst_list_prim_f_64) {
    wire_last_number_twin_normal_impl(port_, array)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_test_id_twin_normal,
) {
    wire_nested_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_normal(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_new_msgid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8,
) {
    wire_return_boxed_feed_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_feed_id_twin_normal,
) {
    wire_return_boxed_raw_feed_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_normal(
    port_: i64,
    blob: *mut wire_cst_blob_twin_normal,
) {
    wire_use_boxed_blob_twin_normal_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_normal(port_: i64, id: *mut wire_cst_message_id_twin_normal) {
    wire_use_msgid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_func_async_simple_add_twin_normal(port_: i64, a: i32, b: i32) {
    wire_func_async_simple_add_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_func_async_void_twin_normal(port_: i64) {
    wire_func_async_void_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_normal(
    port_: i64,
    val: *mut wire_cst_customized_twin_normal,
) {
    wire_handle_customized_struct_twin_normal_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_normal(
    port_: i64,
    user_id: *mut wire_cst_user_id_twin_normal,
) {
    wire_next_user_id_twin_normal_impl(port_, user_id)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_normal(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8,
) {
    wire_benchmark_input_bytes_twin_normal_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_normal(port_: i64, size: i32) {
    wire_benchmark_output_bytes_twin_normal_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_normal(port_: i64) {
    wire_benchmark_void_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_datetime_local_twin_normal(port_: i64, d: i64) {
    wire_datetime_local_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_datetime_utc_twin_normal(port_: i64, d: i64) {
    wire_datetime_utc_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_duration_twin_normal(port_: i64, d: i64) {
    wire_duration_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_handle_durations_twin_normal(
    port_: i64,
    durations: *mut wire_cst_list_Chrono_Duration,
    since: i64,
) {
    wire_handle_durations_twin_normal_impl(port_, durations, since)
}

#[no_mangle]
pub extern "C" fn wire_handle_timestamps_twin_normal(
    port_: i64,
    timestamps: *mut wire_cst_list_Chrono_Naive,
    epoch: i64,
) {
    wire_handle_timestamps_twin_normal_impl(port_, timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn wire_how_long_does_it_take_twin_normal(
    port_: i64,
    mine: *mut wire_cst_feature_chrono_twin_normal,
) {
    wire_how_long_does_it_take_twin_normal_impl(port_, mine)
}

#[no_mangle]
pub extern "C" fn wire_naivedatetime_twin_normal(port_: i64, d: i64) {
    wire_naivedatetime_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_optional_empty_datetime_utc_twin_normal(port_: i64, d: *mut i64) {
    wire_optional_empty_datetime_utc_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_test_chrono_twin_normal(port_: i64) {
    wire_test_chrono_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_precise_chrono_twin_normal(port_: i64) {
    wire_test_precise_chrono_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal(
    port_: i64,
    that: *mut wire_cst_struct_with_comments_twin_normal,
) {
    wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinNormal_static_method_twin_normal(port_: i64) {
    wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_normal(port_: i64) {
    wire_function_with_comments_slash_star_star_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_normal(port_: i64) {
    wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_normal(port_: i64) {
    wire_function_with_comments_triple_slash_single_line_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_dart_dynamic_twin_normal(port_: i64) {
    wire_return_dart_dynamic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_loopback_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_loopback_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_multi_times_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
    num_times: i32,
) {
    wire_rust_call_dart_multi_times_twin_normal_impl(port_, callback, num_times)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_one_arg_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_one_arg_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_return_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_return_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_simple_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_simple_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_two_args_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_two_args_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_with_dart_opaque_arg_twin_normal(
    port_: i64,
    input: *const std::ffi::c_void,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_with_dart_opaque_arg_twin_normal_impl(port_, input, callback)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_with_dart_opaque_result_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_with_dart_opaque_result_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_async_accept_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_clone_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_create_enum_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_normal(
    port_: i64,
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) {
    wire_create_nested_dart_opaque_twin_normal_impl(port_, opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_normal(port_: i64, id: i32) {
    wire_drop_static_dart_opaque_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_enum_dart_opaque_twin_normal,
) {
    wire_get_enum_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_dart_opaque_nested_twin_normal,
) {
    wire_get_nested_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_array_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_array_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_normal(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_loop_back_option_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_option_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_vec_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_vec_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_panic_unwrap_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_normal(
    port_: i64,
    id: i32,
    opaque: *const std::ffi::c_void,
) {
    wire_set_static_dart_opaque_twin_normal_impl(port_, id, opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_accept_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_accept_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_loopback_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_loopback_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_option_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_option_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_option_loopback_twin_normal(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_option_loopback_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_unwrap_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_normal(port_: i64, arg: i32) {
    wire_func_enum_simple_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_mixed_twin_normal,
) {
    wire_func_enum_with_item_mixed_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_struct_twin_normal,
) {
    wire_func_enum_with_item_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_tuple_twin_normal,
) {
    wire_func_enum_with_item_tuple_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_normal(port_: i64, weekday: i32) {
    wire_handle_enum_parameter_twin_normal_impl(port_, weekday)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_normal(
    port_: i64,
    val: *mut wire_cst_kitchen_sink_twin_normal,
) {
    wire_handle_enum_struct_twin_normal_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_normal(
    port_: i64,
    input: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_return_enum_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_normal(
    port_: i64,
    measure: *mut wire_cst_measure_twin_normal,
) {
    wire_multiply_by_ten_twin_normal_impl(port_, measure)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_normal(port_: i64, note: *mut wire_cst_note_twin_normal) {
    wire_print_note_twin_normal_impl(port_, note)
}

#[no_mangle]
pub extern "C" fn wire_EventTwinNormal_as_string_twin_normal(
    port_: i64,
    that: *mut wire_cst_event_twin_normal,
) {
    wire_EventTwinNormal_as_string_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_close_event_listener_twin_normal(port_: i64) {
    wire_close_event_listener_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_event_twin_normal(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
) {
    wire_create_event_twin_normal_impl(port_, address, payload)
}

#[no_mangle]
pub extern "C" fn wire_register_event_listener_twin_normal(port_: i64) {
    wire_register_event_listener_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_new_twin_normal(
    port_: i64,
    message: *mut wire_cst_list_prim_u_8,
) {
    wire_CustomStructTwinNormal_new_twin_normal_impl(port_, message)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_normal,
) {
    wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_normal,
) {
    wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal(
    port_: i64,
) {
    wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal(
    port_: i64,
) {
    wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_new_twin_normal(port_: i64, value: u32) {
    wire_SomeStructTwinNormal_new_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_normal,
) {
    wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_normal,
) {
    wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal(port_: i64) {
    wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal(port_: i64) {
    wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_normal(port_: i64) {
    wire_custom_enum_error_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_normal(port_: i64) {
    wire_custom_enum_error_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_normal(port_: i64, arg: u32) {
    wire_custom_enum_error_return_ok_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_normal(
    port_: i64,
    arg: *mut wire_cst_custom_nested_error_outer_twin_normal,
) {
    wire_custom_nested_error_return_error_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_normal(
    port_: i64,
    arg: *mut wire_cst_custom_struct_error_twin_normal,
) {
    wire_custom_struct_error_return_error_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_normal(port_: i64) {
    wire_func_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_normal(port_: i64) {
    wire_func_type_fallible_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_normal(port_: i64) {
    wire_func_type_infallible_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_normal(port_: i64) {
    wire_panic_with_custom_result_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_normal(port_: i64) {
    wire_return_custom_nested_error_1_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_normal(port_: i64) {
    wire_return_custom_nested_error_1_variant1_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_normal(port_: i64) {
    wire_return_custom_nested_error_2_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_normal(port_: i64) {
    wire_return_custom_struct_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_normal(port_: i64) {
    wire_return_custom_struct_ok_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_normal(port_: i64) {
    wire_return_err_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_normal(port_: i64, variant: u32) {
    wire_return_error_variant_twin_normal_impl(port_, variant)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_normal(port_: i64) {
    wire_return_ok_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_normal(port_: i64) {
    wire_stream_sink_throw_anyhow_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_normal(port_: i64) {
    wire_throw_anyhow_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_normal(port_: i64) {
    wire_call_new_module_system_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_normal(port_: i64) {
    wire_call_old_module_system_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_normal(port_: i64, my_enum: i32) {
    wire_use_imported_enum_twin_normal_impl(port_, my_enum)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_normal(
    port_: i64,
    my_struct: *mut wire_cst_my_struct,
) {
    wire_use_imported_struct_twin_normal_impl(port_, my_struct)
}

#[no_mangle]
pub extern "C" fn wire_another_macro_struct_twin_normal(port_: i64) {
    wire_another_macro_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_macro_struct_twin_normal(port_: i64, arg: *mut wire_cst_macro_struct) {
    wire_func_macro_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_concatenate_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinNormal_concatenate_twin_normal_impl(port_, that, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal(
    port_: i64,
) {
    wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
) {
    wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal_impl(port_, that, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_new_twin_normal(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinNormal_new_twin_normal_impl(port_, a)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinNormal_sum_twin_normal(
    port_: i64,
    that: *mut wire_cst_sum_with_twin_normal,
    y: u32,
    z: u32,
) {
    wire_SumWithTwinNormal_sum_twin_normal_impl(port_, that, y, z)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_normal(port_: i64, a: u32, b: u32, c: u32) {
    wire_get_sum_array_twin_normal_impl(port_, a, b, c)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_normal(port_: i64) {
    wire_get_sum_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_normal(port_: i64) {
    wire_app_settings_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_normal(port_: i64) {
    wire_app_settings_vec_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_normal(port_: i64, nums: *mut wire_cst_numbers) {
    wire_first_number_twin_normal_impl(port_, nums)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_normal(port_: i64, seqs: *mut wire_cst_sequences) {
    wire_first_sequence_twin_normal_impl(port_, seqs)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_normal(port_: i64) {
    wire_get_app_settings_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_normal(port_: i64) {
    wire_get_fallible_app_settings_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_normal(port_: i64) {
    wire_get_message_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_normal(
    port_: i64,
    app_settings: *mut wire_cst_application_settings,
) {
    wire_is_app_embedded_twin_normal_impl(port_, app_settings)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_normal(port_: i64) {
    wire_mirror_struct_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_normal(port_: i64) {
    wire_mirror_tuple_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_normal(port_: i64, num: i32, times: usize) {
    wire_repeat_number_twin_normal_impl(port_, num, times)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_normal(port_: i64, seq: i32, times: usize) {
    wire_repeat_sequence_twin_normal_impl(port_, seq, times)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_normal(port_: i64) {
    wire_test_contains_mirrored_sub_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_normal(port_: i64) {
    wire_test_fallible_of_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_normal(port_: i64) {
    wire_test_list_of_nested_enums_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_normal(port_: i64) {
    wire_test_list_of_raw_nested_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_normal(port_: i64) {
    wire_test_nested_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_normal(port_: i64, nested: bool) {
    wire_test_raw_string_enum_mirrored_twin_normal_impl(port_, nested)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_normal(port_: i64) {
    wire_test_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_normal(port_: i64) {
    wire_handle_big_buffers_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_normal(
    port_: i64,
    s: *mut wire_cst_my_tree_node_twin_normal,
) {
    wire_handle_complex_struct_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_normal(
    port_: i64,
    s: *mut wire_cst_my_nested_struct_twin_normal,
) {
    wire_handle_nested_struct_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_normal(port_: i64, s: *mut wire_cst_list_prim_u_8) {
    wire_handle_string_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) {
    wire_handle_struct_twin_normal_impl(port_, arg, boxed)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_normal(port_: i64, v: *mut wire_cst_list_prim_u_8) {
    wire_handle_vec_u8_twin_normal_impl(port_, v)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_normal(
    port_: i64,
    weekdays: *mut wire_cst_list_weekdays_twin_normal,
) {
    wire_list_of_primitive_enums_twin_normal_impl(port_, weekdays)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_normal(port_: i64, abc: *mut wire_cst_abc_twin_normal) {
    wire_test_abc_enum_twin_normal_impl(port_, abc)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_normal(
    port_: i64,
    se: *mut wire_cst_struct_with_enum_twin_normal,
) {
    wire_test_struct_with_enum_twin_normal_impl(port_, se)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_normal(
    port_: i64,
    empty: *mut wire_cst_empty_twin_normal,
) {
    wire_empty_struct_twin_normal_impl(port_, empty)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_normal(port_: i64) {
    wire_func_return_unit_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_normal(port_: i64, arg: *mut wire_cst_list_prim_u_8) {
    wire_func_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_normal(
    port_: i64,
    l: *mut wire_cst_list_my_size,
) {
    wire_handle_list_of_struct_twin_normal_impl(port_, l)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_normal(
    port_: i64,
    names: *mut wire_cst_list_String,
) {
    wire_handle_string_list_twin_normal_impl(port_, names)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_normal(
    port_: i64,
    arg: *mut wire_cst_new_type_int_twin_normal,
) {
    wire_handle_newtype_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_normal(port_: i64, opt: *mut f64) {
    wire_handle_increment_boxed_optional_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_normal(
    port_: i64,
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_normal,
) {
    wire_handle_option_box_arguments_twin_normal_impl(
        port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_normal(
    port_: i64,
    opt: *mut wire_cst_exotic_optionals_twin_normal,
) {
    wire_handle_optional_increment_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_normal(port_: i64, left: f64, right: f64) {
    wire_handle_optional_return_twin_normal_impl(port_, left, right)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_normal(
    port_: i64,
    document: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_optional_struct_twin_normal_impl(port_, document)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_normal(
    port_: i64,
    opt: *mut wire_cst_opt_vecs_twin_normal,
) {
    wire_handle_vec_of_opts_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_normal(
    port_: i64,
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) {
    wire_primitive_optional_types_twin_normal_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_normal(port_: i64, n: i32) {
    wire_handle_vec_of_primitive_twin_normal_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_normal(
    port_: i64,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    wire_primitive_types_twin_normal_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_normal(port_: i64, my_u32: u32) {
    wire_primitive_u32_twin_normal_impl(port_, my_u32)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_rust_async(port_: i64, blob: *mut wire_cst_list_prim_u_8) {
    wire_boxed_blob_twin_rust_async_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_test_id_twin_rust_async,
) {
    wire_func_test_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_rust_async(port_: i64) {
    wire_get_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_rust_async(port_: i64) {
    wire_get_complex_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_rust_async(
    port_: i64,
    array: *mut wire_cst_list_prim_f_64,
) {
    wire_last_number_twin_rust_async_impl(port_, array)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_test_id_twin_rust_async,
) {
    wire_nested_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_rust_async(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_new_msgid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8,
) {
    wire_return_boxed_feed_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_feed_id_twin_rust_async,
) {
    wire_return_boxed_raw_feed_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_rust_async(
    port_: i64,
    blob: *mut wire_cst_blob_twin_rust_async,
) {
    wire_use_boxed_blob_twin_rust_async_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_message_id_twin_rust_async,
) {
    wire_use_msgid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_boxed_blob_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_test_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_complex_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_last_number_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_nested_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_new_msgid_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_feed_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_raw_feed_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_boxed_blob_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_msgid_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_boxed_blob_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_test_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_complex_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_last_number_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_nested_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_new_msgid_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_feed_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_raw_feed_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_boxed_blob_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_msgid_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_sync(
    blob: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_boxed_blob_twin_sync_impl(blob)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_sync(
    id: *mut wire_cst_test_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_test_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_complex_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_sync(
    array: *mut wire_cst_list_prim_f_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_last_number_twin_sync_impl(array)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_sync(
    id: *mut wire_cst_list_test_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_nested_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_sync(
    id: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_new_msgid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_sync(
    id: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_boxed_feed_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_sync(
    id: *mut wire_cst_feed_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_boxed_raw_feed_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_sync(
    blob: *mut wire_cst_blob_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_boxed_blob_twin_sync_impl(blob)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_sync(
    id: *mut wire_cst_message_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_msgid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_boxed_blob_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_test_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_complex_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_last_number_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_nested_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_new_msgid_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_boxed_feed_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_boxed_raw_feed_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_boxed_blob_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_msgid_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_async_simple_add_twin_sse(port_: i64, a: i32, b: i32) {
    wire_func_async_simple_add_twin_sse_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_func_async_void_twin_sse(port_: i64) {
    wire_func_async_void_twin_sse_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_rust_async(
    port_: i64,
    val: *mut wire_cst_customized_twin_rust_async,
) {
    wire_handle_customized_struct_twin_rust_async_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_rust_async(
    port_: i64,
    user_id: *mut wire_cst_user_id_twin_rust_async,
) {
    wire_next_user_id_twin_rust_async_impl(port_, user_id)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_customized_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_next_user_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_customized_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_next_user_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_sync(
    val: *mut wire_cst_customized_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_customized_struct_twin_sync_impl(val)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_sync(
    user_id: *mut wire_cst_user_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_next_user_id_twin_sync_impl(user_id)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_customized_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_next_user_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_rust_async(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8,
) {
    wire_benchmark_input_bytes_twin_rust_async_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_rust_async(port_: i64, size: i32) {
    wire_benchmark_output_bytes_twin_rust_async_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_rust_async(port_: i64) {
    wire_benchmark_void_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_input_bytes_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_output_bytes_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_void_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_input_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_output_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_void_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_sync(
    bytes: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_input_bytes_twin_sync_impl(bytes)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_sync(
    size: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_output_bytes_twin_sync_impl(size)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_void_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_input_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_output_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_void_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_datetime_local_twin_rust_async(port_: i64, d: i64) {
    wire_datetime_local_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_datetime_utc_twin_rust_async(port_: i64, d: i64) {
    wire_datetime_utc_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_duration_twin_rust_async(port_: i64, d: i64) {
    wire_duration_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_handle_durations_twin_rust_async(
    port_: i64,
    durations: *mut wire_cst_list_Chrono_Duration,
    since: i64,
) {
    wire_handle_durations_twin_rust_async_impl(port_, durations, since)
}

#[no_mangle]
pub extern "C" fn wire_handle_timestamps_twin_rust_async(
    port_: i64,
    timestamps: *mut wire_cst_list_Chrono_Naive,
    epoch: i64,
) {
    wire_handle_timestamps_twin_rust_async_impl(port_, timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn wire_how_long_does_it_take_twin_rust_async(
    port_: i64,
    mine: *mut wire_cst_feature_chrono_twin_rust_async,
) {
    wire_how_long_does_it_take_twin_rust_async_impl(port_, mine)
}

#[no_mangle]
pub extern "C" fn wire_naivedatetime_twin_rust_async(port_: i64, d: i64) {
    wire_naivedatetime_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_optional_empty_datetime_utc_twin_rust_async(port_: i64, d: *mut i64) {
    wire_optional_empty_datetime_utc_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_test_chrono_twin_rust_async(port_: i64) {
    wire_test_chrono_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_precise_chrono_twin_rust_async(port_: i64) {
    wire_test_precise_chrono_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_datetime_local_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_datetime_local_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_datetime_utc_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_datetime_utc_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_duration_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_duration_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_handle_durations_twin_sync(
    durations: *mut wire_cst_list_Chrono_Duration,
    since: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_durations_twin_sync_impl(durations, since)
}

#[no_mangle]
pub extern "C" fn wire_handle_timestamps_twin_sync(
    timestamps: *mut wire_cst_list_Chrono_Naive,
    epoch: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_timestamps_twin_sync_impl(timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn wire_how_long_does_it_take_twin_sync(
    mine: *mut wire_cst_feature_chrono_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_how_long_does_it_take_twin_sync_impl(mine)
}

#[no_mangle]
pub extern "C" fn wire_naivedatetime_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_naivedatetime_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_optional_empty_datetime_utc_twin_sync(
    d: *mut i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_optional_empty_datetime_utc_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_test_chrono_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_chrono_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_precise_chrono_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_precise_chrono_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_struct_with_comments_twin_rust_async,
) {
    wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async(port_: i64) {
    wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_rust_async(port_: i64) {
    wire_function_with_comments_slash_star_star_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_rust_async(port_: i64) {
    wire_function_with_comments_triple_slash_multi_line_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_rust_async(port_: i64) {
    wire_function_with_comments_triple_slash_single_line_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_slash_star_star_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSse_instance_method_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinSse_instance_method_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSse_static_method_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinSse_static_method_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_slash_star_star_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_multi_line_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_single_line_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSync_instance_method_twin_sync(
    that: *mut wire_cst_struct_with_comments_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSync_static_method_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_StructWithCommentsTwinSync_static_method_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_function_with_comments_slash_star_star_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_function_with_comments_triple_slash_multi_line_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_function_with_comments_triple_slash_single_line_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_function_with_comments_slash_star_star_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_function_with_comments_triple_slash_multi_line_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_function_with_comments_triple_slash_single_line_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_return_dart_dynamic_twin_rust_async(port_: i64) {
    wire_return_dart_dynamic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_dart_dynamic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_dart_dynamic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_accept_dart_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_accept_dart_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_loopback_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_loopback_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_option_dart_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_option_dart_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_option_loopback_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_option_loopback_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_dart_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_unwrap_dart_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_async_accept_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_clone_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_create_enum_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_rust_async(
    port_: i64,
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) {
    wire_create_nested_dart_opaque_twin_rust_async_impl(port_, opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_rust_async(port_: i64, id: i32) {
    wire_drop_static_dart_opaque_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_enum_dart_opaque_twin_rust_async,
) {
    wire_get_enum_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_dart_opaque_nested_twin_rust_async,
) {
    wire_get_nested_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_array_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_array_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_rust_async(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_loop_back_option_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_option_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_rust_async(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_vec_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_rust_async(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_vec_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_panic_unwrap_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_rust_async(
    port_: i64,
    id: i32,
    opaque: *const std::ffi::c_void,
) {
    wire_set_static_dart_opaque_twin_rust_async_impl(port_, id, opaque)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_async_accept_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_clone_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_enum_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_drop_static_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_enum_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_nested_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_get_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_get_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_get_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_unwrap_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_set_static_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_async_accept_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_clone_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_enum_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_drop_static_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_enum_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_nested_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_get_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_get_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_get_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_unwrap_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_set_static_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_async_accept_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_clone_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_enum_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_sync(
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_nested_dart_opaque_twin_sync_impl(opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_sync(
    id: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_drop_static_dart_opaque_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_sync(
    opaque: *mut wire_cst_enum_dart_opaque_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_enum_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_sync(
    opaque: *mut wire_cst_dart_opaque_nested_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_nested_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_sync(
    opaque: *mut wire_cst_list_DartOpaque,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_array_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_array_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_sync(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_option_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_option_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_sync(
    opaque: *mut wire_cst_list_DartOpaque,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_vec_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_vec_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_panic_unwrap_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_sync(
    id: i32,
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_set_static_dart_opaque_twin_sync_impl(id, opaque)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_async_accept_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_clone_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_enum_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_nested_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_drop_static_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_enum_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_nested_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_array_get_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_option_get_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_option_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_vec_get_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_vec_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_panic_unwrap_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_set_static_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_rust_async(port_: i64, arg: i32) {
    wire_func_enum_simple_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_mixed_twin_rust_async,
) {
    wire_func_enum_with_item_mixed_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_struct_twin_rust_async,
) {
    wire_func_enum_with_item_struct_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_tuple_twin_rust_async,
) {
    wire_func_enum_with_item_tuple_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_rust_async(port_: i64, weekday: i32) {
    wire_handle_enum_parameter_twin_rust_async_impl(port_, weekday)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_rust_async(
    port_: i64,
    val: *mut wire_cst_kitchen_sink_twin_rust_async,
) {
    wire_handle_enum_struct_twin_rust_async_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_rust_async(
    port_: i64,
    input: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_return_enum_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_rust_async(
    port_: i64,
    measure: *mut wire_cst_measure_twin_rust_async,
) {
    wire_multiply_by_ten_twin_rust_async_impl(port_, measure)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_rust_async(
    port_: i64,
    note: *mut wire_cst_note_twin_rust_async,
) {
    wire_print_note_twin_rust_async_impl(port_, note)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_simple_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_mixed_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_tuple_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_parameter_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_return_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_multiply_by_ten_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_print_note_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_simple_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_mixed_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_tuple_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_parameter_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_return_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_multiply_by_ten_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_print_note_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_simple_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_sync(
    arg: *mut wire_cst_enum_with_item_mixed_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_with_item_mixed_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_sync(
    arg: *mut wire_cst_enum_with_item_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_with_item_struct_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_sync(
    arg: *mut wire_cst_enum_with_item_tuple_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_with_item_tuple_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_sync(
    weekday: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_enum_parameter_twin_sync_impl(weekday)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_sync(
    val: *mut wire_cst_kitchen_sink_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_enum_struct_twin_sync_impl(val)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_sync(
    input: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_return_enum_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_sync(
    measure: *mut wire_cst_measure_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_multiply_by_ten_twin_sync_impl(measure)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_sync(
    note: *mut wire_cst_note_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_print_note_twin_sync_impl(note)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_simple_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_with_item_mixed_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_with_item_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_with_item_tuple_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_enum_parameter_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_enum_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_return_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_multiply_by_ten_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_print_note_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_EventTwinRustAsync_as_string_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_event_twin_rust_async,
) {
    wire_EventTwinRustAsync_as_string_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_close_event_listener_twin_rust_async(port_: i64) {
    wire_close_event_listener_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_event_twin_rust_async(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
) {
    wire_create_event_twin_rust_async_impl(port_, address, payload)
}

#[no_mangle]
pub extern "C" fn wire_register_event_listener_twin_rust_async(port_: i64) {
    wire_register_event_listener_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_close_event_listener_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_close_event_listener_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_event_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_event_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_register_event_listener_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_register_event_listener_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_EventTwinSse_as_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_EventTwinSse_as_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_close_event_listener_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_close_event_listener_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_event_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_event_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_register_event_listener_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_register_event_listener_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_new_twin_rust_async(
    port_: i64,
    message: *mut wire_cst_list_prim_u_8,
) {
    wire_CustomStructTwinRustAsync_new_twin_rust_async_impl(port_, message)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_rust_async,
) {
    wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_rust_async,
) {
    wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async(
    port_: i64,
) {
    wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async(
    port_: i64,
) {
    wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_new_twin_rust_async(port_: i64, value: u32) {
    wire_SomeStructTwinRustAsync_new_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_rust_async,
) {
    wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_rust_async,
) {
    wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_rust_async(port_: i64) {
    wire_custom_enum_error_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_rust_async(port_: i64) {
    wire_custom_enum_error_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_rust_async(port_: i64, arg: u32) {
    wire_custom_enum_error_return_ok_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_custom_nested_error_outer_twin_rust_async,
) {
    wire_custom_nested_error_return_error_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_custom_struct_error_twin_rust_async,
) {
    wire_custom_struct_error_return_error_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_rust_async(port_: i64) {
    wire_func_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_rust_async(port_: i64) {
    wire_func_type_fallible_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_rust_async(port_: i64) {
    wire_func_type_infallible_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_rust_async(port_: i64) {
    wire_panic_with_custom_result_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_rust_async(port_: i64) {
    wire_return_custom_nested_error_1_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_rust_async(port_: i64) {
    wire_return_custom_nested_error_1_variant1_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_rust_async(port_: i64) {
    wire_return_custom_nested_error_2_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_rust_async(port_: i64) {
    wire_return_custom_struct_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_rust_async(port_: i64) {
    wire_return_custom_struct_ok_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_rust_async(port_: i64) {
    wire_return_err_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_rust_async(port_: i64, variant: u32) {
    wire_return_error_variant_twin_rust_async_impl(port_, variant)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_rust_async(port_: i64) {
    wire_return_ok_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_rust_async(port_: i64) {
    wire_stream_sink_throw_anyhow_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_rust_async(port_: i64) {
    wire_throw_anyhow_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_ok_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_nested_error_return_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_struct_error_return_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_fallible_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_infallible_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_with_custom_result_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_variant1_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_2_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_ok_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_err_custom_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_error_variant_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_ok_custom_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_throw_anyhow_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_throw_anyhow_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_ok_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_nested_error_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_struct_error_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_fallible_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_infallible_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_with_custom_result_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_variant1_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_2_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_ok_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_err_custom_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_error_variant_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_ok_custom_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_throw_anyhow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_throw_anyhow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_new_twin_sync(
    message: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_new_twin_sync_impl(message)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync(
    that: *mut wire_cst_custom_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync(
    that: *mut wire_cst_custom_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_new_twin_sync(
    value: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_new_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync(
    that: *mut wire_cst_some_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync(
    that: *mut wire_cst_some_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_enum_error_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_enum_error_return_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_sync(
    arg: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_enum_error_return_ok_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_sync(
    arg: *mut wire_cst_custom_nested_error_outer_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_nested_error_return_error_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_sync(
    arg: *mut wire_cst_custom_struct_error_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_struct_error_return_error_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_return_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_type_fallible_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_type_infallible_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_panic_with_custom_result_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_nested_error_1_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_nested_error_1_variant1_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_nested_error_2_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_struct_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_struct_ok_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_err_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_sync(
    variant: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_error_variant_twin_sync_impl(variant)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_ok_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_sync(port_: i64) {
    wire_stream_sink_throw_anyhow_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_throw_anyhow_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_enum_error_panic_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_enum_error_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_enum_error_return_ok_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_nested_error_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_struct_error_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_type_fallible_panic_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_type_infallible_panic_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_panic_with_custom_result_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_nested_error_1_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_nested_error_1_variant1_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_nested_error_2_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_struct_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_struct_ok_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_err_custom_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_error_variant_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_ok_custom_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_throw_anyhow_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_throw_anyhow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_rust_async(port_: i64) {
    wire_call_new_module_system_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_rust_async(port_: i64) {
    wire_call_old_module_system_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_rust_async(port_: i64, my_enum: i32) {
    wire_use_imported_enum_twin_rust_async_impl(port_, my_enum)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_rust_async(
    port_: i64,
    my_struct: *mut wire_cst_my_struct,
) {
    wire_use_imported_struct_twin_rust_async_impl(port_, my_struct)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_new_module_system_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_old_module_system_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_new_module_system_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_old_module_system_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_call_new_module_system_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_call_old_module_system_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_sync(
    my_enum: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_imported_enum_twin_sync_impl(my_enum)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_sync(
    my_struct: *mut wire_cst_my_struct,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_imported_struct_twin_sync_impl(my_struct)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_call_new_module_system_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_call_old_module_system_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_imported_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_imported_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async_impl(port_, that, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async(
    port_: i64,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async_impl(
        port_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async_impl(
        port_, key, max,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async_impl(
        port_, that, key, max,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_new_twin_rust_async(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinRustAsync_new_twin_rust_async_impl(port_, a)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinRustAsync_sum_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_sum_with_twin_rust_async,
    y: u32,
    z: u32,
) {
    wire_SumWithTwinRustAsync_sum_twin_rust_async_impl(port_, that, y, z)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_rust_async(port_: i64, a: u32, b: u32, c: u32) {
    wire_get_sum_array_twin_rust_async_impl(port_, a, b, c)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_rust_async(port_: i64) {
    wire_get_sum_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSse_concatenate_static_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_concatenate_static_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSse_concatenate_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_concatenate_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinSse_sum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SumWithTwinSse_sum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_concatenate_static_twin_sync(
    a: *mut wire_cst_list_prim_u_8,
    b: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConcatenateWithTwinSync_concatenate_static_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_concatenate_twin_sync(
    that: *mut wire_cst_concatenate_with_twin_sync,
    b: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConcatenateWithTwinSync_concatenate_twin_sync_impl(that, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync(
    port_: i64,
) {
    wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_sync,
) {
    wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_sync,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync_impl(port_, that, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_new_twin_sync(
    a: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConcatenateWithTwinSync_new_twin_sync_impl(a)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinSync_sum_twin_sync(
    that: *mut wire_cst_sum_with_twin_sync,
    y: u32,
    z: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SumWithTwinSync_sum_twin_sync_impl(that, y, z)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_sync(
    a: u32,
    b: u32,
    c: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_sum_array_twin_sync_impl(a, b, c)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_sum_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinSyncSse_sum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SumWithTwinSyncSse_sum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_sum_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_sum_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_rust_async(port_: i64) {
    wire_app_settings_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_rust_async(port_: i64) {
    wire_app_settings_vec_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_rust_async(port_: i64, nums: *mut wire_cst_numbers) {
    wire_first_number_twin_rust_async_impl(port_, nums)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_rust_async(port_: i64, seqs: *mut wire_cst_sequences) {
    wire_first_sequence_twin_rust_async_impl(port_, seqs)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_rust_async(port_: i64) {
    wire_get_app_settings_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_rust_async(port_: i64) {
    wire_get_fallible_app_settings_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_rust_async(port_: i64) {
    wire_get_message_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_rust_async(
    port_: i64,
    app_settings: *mut wire_cst_application_settings,
) {
    wire_is_app_embedded_twin_rust_async_impl(port_, app_settings)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_rust_async(port_: i64) {
    wire_mirror_struct_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_rust_async(port_: i64) {
    wire_mirror_tuple_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_rust_async(port_: i64, num: i32, times: usize) {
    wire_repeat_number_twin_rust_async_impl(port_, num, times)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_rust_async(port_: i64, seq: i32, times: usize) {
    wire_repeat_sequence_twin_rust_async_impl(port_, seq, times)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_rust_async(port_: i64) {
    wire_test_contains_mirrored_sub_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_fallible_of_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_rust_async(port_: i64) {
    wire_test_list_of_nested_enums_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_nested_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_rust_async(port_: i64, nested: bool) {
    wire_test_raw_string_enum_mirrored_twin_rust_async_impl(port_, nested)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_vec_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_number_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_sequence_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_app_settings_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_fallible_app_settings_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_message_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_is_app_embedded_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_struct_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_tuple_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_number_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_sequence_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_contains_mirrored_sub_struct_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_nested_raw_string_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_enum_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_mirrored_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_vec_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_number_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_sequence_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_app_settings_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_fallible_app_settings_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_message_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_is_app_embedded_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_struct_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_tuple_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_number_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_sequence_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_contains_mirrored_sub_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_fallible_of_raw_string_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_nested_enums_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_raw_nested_string_mirrored_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_nested_raw_string_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_enum_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_sync(port_: i64) {
    wire_app_settings_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_sync(port_: i64) {
    wire_app_settings_vec_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_sync(
    nums: *mut wire_cst_numbers,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_first_number_twin_sync_impl(nums)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_sync(
    seqs: *mut wire_cst_sequences,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_first_sequence_twin_sync_impl(seqs)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_app_settings_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_fallible_app_settings_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_message_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_sync(
    app_settings: *mut wire_cst_application_settings,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_is_app_embedded_twin_sync_impl(app_settings)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_sync(port_: i64) {
    wire_mirror_struct_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_sync(port_: i64) {
    wire_mirror_tuple_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_sync(
    num: i32,
    times: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_repeat_number_twin_sync_impl(num, times)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_sync(
    seq: i32,
    times: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_repeat_sequence_twin_sync_impl(seq, times)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_contains_mirrored_sub_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_fallible_of_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_list_of_nested_enums_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_list_of_raw_nested_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_nested_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_sync(
    nested: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_raw_string_enum_mirrored_twin_sync_impl(nested)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_vec_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_first_number_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_first_sequence_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_app_settings_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_fallible_app_settings_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_message_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_is_app_embedded_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_struct_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_tuple_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_repeat_number_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_repeat_sequence_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_contains_mirrored_sub_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_fallible_of_raw_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_list_of_nested_enums_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_nested_raw_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_raw_string_enum_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_raw_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_rust_async(port_: i64) {
    wire_handle_big_buffers_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_rust_async(
    port_: i64,
    s: *mut wire_cst_my_tree_node_twin_rust_async,
) {
    wire_handle_complex_struct_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_rust_async(
    port_: i64,
    s: *mut wire_cst_my_nested_struct_twin_rust_async,
) {
    wire_handle_nested_struct_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_rust_async(port_: i64, s: *mut wire_cst_list_prim_u_8) {
    wire_handle_string_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) {
    wire_handle_struct_twin_rust_async_impl(port_, arg, boxed)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_rust_async(port_: i64, v: *mut wire_cst_list_prim_u_8) {
    wire_handle_vec_u8_twin_rust_async_impl(port_, v)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_rust_async(
    port_: i64,
    weekdays: *mut wire_cst_list_weekdays_twin_rust_async,
) {
    wire_list_of_primitive_enums_twin_rust_async_impl(port_, weekdays)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_rust_async(
    port_: i64,
    abc: *mut wire_cst_abc_twin_rust_async,
) {
    wire_test_abc_enum_twin_rust_async_impl(port_, abc)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_rust_async(
    port_: i64,
    se: *mut wire_cst_struct_with_enum_twin_rust_async,
) {
    wire_test_struct_with_enum_twin_rust_async_impl(port_, se)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_big_buffers_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_complex_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_nested_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_u8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_list_of_primitive_enums_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_abc_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_struct_with_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_big_buffers_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_complex_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_nested_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_list_of_primitive_enums_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_abc_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_struct_with_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_big_buffers_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_sync(
    s: *mut wire_cst_my_tree_node_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_complex_struct_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_sync(
    s: *mut wire_cst_my_nested_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_nested_struct_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_sync(
    s: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_string_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_sync(
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_struct_twin_sync_impl(arg, boxed)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_sync(
    v: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_vec_u8_twin_sync_impl(v)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_sync(
    weekdays: *mut wire_cst_list_weekdays_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_list_of_primitive_enums_twin_sync_impl(weekdays)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_sync(
    abc: *mut wire_cst_abc_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_abc_enum_twin_sync_impl(abc)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_sync(
    se: *mut wire_cst_struct_with_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_struct_with_enum_twin_sync_impl(se)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_big_buffers_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_complex_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_nested_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_vec_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_list_of_primitive_enums_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_abc_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_struct_with_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_rust_async(
    port_: i64,
    empty: *mut wire_cst_empty_twin_rust_async,
) {
    wire_empty_struct_twin_rust_async_impl(port_, empty)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_rust_async(port_: i64) {
    wire_func_return_unit_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_rust_async(port_: i64, arg: *mut wire_cst_list_prim_u_8) {
    wire_func_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_rust_async(
    port_: i64,
    l: *mut wire_cst_list_my_size,
) {
    wire_handle_list_of_struct_twin_rust_async_impl(port_, l)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_rust_async(
    port_: i64,
    names: *mut wire_cst_list_String,
) {
    wire_handle_string_list_twin_rust_async_impl(port_, names)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_empty_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_unit_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_string_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_list_of_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_list_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_empty_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_unit_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_list_of_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_list_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_sync(
    empty: *mut wire_cst_empty_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_empty_struct_twin_sync_impl(empty)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_return_unit_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_sync(
    arg: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_sync(
    l: *mut wire_cst_list_my_size,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_list_of_struct_twin_sync_impl(l)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_sync(
    names: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_string_list_twin_sync_impl(names)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_empty_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_return_unit_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_list_of_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_string_list_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_new_type_int_twin_rust_async,
) {
    wire_handle_newtype_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_newtype_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_newtype_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_sync(
    arg: *mut wire_cst_new_type_int_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_newtype_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_newtype_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_normal(
    port_: i64,
    arg: *mut bool,
) {
    wire_example_optional_primitive_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_normal(port_: i64, arg: *mut f32) {
    wire_example_optional_primitive_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_normal(port_: i64, arg: *mut f64) {
    wire_example_optional_primitive_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_normal(port_: i64, arg: *mut i16) {
    wire_example_optional_primitive_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_normal(port_: i64, arg: *mut i32) {
    wire_example_optional_primitive_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_normal(port_: i64, arg: *mut i64) {
    wire_example_optional_primitive_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_normal(port_: i64, arg: *mut i8) {
    wire_example_optional_primitive_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_normal(port_: i64, arg: *mut u16) {
    wire_example_optional_primitive_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_normal(port_: i64, arg: *mut u32) {
    wire_example_optional_primitive_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_normal(port_: i64, arg: *mut u64) {
    wire_example_optional_primitive_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_normal(port_: i64, arg: *mut u8) {
    wire_example_optional_primitive_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_rust_async(
    port_: i64,
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) {
    wire_primitive_optional_types_twin_rust_async_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_optional_types_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_optional_types_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_sync(
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_primitive_optional_types_twin_sync_impl(my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_primitive_optional_types_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_rust_async(
    port_: i64,
    arg: *mut bool,
) {
    wire_example_optional_primitive_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_rust_async(
    port_: i64,
    arg: *mut f32,
) {
    wire_example_optional_primitive_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_rust_async(
    port_: i64,
    arg: *mut f64,
) {
    wire_example_optional_primitive_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_rust_async(
    port_: i64,
    arg: *mut i16,
) {
    wire_example_optional_primitive_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_rust_async(
    port_: i64,
    arg: *mut i32,
) {
    wire_example_optional_primitive_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_rust_async(
    port_: i64,
    arg: *mut i64,
) {
    wire_example_optional_primitive_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_rust_async(
    port_: i64,
    arg: *mut i8,
) {
    wire_example_optional_primitive_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_rust_async(
    port_: i64,
    arg: *mut u16,
) {
    wire_example_optional_primitive_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_rust_async(
    port_: i64,
    arg: *mut u32,
) {
    wire_example_optional_primitive_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_rust_async(
    port_: i64,
    arg: *mut u64,
) {
    wire_example_optional_primitive_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_rust_async(
    port_: i64,
    arg: *mut u8,
) {
    wire_example_optional_primitive_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_bool_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_f32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_f64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i16_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i8_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u16_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u8_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_bool_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_f32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_f64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_i8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_optional_primitive_type_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_sync(
    arg: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_sync(
    arg: *mut f32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_sync(
    arg: *mut f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_sync(
    arg: *mut i16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_sync(
    arg: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_sync(
    arg: *mut i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_sync(
    arg: *mut i8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_sync(
    arg: *mut u16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_sync(
    arg: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_sync(
    arg: *mut u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_sync(
    arg: *mut u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_optional_primitive_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_bool_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_f32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_f64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_i16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_i64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_i8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_u16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_u64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_optional_primitive_type_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_rust_async(port_: i64, opt: *mut f64) {
    wire_handle_increment_boxed_optional_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_rust_async(
    port_: i64,
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_rust_async,
) {
    wire_handle_option_box_arguments_twin_rust_async_impl(
        port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_rust_async(
    port_: i64,
    opt: *mut wire_cst_exotic_optionals_twin_rust_async,
) {
    wire_handle_optional_increment_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_rust_async(port_: i64, left: f64, right: f64) {
    wire_handle_optional_return_twin_rust_async_impl(port_, left, right)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_rust_async(
    port_: i64,
    document: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_optional_struct_twin_rust_async_impl(port_, document)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_rust_async(
    port_: i64,
    opt: *mut wire_cst_opt_vecs_twin_rust_async,
) {
    wire_handle_vec_of_opts_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_increment_boxed_optional_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_option_box_arguments_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_increment_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_return_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_opts_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_increment_boxed_optional_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_option_box_arguments_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_increment_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_opts_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_sync(
    opt: *mut f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_increment_boxed_optional_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_sync(
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_option_box_arguments_twin_sync_impl(
        i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_sync(
    opt: *mut wire_cst_exotic_optionals_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_optional_increment_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_sync(
    left: f64,
    right: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_optional_return_twin_sync_impl(left, right)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_sync(
    document: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_optional_struct_twin_sync_impl(document)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_sync(
    opt: *mut wire_cst_opt_vecs_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_vec_of_opts_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_increment_boxed_optional_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_option_box_arguments_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_optional_increment_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_optional_return_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_optional_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_vec_of_opts_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_normal(port_: i64, arg: bool) {
    wire_example_primitive_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_normal(port_: i64, arg: f32) {
    wire_example_primitive_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_normal(port_: i64, arg: f64) {
    wire_example_primitive_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_normal(port_: i64, arg: i16) {
    wire_example_primitive_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_normal(port_: i64, arg: i32) {
    wire_example_primitive_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_normal(port_: i64, arg: i64) {
    wire_example_primitive_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_normal(port_: i64, arg: i8) {
    wire_example_primitive_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_normal(port_: i64, arg: u16) {
    wire_example_primitive_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_normal(port_: i64, arg: u32) {
    wire_example_primitive_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_normal(port_: i64, arg: u64) {
    wire_example_primitive_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_normal(port_: i64, arg: u8) {
    wire_example_primitive_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_bool,
) {
    wire_example_primitive_list_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_32,
) {
    wire_example_primitive_list_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_64,
) {
    wire_example_primitive_list_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_16,
) {
    wire_example_primitive_list_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32,
) {
    wire_example_primitive_list_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_64,
) {
    wire_example_primitive_list_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_8,
) {
    wire_example_primitive_list_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_16,
) {
    wire_example_primitive_list_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_32,
) {
    wire_example_primitive_list_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_64,
) {
    wire_example_primitive_list_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8,
) {
    wire_example_primitive_list_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_rust_async(port_: i64, n: i32) {
    wire_handle_vec_of_primitive_twin_rust_async_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_primitive_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_primitive_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_sync(
    n: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_vec_of_primitive_twin_sync_impl(n)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_vec_of_primitive_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_bool,
) {
    wire_example_primitive_list_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_32,
) {
    wire_example_primitive_list_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_64,
) {
    wire_example_primitive_list_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_16,
) {
    wire_example_primitive_list_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32,
) {
    wire_example_primitive_list_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_64,
) {
    wire_example_primitive_list_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_8,
) {
    wire_example_primitive_list_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_16,
) {
    wire_example_primitive_list_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_32,
) {
    wire_example_primitive_list_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_64,
) {
    wire_example_primitive_list_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8,
) {
    wire_example_primitive_list_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_bool_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_f32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_f64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i16_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i8_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u16_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u8_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_bool_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_f32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_f64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_i8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_list_type_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_sync(
    arg: *mut wire_cst_list_bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_sync(
    arg: *mut wire_cst_list_prim_f_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_sync(
    arg: *mut wire_cst_list_prim_f_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_sync(
    arg: *mut wire_cst_list_prim_i_16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_sync(
    arg: *mut wire_cst_list_prim_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_sync(
    arg: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_sync(
    arg: *mut wire_cst_list_prim_i_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_sync(
    arg: *mut wire_cst_list_prim_u_16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_sync(
    arg: *mut wire_cst_list_prim_u_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_sync(
    arg: *mut wire_cst_list_prim_u_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_sync(
    arg: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_list_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_bool_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_f32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_f64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_i16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_i64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_i8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_u16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_u64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_list_type_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_rust_async(
    port_: i64,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    wire_primitive_types_twin_rust_async_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_rust_async(port_: i64, my_u32: u32) {
    wire_primitive_u32_twin_rust_async_impl(port_, my_u32)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_types_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_u32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_types_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_sync(
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_primitive_types_twin_sync_impl(my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_sync(
    my_u32: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_primitive_u32_twin_sync_impl(my_u32)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_primitive_types_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_primitive_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_rust_async(port_: i64, arg: bool) {
    wire_example_primitive_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_rust_async(port_: i64, arg: f32) {
    wire_example_primitive_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_rust_async(port_: i64, arg: f64) {
    wire_example_primitive_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_rust_async(port_: i64, arg: i16) {
    wire_example_primitive_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_rust_async(port_: i64, arg: i32) {
    wire_example_primitive_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_rust_async(port_: i64, arg: i64) {
    wire_example_primitive_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_rust_async(port_: i64, arg: i8) {
    wire_example_primitive_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_rust_async(port_: i64, arg: u16) {
    wire_example_primitive_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_rust_async(port_: i64, arg: u32) {
    wire_example_primitive_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_rust_async(port_: i64, arg: u64) {
    wire_example_primitive_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_rust_async(port_: i64, arg: u8) {
    wire_example_primitive_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_bool_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_f32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_f64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_bool_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_f32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_f64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_i8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_primitive_type_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_sync(
    arg: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_sync(
    arg: f32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_sync(
    arg: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_sync(
    arg: i16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_sync(
    arg: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_sync(
    arg: i8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_sync(
    arg: u16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_sync(
    arg: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_sync(
    arg: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_sync(
    arg: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_primitive_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_bool_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_f32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_f64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_i16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_i64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_i8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_u16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_u64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_primitive_type_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_rust_async(port_: i64) {
    wire_test_more_than_just_one_raw_string_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_rust_async(port_: i64) {
    wire_test_raw_string_item_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_item_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_more_than_just_one_raw_string_struct_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_item_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_more_than_just_one_raw_string_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_raw_string_item_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_more_than_just_one_raw_string_struct_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_raw_string_item_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_two_args_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_two_args_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_new_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_new_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: i32,
    adder: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sync_impl(arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_own_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_arg_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_callable_arg_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_return_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_callable_return_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync(
    a: *const std::ffi::c_void,
    b: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_arg_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_plus_sign_arg_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_return_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_plus_sign_return_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_return_own_twin_sync(
    initial: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_own_twin_sync_impl(initial)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_two_args_twin_sync(
    a: *const std::ffi::c_void,
    b: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_two_args_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_arg_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_callable_arg_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_return_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_callable_return_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_return_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_plus_sign_return_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_two_args_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_two_args_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_frb_sync_generator_test_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_frb_sync_generator_test_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_create_non_clone_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_create_non_clone_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_create_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_create_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_create_sync_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_create_sync_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_option_rust_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_option_rust_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_sync_run_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_run_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_rust_async(port_: i64) {
    wire_create_array_opaque_enum_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_rust_async(port_: i64) {
    wire_create_nested_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_rust_async(port_: i64) {
    wire_create_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_create_option_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_rust_async(port_: i64) {
    wire_create_sync_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_rust_async(port_: i64) {
    wire_frb_generator_test_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_rust_async(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_array_run_twin_rust_async_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_rust_async(port_: i64) {
    wire_opaque_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_rust_async(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_vec_run_twin_rust_async_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_rust_async(port_: i64) {
    wire_opaque_vec_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_rust_async,
) {
    wire_run_enum_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_rust_async,
) {
    wire_run_nested_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_rust_async(port_: i64, clone: *const std::ffi::c_void) {
    wire_run_non_clone_twin_rust_async_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_rust_async(port_: i64, opaque: *const std::ffi::c_void) {
    wire_run_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_run_opaque_with_delay_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_unwrap_rust_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_array_opaque_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_option_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_sync_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_frb_generator_test_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_run_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_run_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_enum_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_nested_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_non_clone_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_with_delay_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_unwrap_rust_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_array_opaque_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_option_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_sync_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_frb_generator_test_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_run_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_run_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_enum_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_nested_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_non_clone_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_with_delay_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_unwrap_rust_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_array_opaque_enum_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_nested_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_sync(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_option_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_sync_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_frb_generator_test_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_sync(
    data: *mut wire_cst_list_RustOpaque_hide_data,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_array_run_twin_sync_impl(data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_sync(
    data: *mut wire_cst_list_RustOpaque_hide_data,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_vec_run_twin_sync_impl(data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_vec_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_sync(
    opaque: *mut wire_cst_enum_opaque_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_enum_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_sync(
    opaque: *mut wire_cst_opaque_nested_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_nested_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_sync(
    clone: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_non_clone_twin_sync_impl(clone)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_opaque_with_delay_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_unwrap_rust_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_array_opaque_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_nested_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_option_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_sync_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_frb_generator_test_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_array_run_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_vec_run_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_vec_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_enum_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_nested_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_non_clone_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_opaque_with_delay_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_unwrap_rust_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_rust_async(port_: i64, a: i32, b: i32) {
    wire_simple_adder_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_simple_adder_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_simple_adder_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_sync(
    a: i32,
    b: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_simple_adder_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_simple_adder_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_realistic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_realistic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_error_twin_rust_async(port_: i64) {
    wire_func_stream_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_panic_twin_rust_async(port_: i64) {
    wire_func_stream_return_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_sink_arg_position_twin_rust_async(port_: i64, a: u32, b: u32) {
    wire_func_stream_sink_arg_position_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_of_struct_twin_rust_async(port_: i64) {
    wire_handle_stream_of_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_1_twin_rust_async(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_1_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_2_twin_rust_async(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_2_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_3_twin_rust_async(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_3_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_sink_arg_position_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_sink_arg_position_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_of_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_of_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_1_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_2_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_2_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_3_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_3_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_sink_arg_position_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_sink_arg_position_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_of_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_of_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_1_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_2_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_2_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_3_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_3_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_one_field_twin_rust_async,
) {
    wire_func_struct_with_one_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_two_field_twin_rust_async,
) {
    wire_func_struct_with_two_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_zero_field_twin_rust_async,
) {
    wire_func_struct_with_zero_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_rust_async,
) {
    wire_func_tuple_struct_with_one_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_rust_async,
) {
    wire_func_tuple_struct_with_two_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_one_field_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_two_field_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_zero_field_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_one_field_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_two_field_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_one_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_two_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_zero_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_one_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_two_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_sync(
    arg: *mut wire_cst_struct_with_one_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_struct_with_one_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_sync(
    arg: *mut wire_cst_struct_with_two_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_struct_with_two_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_sync(
    arg: *mut wire_cst_struct_with_zero_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_struct_with_zero_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_sync(
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_tuple_struct_with_one_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_sync(
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_tuple_struct_with_two_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_struct_with_one_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_struct_with_two_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_struct_with_zero_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_tuple_struct_with_one_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_tuple_struct_with_two_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_rust_async(
    port_: i64,
    value: *mut wire_cst_list_record_string_i_32,
) {
    wire_test_tuple_2_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_rust_async(
    port_: i64,
    value: *mut wire_cst_record_string_i_32,
) {
    wire_test_tuple_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_2_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_2_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_sync(
    value: *mut wire_cst_list_record_string_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_tuple_2_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_sync(
    value: *mut wire_cst_record_string_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_tuple_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_tuple_2_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_tuple_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_rust_async(port_: i64, input: u64) {
    wire_handle_type_alias_id_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_rust_async(port_: i64, input: u64) {
    wire_handle_type_alias_model_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_rust_async(port_: i64, input: u64) {
    wire_handle_type_nest_alias_id_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_model_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_nest_alias_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_model_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_nest_alias_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_type_alias_id_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_type_alias_model_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_type_nest_alias_id_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_type_alias_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_type_alias_model_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_type_nest_alias_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_uuids_twin_rust_async(
    port_: i64,
    ids: *mut wire_cst_feature_uuid_twin_rust_async,
) {
    wire_handle_nested_uuids_twin_rust_async_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuid_twin_rust_async(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_handle_uuid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_uuids_twin_sync(
    ids: *mut wire_cst_feature_uuid_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_nested_uuids_twin_sync_impl(ids)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuid_twin_sync(
    id: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_uuid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_normal(port_: i64) {
    wire_test_more_than_just_one_raw_string_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_normal(port_: i64) {
    wire_test_raw_string_item_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal(port_: i64) {
    wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_new_twin_normal(port_: i64) {
    wire_NonCloneSimpleTwinNormal_new_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal(port_: i64) {
    wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: i32,
    adder: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_normal_impl(port_, arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_and_return_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_arg_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_callable_arg_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_return_twin_normal(port_: i64) {
    wire_rust_auto_opaque_callable_return_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal(
    port_: i64,
    a: *const std::ffi::c_void,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_arg_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_return_twin_normal(port_: i64) {
    wire_rust_auto_opaque_plus_sign_return_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_return_own_twin_normal(port_: i64, initial: i32) {
    wire_rust_auto_opaque_return_own_twin_normal_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_one_twin_normal(port_: i64) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_two_twin_normal(port_: i64) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_two_args_twin_normal(
    port_: i64,
    a: *const std::ffi::c_void,
    b: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_two_args_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_normal(port_: i64) {
    wire_create_array_opaque_enum_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_normal(port_: i64) {
    wire_create_nested_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_normal(port_: i64) {
    wire_create_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_normal(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_create_option_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_normal(port_: i64) {
    wire_create_sync_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_normal(port_: i64) {
    wire_frb_generator_test_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_normal(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_array_run_twin_normal_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_normal(port_: i64) {
    wire_opaque_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_normal(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_vec_run_twin_normal_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_normal(port_: i64) {
    wire_opaque_vec_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_normal,
) {
    wire_run_enum_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_normal,
) {
    wire_run_nested_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_normal(port_: i64, clone: *const std::ffi::c_void) {
    wire_run_non_clone_twin_normal_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_run_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_run_opaque_with_delay_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_unwrap_rust_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_frb_sync_generator_test_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_frb_sync_generator_test_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_create_non_clone_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_create_non_clone_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_create_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_create_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_create_sync_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_create_sync_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_option_rust_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_option_rust_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_run_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_run_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_normal(port_: i64, a: i32, b: i32) {
    wire_simple_adder_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_error_twin_normal(port_: i64) {
    wire_func_stream_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_panic_twin_normal(port_: i64) {
    wire_func_stream_return_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_sink_arg_position_twin_normal(port_: i64, a: u32, b: u32) {
    wire_func_stream_sink_arg_position_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_of_struct_twin_normal(port_: i64) {
    wire_handle_stream_of_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_1_twin_normal(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_1_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_2_twin_normal(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_2_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_3_twin_normal(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_3_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_realistic_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8,
) {
    wire_func_stream_realistic_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_one_field_twin_normal,
) {
    wire_func_struct_with_one_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_two_field_twin_normal,
) {
    wire_func_struct_with_two_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_zero_field_twin_normal,
) {
    wire_func_struct_with_zero_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_normal,
) {
    wire_func_tuple_struct_with_one_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_normal,
) {
    wire_func_tuple_struct_with_two_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_normal(
    port_: i64,
    value: *mut wire_cst_list_record_string_i_32,
) {
    wire_test_tuple_2_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_normal(port_: i64, value: *mut wire_cst_record_string_i_32) {
    wire_test_tuple_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_normal(port_: i64, input: u64) {
    wire_handle_type_alias_id_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_normal(port_: i64, input: u64) {
    wire_handle_type_alias_model_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_normal(port_: i64, input: u64) {
    wire_handle_type_nest_alias_id_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_uuids_twin_normal(
    port_: i64,
    ids: *mut wire_cst_feature_uuid_twin_normal,
) {
    wire_handle_nested_uuids_twin_normal_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuid_twin_normal(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_handle_uuid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn dart_opaque_dart2rust_encode(
    handle: flutter_rust_bridge::for_generated::dart_sys::Dart_Handle,
) -> *const std::ffi::c_void {
    unsafe {
        flutter_rust_bridge::for_generated::dart_opaque_dart2rust_encode(
            &*FLUTTER_RUST_BRIDGE_HANDLER,
            handle,
        ) as _
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_MutexHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<Mutex<HideData>>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_MutexHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<Mutex<HideData>>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_RwLockHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<RwLock<HideData>>(
            ptr,
        );
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_RwLockHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<RwLock<HideData>>(
            ptr,
        );
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinRustAsync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinRustAsync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinRustAsyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinRustAsyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinSyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinSyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_frb_opaque_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueSyncReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueSyncReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::HideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::HideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_i_32(ptr: *const std::ffi::c_void) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<i32>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_i_32(ptr: *const std::ffi::c_void) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<i32>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_non_clone_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::NonCloneData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_non_clone_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::NonCloneData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_non_send_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::NonSendHideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_non_send_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::NonSendHideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
            >,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
            >,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSse>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSse>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSse + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSse + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSyncSse + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSyncSse + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSse>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn cst_new_box_application_env() -> *mut wire_cst_application_env {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_env::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Duration(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Naive(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Utc(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_DartOpaque(
    value: *const std::ffi::c_void,
) -> *mut *const std::ffi::c_void {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_RustOpaque_hide_data(
    value: *const std::ffi::c_void,
) -> *mut *const std::ffi::c_void {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_normal() -> *mut wire_cst_a_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_a_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_rust_async() -> *mut wire_cst_a_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_a_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_rust_async_sse() -> *mut wire_cst_a_twin_rust_async_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_a_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_sse() -> *mut wire_cst_a_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_a_twin_sse::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_sync() -> *mut wire_cst_a_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_a_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_sync_sse() -> *mut wire_cst_a_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_a_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_normal() -> *mut wire_cst_abc_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_rust_async() -> *mut wire_cst_abc_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_rust_async_sse(
) -> *mut wire_cst_abc_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_sse() -> *mut wire_cst_abc_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_abc_twin_sse::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_sync() -> *mut wire_cst_abc_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_abc_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_sync_sse() -> *mut wire_cst_abc_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_application_env() -> *mut wire_cst_application_env {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_env::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_application_settings() -> *mut wire_cst_application_settings {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_settings::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_normal() -> *mut wire_cst_attribute_twin_normal
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_rust_async(
) -> *mut wire_cst_attribute_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_rust_async_sse(
) -> *mut wire_cst_attribute_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_sse() -> *mut wire_cst_attribute_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_sync() -> *mut wire_cst_attribute_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_sync_sse(
) -> *mut wire_cst_attribute_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_normal() -> *mut wire_cst_b_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_b_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_rust_async() -> *mut wire_cst_b_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_b_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_rust_async_sse() -> *mut wire_cst_b_twin_rust_async_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_b_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_sse() -> *mut wire_cst_b_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_b_twin_sse::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_sync() -> *mut wire_cst_b_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_b_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_sync_sse() -> *mut wire_cst_b_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_b_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_normal() -> *mut wire_cst_c_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_c_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_rust_async() -> *mut wire_cst_c_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_c_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_rust_async_sse() -> *mut wire_cst_c_twin_rust_async_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_c_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_sse() -> *mut wire_cst_c_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_c_twin_sse::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_sync() -> *mut wire_cst_c_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_c_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_sync_sse() -> *mut wire_cst_c_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_c_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_normal(
) -> *mut wire_cst_concatenate_with_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_rust_async(
) -> *mut wire_cst_concatenate_with_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_rust_async_sse(
) -> *mut wire_cst_concatenate_with_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_sse(
) -> *mut wire_cst_concatenate_with_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_sync(
) -> *mut wire_cst_concatenate_with_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_sync_sse(
) -> *mut wire_cst_concatenate_with_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_2_twin_normal(
) -> *mut wire_cst_custom_nested_error_2_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_2_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_2_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_2_twin_rust_async_sse(
) -> *mut wire_cst_custom_nested_error_2_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_2_twin_sse(
) -> *mut wire_cst_custom_nested_error_2_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_2_twin_sync(
) -> *mut wire_cst_custom_nested_error_2_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_2_twin_sync_sse(
) -> *mut wire_cst_custom_nested_error_2_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_normal(
) -> *mut wire_cst_custom_nested_error_inner_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_inner_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_rust_async_sse(
) -> *mut wire_cst_custom_nested_error_inner_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_sse(
) -> *mut wire_cst_custom_nested_error_inner_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_sync(
) -> *mut wire_cst_custom_nested_error_inner_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_sync_sse(
) -> *mut wire_cst_custom_nested_error_inner_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_normal(
) -> *mut wire_cst_custom_nested_error_outer_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_outer_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_rust_async_sse(
) -> *mut wire_cst_custom_nested_error_outer_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_sse(
) -> *mut wire_cst_custom_nested_error_outer_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_sync(
) -> *mut wire_cst_custom_nested_error_outer_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_sync_sse(
) -> *mut wire_cst_custom_nested_error_outer_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_normal(
) -> *mut wire_cst_custom_struct_error_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_rust_async(
) -> *mut wire_cst_custom_struct_error_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_rust_async_sse(
) -> *mut wire_cst_custom_struct_error_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_sse(
) -> *mut wire_cst_custom_struct_error_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_sync(
) -> *mut wire_cst_custom_struct_error_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_sync_sse(
) -> *mut wire_cst_custom_struct_error_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_normal(
) -> *mut wire_cst_custom_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_rust_async(
) -> *mut wire_cst_custom_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_rust_async_sse(
) -> *mut wire_cst_custom_struct_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_sse(
) -> *mut wire_cst_custom_struct_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_sync(
) -> *mut wire_cst_custom_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_sync_sse(
) -> *mut wire_cst_custom_struct_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_normal(
) -> *mut wire_cst_customized_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_rust_async(
) -> *mut wire_cst_customized_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_rust_async_sse(
) -> *mut wire_cst_customized_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_sse() -> *mut wire_cst_customized_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_sync() -> *mut wire_cst_customized_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_sync_sse(
) -> *mut wire_cst_customized_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_normal(
) -> *mut wire_cst_dart_opaque_nested_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_rust_async(
) -> *mut wire_cst_dart_opaque_nested_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_rust_async_sse(
) -> *mut wire_cst_dart_opaque_nested_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_sse(
) -> *mut wire_cst_dart_opaque_nested_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_sync(
) -> *mut wire_cst_dart_opaque_nested_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_sync_sse(
) -> *mut wire_cst_dart_opaque_nested_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_element_twin_normal() -> *mut wire_cst_element_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_element_twin_rust_async(
) -> *mut wire_cst_element_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_element_twin_rust_async_sse(
) -> *mut wire_cst_element_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_element_twin_sse() -> *mut wire_cst_element_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_element_twin_sync() -> *mut wire_cst_element_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_element_twin_sync_sse() -> *mut wire_cst_element_twin_sync_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_normal() -> *mut wire_cst_empty_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_rust_async() -> *mut wire_cst_empty_twin_rust_async
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_rust_async_sse(
) -> *mut wire_cst_empty_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_sse() -> *mut wire_cst_empty_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_sync() -> *mut wire_cst_empty_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_sync_sse() -> *mut wire_cst_empty_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_normal(
) -> *mut wire_cst_enum_dart_opaque_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_rust_async(
) -> *mut wire_cst_enum_dart_opaque_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_rust_async_sse(
) -> *mut wire_cst_enum_dart_opaque_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_sse(
) -> *mut wire_cst_enum_dart_opaque_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_sync(
) -> *mut wire_cst_enum_dart_opaque_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_sync_sse(
) -> *mut wire_cst_enum_dart_opaque_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_normal(
) -> *mut wire_cst_enum_opaque_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_rust_async(
) -> *mut wire_cst_enum_opaque_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_rust_async_sse(
) -> *mut wire_cst_enum_opaque_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_sse() -> *mut wire_cst_enum_opaque_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_sync() -> *mut wire_cst_enum_opaque_twin_sync
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_sync_sse(
) -> *mut wire_cst_enum_opaque_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_normal(
) -> *mut wire_cst_enum_with_item_mixed_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_rust_async(
) -> *mut wire_cst_enum_with_item_mixed_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_rust_async_sse(
) -> *mut wire_cst_enum_with_item_mixed_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_sse(
) -> *mut wire_cst_enum_with_item_mixed_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_sync(
) -> *mut wire_cst_enum_with_item_mixed_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_sync_sse(
) -> *mut wire_cst_enum_with_item_mixed_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_normal(
) -> *mut wire_cst_enum_with_item_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_rust_async(
) -> *mut wire_cst_enum_with_item_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_rust_async_sse(
) -> *mut wire_cst_enum_with_item_struct_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_sse(
) -> *mut wire_cst_enum_with_item_struct_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_sync(
) -> *mut wire_cst_enum_with_item_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_sync_sse(
) -> *mut wire_cst_enum_with_item_struct_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_normal(
) -> *mut wire_cst_enum_with_item_tuple_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_rust_async(
) -> *mut wire_cst_enum_with_item_tuple_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_rust_async_sse(
) -> *mut wire_cst_enum_with_item_tuple_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_sse(
) -> *mut wire_cst_enum_with_item_tuple_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_sync(
) -> *mut wire_cst_enum_with_item_tuple_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_sync_sse(
) -> *mut wire_cst_enum_with_item_tuple_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_event_twin_normal() -> *mut wire_cst_event_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_event_twin_rust_async() -> *mut wire_cst_event_twin_rust_async
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_event_twin_rust_async_sse(
) -> *mut wire_cst_event_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_event_twin_sse() -> *mut wire_cst_event_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_normal(
) -> *mut wire_cst_exotic_optionals_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_rust_async(
) -> *mut wire_cst_exotic_optionals_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_rust_async_sse(
) -> *mut wire_cst_exotic_optionals_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_sse(
) -> *mut wire_cst_exotic_optionals_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_sync(
) -> *mut wire_cst_exotic_optionals_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_sync_sse(
) -> *mut wire_cst_exotic_optionals_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_f_32(value: f32) -> *mut f32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_chrono_twin_normal(
) -> *mut wire_cst_feature_chrono_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_chrono_twin_rust_async(
) -> *mut wire_cst_feature_chrono_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_chrono_twin_sync(
) -> *mut wire_cst_feature_chrono_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_uuid_twin_normal(
) -> *mut wire_cst_feature_uuid_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_uuid_twin_rust_async(
) -> *mut wire_cst_feature_uuid_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_uuid_twin_sync(
) -> *mut wire_cst_feature_uuid_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_normal() -> *mut wire_cst_feed_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_rust_async(
) -> *mut wire_cst_feed_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_rust_async_sse(
) -> *mut wire_cst_feed_id_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_sse() -> *mut wire_cst_feed_id_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_sync() -> *mut wire_cst_feed_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_sync_sse() -> *mut wire_cst_feed_id_twin_sync_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_16(value: i16) -> *mut i16 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_8(value: i8) -> *mut i8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_normal(
) -> *mut wire_cst_kitchen_sink_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_rust_async(
) -> *mut wire_cst_kitchen_sink_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_rust_async_sse(
) -> *mut wire_cst_kitchen_sink_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_sse() -> *mut wire_cst_kitchen_sink_twin_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_sync(
) -> *mut wire_cst_kitchen_sink_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_sync_sse(
) -> *mut wire_cst_kitchen_sink_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_list_of_nested_raw_string_mirrored(
) -> *mut wire_cst_list_of_nested_raw_string_mirrored {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_list_of_nested_raw_string_mirrored::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_macro_struct() -> *mut wire_cst_macro_struct {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_macro_struct::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_normal() -> *mut wire_cst_measure_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_rust_async(
) -> *mut wire_cst_measure_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_rust_async_sse(
) -> *mut wire_cst_measure_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_sse() -> *mut wire_cst_measure_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_sync() -> *mut wire_cst_measure_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_sync_sse() -> *mut wire_cst_measure_twin_sync_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_normal(
) -> *mut wire_cst_message_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_rust_async(
) -> *mut wire_cst_message_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_rust_async_sse(
) -> *mut wire_cst_message_id_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_sse() -> *mut wire_cst_message_id_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_sync() -> *mut wire_cst_message_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_sync_sse(
) -> *mut wire_cst_message_id_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_normal(
) -> *mut wire_cst_my_nested_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_rust_async(
) -> *mut wire_cst_my_nested_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_rust_async_sse(
) -> *mut wire_cst_my_nested_struct_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_sse(
) -> *mut wire_cst_my_nested_struct_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_sync(
) -> *mut wire_cst_my_nested_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_sync_sse(
) -> *mut wire_cst_my_nested_struct_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_size() -> *mut wire_cst_my_size {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_size::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_struct() -> *mut wire_cst_my_struct {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_struct::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_normal(
) -> *mut wire_cst_my_tree_node_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_rust_async(
) -> *mut wire_cst_my_tree_node_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_rust_async_sse(
) -> *mut wire_cst_my_tree_node_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_sse() -> *mut wire_cst_my_tree_node_twin_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_sync(
) -> *mut wire_cst_my_tree_node_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_sync_sse(
) -> *mut wire_cst_my_tree_node_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_nested_raw_string_mirrored(
) -> *mut wire_cst_nested_raw_string_mirrored {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_nested_raw_string_mirrored::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_normal(
) -> *mut wire_cst_new_type_int_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_rust_async(
) -> *mut wire_cst_new_type_int_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_rust_async_sse(
) -> *mut wire_cst_new_type_int_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_sse() -> *mut wire_cst_new_type_int_twin_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_sync(
) -> *mut wire_cst_new_type_int_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_sync_sse(
) -> *mut wire_cst_new_type_int_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_normal() -> *mut wire_cst_note_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_rust_async() -> *mut wire_cst_note_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_rust_async_sse(
) -> *mut wire_cst_note_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_sse() -> *mut wire_cst_note_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_note_twin_sse::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_sync() -> *mut wire_cst_note_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_sync_sse() -> *mut wire_cst_note_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_numbers() -> *mut wire_cst_numbers {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_numbers::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_normal(
) -> *mut wire_cst_opaque_nested_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_rust_async(
) -> *mut wire_cst_opaque_nested_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_rust_async_sse(
) -> *mut wire_cst_opaque_nested_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_sse(
) -> *mut wire_cst_opaque_nested_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_sync(
) -> *mut wire_cst_opaque_nested_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_sync_sse(
) -> *mut wire_cst_opaque_nested_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_normal() -> *mut wire_cst_opt_vecs_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_rust_async(
) -> *mut wire_cst_opt_vecs_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_rust_async_sse(
) -> *mut wire_cst_opt_vecs_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_sse() -> *mut wire_cst_opt_vecs_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_sync() -> *mut wire_cst_opt_vecs_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_sync_sse(
) -> *mut wire_cst_opt_vecs_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_raw_string_mirrored() -> *mut wire_cst_raw_string_mirrored {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_raw_string_mirrored::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_record_string_i_32() -> *mut wire_cst_record_string_i_32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_record_string_i_32::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sequences() -> *mut wire_cst_sequences {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_sequences::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_normal(
) -> *mut wire_cst_some_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_rust_async(
) -> *mut wire_cst_some_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_rust_async_sse(
) -> *mut wire_cst_some_struct_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_sse() -> *mut wire_cst_some_struct_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_sync() -> *mut wire_cst_some_struct_twin_sync
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_sync_sse(
) -> *mut wire_cst_some_struct_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_normal(
) -> *mut wire_cst_struct_with_comments_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_rust_async(
) -> *mut wire_cst_struct_with_comments_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_rust_async_sse(
) -> *mut wire_cst_struct_with_comments_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_sse(
) -> *mut wire_cst_struct_with_comments_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_sync(
) -> *mut wire_cst_struct_with_comments_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_sync_sse(
) -> *mut wire_cst_struct_with_comments_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_normal(
) -> *mut wire_cst_struct_with_enum_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_rust_async(
) -> *mut wire_cst_struct_with_enum_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_rust_async_sse(
) -> *mut wire_cst_struct_with_enum_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_sse(
) -> *mut wire_cst_struct_with_enum_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_sync(
) -> *mut wire_cst_struct_with_enum_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_sync_sse(
) -> *mut wire_cst_struct_with_enum_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_normal(
) -> *mut wire_cst_struct_with_one_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_rust_async(
) -> *mut wire_cst_struct_with_one_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_rust_async_sse(
) -> *mut wire_cst_struct_with_one_field_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_sse(
) -> *mut wire_cst_struct_with_one_field_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_sync(
) -> *mut wire_cst_struct_with_one_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_sync_sse(
) -> *mut wire_cst_struct_with_one_field_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_normal(
) -> *mut wire_cst_struct_with_two_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_rust_async(
) -> *mut wire_cst_struct_with_two_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_rust_async_sse(
) -> *mut wire_cst_struct_with_two_field_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_sse(
) -> *mut wire_cst_struct_with_two_field_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_sync(
) -> *mut wire_cst_struct_with_two_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_sync_sse(
) -> *mut wire_cst_struct_with_two_field_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_normal(
) -> *mut wire_cst_struct_with_zero_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_rust_async(
) -> *mut wire_cst_struct_with_zero_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_rust_async_sse(
) -> *mut wire_cst_struct_with_zero_field_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_sse(
) -> *mut wire_cst_struct_with_zero_field_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_sync(
) -> *mut wire_cst_struct_with_zero_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_sync_sse(
) -> *mut wire_cst_struct_with_zero_field_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_normal() -> *mut wire_cst_sum_with_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_rust_async(
) -> *mut wire_cst_sum_with_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_rust_async_sse(
) -> *mut wire_cst_sum_with_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_sse() -> *mut wire_cst_sum_with_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_sync() -> *mut wire_cst_sum_with_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_sync_sse(
) -> *mut wire_cst_sum_with_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_normal() -> *mut wire_cst_test_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_rust_async(
) -> *mut wire_cst_test_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_rust_async_sse(
) -> *mut wire_cst_test_id_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_sse() -> *mut wire_cst_test_id_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_sync() -> *mut wire_cst_test_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_sync_sse() -> *mut wire_cst_test_id_twin_sync_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_normal(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_rust_async_sse(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_sse(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_sync(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_sync_sse(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_normal(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_rust_async_sse(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_sse(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_sync(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_sync_sse(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_16(value: u16) -> *mut u16 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_normal() -> *mut wire_cst_user_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_rust_async(
) -> *mut wire_cst_user_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_rust_async_sse(
) -> *mut wire_cst_user_id_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_sse() -> *mut wire_cst_user_id_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_sync() -> *mut wire_cst_user_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_sync_sse() -> *mut wire_cst_user_id_twin_sync_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_normal(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_rust_async(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_rust_async_sse(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_sse(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_sync(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_sync_sse(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_normal() -> *mut wire_cst_blob_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_rust_async() -> *mut wire_cst_blob_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_rust_async_sse() -> *mut wire_cst_blob_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_sse() -> *mut wire_cst_blob_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_blob_twin_sse::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_sync() -> *mut wire_cst_blob_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_sync_sse() -> *mut wire_cst_blob_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_normal() -> *mut wire_cst_distance_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_rust_async() -> *mut wire_cst_distance_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_rust_async_sse(
) -> *mut wire_cst_distance_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_sse() -> *mut wire_cst_distance_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_sync() -> *mut wire_cst_distance_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_sync_sse() -> *mut wire_cst_distance_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_normal(
) -> *mut wire_cst_exotic_optionals_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_rust_async(
) -> *mut wire_cst_exotic_optionals_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_rust_async_sse(
) -> *mut wire_cst_exotic_optionals_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_sse() -> *mut wire_cst_exotic_optionals_twin_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_sync(
) -> *mut wire_cst_exotic_optionals_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_sync_sse(
) -> *mut wire_cst_exotic_optionals_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_feed_id_twin_normal() -> *mut wire_cst_feed_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_feed_id_twin_rust_async() -> *mut wire_cst_feed_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_feed_id_twin_rust_async_sse(
) -> *mut wire_cst_feed_id_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_feed_id_twin_sse() -> *mut wire_cst_feed_id_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_feed_id_twin_sync() -> *mut wire_cst_feed_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_feed_id_twin_sync_sse() -> *mut wire_cst_feed_id_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_i_8(value: i8) -> *mut i8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_normal() -> *mut wire_cst_kitchen_sink_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_rust_async(
) -> *mut wire_cst_kitchen_sink_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_rust_async_sse(
) -> *mut wire_cst_kitchen_sink_twin_rust_async_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_sse() -> *mut wire_cst_kitchen_sink_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_sync() -> *mut wire_cst_kitchen_sink_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_sync_sse(
) -> *mut wire_cst_kitchen_sink_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_my_size() -> *mut wire_cst_my_size {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_size::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_normal() -> *mut wire_cst_speed_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_rust_async() -> *mut wire_cst_speed_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_rust_async_sse() -> *mut wire_cst_speed_twin_rust_async_sse
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_rust_async_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_sse() -> *mut wire_cst_speed_twin_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_sync() -> *mut wire_cst_speed_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_sync_sse() -> *mut wire_cst_speed_twin_sync_sse {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_sync_sse::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_normal(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_rust_async(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_rust_async_sse(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_sse(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_sync(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_sync_sse(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_list_Chrono_Duration(len: i32) -> *mut wire_cst_list_Chrono_Duration {
    let wrap = wire_cst_list_Chrono_Duration {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_Chrono_Local(len: i32) -> *mut wire_cst_list_Chrono_Local {
    let wrap = wire_cst_list_Chrono_Local {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_Chrono_Naive(len: i32) -> *mut wire_cst_list_Chrono_Naive {
    let wrap = wire_cst_list_Chrono_Naive {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_DartOpaque(len: i32) -> *mut wire_cst_list_DartOpaque {
    let wrap = wire_cst_list_DartOpaque {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_RustOpaque_hide_data(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_hide_data {
    let wrap = wire_cst_list_RustOpaque_hide_data {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_application_env_var(
    len: i32,
) -> *mut wire_cst_list_application_env_var {
    let wrap = wire_cst_list_application_env_var {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_application_env_var>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_application_settings(
    len: i32,
) -> *mut wire_cst_list_application_settings {
    let wrap = wire_cst_list_application_settings {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_application_settings>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_normal(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_normal {
    let wrap = wire_cst_list_attribute_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_rust_async {
    let wrap = wire_cst_list_attribute_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_rust_async_sse {
    let wrap = wire_cst_list_attribute_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_rust_async_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_sse(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_sse {
    let wrap = wire_cst_list_attribute_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_sync(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_sync {
    let wrap = wire_cst_list_attribute_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_sync_sse {
    let wrap = wire_cst_list_attribute_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_sync_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_bool(len: i32) -> *mut wire_cst_list_bool {
    let wrap = wire_cst_list_bool {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_element_twin_normal(
    len: i32,
) -> *mut wire_cst_list_element_twin_normal {
    let wrap = wire_cst_list_element_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_element_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_element_twin_rust_async {
    let wrap = wire_cst_list_element_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_element_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_element_twin_rust_async_sse {
    let wrap = wire_cst_list_element_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_rust_async_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_element_twin_sse(len: i32) -> *mut wire_cst_list_element_twin_sse {
    let wrap = wire_cst_list_element_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_element_twin_sync(len: i32) -> *mut wire_cst_list_element_twin_sync {
    let wrap = wire_cst_list_element_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_element_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_element_twin_sync_sse {
    let wrap = wire_cst_list_element_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_sync_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_enum_opaque_twin_normal(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_normal {
    let wrap = wire_cst_list_enum_opaque_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_enum_opaque_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_rust_async {
    let wrap = wire_cst_list_enum_opaque_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_enum_opaque_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_rust_async_sse {
    let wrap = wire_cst_list_enum_opaque_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_rust_async_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_enum_opaque_twin_sse(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_sse {
    let wrap = wire_cst_list_enum_opaque_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_enum_opaque_twin_sync(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_sync {
    let wrap = wire_cst_list_enum_opaque_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_enum_opaque_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_sync_sse {
    let wrap = wire_cst_list_enum_opaque_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_sync_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_enum(len: i32) -> *mut wire_cst_list_my_enum {
    let wrap = wire_cst_list_my_enum {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_size(len: i32) -> *mut wire_cst_list_my_size {
    let wrap = wire_cst_list_my_size {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_size>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_normal(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_normal {
    let wrap = wire_cst_list_my_tree_node_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_rust_async {
    let wrap = wire_cst_list_my_tree_node_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_rust_async_sse {
    let wrap = wire_cst_list_my_tree_node_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_rust_async_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_sse(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_sse {
    let wrap = wire_cst_list_my_tree_node_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_sync(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_sync {
    let wrap = wire_cst_list_my_tree_node_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_sync_sse {
    let wrap = wire_cst_list_my_tree_node_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_sync_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_nested_raw_string_mirrored(
    len: i32,
) -> *mut wire_cst_list_nested_raw_string_mirrored {
    let wrap = wire_cst_list_nested_raw_string_mirrored {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_nested_raw_string_mirrored>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_String(len: i32) -> *mut wire_cst_list_opt_String {
    let wrap = wire_cst_list_opt_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_normal(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async_sse {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_sse(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_sse {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_sync(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync_sse {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_i_32(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_i_32 {
    let wrap = wire_cst_list_opt_box_autoadd_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_normal(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async_sse {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_sse(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sse {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_sync(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync_sse {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_list_prim_i_32(
    len: i32,
) -> *mut wire_cst_list_opt_list_prim_i_32 {
    let wrap = wire_cst_list_opt_list_prim_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_point_twin_normal(len: i32) -> *mut wire_cst_list_point_twin_normal {
    let wrap = wire_cst_list_point_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_point_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_point_twin_rust_async {
    let wrap = wire_cst_list_point_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_point_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_point_twin_rust_async_sse {
    let wrap = wire_cst_list_point_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_rust_async_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_point_twin_sse(len: i32) -> *mut wire_cst_list_point_twin_sse {
    let wrap = wire_cst_list_point_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_point_twin_sync(len: i32) -> *mut wire_cst_list_point_twin_sync {
    let wrap = wire_cst_list_point_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_point_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_point_twin_sync_sse {
    let wrap = wire_cst_list_point_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_sync_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_f_32(len: i32) -> *mut wire_cst_list_prim_f_32 {
    let ans = wire_cst_list_prim_f_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_f_64(len: i32) -> *mut wire_cst_list_prim_f_64 {
    let ans = wire_cst_list_prim_f_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_16(len: i32) -> *mut wire_cst_list_prim_i_16 {
    let ans = wire_cst_list_prim_i_16 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_32(len: i32) -> *mut wire_cst_list_prim_i_32 {
    let ans = wire_cst_list_prim_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_64(len: i32) -> *mut wire_cst_list_prim_i_64 {
    let ans = wire_cst_list_prim_i_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_8(len: i32) -> *mut wire_cst_list_prim_i_8 {
    let ans = wire_cst_list_prim_i_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_16(len: i32) -> *mut wire_cst_list_prim_u_16 {
    let ans = wire_cst_list_prim_u_16 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_32(len: i32) -> *mut wire_cst_list_prim_u_32 {
    let ans = wire_cst_list_prim_u_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_64(len: i32) -> *mut wire_cst_list_prim_u_64 {
    let ans = wire_cst_list_prim_u_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_8(len: i32) -> *mut wire_cst_list_prim_u_8 {
    let ans = wire_cst_list_prim_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_raw_string_enum_mirrored(
    len: i32,
) -> *mut wire_cst_list_raw_string_enum_mirrored {
    let wrap = wire_cst_list_raw_string_enum_mirrored {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_raw_string_enum_mirrored>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_raw_string_mirrored(
    len: i32,
) -> *mut wire_cst_list_raw_string_mirrored {
    let wrap = wire_cst_list_raw_string_mirrored {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_raw_string_mirrored>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_record_string_i_32(
    len: i32,
) -> *mut wire_cst_list_record_string_i_32 {
    let wrap = wire_cst_list_record_string_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_i_32>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_sum_with_twin_normal(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_normal {
    let wrap = wire_cst_list_sum_with_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_sum_with_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_rust_async {
    let wrap = wire_cst_list_sum_with_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_sum_with_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_rust_async_sse {
    let wrap = wire_cst_list_sum_with_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_rust_async_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_sum_with_twin_sse(len: i32) -> *mut wire_cst_list_sum_with_twin_sse {
    let wrap = wire_cst_list_sum_with_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_sum_with_twin_sync(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_sync {
    let wrap = wire_cst_list_sum_with_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_sum_with_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_sync_sse {
    let wrap = wire_cst_list_sum_with_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_sync_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_normal(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_normal {
    let wrap = wire_cst_list_test_id_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_rust_async {
    let wrap = wire_cst_list_test_id_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_rust_async_sse {
    let wrap = wire_cst_list_test_id_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_rust_async_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_sse(len: i32) -> *mut wire_cst_list_test_id_twin_sse {
    let wrap = wire_cst_list_test_id_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_sync(len: i32) -> *mut wire_cst_list_test_id_twin_sync {
    let wrap = wire_cst_list_test_id_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_sync_sse {
    let wrap = wire_cst_list_test_id_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_sync_sse>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_normal(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_normal {
    let wrap = wire_cst_list_weekdays_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_rust_async {
    let wrap = wire_cst_list_weekdays_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_rust_async_sse(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_rust_async_sse {
    let wrap = wire_cst_list_weekdays_twin_rust_async_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_sse(len: i32) -> *mut wire_cst_list_weekdays_twin_sse {
    let wrap = wire_cst_list_weekdays_twin_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_sync(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_sync {
    let wrap = wire_cst_list_weekdays_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_sync_sse(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_sync_sse {
    let wrap = wire_cst_list_weekdays_twin_sync_sse {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_A() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinNormal_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_B() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinNormal_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_C() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinNormal_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_JustInt() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinNormal_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_A() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsync_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_B() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsync_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_C() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsync_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_JustInt() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinRustAsync_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsyncSse_A() -> *mut AbcTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsyncSse_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsyncSse_B() -> *mut AbcTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsyncSse_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsyncSse_C() -> *mut AbcTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncSseKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsyncSse_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsyncSse_JustInt() -> *mut AbcTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncSseKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinRustAsyncSse_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSse_A() -> *mut AbcTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSse_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSse_B() -> *mut AbcTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSse_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSse_C() -> *mut AbcTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSseKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSse_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSse_JustInt() -> *mut AbcTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSseKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinSse_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_A() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSync_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_B() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSync_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_C() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSync_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_JustInt() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinSync_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSyncSse_A() -> *mut AbcTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSyncSse_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSyncSse_B() -> *mut AbcTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSyncSse_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSyncSse_C() -> *mut AbcTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncSseKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSyncSse_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSyncSse_JustInt() -> *mut AbcTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncSseKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinSyncSse_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_ApplicationMessage_DisplayMessage() -> *mut ApplicationMessageKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ApplicationMessageKind {
        DisplayMessage: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ApplicationMessage_DisplayMessage {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_ApplicationMessage_RenderPixel() -> *mut ApplicationMessageKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ApplicationMessageKind {
        RenderPixel: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ApplicationMessage_RenderPixel {
                x: Default::default(),
                y: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinNormal_One() -> *mut CustomEnumErrorTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinNormalKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinNormal_One {
                message: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinNormal_Two() -> *mut CustomEnumErrorTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinNormalKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinNormal_Two {
                message: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinRustAsync_One(
) -> *mut CustomEnumErrorTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinRustAsyncKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinRustAsync_One {
                message: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinRustAsync_Two(
) -> *mut CustomEnumErrorTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinRustAsyncKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinRustAsync_Two {
                message: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinRustAsyncSse_One(
) -> *mut CustomEnumErrorTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinRustAsyncSseKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinRustAsyncSse_One {
                message: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinRustAsyncSse_Two(
) -> *mut CustomEnumErrorTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinRustAsyncSseKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinRustAsyncSse_Two {
                message: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinSse_One() -> *mut CustomEnumErrorTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinSseKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinSse_One {
                message: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinSse_Two() -> *mut CustomEnumErrorTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinSseKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinSse_Two {
                message: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinSync_One() -> *mut CustomEnumErrorTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinSyncKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinSync_One {
                message: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinSync_Two() -> *mut CustomEnumErrorTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinSyncKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinSync_Two {
                message: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinSyncSse_One() -> *mut CustomEnumErrorTwinSyncSseKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinSyncSseKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinSyncSse_One {
                message: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomEnumErrorTwinSyncSse_Two() -> *mut CustomEnumErrorTwinSyncSseKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomEnumErrorTwinSyncSseKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomEnumErrorTwinSyncSse_Two {
                message: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinNormal_Error0() -> *mut CustomErrorTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinNormalKind {
        Error0: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinNormal_Error0 {
                e: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinNormal_Error1() -> *mut CustomErrorTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinNormalKind {
        Error1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinNormal_Error1 {
                e: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinRustAsync_Error0() -> *mut CustomErrorTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinRustAsyncKind {
        Error0: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinRustAsync_Error0 {
                e: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinRustAsync_Error1() -> *mut CustomErrorTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinRustAsyncKind {
        Error1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinRustAsync_Error1 {
                e: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinRustAsyncSse_Error0(
) -> *mut CustomErrorTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinRustAsyncSseKind {
        Error0: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinRustAsyncSse_Error0 {
                e: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinRustAsyncSse_Error1(
) -> *mut CustomErrorTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinRustAsyncSseKind {
        Error1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinRustAsyncSse_Error1 {
                e: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinSse_Error0() -> *mut CustomErrorTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinSseKind {
        Error0: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinSse_Error0 {
                e: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinSse_Error1() -> *mut CustomErrorTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinSseKind {
        Error1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinSse_Error1 {
                e: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinSync_Error0() -> *mut CustomErrorTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinSyncKind {
        Error0: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinSync_Error0 {
                e: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinSync_Error1() -> *mut CustomErrorTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinSyncKind {
        Error1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinSync_Error1 {
                e: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinSyncSse_Error0() -> *mut CustomErrorTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinSyncSseKind {
        Error0: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinSyncSse_Error0 {
                e: core::ptr::null_mut(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomErrorTwinSyncSse_Error1() -> *mut CustomErrorTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomErrorTwinSyncSseKind {
        Error1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomErrorTwinSyncSse_Error1 {
                e: Default::default(),
                backtrace: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinNormal_CustomNested1(
) -> *mut CustomNestedError1TwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinNormalKind {
        CustomNested1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinNormal_CustomNested1 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinNormal_ErrorNested(
) -> *mut CustomNestedError1TwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinNormalKind {
        ErrorNested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinNormal_ErrorNested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinRustAsync_CustomNested1(
) -> *mut CustomNestedError1TwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinRustAsyncKind {
        CustomNested1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinRustAsync_CustomNested1 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinRustAsync_ErrorNested(
) -> *mut CustomNestedError1TwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinRustAsyncKind {
        ErrorNested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinRustAsync_ErrorNested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinRustAsyncSse_CustomNested1(
) -> *mut CustomNestedError1TwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinRustAsyncSseKind {
        CustomNested1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinRustAsyncSse_CustomNested1 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinRustAsyncSse_ErrorNested(
) -> *mut CustomNestedError1TwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinRustAsyncSseKind {
        ErrorNested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinRustAsyncSse_ErrorNested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinSse_CustomNested1(
) -> *mut CustomNestedError1TwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinSseKind {
        CustomNested1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinSse_CustomNested1 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinSse_ErrorNested(
) -> *mut CustomNestedError1TwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinSseKind {
        ErrorNested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinSse_ErrorNested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinSync_CustomNested1(
) -> *mut CustomNestedError1TwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinSyncKind {
        CustomNested1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinSync_CustomNested1 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinSync_ErrorNested(
) -> *mut CustomNestedError1TwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinSyncKind {
        ErrorNested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinSync_ErrorNested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinSyncSse_CustomNested1(
) -> *mut CustomNestedError1TwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinSyncSseKind {
        CustomNested1: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinSyncSse_CustomNested1 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError1TwinSyncSse_ErrorNested(
) -> *mut CustomNestedError1TwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError1TwinSyncSseKind {
        ErrorNested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError1TwinSyncSse_ErrorNested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinNormal_CustomNested2(
) -> *mut CustomNestedError2TwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinNormalKind {
        CustomNested2: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinNormal_CustomNested2 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinNormal_CustomNested2Number(
) -> *mut CustomNestedError2TwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinNormalKind {
        CustomNested2Number: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinNormal_CustomNested2Number {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinRustAsync_CustomNested2(
) -> *mut CustomNestedError2TwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinRustAsyncKind {
        CustomNested2: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinRustAsync_CustomNested2 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinRustAsync_CustomNested2Number(
) -> *mut CustomNestedError2TwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinRustAsyncKind {
        CustomNested2Number: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinRustAsync_CustomNested2Number {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinRustAsyncSse_CustomNested2(
) -> *mut CustomNestedError2TwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinRustAsyncSseKind {
        CustomNested2: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinRustAsyncSse_CustomNested2 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinRustAsyncSse_CustomNested2Number(
) -> *mut CustomNestedError2TwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinRustAsyncSseKind {
        CustomNested2Number: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinRustAsyncSse_CustomNested2Number {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinSse_CustomNested2(
) -> *mut CustomNestedError2TwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinSseKind {
        CustomNested2: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinSse_CustomNested2 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinSse_CustomNested2Number(
) -> *mut CustomNestedError2TwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinSseKind {
        CustomNested2Number: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinSse_CustomNested2Number {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinSync_CustomNested2(
) -> *mut CustomNestedError2TwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinSyncKind {
        CustomNested2: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinSync_CustomNested2 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinSync_CustomNested2Number(
) -> *mut CustomNestedError2TwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinSyncKind {
        CustomNested2Number: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinSync_CustomNested2Number {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinSyncSse_CustomNested2(
) -> *mut CustomNestedError2TwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinSyncSseKind {
        CustomNested2: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinSyncSse_CustomNested2 {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedError2TwinSyncSse_CustomNested2Number(
) -> *mut CustomNestedError2TwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedError2TwinSyncSseKind {
        CustomNested2Number: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedError2TwinSyncSse_CustomNested2Number {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinNormal_Three(
) -> *mut CustomNestedErrorInnerTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinNormalKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinNormal_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinNormal_Four(
) -> *mut CustomNestedErrorInnerTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinNormalKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinNormal_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinRustAsync_Three(
) -> *mut CustomNestedErrorInnerTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinRustAsyncKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinRustAsync_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinRustAsync_Four(
) -> *mut CustomNestedErrorInnerTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinRustAsyncKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinRustAsync_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinRustAsyncSse_Three(
) -> *mut CustomNestedErrorInnerTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        CustomNestedErrorInnerTwinRustAsyncSseKind {
            Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
                wire_cst_CustomNestedErrorInnerTwinRustAsyncSse_Three {
                    field0: core::ptr::null_mut(),
                },
            ),
        },
    )
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinRustAsyncSse_Four(
) -> *mut CustomNestedErrorInnerTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        CustomNestedErrorInnerTwinRustAsyncSseKind {
            Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
                wire_cst_CustomNestedErrorInnerTwinRustAsyncSse_Four {
                    field0: Default::default(),
                },
            ),
        },
    )
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSse_Three(
) -> *mut CustomNestedErrorInnerTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSseKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSse_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSse_Four(
) -> *mut CustomNestedErrorInnerTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSseKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSse_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSync_Three(
) -> *mut CustomNestedErrorInnerTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSyncKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSync_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSync_Four(
) -> *mut CustomNestedErrorInnerTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSyncKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSync_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSyncSse_Three(
) -> *mut CustomNestedErrorInnerTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSyncSseKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSyncSse_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSyncSse_Four(
) -> *mut CustomNestedErrorInnerTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSyncSseKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSyncSse_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinNormal_One(
) -> *mut CustomNestedErrorOuterTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinNormalKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinNormal_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinNormal_Two(
) -> *mut CustomNestedErrorOuterTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinNormalKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinNormal_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinRustAsync_One(
) -> *mut CustomNestedErrorOuterTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinRustAsyncKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinRustAsync_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinRustAsync_Two(
) -> *mut CustomNestedErrorOuterTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinRustAsyncKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinRustAsync_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinRustAsyncSse_One(
) -> *mut CustomNestedErrorOuterTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        CustomNestedErrorOuterTwinRustAsyncSseKind {
            One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
                wire_cst_CustomNestedErrorOuterTwinRustAsyncSse_One {
                    field0: core::ptr::null_mut(),
                },
            ),
        },
    )
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinRustAsyncSse_Two(
) -> *mut CustomNestedErrorOuterTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        CustomNestedErrorOuterTwinRustAsyncSseKind {
            Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
                wire_cst_CustomNestedErrorOuterTwinRustAsyncSse_Two {
                    field0: core::ptr::null_mut(),
                },
            ),
        },
    )
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSse_One(
) -> *mut CustomNestedErrorOuterTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSseKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSse_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSse_Two(
) -> *mut CustomNestedErrorOuterTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSseKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSse_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSync_One(
) -> *mut CustomNestedErrorOuterTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSyncKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSync_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSync_Two(
) -> *mut CustomNestedErrorOuterTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSyncKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSync_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSyncSse_One(
) -> *mut CustomNestedErrorOuterTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSyncSseKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSyncSse_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSyncSse_Two(
) -> *mut CustomNestedErrorOuterTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSyncSseKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSyncSse_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinNormal_Map() -> *mut DistanceTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinNormalKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DistanceTwinNormal_Map {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinRustAsync_Map() -> *mut DistanceTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinRustAsyncKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DistanceTwinRustAsync_Map {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinRustAsyncSse_Map() -> *mut DistanceTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinRustAsyncSseKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DistanceTwinRustAsyncSse_Map {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinSse_Map() -> *mut DistanceTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinSseKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_DistanceTwinSse_Map {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinSync_Map() -> *mut DistanceTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinSyncKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_DistanceTwinSync_Map {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinSyncSse_Map() -> *mut DistanceTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinSyncSseKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DistanceTwinSyncSse_Map {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinNormal_Primitive(
) -> *mut EnumDartOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinNormalKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinNormal_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinNormal_Opaque() -> *mut EnumDartOpaqueTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinNormalKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinNormal_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinRustAsync_Primitive(
) -> *mut EnumDartOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinRustAsyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinRustAsync_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinRustAsync_Opaque(
) -> *mut EnumDartOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinRustAsyncKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinRustAsync_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinRustAsyncSse_Primitive(
) -> *mut EnumDartOpaqueTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinRustAsyncSseKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinRustAsyncSse_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinRustAsyncSse_Opaque(
) -> *mut EnumDartOpaqueTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinRustAsyncSseKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinRustAsyncSse_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSse_Primitive() -> *mut EnumDartOpaqueTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSseKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSse_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSse_Opaque() -> *mut EnumDartOpaqueTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSseKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSse_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSync_Primitive() -> *mut EnumDartOpaqueTwinSyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSync_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSync_Opaque() -> *mut EnumDartOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSyncKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSync_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSyncSse_Primitive(
) -> *mut EnumDartOpaqueTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSyncSseKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSyncSse_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSyncSse_Opaque(
) -> *mut EnumDartOpaqueTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSyncSseKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSyncSse_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_Struct() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_Primitive() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_TraitObj() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_Mutex() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_RwLock() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_Struct() -> *mut EnumOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_Primitive() -> *mut EnumOpaqueTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_TraitObj() -> *mut EnumOpaqueTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_Mutex() -> *mut EnumOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_RwLock() -> *mut EnumOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsyncSse_Struct(
) -> *mut EnumOpaqueTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncSseKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsyncSse_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsyncSse_Primitive(
) -> *mut EnumOpaqueTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncSseKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsyncSse_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsyncSse_TraitObj(
) -> *mut EnumOpaqueTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncSseKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsyncSse_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsyncSse_Mutex(
) -> *mut EnumOpaqueTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncSseKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsyncSse_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsyncSse_RwLock(
) -> *mut EnumOpaqueTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncSseKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsyncSse_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSse_Struct() -> *mut EnumOpaqueTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSseKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSse_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSse_Primitive() -> *mut EnumOpaqueTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSseKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSse_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSse_TraitObj() -> *mut EnumOpaqueTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSseKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSse_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSse_Mutex() -> *mut EnumOpaqueTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSseKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSse_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSse_RwLock() -> *mut EnumOpaqueTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSseKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSse_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_Struct() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_Primitive() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_TraitObj() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_Mutex() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_RwLock() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSyncSse_Struct() -> *mut EnumOpaqueTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncSseKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSyncSse_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSyncSse_Primitive() -> *mut EnumOpaqueTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncSseKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSyncSse_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSyncSse_TraitObj() -> *mut EnumOpaqueTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncSseKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSyncSse_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSyncSse_Mutex() -> *mut EnumOpaqueTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncSseKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSyncSse_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSyncSse_RwLock() -> *mut EnumOpaqueTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncSseKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSyncSse_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinNormal_B() -> *mut EnumWithItemMixedTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinNormal_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinNormal_C() -> *mut EnumWithItemMixedTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinNormalKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinNormal_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinRustAsync_B(
) -> *mut EnumWithItemMixedTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinRustAsync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinRustAsync_C(
) -> *mut EnumWithItemMixedTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinRustAsyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinRustAsync_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinRustAsyncSse_B(
) -> *mut EnumWithItemMixedTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinRustAsyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinRustAsyncSse_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinRustAsyncSse_C(
) -> *mut EnumWithItemMixedTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinRustAsyncSseKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinRustAsyncSse_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSse_B() -> *mut EnumWithItemMixedTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSse_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSse_C() -> *mut EnumWithItemMixedTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSseKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSse_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSync_B() -> *mut EnumWithItemMixedTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSync_C() -> *mut EnumWithItemMixedTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSync_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSyncSse_B(
) -> *mut EnumWithItemMixedTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSyncSse_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSyncSse_C(
) -> *mut EnumWithItemMixedTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSyncSseKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSyncSse_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinNormal_A(
) -> *mut EnumWithItemStructTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinNormalKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinNormal_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinNormal_B(
) -> *mut EnumWithItemStructTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinNormal_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinRustAsync_A(
) -> *mut EnumWithItemStructTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinRustAsyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinRustAsync_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinRustAsync_B(
) -> *mut EnumWithItemStructTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinRustAsync_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinRustAsyncSse_A(
) -> *mut EnumWithItemStructTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinRustAsyncSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinRustAsyncSse_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinRustAsyncSse_B(
) -> *mut EnumWithItemStructTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinRustAsyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinRustAsyncSse_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSse_A() -> *mut EnumWithItemStructTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSse_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSse_B() -> *mut EnumWithItemStructTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSse_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSync_A() -> *mut EnumWithItemStructTwinSyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSync_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSync_B() -> *mut EnumWithItemStructTwinSyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSync_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSyncSse_A(
) -> *mut EnumWithItemStructTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSyncSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSyncSse_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSyncSse_B(
) -> *mut EnumWithItemStructTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSyncSse_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinNormal_A() -> *mut EnumWithItemTupleTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinNormalKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinNormal_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinNormal_B() -> *mut EnumWithItemTupleTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinNormal_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinRustAsync_A(
) -> *mut EnumWithItemTupleTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinRustAsyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinRustAsync_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinRustAsync_B(
) -> *mut EnumWithItemTupleTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinRustAsync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinRustAsyncSse_A(
) -> *mut EnumWithItemTupleTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinRustAsyncSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinRustAsyncSse_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinRustAsyncSse_B(
) -> *mut EnumWithItemTupleTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinRustAsyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinRustAsyncSse_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSse_A() -> *mut EnumWithItemTupleTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSse_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSse_B() -> *mut EnumWithItemTupleTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSse_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSync_A() -> *mut EnumWithItemTupleTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSync_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSync_B() -> *mut EnumWithItemTupleTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSyncSse_A(
) -> *mut EnumWithItemTupleTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSyncSseKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSyncSse_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSyncSse_B(
) -> *mut EnumWithItemTupleTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSyncSseKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSyncSse_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Primitives() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Nested() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Optional() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Buffer() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Enums() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Primitives(
) -> *mut KitchenSinkTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Nested() -> *mut KitchenSinkTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Optional(
) -> *mut KitchenSinkTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Buffer() -> *mut KitchenSinkTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Enums() -> *mut KitchenSinkTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsyncSse_Primitives(
) -> *mut KitchenSinkTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncSseKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsyncSse_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsyncSse_Nested(
) -> *mut KitchenSinkTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncSseKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsyncSse_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsyncSse_Optional(
) -> *mut KitchenSinkTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncSseKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsyncSse_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsyncSse_Buffer(
) -> *mut KitchenSinkTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncSseKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsyncSse_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsyncSse_Enums(
) -> *mut KitchenSinkTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncSseKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsyncSse_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSse_Primitives() -> *mut KitchenSinkTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSseKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSse_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSse_Nested() -> *mut KitchenSinkTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSseKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSse_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSse_Optional() -> *mut KitchenSinkTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSseKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSse_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSse_Buffer() -> *mut KitchenSinkTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSseKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSse_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSse_Enums() -> *mut KitchenSinkTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSseKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSse_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Primitives() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Nested() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Optional() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Buffer() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Enums() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSyncSse_Primitives() -> *mut KitchenSinkTwinSyncSseKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncSseKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSyncSse_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSyncSse_Nested() -> *mut KitchenSinkTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncSseKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSyncSse_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSyncSse_Optional() -> *mut KitchenSinkTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncSseKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSyncSse_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSyncSse_Buffer() -> *mut KitchenSinkTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncSseKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSyncSse_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSyncSse_Enums() -> *mut KitchenSinkTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncSseKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSyncSse_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinNormal_Speed() -> *mut MeasureTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinNormalKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinNormal_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinNormal_Distance() -> *mut MeasureTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinNormalKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinNormal_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinRustAsync_Speed() -> *mut MeasureTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinRustAsyncKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinRustAsync_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinRustAsync_Distance() -> *mut MeasureTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinRustAsyncKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinRustAsync_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinRustAsyncSse_Speed() -> *mut MeasureTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinRustAsyncSseKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinRustAsyncSse_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinRustAsyncSse_Distance() -> *mut MeasureTwinRustAsyncSseKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinRustAsyncSseKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinRustAsyncSse_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSse_Speed() -> *mut MeasureTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSseKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSse_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSse_Distance() -> *mut MeasureTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSseKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSse_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSync_Speed() -> *mut MeasureTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSyncKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSync_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSync_Distance() -> *mut MeasureTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSyncKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSync_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSyncSse_Speed() -> *mut MeasureTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSyncSseKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSyncSse_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSyncSse_Distance() -> *mut MeasureTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSyncSseKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSyncSse_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_RawStringEnumMirrored_Raw() -> *mut RawStringEnumMirroredKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(RawStringEnumMirroredKind {
        Raw: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_RawStringEnumMirrored_Raw {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_RawStringEnumMirrored_Nested() -> *mut RawStringEnumMirroredKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(RawStringEnumMirroredKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_RawStringEnumMirrored_Nested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_RawStringEnumMirrored_ListOfNested() -> *mut RawStringEnumMirroredKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(RawStringEnumMirroredKind {
        ListOfNested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_RawStringEnumMirrored_ListOfNested {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinNormal_GPS() -> *mut SpeedTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinNormalKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_SpeedTwinNormal_GPS {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinRustAsync_GPS() -> *mut SpeedTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinRustAsyncKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_SpeedTwinRustAsync_GPS {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinRustAsyncSse_GPS() -> *mut SpeedTwinRustAsyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinRustAsyncSseKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_SpeedTwinRustAsyncSse_GPS {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinSse_GPS() -> *mut SpeedTwinSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinSseKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_SpeedTwinSse_GPS {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinSync_GPS() -> *mut SpeedTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinSyncKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_SpeedTwinSync_GPS {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinSyncSse_GPS() -> *mut SpeedTwinSyncSseKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinSyncSseKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_SpeedTwinSyncSse_GPS {
            field0: Default::default(),
        }),
    })
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_normal {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_rust_async_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_sync {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_sync_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_normal {
    tag: i32,
    kind: *mut AbcTwinNormalKind,
}
#[repr(C)]
pub union AbcTwinNormalKind {
    A: *mut wire_cst_AbcTwinNormal_A,
    B: *mut wire_cst_AbcTwinNormal_B,
    C: *mut wire_cst_AbcTwinNormal_C,
    JustInt: *mut wire_cst_AbcTwinNormal_JustInt,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_A {
    field0: *mut wire_cst_a_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_B {
    field0: *mut wire_cst_b_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_C {
    field0: *mut wire_cst_c_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_rust_async {
    tag: i32,
    kind: *mut AbcTwinRustAsyncKind,
}
#[repr(C)]
pub union AbcTwinRustAsyncKind {
    A: *mut wire_cst_AbcTwinRustAsync_A,
    B: *mut wire_cst_AbcTwinRustAsync_B,
    C: *mut wire_cst_AbcTwinRustAsync_C,
    JustInt: *mut wire_cst_AbcTwinRustAsync_JustInt,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_A {
    field0: *mut wire_cst_a_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_B {
    field0: *mut wire_cst_b_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_C {
    field0: *mut wire_cst_c_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_rust_async_sse {
    tag: i32,
    kind: *mut AbcTwinRustAsyncSseKind,
}
#[repr(C)]
pub union AbcTwinRustAsyncSseKind {
    A: *mut wire_cst_AbcTwinRustAsyncSse_A,
    B: *mut wire_cst_AbcTwinRustAsyncSse_B,
    C: *mut wire_cst_AbcTwinRustAsyncSse_C,
    JustInt: *mut wire_cst_AbcTwinRustAsyncSse_JustInt,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsyncSse_A {
    field0: *mut wire_cst_a_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsyncSse_B {
    field0: *mut wire_cst_b_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsyncSse_C {
    field0: *mut wire_cst_c_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsyncSse_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_sse {
    tag: i32,
    kind: *mut AbcTwinSseKind,
}
#[repr(C)]
pub union AbcTwinSseKind {
    A: *mut wire_cst_AbcTwinSse_A,
    B: *mut wire_cst_AbcTwinSse_B,
    C: *mut wire_cst_AbcTwinSse_C,
    JustInt: *mut wire_cst_AbcTwinSse_JustInt,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSse_A {
    field0: *mut wire_cst_a_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSse_B {
    field0: *mut wire_cst_b_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSse_C {
    field0: *mut wire_cst_c_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSse_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_sync {
    tag: i32,
    kind: *mut AbcTwinSyncKind,
}
#[repr(C)]
pub union AbcTwinSyncKind {
    A: *mut wire_cst_AbcTwinSync_A,
    B: *mut wire_cst_AbcTwinSync_B,
    C: *mut wire_cst_AbcTwinSync_C,
    JustInt: *mut wire_cst_AbcTwinSync_JustInt,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_A {
    field0: *mut wire_cst_a_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_B {
    field0: *mut wire_cst_b_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_C {
    field0: *mut wire_cst_c_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_sync_sse {
    tag: i32,
    kind: *mut AbcTwinSyncSseKind,
}
#[repr(C)]
pub union AbcTwinSyncSseKind {
    A: *mut wire_cst_AbcTwinSyncSse_A,
    B: *mut wire_cst_AbcTwinSyncSse_B,
    C: *mut wire_cst_AbcTwinSyncSse_C,
    JustInt: *mut wire_cst_AbcTwinSyncSse_JustInt,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSyncSse_A {
    field0: *mut wire_cst_a_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSyncSse_B {
    field0: *mut wire_cst_b_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSyncSse_C {
    field0: *mut wire_cst_c_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSyncSse_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_another_macro_struct_twin_normal {
    data: i32,
    non_final_data: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_another_twin_normal {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_another_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_another_twin_rust_async_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_another_twin_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_another_twin_sync {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_another_twin_sync_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_application_env {
    vars: *mut wire_cst_list_application_env_var,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_application_env_var {
    field0: *mut wire_cst_list_prim_u_8,
    field1: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_application_message {
    tag: i32,
    kind: *mut ApplicationMessageKind,
}
#[repr(C)]
pub union ApplicationMessageKind {
    DisplayMessage: *mut wire_cst_ApplicationMessage_DisplayMessage,
    RenderPixel: *mut wire_cst_ApplicationMessage_RenderPixel,
    Exit: *mut wire_cst_ApplicationMessage_Exit,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_ApplicationMessage_DisplayMessage {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_ApplicationMessage_RenderPixel {
    x: i32,
    y: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_ApplicationMessage_Exit {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_application_settings {
    name: *mut wire_cst_list_prim_u_8,
    version: *mut wire_cst_list_prim_u_8,
    mode: i32,
    env: *mut wire_cst_application_env,
    env_optional: *mut wire_cst_application_env,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_normal {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_rust_async {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_rust_async_sse {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_sse {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_sync {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_sync_sse {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_normal {
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_rust_async {
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_rust_async_sse {
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_sse {
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_sync {
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_sync_sse {
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_big_buffers_twin_normal {
    int64: *mut wire_cst_list_prim_i_64,
    uint64: *mut wire_cst_list_prim_u_64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_big_buffers_twin_rust_async {
    int64: *mut wire_cst_list_prim_i_64,
    uint64: *mut wire_cst_list_prim_u_64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_big_buffers_twin_rust_async_sse {
    int64: *mut wire_cst_list_prim_i_64,
    uint64: *mut wire_cst_list_prim_u_64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_big_buffers_twin_sse {
    int64: *mut wire_cst_list_prim_i_64,
    uint64: *mut wire_cst_list_prim_u_64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_big_buffers_twin_sync {
    int64: *mut wire_cst_list_prim_i_64,
    uint64: *mut wire_cst_list_prim_u_64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_big_buffers_twin_sync_sse {
    int64: *mut wire_cst_list_prim_i_64,
    uint64: *mut wire_cst_list_prim_u_64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_normal {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_rust_async_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_sync {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_sync_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_normal {
    c: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_rust_async {
    c: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_rust_async_sse {
    c: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_sse {
    c: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_sync {
    c: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_sync_sse {
    c: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_normal {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_rust_async_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_sync {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_sync_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_normal {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_rust_async {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_rust_async_sse {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_sse {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_sync {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_sync_sse {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_enum_error_twin_normal {
    tag: i32,
    kind: *mut CustomEnumErrorTwinNormalKind,
}
#[repr(C)]
pub union CustomEnumErrorTwinNormalKind {
    One: *mut wire_cst_CustomEnumErrorTwinNormal_One,
    Two: *mut wire_cst_CustomEnumErrorTwinNormal_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinNormal_One {
    message: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinNormal_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_enum_error_twin_rust_async {
    tag: i32,
    kind: *mut CustomEnumErrorTwinRustAsyncKind,
}
#[repr(C)]
pub union CustomEnumErrorTwinRustAsyncKind {
    One: *mut wire_cst_CustomEnumErrorTwinRustAsync_One,
    Two: *mut wire_cst_CustomEnumErrorTwinRustAsync_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinRustAsync_One {
    message: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinRustAsync_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_enum_error_twin_rust_async_sse {
    tag: i32,
    kind: *mut CustomEnumErrorTwinRustAsyncSseKind,
}
#[repr(C)]
pub union CustomEnumErrorTwinRustAsyncSseKind {
    One: *mut wire_cst_CustomEnumErrorTwinRustAsyncSse_One,
    Two: *mut wire_cst_CustomEnumErrorTwinRustAsyncSse_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinRustAsyncSse_One {
    message: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinRustAsyncSse_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_enum_error_twin_sse {
    tag: i32,
    kind: *mut CustomEnumErrorTwinSseKind,
}
#[repr(C)]
pub union CustomEnumErrorTwinSseKind {
    One: *mut wire_cst_CustomEnumErrorTwinSse_One,
    Two: *mut wire_cst_CustomEnumErrorTwinSse_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinSse_One {
    message: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinSse_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_enum_error_twin_sync {
    tag: i32,
    kind: *mut CustomEnumErrorTwinSyncKind,
}
#[repr(C)]
pub union CustomEnumErrorTwinSyncKind {
    One: *mut wire_cst_CustomEnumErrorTwinSync_One,
    Two: *mut wire_cst_CustomEnumErrorTwinSync_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinSync_One {
    message: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinSync_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_enum_error_twin_sync_sse {
    tag: i32,
    kind: *mut CustomEnumErrorTwinSyncSseKind,
}
#[repr(C)]
pub union CustomEnumErrorTwinSyncSseKind {
    One: *mut wire_cst_CustomEnumErrorTwinSyncSse_One,
    Two: *mut wire_cst_CustomEnumErrorTwinSyncSse_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinSyncSse_One {
    message: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomEnumErrorTwinSyncSse_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_error_twin_normal {
    tag: i32,
    kind: *mut CustomErrorTwinNormalKind,
}
#[repr(C)]
pub union CustomErrorTwinNormalKind {
    Error0: *mut wire_cst_CustomErrorTwinNormal_Error0,
    Error1: *mut wire_cst_CustomErrorTwinNormal_Error1,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinNormal_Error0 {
    e: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinNormal_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_error_twin_rust_async {
    tag: i32,
    kind: *mut CustomErrorTwinRustAsyncKind,
}
#[repr(C)]
pub union CustomErrorTwinRustAsyncKind {
    Error0: *mut wire_cst_CustomErrorTwinRustAsync_Error0,
    Error1: *mut wire_cst_CustomErrorTwinRustAsync_Error1,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinRustAsync_Error0 {
    e: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinRustAsync_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_error_twin_rust_async_sse {
    tag: i32,
    kind: *mut CustomErrorTwinRustAsyncSseKind,
}
#[repr(C)]
pub union CustomErrorTwinRustAsyncSseKind {
    Error0: *mut wire_cst_CustomErrorTwinRustAsyncSse_Error0,
    Error1: *mut wire_cst_CustomErrorTwinRustAsyncSse_Error1,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinRustAsyncSse_Error0 {
    e: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinRustAsyncSse_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_error_twin_sse {
    tag: i32,
    kind: *mut CustomErrorTwinSseKind,
}
#[repr(C)]
pub union CustomErrorTwinSseKind {
    Error0: *mut wire_cst_CustomErrorTwinSse_Error0,
    Error1: *mut wire_cst_CustomErrorTwinSse_Error1,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinSse_Error0 {
    e: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinSse_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_error_twin_sync {
    tag: i32,
    kind: *mut CustomErrorTwinSyncKind,
}
#[repr(C)]
pub union CustomErrorTwinSyncKind {
    Error0: *mut wire_cst_CustomErrorTwinSync_Error0,
    Error1: *mut wire_cst_CustomErrorTwinSync_Error1,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinSync_Error0 {
    e: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinSync_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_error_twin_sync_sse {
    tag: i32,
    kind: *mut CustomErrorTwinSyncSseKind,
}
#[repr(C)]
pub union CustomErrorTwinSyncSseKind {
    Error0: *mut wire_cst_CustomErrorTwinSyncSse_Error0,
    Error1: *mut wire_cst_CustomErrorTwinSyncSse_Error1,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinSyncSse_Error0 {
    e: *mut wire_cst_list_prim_u_8,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomErrorTwinSyncSse_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_1_twin_normal {
    tag: i32,
    kind: *mut CustomNestedError1TwinNormalKind,
}
#[repr(C)]
pub union CustomNestedError1TwinNormalKind {
    CustomNested1: *mut wire_cst_CustomNestedError1TwinNormal_CustomNested1,
    ErrorNested: *mut wire_cst_CustomNestedError1TwinNormal_ErrorNested,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinNormal_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinNormal_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_1_twin_rust_async {
    tag: i32,
    kind: *mut CustomNestedError1TwinRustAsyncKind,
}
#[repr(C)]
pub union CustomNestedError1TwinRustAsyncKind {
    CustomNested1: *mut wire_cst_CustomNestedError1TwinRustAsync_CustomNested1,
    ErrorNested: *mut wire_cst_CustomNestedError1TwinRustAsync_ErrorNested,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinRustAsync_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinRustAsync_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_1_twin_rust_async_sse {
    tag: i32,
    kind: *mut CustomNestedError1TwinRustAsyncSseKind,
}
#[repr(C)]
pub union CustomNestedError1TwinRustAsyncSseKind {
    CustomNested1: *mut wire_cst_CustomNestedError1TwinRustAsyncSse_CustomNested1,
    ErrorNested: *mut wire_cst_CustomNestedError1TwinRustAsyncSse_ErrorNested,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinRustAsyncSse_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinRustAsyncSse_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_1_twin_sse {
    tag: i32,
    kind: *mut CustomNestedError1TwinSseKind,
}
#[repr(C)]
pub union CustomNestedError1TwinSseKind {
    CustomNested1: *mut wire_cst_CustomNestedError1TwinSse_CustomNested1,
    ErrorNested: *mut wire_cst_CustomNestedError1TwinSse_ErrorNested,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinSse_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinSse_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_1_twin_sync {
    tag: i32,
    kind: *mut CustomNestedError1TwinSyncKind,
}
#[repr(C)]
pub union CustomNestedError1TwinSyncKind {
    CustomNested1: *mut wire_cst_CustomNestedError1TwinSync_CustomNested1,
    ErrorNested: *mut wire_cst_CustomNestedError1TwinSync_ErrorNested,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinSync_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinSync_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_1_twin_sync_sse {
    tag: i32,
    kind: *mut CustomNestedError1TwinSyncSseKind,
}
#[repr(C)]
pub union CustomNestedError1TwinSyncSseKind {
    CustomNested1: *mut wire_cst_CustomNestedError1TwinSyncSse_CustomNested1,
    ErrorNested: *mut wire_cst_CustomNestedError1TwinSyncSse_ErrorNested,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinSyncSse_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError1TwinSyncSse_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_2_twin_normal {
    tag: i32,
    kind: *mut CustomNestedError2TwinNormalKind,
}
#[repr(C)]
pub union CustomNestedError2TwinNormalKind {
    CustomNested2: *mut wire_cst_CustomNestedError2TwinNormal_CustomNested2,
    CustomNested2Number: *mut wire_cst_CustomNestedError2TwinNormal_CustomNested2Number,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinNormal_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinNormal_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_2_twin_rust_async {
    tag: i32,
    kind: *mut CustomNestedError2TwinRustAsyncKind,
}
#[repr(C)]
pub union CustomNestedError2TwinRustAsyncKind {
    CustomNested2: *mut wire_cst_CustomNestedError2TwinRustAsync_CustomNested2,
    CustomNested2Number: *mut wire_cst_CustomNestedError2TwinRustAsync_CustomNested2Number,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinRustAsync_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinRustAsync_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_2_twin_rust_async_sse {
    tag: i32,
    kind: *mut CustomNestedError2TwinRustAsyncSseKind,
}
#[repr(C)]
pub union CustomNestedError2TwinRustAsyncSseKind {
    CustomNested2: *mut wire_cst_CustomNestedError2TwinRustAsyncSse_CustomNested2,
    CustomNested2Number: *mut wire_cst_CustomNestedError2TwinRustAsyncSse_CustomNested2Number,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinRustAsyncSse_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinRustAsyncSse_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_2_twin_sse {
    tag: i32,
    kind: *mut CustomNestedError2TwinSseKind,
}
#[repr(C)]
pub union CustomNestedError2TwinSseKind {
    CustomNested2: *mut wire_cst_CustomNestedError2TwinSse_CustomNested2,
    CustomNested2Number: *mut wire_cst_CustomNestedError2TwinSse_CustomNested2Number,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinSse_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinSse_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_2_twin_sync {
    tag: i32,
    kind: *mut CustomNestedError2TwinSyncKind,
}
#[repr(C)]
pub union CustomNestedError2TwinSyncKind {
    CustomNested2: *mut wire_cst_CustomNestedError2TwinSync_CustomNested2,
    CustomNested2Number: *mut wire_cst_CustomNestedError2TwinSync_CustomNested2Number,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinSync_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinSync_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_2_twin_sync_sse {
    tag: i32,
    kind: *mut CustomNestedError2TwinSyncSseKind,
}
#[repr(C)]
pub union CustomNestedError2TwinSyncSseKind {
    CustomNested2: *mut wire_cst_CustomNestedError2TwinSyncSse_CustomNested2,
    CustomNested2Number: *mut wire_cst_CustomNestedError2TwinSyncSse_CustomNested2Number,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinSyncSse_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedError2TwinSyncSse_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_normal {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinNormalKind,
}
#[repr(C)]
pub union CustomNestedErrorInnerTwinNormalKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinNormal_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinNormal_Four,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinNormal_Three {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinNormal_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_rust_async {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinRustAsyncKind,
}
#[repr(C)]
pub union CustomNestedErrorInnerTwinRustAsyncKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinRustAsync_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinRustAsync_Four,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsync_Three {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsync_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_rust_async_sse {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinRustAsyncSseKind,
}
#[repr(C)]
pub union CustomNestedErrorInnerTwinRustAsyncSseKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinRustAsyncSse_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinRustAsyncSse_Four,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsyncSse_Three {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsyncSse_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_sse {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinSseKind,
}
#[repr(C)]
pub union CustomNestedErrorInnerTwinSseKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinSse_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinSse_Four,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSse_Three {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSse_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_sync {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinSyncKind,
}
#[repr(C)]
pub union CustomNestedErrorInnerTwinSyncKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinSync_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinSync_Four,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSync_Three {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSync_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_sync_sse {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinSyncSseKind,
}
#[repr(C)]
pub union CustomNestedErrorInnerTwinSyncSseKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinSyncSse_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinSyncSse_Four,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSyncSse_Three {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSyncSse_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_normal {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinNormalKind,
}
#[repr(C)]
pub union CustomNestedErrorOuterTwinNormalKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinNormal_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinNormal_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinNormal_One {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinNormal_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_rust_async {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinRustAsyncKind,
}
#[repr(C)]
pub union CustomNestedErrorOuterTwinRustAsyncKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinRustAsync_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinRustAsync_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsync_One {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsync_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_rust_async_sse {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinRustAsyncSseKind,
}
#[repr(C)]
pub union CustomNestedErrorOuterTwinRustAsyncSseKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinRustAsyncSse_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinRustAsyncSse_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsyncSse_One {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsyncSse_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_sse {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinSseKind,
}
#[repr(C)]
pub union CustomNestedErrorOuterTwinSseKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinSse_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinSse_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSse_One {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSse_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_sync {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinSyncKind,
}
#[repr(C)]
pub union CustomNestedErrorOuterTwinSyncKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinSync_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinSync_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSync_One {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSync_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_sync_sse {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinSyncSseKind,
}
#[repr(C)]
pub union CustomNestedErrorOuterTwinSyncSseKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinSyncSse_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinSyncSse_Two,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSyncSse_One {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSyncSse_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_another_twin_normal {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_another_twin_rust_async {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_another_twin_rust_async_sse {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_another_twin_sse {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_another_twin_sync {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_another_twin_sync_sse {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_normal {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_rust_async_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_sync {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_sync_sse {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_normal {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_rust_async {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_rust_async_sse {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_sse {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_sync {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_sync_sse {
    message: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_normal {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_rust_async {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_rust_async_sse {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_sse {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_sync {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_sync_sse {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_normal {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_rust_async {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_rust_async_sse {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_sse {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_sync {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_sync_sse {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_demo_struct_for_rust_call_dart_twin_normal {
    name: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_normal {
    tag: i32,
    kind: *mut DistanceTwinNormalKind,
}
#[repr(C)]
pub union DistanceTwinNormalKind {
    Unknown: *mut wire_cst_DistanceTwinNormal_Unknown,
    Map: *mut wire_cst_DistanceTwinNormal_Map,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinNormal_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinNormal_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_rust_async {
    tag: i32,
    kind: *mut DistanceTwinRustAsyncKind,
}
#[repr(C)]
pub union DistanceTwinRustAsyncKind {
    Unknown: *mut wire_cst_DistanceTwinRustAsync_Unknown,
    Map: *mut wire_cst_DistanceTwinRustAsync_Map,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinRustAsync_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinRustAsync_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_rust_async_sse {
    tag: i32,
    kind: *mut DistanceTwinRustAsyncSseKind,
}
#[repr(C)]
pub union DistanceTwinRustAsyncSseKind {
    Unknown: *mut wire_cst_DistanceTwinRustAsyncSse_Unknown,
    Map: *mut wire_cst_DistanceTwinRustAsyncSse_Map,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinRustAsyncSse_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinRustAsyncSse_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_sse {
    tag: i32,
    kind: *mut DistanceTwinSseKind,
}
#[repr(C)]
pub union DistanceTwinSseKind {
    Unknown: *mut wire_cst_DistanceTwinSse_Unknown,
    Map: *mut wire_cst_DistanceTwinSse_Map,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSse_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSse_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_sync {
    tag: i32,
    kind: *mut DistanceTwinSyncKind,
}
#[repr(C)]
pub union DistanceTwinSyncKind {
    Unknown: *mut wire_cst_DistanceTwinSync_Unknown,
    Map: *mut wire_cst_DistanceTwinSync_Map,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSync_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSync_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_sync_sse {
    tag: i32,
    kind: *mut DistanceTwinSyncSseKind,
}
#[repr(C)]
pub union DistanceTwinSyncSseKind {
    Unknown: *mut wire_cst_DistanceTwinSyncSse_Unknown,
    Map: *mut wire_cst_DistanceTwinSyncSse_Map,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSyncSse_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSyncSse_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_element_twin_normal {
    tag: *mut wire_cst_list_prim_u_8,
    text: *mut wire_cst_list_prim_u_8,
    attributes: *mut wire_cst_list_attribute_twin_normal,
    children: *mut wire_cst_list_element_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_element_twin_rust_async {
    tag: *mut wire_cst_list_prim_u_8,
    text: *mut wire_cst_list_prim_u_8,
    attributes: *mut wire_cst_list_attribute_twin_rust_async,
    children: *mut wire_cst_list_element_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_element_twin_rust_async_sse {
    tag: *mut wire_cst_list_prim_u_8,
    text: *mut wire_cst_list_prim_u_8,
    attributes: *mut wire_cst_list_attribute_twin_rust_async_sse,
    children: *mut wire_cst_list_element_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_element_twin_sse {
    tag: *mut wire_cst_list_prim_u_8,
    text: *mut wire_cst_list_prim_u_8,
    attributes: *mut wire_cst_list_attribute_twin_sse,
    children: *mut wire_cst_list_element_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_element_twin_sync {
    tag: *mut wire_cst_list_prim_u_8,
    text: *mut wire_cst_list_prim_u_8,
    attributes: *mut wire_cst_list_attribute_twin_sync,
    children: *mut wire_cst_list_element_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_element_twin_sync_sse {
    tag: *mut wire_cst_list_prim_u_8,
    text: *mut wire_cst_list_prim_u_8,
    attributes: *mut wire_cst_list_attribute_twin_sync_sse,
    children: *mut wire_cst_list_element_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_normal {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_rust_async {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_rust_async_sse {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_sse {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_sync {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_sync_sse {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_normal {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinNormalKind,
}
#[repr(C)]
pub union EnumDartOpaqueTwinNormalKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinNormal_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinNormal_Opaque,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinNormal_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinNormal_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_rust_async {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinRustAsyncKind,
}
#[repr(C)]
pub union EnumDartOpaqueTwinRustAsyncKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinRustAsync_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinRustAsync_Opaque,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsync_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsync_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_rust_async_sse {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinRustAsyncSseKind,
}
#[repr(C)]
pub union EnumDartOpaqueTwinRustAsyncSseKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinRustAsyncSse_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinRustAsyncSse_Opaque,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsyncSse_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsyncSse_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_sse {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinSseKind,
}
#[repr(C)]
pub union EnumDartOpaqueTwinSseKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinSse_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinSse_Opaque,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSse_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSse_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_sync {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinSyncKind,
}
#[repr(C)]
pub union EnumDartOpaqueTwinSyncKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinSync_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinSync_Opaque,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSync_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSync_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_sync_sse {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinSyncSseKind,
}
#[repr(C)]
pub union EnumDartOpaqueTwinSyncSseKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinSyncSse_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinSyncSse_Opaque,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSyncSse_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSyncSse_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_normal {
    tag: i32,
    kind: *mut EnumOpaqueTwinNormalKind,
}
#[repr(C)]
pub union EnumOpaqueTwinNormalKind {
    Struct: *mut wire_cst_EnumOpaqueTwinNormal_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinNormal_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinNormal_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinNormal_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinNormal_RwLock,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_Struct {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_Primitive {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_TraitObj {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_Mutex {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_rust_async {
    tag: i32,
    kind: *mut EnumOpaqueTwinRustAsyncKind,
}
#[repr(C)]
pub union EnumOpaqueTwinRustAsyncKind {
    Struct: *mut wire_cst_EnumOpaqueTwinRustAsync_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinRustAsync_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinRustAsync_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinRustAsync_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinRustAsync_RwLock,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Struct {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Primitive {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_TraitObj {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Mutex {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_rust_async_sse {
    tag: i32,
    kind: *mut EnumOpaqueTwinRustAsyncSseKind,
}
#[repr(C)]
pub union EnumOpaqueTwinRustAsyncSseKind {
    Struct: *mut wire_cst_EnumOpaqueTwinRustAsyncSse_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinRustAsyncSse_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinRustAsyncSse_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinRustAsyncSse_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinRustAsyncSse_RwLock,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncSse_Struct {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncSse_Primitive {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncSse_TraitObj {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncSse_Mutex {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncSse_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_sse {
    tag: i32,
    kind: *mut EnumOpaqueTwinSseKind,
}
#[repr(C)]
pub union EnumOpaqueTwinSseKind {
    Struct: *mut wire_cst_EnumOpaqueTwinSse_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinSse_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinSse_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinSse_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinSse_RwLock,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSse_Struct {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSse_Primitive {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSse_TraitObj {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSse_Mutex {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSse_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_sync {
    tag: i32,
    kind: *mut EnumOpaqueTwinSyncKind,
}
#[repr(C)]
pub union EnumOpaqueTwinSyncKind {
    Struct: *mut wire_cst_EnumOpaqueTwinSync_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinSync_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinSync_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinSync_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinSync_RwLock,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_Struct {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_Primitive {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_TraitObj {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_Mutex {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_sync_sse {
    tag: i32,
    kind: *mut EnumOpaqueTwinSyncSseKind,
}
#[repr(C)]
pub union EnumOpaqueTwinSyncSseKind {
    Struct: *mut wire_cst_EnumOpaqueTwinSyncSse_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinSyncSse_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinSyncSse_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinSyncSse_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinSyncSse_RwLock,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSyncSse_Struct {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSyncSse_Primitive {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSyncSse_TraitObj {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSyncSse_Mutex {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSyncSse_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_normal {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinNormalKind,
}
#[repr(C)]
pub union EnumWithItemMixedTwinNormalKind {
    A: *mut wire_cst_EnumWithItemMixedTwinNormal_A,
    B: *mut wire_cst_EnumWithItemMixedTwinNormal_B,
    C: *mut wire_cst_EnumWithItemMixedTwinNormal_C,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_A {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_B {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_rust_async {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinRustAsyncKind,
}
#[repr(C)]
pub union EnumWithItemMixedTwinRustAsyncKind {
    A: *mut wire_cst_EnumWithItemMixedTwinRustAsync_A,
    B: *mut wire_cst_EnumWithItemMixedTwinRustAsync_B,
    C: *mut wire_cst_EnumWithItemMixedTwinRustAsync_C,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_A {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_B {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_rust_async_sse {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinRustAsyncSseKind,
}
#[repr(C)]
pub union EnumWithItemMixedTwinRustAsyncSseKind {
    A: *mut wire_cst_EnumWithItemMixedTwinRustAsyncSse_A,
    B: *mut wire_cst_EnumWithItemMixedTwinRustAsyncSse_B,
    C: *mut wire_cst_EnumWithItemMixedTwinRustAsyncSse_C,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsyncSse_A {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsyncSse_B {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsyncSse_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_sse {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinSseKind,
}
#[repr(C)]
pub union EnumWithItemMixedTwinSseKind {
    A: *mut wire_cst_EnumWithItemMixedTwinSse_A,
    B: *mut wire_cst_EnumWithItemMixedTwinSse_B,
    C: *mut wire_cst_EnumWithItemMixedTwinSse_C,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSse_A {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSse_B {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSse_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_sync {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinSyncKind,
}
#[repr(C)]
pub union EnumWithItemMixedTwinSyncKind {
    A: *mut wire_cst_EnumWithItemMixedTwinSync_A,
    B: *mut wire_cst_EnumWithItemMixedTwinSync_B,
    C: *mut wire_cst_EnumWithItemMixedTwinSync_C,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSync_A {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSync_B {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSync_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_sync_sse {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinSyncSseKind,
}
#[repr(C)]
pub union EnumWithItemMixedTwinSyncSseKind {
    A: *mut wire_cst_EnumWithItemMixedTwinSyncSse_A,
    B: *mut wire_cst_EnumWithItemMixedTwinSyncSse_B,
    C: *mut wire_cst_EnumWithItemMixedTwinSyncSse_C,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSyncSse_A {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSyncSse_B {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSyncSse_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_normal {
    tag: i32,
    kind: *mut EnumWithItemStructTwinNormalKind,
}
#[repr(C)]
pub union EnumWithItemStructTwinNormalKind {
    A: *mut wire_cst_EnumWithItemStructTwinNormal_A,
    B: *mut wire_cst_EnumWithItemStructTwinNormal_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinNormal_A {
    a_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinNormal_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_rust_async {
    tag: i32,
    kind: *mut EnumWithItemStructTwinRustAsyncKind,
}
#[repr(C)]
pub union EnumWithItemStructTwinRustAsyncKind {
    A: *mut wire_cst_EnumWithItemStructTwinRustAsync_A,
    B: *mut wire_cst_EnumWithItemStructTwinRustAsync_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinRustAsync_A {
    a_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinRustAsync_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_rust_async_sse {
    tag: i32,
    kind: *mut EnumWithItemStructTwinRustAsyncSseKind,
}
#[repr(C)]
pub union EnumWithItemStructTwinRustAsyncSseKind {
    A: *mut wire_cst_EnumWithItemStructTwinRustAsyncSse_A,
    B: *mut wire_cst_EnumWithItemStructTwinRustAsyncSse_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinRustAsyncSse_A {
    a_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinRustAsyncSse_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_sse {
    tag: i32,
    kind: *mut EnumWithItemStructTwinSseKind,
}
#[repr(C)]
pub union EnumWithItemStructTwinSseKind {
    A: *mut wire_cst_EnumWithItemStructTwinSse_A,
    B: *mut wire_cst_EnumWithItemStructTwinSse_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSse_A {
    a_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSse_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_sync {
    tag: i32,
    kind: *mut EnumWithItemStructTwinSyncKind,
}
#[repr(C)]
pub union EnumWithItemStructTwinSyncKind {
    A: *mut wire_cst_EnumWithItemStructTwinSync_A,
    B: *mut wire_cst_EnumWithItemStructTwinSync_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSync_A {
    a_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSync_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_sync_sse {
    tag: i32,
    kind: *mut EnumWithItemStructTwinSyncSseKind,
}
#[repr(C)]
pub union EnumWithItemStructTwinSyncSseKind {
    A: *mut wire_cst_EnumWithItemStructTwinSyncSse_A,
    B: *mut wire_cst_EnumWithItemStructTwinSyncSse_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSyncSse_A {
    a_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSyncSse_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_normal {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinNormalKind,
}
#[repr(C)]
pub union EnumWithItemTupleTwinNormalKind {
    A: *mut wire_cst_EnumWithItemTupleTwinNormal_A,
    B: *mut wire_cst_EnumWithItemTupleTwinNormal_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinNormal_A {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinNormal_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_rust_async {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinRustAsyncKind,
}
#[repr(C)]
pub union EnumWithItemTupleTwinRustAsyncKind {
    A: *mut wire_cst_EnumWithItemTupleTwinRustAsync_A,
    B: *mut wire_cst_EnumWithItemTupleTwinRustAsync_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsync_A {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsync_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_rust_async_sse {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinRustAsyncSseKind,
}
#[repr(C)]
pub union EnumWithItemTupleTwinRustAsyncSseKind {
    A: *mut wire_cst_EnumWithItemTupleTwinRustAsyncSse_A,
    B: *mut wire_cst_EnumWithItemTupleTwinRustAsyncSse_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsyncSse_A {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsyncSse_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_sse {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinSseKind,
}
#[repr(C)]
pub union EnumWithItemTupleTwinSseKind {
    A: *mut wire_cst_EnumWithItemTupleTwinSse_A,
    B: *mut wire_cst_EnumWithItemTupleTwinSse_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSse_A {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSse_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_sync {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinSyncKind,
}
#[repr(C)]
pub union EnumWithItemTupleTwinSyncKind {
    A: *mut wire_cst_EnumWithItemTupleTwinSync_A,
    B: *mut wire_cst_EnumWithItemTupleTwinSync_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSync_A {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSync_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_sync_sse {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinSyncSseKind,
}
#[repr(C)]
pub union EnumWithItemTupleTwinSyncSseKind {
    A: *mut wire_cst_EnumWithItemTupleTwinSyncSse_A,
    B: *mut wire_cst_EnumWithItemTupleTwinSyncSse_B,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSyncSse_A {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSyncSse_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_event_twin_normal {
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_event_twin_rust_async {
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_event_twin_rust_async_sse {
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_event_twin_sse {
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_normal {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_normal,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal,
    newtypeint: *mut wire_cst_new_type_int_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_rust_async {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_rust_async,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async,
    newtypeint: *mut wire_cst_new_type_int_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_rust_async_sse {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_rust_async_sse,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async_sse,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async_sse,
    newtypeint: *mut wire_cst_new_type_int_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_sse {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_sse,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sse,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sse,
    newtypeint: *mut wire_cst_new_type_int_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_sync {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_sync,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync,
    newtypeint: *mut wire_cst_new_type_int_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_sync_sse {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_sync_sse,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync_sse,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync_sse,
    newtypeint: *mut wire_cst_new_type_int_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_chrono_twin_normal {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_chrono_twin_rust_async {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_chrono_twin_sync {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_uuid_twin_normal {
    one: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_uuid_twin_rust_async {
    one: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_uuid_twin_sync {
    one: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_normal {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_rust_async_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_sync {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_sync_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_normal {
    tag: i32,
    kind: *mut KitchenSinkTwinNormalKind,
}
#[repr(C)]
pub union KitchenSinkTwinNormalKind {
    Empty: *mut wire_cst_KitchenSinkTwinNormal_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinNormal_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinNormal_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinNormal_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinNormal_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinNormal_Enums,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Empty {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_rust_async {
    tag: i32,
    kind: *mut KitchenSinkTwinRustAsyncKind,
}
#[repr(C)]
pub union KitchenSinkTwinRustAsyncKind {
    Empty: *mut wire_cst_KitchenSinkTwinRustAsync_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinRustAsync_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinRustAsync_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinRustAsync_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinRustAsync_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinRustAsync_Enums,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Empty {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_rust_async_sse {
    tag: i32,
    kind: *mut KitchenSinkTwinRustAsyncSseKind,
}
#[repr(C)]
pub union KitchenSinkTwinRustAsyncSseKind {
    Empty: *mut wire_cst_KitchenSinkTwinRustAsyncSse_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinRustAsyncSse_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinRustAsyncSse_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinRustAsyncSse_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinRustAsyncSse_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinRustAsyncSse_Enums,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsyncSse_Empty {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsyncSse_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsyncSse_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsyncSse_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsyncSse_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsyncSse_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_sse {
    tag: i32,
    kind: *mut KitchenSinkTwinSseKind,
}
#[repr(C)]
pub union KitchenSinkTwinSseKind {
    Empty: *mut wire_cst_KitchenSinkTwinSse_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinSse_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinSse_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinSse_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinSse_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinSse_Enums,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSse_Empty {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSse_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSse_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSse_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSse_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSse_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_sync {
    tag: i32,
    kind: *mut KitchenSinkTwinSyncKind,
}
#[repr(C)]
pub union KitchenSinkTwinSyncKind {
    Empty: *mut wire_cst_KitchenSinkTwinSync_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinSync_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinSync_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinSync_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinSync_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinSync_Enums,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Empty {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_sync_sse {
    tag: i32,
    kind: *mut KitchenSinkTwinSyncSseKind,
}
#[repr(C)]
pub union KitchenSinkTwinSyncSseKind {
    Empty: *mut wire_cst_KitchenSinkTwinSyncSse_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinSyncSse_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinSyncSse_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinSyncSse_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinSyncSse_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinSyncSse_Enums,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSyncSse_Empty {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSyncSse_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSyncSse_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSyncSse_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSyncSse_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSyncSse_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_Chrono_Duration {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_Chrono_Local {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_Chrono_Naive {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_DartOpaque {
    ptr: *mut *const std::ffi::c_void,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_RustOpaque_hide_data {
    ptr: *mut *const std::ffi::c_void,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_application_env_var {
    ptr: *mut wire_cst_application_env_var,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_application_settings {
    ptr: *mut wire_cst_application_settings,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_normal {
    ptr: *mut wire_cst_attribute_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_rust_async {
    ptr: *mut wire_cst_attribute_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_rust_async_sse {
    ptr: *mut wire_cst_attribute_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_sse {
    ptr: *mut wire_cst_attribute_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_sync {
    ptr: *mut wire_cst_attribute_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_sync_sse {
    ptr: *mut wire_cst_attribute_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_bool {
    ptr: *mut bool,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_element_twin_normal {
    ptr: *mut wire_cst_element_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_element_twin_rust_async {
    ptr: *mut wire_cst_element_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_element_twin_rust_async_sse {
    ptr: *mut wire_cst_element_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_element_twin_sse {
    ptr: *mut wire_cst_element_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_element_twin_sync {
    ptr: *mut wire_cst_element_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_element_twin_sync_sse {
    ptr: *mut wire_cst_element_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_enum_opaque_twin_normal {
    ptr: *mut wire_cst_enum_opaque_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_enum_opaque_twin_rust_async {
    ptr: *mut wire_cst_enum_opaque_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_enum_opaque_twin_rust_async_sse {
    ptr: *mut wire_cst_enum_opaque_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_enum_opaque_twin_sse {
    ptr: *mut wire_cst_enum_opaque_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_enum_opaque_twin_sync {
    ptr: *mut wire_cst_enum_opaque_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_enum_opaque_twin_sync_sse {
    ptr: *mut wire_cst_enum_opaque_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_enum {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_size {
    ptr: *mut wire_cst_my_size,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_normal {
    ptr: *mut wire_cst_my_tree_node_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_rust_async {
    ptr: *mut wire_cst_my_tree_node_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_rust_async_sse {
    ptr: *mut wire_cst_my_tree_node_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_sse {
    ptr: *mut wire_cst_my_tree_node_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_sync {
    ptr: *mut wire_cst_my_tree_node_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_sync_sse {
    ptr: *mut wire_cst_my_tree_node_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_nested_raw_string_mirrored {
    ptr: *mut wire_cst_nested_raw_string_mirrored,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_of_nested_raw_string_mirrored {
    raw: *mut wire_cst_list_nested_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_normal {
    ptr: *mut *mut wire_cst_attribute_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
    ptr: *mut *mut wire_cst_attribute_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_rust_async_sse {
    ptr: *mut *mut wire_cst_attribute_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_sse {
    ptr: *mut *mut wire_cst_attribute_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_sync {
    ptr: *mut *mut wire_cst_attribute_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_sync_sse {
    ptr: *mut *mut wire_cst_attribute_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_i_32 {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async_sse {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_sse {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_sync_sse {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_list_prim_i_32 {
    ptr: *mut *mut wire_cst_list_prim_i_32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_point_twin_normal {
    ptr: *mut wire_cst_point_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_point_twin_rust_async {
    ptr: *mut wire_cst_point_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_point_twin_rust_async_sse {
    ptr: *mut wire_cst_point_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_point_twin_sse {
    ptr: *mut wire_cst_point_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_point_twin_sync {
    ptr: *mut wire_cst_point_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_point_twin_sync_sse {
    ptr: *mut wire_cst_point_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_f_32 {
    ptr: *mut f32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_f_64 {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_16 {
    ptr: *mut i16,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_32 {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_64 {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_8 {
    ptr: *mut i8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_16 {
    ptr: *mut u16,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_32 {
    ptr: *mut u32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_64 {
    ptr: *mut u64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_8 {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_raw_string_enum_mirrored {
    ptr: *mut wire_cst_raw_string_enum_mirrored,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_raw_string_mirrored {
    ptr: *mut wire_cst_raw_string_mirrored,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_record_string_i_32 {
    ptr: *mut wire_cst_record_string_i_32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_sum_with_twin_normal {
    ptr: *mut wire_cst_sum_with_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_sum_with_twin_rust_async {
    ptr: *mut wire_cst_sum_with_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_sum_with_twin_rust_async_sse {
    ptr: *mut wire_cst_sum_with_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_sum_with_twin_sse {
    ptr: *mut wire_cst_sum_with_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_sum_with_twin_sync {
    ptr: *mut wire_cst_sum_with_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_sum_with_twin_sync_sse {
    ptr: *mut wire_cst_sum_with_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_normal {
    ptr: *mut wire_cst_test_id_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_rust_async {
    ptr: *mut wire_cst_test_id_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_rust_async_sse {
    ptr: *mut wire_cst_test_id_twin_rust_async_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_sse {
    ptr: *mut wire_cst_test_id_twin_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_sync {
    ptr: *mut wire_cst_test_id_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_sync_sse {
    ptr: *mut wire_cst_test_id_twin_sync_sse,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_normal {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_rust_async {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_rust_async_sse {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_sse {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_sync {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_sync_sse {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_2_twin_normal {
    key: u32,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_2_twin_rust_async {
    key: u32,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_2_twin_rust_async_sse {
    key: u32,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_2_twin_sse {
    key: u32,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_2_twin_sync {
    key: u32,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_2_twin_sync_sse {
    key: u32,
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_twin_normal {
    key: u32,
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_twin_rust_async {
    key: u32,
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_twin_rust_async_sse {
    key: u32,
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_twin_sse {
    key: u32,
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_macro_struct {
    data: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_normal {
    tag: i32,
    kind: *mut MeasureTwinNormalKind,
}
#[repr(C)]
pub union MeasureTwinNormalKind {
    Speed: *mut wire_cst_MeasureTwinNormal_Speed,
    Distance: *mut wire_cst_MeasureTwinNormal_Distance,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinNormal_Speed {
    field0: *mut wire_cst_speed_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinNormal_Distance {
    field0: *mut wire_cst_distance_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_rust_async {
    tag: i32,
    kind: *mut MeasureTwinRustAsyncKind,
}
#[repr(C)]
pub union MeasureTwinRustAsyncKind {
    Speed: *mut wire_cst_MeasureTwinRustAsync_Speed,
    Distance: *mut wire_cst_MeasureTwinRustAsync_Distance,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinRustAsync_Speed {
    field0: *mut wire_cst_speed_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinRustAsync_Distance {
    field0: *mut wire_cst_distance_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_rust_async_sse {
    tag: i32,
    kind: *mut MeasureTwinRustAsyncSseKind,
}
#[repr(C)]
pub union MeasureTwinRustAsyncSseKind {
    Speed: *mut wire_cst_MeasureTwinRustAsyncSse_Speed,
    Distance: *mut wire_cst_MeasureTwinRustAsyncSse_Distance,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinRustAsyncSse_Speed {
    field0: *mut wire_cst_speed_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinRustAsyncSse_Distance {
    field0: *mut wire_cst_distance_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_sse {
    tag: i32,
    kind: *mut MeasureTwinSseKind,
}
#[repr(C)]
pub union MeasureTwinSseKind {
    Speed: *mut wire_cst_MeasureTwinSse_Speed,
    Distance: *mut wire_cst_MeasureTwinSse_Distance,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSse_Speed {
    field0: *mut wire_cst_speed_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSse_Distance {
    field0: *mut wire_cst_distance_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_sync {
    tag: i32,
    kind: *mut MeasureTwinSyncKind,
}
#[repr(C)]
pub union MeasureTwinSyncKind {
    Speed: *mut wire_cst_MeasureTwinSync_Speed,
    Distance: *mut wire_cst_MeasureTwinSync_Distance,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSync_Speed {
    field0: *mut wire_cst_speed_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSync_Distance {
    field0: *mut wire_cst_distance_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_sync_sse {
    tag: i32,
    kind: *mut MeasureTwinSyncSseKind,
}
#[repr(C)]
pub union MeasureTwinSyncSseKind {
    Speed: *mut wire_cst_MeasureTwinSyncSse_Speed,
    Distance: *mut wire_cst_MeasureTwinSyncSse_Distance,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSyncSse_Speed {
    field0: *mut wire_cst_speed_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSyncSse_Distance {
    field0: *mut wire_cst_distance_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_normal {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_rust_async_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_sync {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_sync_sse {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_mirror_struct_twin_normal {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_mirror_struct_twin_rust_async {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_mirror_struct_twin_rust_async_sse {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_mirror_struct_twin_sse {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_mirror_struct_twin_sync {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_mirror_struct_twin_sync_sse {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_normal {
    regular: *mut wire_cst_list_prim_u_8,
    r#type: *mut wire_cst_list_prim_u_8,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
    regular: *mut wire_cst_list_prim_u_8,
    r#type: *mut wire_cst_list_prim_u_8,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_rust_async_sse {
    regular: *mut wire_cst_list_prim_u_8,
    r#type: *mut wire_cst_list_prim_u_8,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_sse {
    regular: *mut wire_cst_list_prim_u_8,
    r#type: *mut wire_cst_list_prim_u_8,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_sync {
    regular: *mut wire_cst_list_prim_u_8,
    r#type: *mut wire_cst_list_prim_u_8,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_sync_sse {
    regular: *mut wire_cst_list_prim_u_8,
    r#type: *mut wire_cst_list_prim_u_8,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_normal {
    tree_node: wire_cst_my_tree_node_twin_normal,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_rust_async {
    tree_node: wire_cst_my_tree_node_twin_rust_async,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_rust_async_sse {
    tree_node: wire_cst_my_tree_node_twin_rust_async_sse,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_sse {
    tree_node: wire_cst_my_tree_node_twin_sse,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_sync {
    tree_node: wire_cst_my_tree_node_twin_sync,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_sync_sse {
    tree_node: wire_cst_my_tree_node_twin_sync_sse,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_size {
    width: i32,
    height: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_stream_entry_twin_normal {
    hello: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_stream_entry_twin_rust_async {
    hello: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_stream_entry_twin_rust_async_sse {
    hello: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_stream_entry_twin_sse {
    hello: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_struct {
    content: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_normal {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_rust_async {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_rust_async_sse {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_sse {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_sync {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_sync_sse {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_nested_raw_string_mirrored {
    raw: wire_cst_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_simple_struct {
    field: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_normal {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_rust_async {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_rust_async_sse {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_sse {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_sync {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_sync_sse {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_normal {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_rust_async {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_rust_async_sse {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_sse {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_sync {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_sync_sse {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_numbers {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_old_simple_struct {
    field: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_normal {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_rust_async {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_rust_async_sse {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_sse {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_sync {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_sync_sse {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_normal {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_rust_async {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_rust_async_sse {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async_sse,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_sse {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sse,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_sync {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_sync_sse {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync_sse,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_point_twin_normal {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_point_twin_rust_async {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_point_twin_rust_async_sse {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_point_twin_sse {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_point_twin_sync {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_point_twin_sync_sse {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_enum_mirrored {
    tag: i32,
    kind: *mut RawStringEnumMirroredKind,
}
#[repr(C)]
pub union RawStringEnumMirroredKind {
    Raw: *mut wire_cst_RawStringEnumMirrored_Raw,
    Nested: *mut wire_cst_RawStringEnumMirrored_Nested,
    ListOfNested: *mut wire_cst_RawStringEnumMirrored_ListOfNested,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_RawStringEnumMirrored_Raw {
    field0: *mut wire_cst_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_RawStringEnumMirrored_Nested {
    field0: *mut wire_cst_nested_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_RawStringEnumMirrored_ListOfNested {
    field0: *mut wire_cst_list_of_nested_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_item_struct_twin_normal {
    r#type: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_item_struct_twin_rust_async {
    r#type: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_item_struct_twin_rust_async_sse {
    r#type: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_item_struct_twin_sse {
    r#type: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_item_struct_twin_sync {
    r#type: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_item_struct_twin_sync_sse {
    r#type: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_raw_string_mirrored {
    value: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_record_application_settings_raw_string_enum_mirrored {
    field0: wire_cst_application_settings,
    field1: wire_cst_raw_string_enum_mirrored,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_record_string_i_32 {
    field0: *mut wire_cst_list_prim_u_8,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sequences {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_normal {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_rust_async {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_rust_async_sse {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_sse {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_sync {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_sync_sse {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_normal {
    tag: i32,
    kind: *mut SpeedTwinNormalKind,
}
#[repr(C)]
pub union SpeedTwinNormalKind {
    Unknown: *mut wire_cst_SpeedTwinNormal_Unknown,
    GPS: *mut wire_cst_SpeedTwinNormal_GPS,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinNormal_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinNormal_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_rust_async {
    tag: i32,
    kind: *mut SpeedTwinRustAsyncKind,
}
#[repr(C)]
pub union SpeedTwinRustAsyncKind {
    Unknown: *mut wire_cst_SpeedTwinRustAsync_Unknown,
    GPS: *mut wire_cst_SpeedTwinRustAsync_GPS,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinRustAsync_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinRustAsync_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_rust_async_sse {
    tag: i32,
    kind: *mut SpeedTwinRustAsyncSseKind,
}
#[repr(C)]
pub union SpeedTwinRustAsyncSseKind {
    Unknown: *mut wire_cst_SpeedTwinRustAsyncSse_Unknown,
    GPS: *mut wire_cst_SpeedTwinRustAsyncSse_GPS,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinRustAsyncSse_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinRustAsyncSse_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_sse {
    tag: i32,
    kind: *mut SpeedTwinSseKind,
}
#[repr(C)]
pub union SpeedTwinSseKind {
    Unknown: *mut wire_cst_SpeedTwinSse_Unknown,
    GPS: *mut wire_cst_SpeedTwinSse_GPS,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSse_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSse_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_sync {
    tag: i32,
    kind: *mut SpeedTwinSyncKind,
}
#[repr(C)]
pub union SpeedTwinSyncKind {
    Unknown: *mut wire_cst_SpeedTwinSync_Unknown,
    GPS: *mut wire_cst_SpeedTwinSync_GPS,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSync_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSync_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_sync_sse {
    tag: i32,
    kind: *mut SpeedTwinSyncSseKind,
}
#[repr(C)]
pub union SpeedTwinSyncSseKind {
    Unknown: *mut wire_cst_SpeedTwinSyncSse_Unknown,
    GPS: *mut wire_cst_SpeedTwinSyncSse_GPS,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSyncSse_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSyncSse_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_normal {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_rust_async {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_rust_async_sse {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_sse {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_sync {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_sync_sse {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_normal {
    abc1: wire_cst_abc_twin_normal,
    abc2: wire_cst_abc_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_rust_async {
    abc1: wire_cst_abc_twin_rust_async,
    abc2: wire_cst_abc_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_rust_async_sse {
    abc1: wire_cst_abc_twin_rust_async_sse,
    abc2: wire_cst_abc_twin_rust_async_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_sse {
    abc1: wire_cst_abc_twin_sse,
    abc2: wire_cst_abc_twin_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_sync {
    abc1: wire_cst_abc_twin_sync,
    abc2: wire_cst_abc_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_sync_sse {
    abc1: wire_cst_abc_twin_sync_sse,
    abc2: wire_cst_abc_twin_sync_sse,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_normal {
    a: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_rust_async {
    a: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_rust_async_sse {
    a: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_sse {
    a: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_sync {
    a: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_sync_sse {
    a: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_normal {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_rust_async {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_rust_async_sse {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_sse {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_sync {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_sync_sse {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_normal {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_rust_async {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_rust_async_sse {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_sse {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_sync {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_sync_sse {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_normal {
    x: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_rust_async {
    x: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_rust_async_sse {
    x: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_sse {
    x: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_sync {
    x: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_sync_sse {
    x: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_chrono_twin_normal {
    dt: *mut i64,
    dt2: *mut i64,
    du: *mut i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_chrono_twin_rust_async {
    dt: *mut i64,
    dt2: *mut i64,
    du: *mut i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_chrono_twin_sync {
    dt: *mut i64,
    dt2: *mut i64,
    du: *mut i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_normal {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_rust_async_sse {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_sse {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_sync {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_sync_sse {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_model_twin_normal {
    id: u64,
    name: *mut wire_cst_list_prim_u_8,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_model_twin_rust_async {
    id: u64,
    name: *mut wire_cst_list_prim_u_8,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_model_twin_rust_async_sse {
    id: u64,
    name: *mut wire_cst_list_prim_u_8,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_model_twin_sse {
    id: u64,
    name: *mut wire_cst_list_prim_u_8,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_model_twin_sync {
    id: u64,
    name: *mut wire_cst_list_prim_u_8,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_model_twin_sync_sse {
    id: u64,
    name: *mut wire_cst_list_prim_u_8,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_normal {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_rust_async {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_rust_async_sse {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_sse {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_sync {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_sync_sse {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_normal {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_rust_async {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_rust_async_sse {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_sse {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_sync {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_sync_sse {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_normal {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_rust_async {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_rust_async_sse {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_sse {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_sync {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_sync_sse {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_vec_of_primitive_pack_twin_normal {
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int16list: *mut wire_cst_list_prim_i_16,
    uint16list: *mut wire_cst_list_prim_u_16,
    uint32list: *mut wire_cst_list_prim_u_32,
    int32list: *mut wire_cst_list_prim_i_32,
    uint64list: *mut wire_cst_list_prim_u_64,
    int64list: *mut wire_cst_list_prim_i_64,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    bool_list: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_vec_of_primitive_pack_twin_rust_async {
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int16list: *mut wire_cst_list_prim_i_16,
    uint16list: *mut wire_cst_list_prim_u_16,
    uint32list: *mut wire_cst_list_prim_u_32,
    int32list: *mut wire_cst_list_prim_i_32,
    uint64list: *mut wire_cst_list_prim_u_64,
    int64list: *mut wire_cst_list_prim_i_64,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    bool_list: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_vec_of_primitive_pack_twin_rust_async_sse {
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int16list: *mut wire_cst_list_prim_i_16,
    uint16list: *mut wire_cst_list_prim_u_16,
    uint32list: *mut wire_cst_list_prim_u_32,
    int32list: *mut wire_cst_list_prim_i_32,
    uint64list: *mut wire_cst_list_prim_u_64,
    int64list: *mut wire_cst_list_prim_i_64,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    bool_list: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_vec_of_primitive_pack_twin_sse {
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int16list: *mut wire_cst_list_prim_i_16,
    uint16list: *mut wire_cst_list_prim_u_16,
    uint32list: *mut wire_cst_list_prim_u_32,
    int32list: *mut wire_cst_list_prim_i_32,
    uint64list: *mut wire_cst_list_prim_u_64,
    int64list: *mut wire_cst_list_prim_i_64,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    bool_list: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_vec_of_primitive_pack_twin_sync {
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int16list: *mut wire_cst_list_prim_i_16,
    uint16list: *mut wire_cst_list_prim_u_16,
    uint32list: *mut wire_cst_list_prim_u_32,
    int32list: *mut wire_cst_list_prim_i_32,
    uint64list: *mut wire_cst_list_prim_u_64,
    int64list: *mut wire_cst_list_prim_i_64,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    bool_list: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_vec_of_primitive_pack_twin_sync_sse {
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int16list: *mut wire_cst_list_prim_i_16,
    uint16list: *mut wire_cst_list_prim_u_16,
    uint32list: *mut wire_cst_list_prim_u_32,
    int32list: *mut wire_cst_list_prim_i_32,
    uint64list: *mut wire_cst_list_prim_u_64,
    int64list: *mut wire_cst_list_prim_i_64,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    bool_list: *mut wire_cst_list_bool,
}
