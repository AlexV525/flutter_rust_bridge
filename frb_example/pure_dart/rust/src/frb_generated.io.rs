// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use super::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync::*;
use crate::api::rust_auto_opaque::*;
use crate::api::rust_opaque::*;
use crate::api::rust_opaque_sync::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecodable<chrono::Duration> for i64 {
    fn cst_decode(self) -> chrono::Duration {
        chrono::Duration::microseconds(self)
    }
}
impl CstDecodable<Vec<chrono::Duration>> for *mut wire_cst_list_prim_i_64 {
    fn cst_decode(self) -> Vec<chrono::Duration> {
        let vec: Vec<i64> = self.cst_decode();
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<chrono::NaiveDateTime>> for *mut wire_cst_list_prim_i_64 {
    fn cst_decode(self) -> Vec<chrono::NaiveDateTime> {
        let vec: Vec<i64> = self.cst_decode();
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<flutter_rust_bridge::DartOpaque> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self) }
    }
}
impl CstDecodable<[flutter_rust_bridge::DartOpaque; 1]> for *mut wire_cst_list_DartOpaque {
    fn cst_decode(self) -> [flutter_rust_bridge::DartOpaque; 1] {
        let vec: Vec<flutter_rust_bridge::DartOpaque> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<Mutex<HideData>>> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Mutex<HideData>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<RwLock<HideData>>> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<RwLock<HideData>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<[flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2]>
    for *mut wire_cst_list_RustOpaque_hide_data
{
    fn cst_decode(
        self,
    ) -> [flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2] {
        let vec: Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<i32>> for *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<i32> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecodable<
        flutter_rust_bridge::RustOpaque<
            std::sync::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
            >,
        >,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<
        std::sync::RwLock<Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>>,
    > {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecodable<
        flutter_rust_bridge::RustOpaque<
            std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>,
        >,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecodable<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
    for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecodable<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl
    CstDecodable<
        flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>,
    > for *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
    {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecodable<String> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8_lossy(&vec).into_owned()
    }
}
impl CstDecodable<Vec<String>> for *mut wire_cst_StringList {
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<uuid::Uuid> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> uuid::Uuid {
        let single: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::cst_decode_uuid_ref(single.as_slice())
    }
}
impl CstDecodable<Vec<uuid::Uuid>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<uuid::Uuid> {
        let multiple: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::cst_decode_uuids(multiple)
    }
}
impl CstDecodable<flutter_rust_bridge::ZeroCopyBuffer<Vec<u8>>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> flutter_rust_bridge::ZeroCopyBuffer<Vec<u8>> {
        flutter_rust_bridge::ZeroCopyBuffer(self.cst_decode())
    }
}
impl CstDecodable<crate::api::misc_example::ATwinNormal> for wire_cst_a_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::ATwinNormal {
        crate::api::misc_example::ATwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>
    for wire_cst_a_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for wire_cst_a_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::misc_example::AbcTwinNormal> for wire_cst_abc_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::AbcTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::misc_example::AbcTwinNormal::A(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::misc_example::AbcTwinNormal::B(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::misc_example::AbcTwinNormal::C(ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::misc_example::AbcTwinNormal::JustInt(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
    for wire_cst_abc_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
    for wire_cst_abc_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.JustInt);
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>
    for wire_cst_application_env
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv {
        crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv {
            vars: self.vars.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar>
    for wire_cst_application_env_var
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar {
        crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>
    for wire_cst_application_settings
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings {
        crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings {
            name: self.name.cst_decode(),
            version: self.version.cst_decode(),
            mode: self.mode.cst_decode(),
            env: self.env.cst_decode(),
            env_optional: self.env_optional.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::optional::AttributeTwinNormal> for wire_cst_attribute_twin_normal {
    fn cst_decode(self) -> crate::api::optional::AttributeTwinNormal {
        crate::api::optional::AttributeTwinNormal {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
    for wire_cst_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>
    for wire_cst_attribute_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::misc_example::BTwinNormal> for wire_cst_b_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::BTwinNormal {
        crate::api::misc_example::BTwinNormal {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>
    for wire_cst_b_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for wire_cst_b_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::array::BlobTwinNormal> for wire_cst_blob_twin_normal {
    fn cst_decode(self) -> crate::api::array::BlobTwinNormal {
        crate::api::array::BlobTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>
    for wire_cst_blob_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>
    for wire_cst_blob_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
        crate::api::pseudo_manual::array_twin_sync::BlobTwinSync(self.field0.cst_decode())
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>>
    for *mut wire_cst_application_env
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<chrono::DateTime<chrono::Utc>> for *mut i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<chrono::DateTime<chrono::Utc>>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<flutter_rust_bridge::DartOpaque> for *mut *const std::ffi::c_void {
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<flutter_rust_bridge::DartOpaque>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
    for *mut *const std::ffi::c_void
{
    fn cst_decode(
        self,
    ) -> flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::misc_example::ATwinNormal> for *mut wire_cst_a_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::ATwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::ATwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>
    for *mut wire_cst_a_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for *mut wire_cst_a_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::misc_example::AbcTwinNormal> for *mut wire_cst_abc_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::AbcTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::AbcTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
    for *mut wire_cst_abc_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
    for *mut wire_cst_abc_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>
    for *mut wire_cst_application_env
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>
    for *mut wire_cst_application_settings
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::optional::AttributeTwinNormal>
    for *mut wire_cst_attribute_twin_normal
{
    fn cst_decode(self) -> crate::api::optional::AttributeTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::optional::AttributeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
    for *mut wire_cst_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>
    for *mut wire_cst_attribute_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::misc_example::BTwinNormal> for *mut wire_cst_b_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::BTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::BTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>
    for *mut wire_cst_b_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for *mut wire_cst_b_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<bool> for *mut bool {
    fn cst_decode(self) -> bool {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<crate::api::misc_example::CTwinNormal> for *mut wire_cst_c_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::CTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::CTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>
    for *mut wire_cst_c_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for *mut wire_cst_c_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::method::ConcatenateWithTwinNormal>
    for *mut wire_cst_concatenate_with_twin_normal
{
    fn cst_decode(self) -> crate::api::method::ConcatenateWithTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::method::ConcatenateWithTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
    for *mut wire_cst_concatenate_with_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
    for *mut wire_cst_concatenate_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for *mut wire_cst_custom_nested_error_inner_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::exception::CustomNestedErrorInnerTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    > for *mut wire_cst_custom_nested_error_inner_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>
    for *mut wire_cst_custom_nested_error_inner_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for *mut wire_cst_custom_nested_error_outer_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::exception::CustomNestedErrorOuterTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    > for *mut wire_cst_custom_nested_error_outer_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
    for *mut wire_cst_custom_nested_error_outer_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::exception::CustomStructErrorTwinNormal>
    for *mut wire_cst_custom_struct_error_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::exception::CustomStructErrorTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
    > for *mut wire_cst_custom_struct_error_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
    for *mut wire_cst_custom_struct_error_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::exception::CustomStructTwinNormal>
    for *mut wire_cst_custom_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::exception::CustomStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
    for *mut wire_cst_custom_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
    for *mut wire_cst_custom_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::attribute::CustomizedTwinNormal>
    for *mut wire_cst_customized_twin_normal
{
    fn cst_decode(self) -> crate::api::attribute::CustomizedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::attribute::CustomizedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
    for *mut wire_cst_customized_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
    for *mut wire_cst_customized_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for *mut wire_cst_dart_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
    > for *mut wire_cst_dart_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
    for *mut wire_cst_dart_opaque_nested_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::misc_type::EmptyTwinNormal> for *mut wire_cst_empty_twin_normal {
    fn cst_decode(self) -> crate::api::misc_type::EmptyTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_type::EmptyTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
    for *mut wire_cst_empty_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for *mut wire_cst_empty_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for *mut wire_cst_enum_dart_opaque_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
    > for *mut wire_cst_enum_dart_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
    for *mut wire_cst_enum_dart_opaque_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::rust_opaque::EnumOpaqueTwinNormal>
    for *mut wire_cst_enum_opaque_twin_normal
{
    fn cst_decode(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::rust_opaque::EnumOpaqueTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
    for *mut wire_cst_enum_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
    for *mut wire_cst_enum_opaque_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for *mut wire_cst_enum_with_item_mixed_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::EnumWithItemMixedTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for *mut wire_cst_enum_with_item_mixed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
    for *mut wire_cst_enum_with_item_mixed_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for *mut wire_cst_enum_with_item_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::EnumWithItemStructTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for *mut wire_cst_enum_with_item_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
    for *mut wire_cst_enum_with_item_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for *mut wire_cst_enum_with_item_tuple_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::EnumWithItemTupleTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for *mut wire_cst_enum_with_item_tuple_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
    for *mut wire_cst_enum_with_item_tuple_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::event_listener::EventTwinNormal> for *mut wire_cst_event_twin_normal {
    fn cst_decode(self) -> crate::api::event_listener::EventTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::event_listener::EventTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
    for *mut wire_cst_event_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync>
    for *mut wire_cst_event_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::optional::ExoticOptionalsTwinNormal>
    for *mut wire_cst_exotic_optionals_twin_normal
{
    fn cst_decode(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::optional::ExoticOptionalsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    for *mut wire_cst_exotic_optionals_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>
    for *mut wire_cst_exotic_optionals_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<f32> for *mut f32 {
    fn cst_decode(self) -> f32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<f64> for *mut f64 {
    fn cst_decode(self) -> f64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<crate::api::chrono_type::FeatureChronoTwinNormal>
    for *mut wire_cst_feature_chrono_twin_normal
{
    fn cst_decode(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::chrono_type::FeatureChronoTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync>
    for *mut wire_cst_feature_chrono_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
    for *mut wire_cst_feature_chrono_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::uuid_type::FeatureUuidTwinNormal>
    for *mut wire_cst_feature_uuid_twin_normal
{
    fn cst_decode(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::uuid_type::FeatureUuidTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
    for *mut wire_cst_feature_uuid_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
    for *mut wire_cst_feature_uuid_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::array::FeedIdTwinNormal> for *mut wire_cst_feed_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::FeedIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::array::FeedIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
    for *mut wire_cst_feed_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for *mut wire_cst_feed_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<i16> for *mut i16 {
    fn cst_decode(self) -> i16 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<i32> for *mut i32 {
    fn cst_decode(self) -> i32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<i64> for *mut i64 {
    fn cst_decode(self) -> i64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<i8> for *mut i8 {
    fn cst_decode(self) -> i8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<crate::api::enumeration::KitchenSinkTwinNormal>
    for *mut wire_cst_kitchen_sink_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::KitchenSinkTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
    for *mut wire_cst_kitchen_sink_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
    for *mut wire_cst_kitchen_sink_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::inside_macro::MacroStruct> for *mut wire_cst_macro_struct {
    fn cst_decode(self) -> crate::api::inside_macro::MacroStruct {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::inside_macro::MacroStruct>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::enumeration::MeasureTwinNormal>
    for *mut wire_cst_measure_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::MeasureTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::MeasureTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
    for *mut wire_cst_measure_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
    for *mut wire_cst_measure_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::array::MessageIdTwinNormal> for *mut wire_cst_message_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::MessageIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::array::MessageIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
    for *mut wire_cst_message_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for *mut wire_cst_message_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::misc_example::MyNestedStructTwinNormal>
    for *mut wire_cst_my_nested_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::MyNestedStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
    > for *mut wire_cst_my_nested_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
    for *mut wire_cst_my_nested_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::auxiliary::sample_types::MySize> for *mut wire_cst_my_size {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MySize {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::auxiliary::sample_types::MySize>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::auxiliary::sample_types::MyStruct> for *mut wire_cst_my_struct {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyStruct {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::auxiliary::sample_types::MyStruct>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::misc_example::MyTreeNodeTwinNormal>
    for *mut wire_cst_my_tree_node_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::MyTreeNodeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
    for *mut wire_cst_my_tree_node_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
    for *mut wire_cst_my_tree_node_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for *mut wire_cst_new_type_int_twin_normal
{
    fn cst_decode(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::newtype_pattern::NewTypeIntTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
    > for *mut wire_cst_new_type_int_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
    for *mut wire_cst_new_type_int_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::enumeration::NoteTwinNormal> for *mut wire_cst_note_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::NoteTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::NoteTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
    for *mut wire_cst_note_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
    for *mut wire_cst_note_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::Numbers> for *mut wire_cst_numbers {
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::Numbers {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::mirror_twin_sync::Numbers>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecodable<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for *mut wire_cst_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::rust_opaque::OpaqueNestedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
    for *mut wire_cst_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
    for *mut wire_cst_opaque_nested_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::optional::OptVecsTwinNormal> for *mut wire_cst_opt_vecs_twin_normal {
    fn cst_decode(self) -> crate::api::optional::OptVecsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::optional::OptVecsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
    for *mut wire_cst_opt_vecs_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
    for *mut wire_cst_opt_vecs_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<(String, i32)> for *mut wire_cst_record_string_i_32 {
    fn cst_decode(self) -> (String, i32) {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<(String, i32)>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::Sequences>
    for *mut wire_cst_sequences
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::Sequences {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::mirror_twin_sync::Sequences>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecodable<crate::api::exception::SomeStructTwinNormal>
    for *mut wire_cst_some_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::SomeStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::exception::SomeStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
    for *mut wire_cst_some_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
    for *mut wire_cst_some_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::comment::StructWithCommentsTwinNormal>
    for *mut wire_cst_struct_with_comments_twin_normal
{
    fn cst_decode(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::comment::StructWithCommentsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
    > for *mut wire_cst_struct_with_comments_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
    for *mut wire_cst_struct_with_comments_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::misc_example::StructWithEnumTwinNormal>
    for *mut wire_cst_struct_with_enum_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::StructWithEnumTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
    > for *mut wire_cst_struct_with_enum_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
    for *mut wire_cst_struct_with_enum_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::structure::StructWithOneFieldTwinNormal>
    for *mut wire_cst_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::structure::StructWithOneFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
    > for *mut wire_cst_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
    for *mut wire_cst_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::structure::StructWithTwoFieldTwinNormal>
    for *mut wire_cst_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::structure::StructWithTwoFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
    > for *mut wire_cst_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
    for *mut wire_cst_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::structure::StructWithZeroFieldTwinNormal>
    for *mut wire_cst_struct_with_zero_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::structure::StructWithZeroFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for *mut wire_cst_struct_with_zero_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
    for *mut wire_cst_struct_with_zero_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::method::SumWithTwinNormal> for *mut wire_cst_sum_with_twin_normal {
    fn cst_decode(self) -> crate::api::method::SumWithTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::method::SumWithTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
    for *mut wire_cst_sum_with_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for *mut wire_cst_sum_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::array::TestIdTwinNormal> for *mut wire_cst_test_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::TestIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::array::TestIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
    for *mut wire_cst_test_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for *mut wire_cst_test_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for *mut wire_cst_tuple_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::structure::TupleStructWithOneFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    > for *mut wire_cst_tuple_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
    for *mut wire_cst_tuple_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for *mut wire_cst_tuple_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::structure::TupleStructWithTwoFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    > for *mut wire_cst_tuple_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
    for *mut wire_cst_tuple_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<u16> for *mut u16 {
    fn cst_decode(self) -> u16 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<u32> for *mut u32 {
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<u64> for *mut u64 {
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<u8> for *mut u8 {
    fn cst_decode(self) -> u8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<crate::api::attribute::UserIdTwinNormal> for *mut wire_cst_user_id_twin_normal {
    fn cst_decode(self) -> crate::api::attribute::UserIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::attribute::UserIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
    for *mut wire_cst_user_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
    for *mut wire_cst_user_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<crate::api::misc_example::WeekdaysTwinNormal> for *mut i32 {
    fn cst_decode(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::WeekdaysTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>
    for *mut i32
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::array::BlobTwinNormal>> for *mut wire_cst_blob_twin_normal {
    fn cst_decode(self) -> Box<crate::api::array::BlobTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::array::BlobTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>>
    for *mut wire_cst_blob_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>>
    for *mut wire_cst_blob_twin_sync
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecodable<Box<bool>> for *mut bool {
    fn cst_decode(self) -> Box<bool> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<Box<crate::api::enumeration::DistanceTwinNormal>>
    for *mut wire_cst_distance_twin_normal
{
    fn cst_decode(self) -> Box<crate::api::enumeration::DistanceTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::DistanceTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>>
    for *mut wire_cst_distance_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>>
    for *mut wire_cst_distance_twin_sync
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::optional::ExoticOptionalsTwinNormal>>
    for *mut wire_cst_exotic_optionals_twin_normal
{
    fn cst_decode(self) -> Box<crate::api::optional::ExoticOptionalsTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::optional::ExoticOptionalsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    > for *mut wire_cst_exotic_optionals_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
    for *mut wire_cst_exotic_optionals_twin_sync
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<f64>> for *mut f64 {
    fn cst_decode(self) -> Box<f64> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<Box<i32>> for *mut i32 {
    fn cst_decode(self) -> Box<i32> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<Box<i64>> for *mut i64 {
    fn cst_decode(self) -> Box<i64> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<Box<i8>> for *mut i8 {
    fn cst_decode(self) -> Box<i8> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<Box<crate::api::enumeration::KitchenSinkTwinNormal>>
    for *mut wire_cst_kitchen_sink_twin_normal
{
    fn cst_decode(self) -> Box<crate::api::enumeration::KitchenSinkTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::KitchenSinkTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>,
    > for *mut wire_cst_kitchen_sink_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>>
    for *mut wire_cst_kitchen_sink_twin_sync
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::auxiliary::sample_types::MySize>> for *mut wire_cst_my_size {
    fn cst_decode(self) -> Box<crate::auxiliary::sample_types::MySize> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::auxiliary::sample_types::MySize>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::enumeration::SpeedTwinNormal>>
    for *mut wire_cst_speed_twin_normal
{
    fn cst_decode(self) -> Box<crate::api::enumeration::SpeedTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::enumeration::SpeedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>>
    for *mut wire_cst_speed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>>
    for *mut wire_cst_speed_twin_sync
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecodable<Box<u8>> for *mut u8 {
    fn cst_decode(self) -> Box<u8> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecodable<Box<[u8; 1600]>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Box<[u8; 1600]> {
        CstDecodable::<[u8; 1600]>::cst_decode(self).into()
    }
}
impl CstDecodable<Box<crate::api::misc_example::WeekdaysTwinNormal>> for *mut i32 {
    fn cst_decode(self) -> Box<crate::api::misc_example::WeekdaysTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::misc_example::WeekdaysTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecodable<
        Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>,
    > for *mut i32
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for *mut i32
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecodable::<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecodable<crate::api::misc_example::CTwinNormal> for wire_cst_c_twin_normal {
    fn cst_decode(self) -> crate::api::misc_example::CTwinNormal {
        crate::api::misc_example::CTwinNormal {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>
    for wire_cst_c_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for wire_cst_c_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::method::ConcatenateWithTwinNormal>
    for wire_cst_concatenate_with_twin_normal
{
    fn cst_decode(self) -> crate::api::method::ConcatenateWithTwinNormal {
        crate::api::method::ConcatenateWithTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
    for wire_cst_concatenate_with_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
    for wire_cst_concatenate_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for wire_cst_custom_nested_error_inner_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    > for wire_cst_custom_nested_error_inner_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>
    for wire_cst_custom_nested_error_inner_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Three);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Four);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for wire_cst_custom_nested_error_outer_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::exception::CustomNestedErrorOuterTwinNormal::One(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    > for wire_cst_custom_nested_error_outer_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
    for wire_cst_custom_nested_error_outer_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.One);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Two);
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::exception::CustomStructErrorTwinNormal>
    for wire_cst_custom_struct_error_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        crate::api::exception::CustomStructErrorTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
    > for wire_cst_custom_struct_error_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
    for wire_cst_custom_struct_error_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::exception::CustomStructTwinNormal>
    for wire_cst_custom_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::CustomStructTwinNormal {
        crate::api::exception::CustomStructTwinNormal {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
    for wire_cst_custom_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
    for wire_cst_custom_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::attribute::CustomizedTwinNormal> for wire_cst_customized_twin_normal {
    fn cst_decode(self) -> crate::api::attribute::CustomizedTwinNormal {
        crate::api::attribute::CustomizedTwinNormal {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
    for wire_cst_customized_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
    for wire_cst_customized_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for wire_cst_dart_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
    > for wire_cst_dart_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
    for wire_cst_dart_opaque_nested_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::enumeration::DistanceTwinNormal> for wire_cst_distance_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::DistanceTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::DistanceTwinNormal::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                crate::api::enumeration::DistanceTwinNormal::Map(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
    for wire_cst_distance_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>
    for wire_cst_distance_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Map);
                crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::misc_type::EmptyTwinNormal> for wire_cst_empty_twin_normal {
    fn cst_decode(self) -> crate::api::misc_type::EmptyTwinNormal {
        crate::api::misc_type::EmptyTwinNormal {}
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
    for wire_cst_empty_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {}
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for wire_cst_empty_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {}
    }
}
impl CstDecodable<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for wire_cst_enum_dart_opaque_twin_normal
{
    fn cst_decode(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
    > for wire_cst_enum_dart_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
    for wire_cst_enum_dart_opaque_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Opaque);
                crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::rust_opaque::EnumOpaqueTwinNormal>
    for wire_cst_enum_opaque_twin_normal
{
    fn cst_decode(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(ans.field0.cst_decode())
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
    for wire_cst_enum_opaque_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive( ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj( ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex( ans.field0.cst_decode())
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
    for wire_cst_enum_opaque_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitive);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.TraitObj);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                    ans.field0.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Mutex);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(
                    ans.field0.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.RwLock);
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for wire_cst_enum_with_item_mixed_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::EnumWithItemMixedTwinNormal::A,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::enumeration::EnumWithItemMixedTwinNormal::B(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::enumeration::EnumWithItemMixedTwinNormal::C {
                    c_field: ans.c_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for wire_cst_enum_with_item_mixed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B( ans.field0.cst_decode())
                    }
2 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field:  ans.c_field.cst_decode()}
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
    for wire_cst_enum_with_item_mixed_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                    ans.field0.cst_decode(),
                )
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.C);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                    c_field: ans.c_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for wire_cst_enum_with_item_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::enumeration::EnumWithItemStructTwinNormal::A {
                    a_field: ans.a_field.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::enumeration::EnumWithItemStructTwinNormal::B {
                    b_field: ans.b_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for wire_cst_enum_with_item_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field:  ans.a_field.cst_decode()}
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field:  ans.b_field.cst_decode()}
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
    for wire_cst_enum_with_item_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                    a_field: ans.a_field.cst_decode(),
                }
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                    b_field: ans.b_field.cst_decode(),
                }
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for wire_cst_enum_with_item_tuple_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::enumeration::EnumWithItemTupleTwinNormal::A(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::enumeration::EnumWithItemTupleTwinNormal::B(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for wire_cst_enum_with_item_tuple_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A( ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
    for wire_cst_enum_with_item_tuple_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.A);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.B);
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::event_listener::EventTwinNormal> for wire_cst_event_twin_normal {
    fn cst_decode(self) -> crate::api::event_listener::EventTwinNormal {
        crate::api::event_listener::EventTwinNormal {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
    for wire_cst_event_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync>
    for wire_cst_event_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync {
        crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::optional::ExoticOptionalsTwinNormal>
    for wire_cst_exotic_optionals_twin_normal
{
    fn cst_decode(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        crate::api::optional::ExoticOptionalsTwinNormal {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    for wire_cst_exotic_optionals_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>
    for wire_cst_exotic_optionals_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecodable<[f64; 16]> for *mut wire_cst_list_prim_f_64 {
    fn cst_decode(self) -> [f64; 16] {
        let vec: Vec<f64> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<crate::api::chrono_type::FeatureChronoTwinNormal>
    for wire_cst_feature_chrono_twin_normal
{
    fn cst_decode(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        crate::api::chrono_type::FeatureChronoTwinNormal {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl
    CstDecodable<crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync>
    for wire_cst_feature_chrono_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
    for wire_cst_feature_chrono_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::uuid_type::FeatureUuidTwinNormal>
    for wire_cst_feature_uuid_twin_normal
{
    fn cst_decode(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        crate::api::uuid_type::FeatureUuidTwinNormal {
            one: self.one.cst_decode(),
            many: self.many.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
    for wire_cst_feature_uuid_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
            one: self.one.cst_decode(),
            many: self.many.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
    for wire_cst_feature_uuid_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
            one: self.one.cst_decode(),
            many: self.many.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::array::FeedIdTwinNormal> for wire_cst_feed_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::FeedIdTwinNormal {
        crate::api::array::FeedIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
    for wire_cst_feed_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for wire_cst_feed_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecodable<[i32; 2]> for *mut wire_cst_list_prim_i_32 {
    fn cst_decode(self) -> [i32; 2] {
        let vec: Vec<i32> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<crate::api::enumeration::KitchenSinkTwinNormal>
    for wire_cst_kitchen_sink_twin_normal
{
    fn cst_decode(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::KitchenSinkTwinNormal::Empty,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                    int32: ans.int32.cst_decode(),
                    float64: ans.float64.cst_decode(),
                    boolean: ans.boolean.cst_decode(),
                }
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                crate::api::enumeration::KitchenSinkTwinNormal::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                crate::api::enumeration::KitchenSinkTwinNormal::Optional(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                crate::api::enumeration::KitchenSinkTwinNormal::Buffer(ans.field0.cst_decode())
            },
            5 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                crate::api::enumeration::KitchenSinkTwinNormal::Enums(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
    for wire_cst_kitchen_sink_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty,
1 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32:  ans.int32.cst_decode(),float64:  ans.float64.cst_decode(),boolean:  ans.boolean.cst_decode()}
                    }
2 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
3 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
4 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer( ans.field0.cst_decode())
                    }
5 => unsafe {
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                        let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
    for wire_cst_kitchen_sink_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Primitives);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                    int32: ans.int32.cst_decode(),
                    float64: ans.float64.cst_decode(),
                    boolean: ans.boolean.cst_decode(),
                }
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Nested);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Optional);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Buffer);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                    ans.field0.cst_decode(),
                )
            },
            5 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Enums);
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<Vec<flutter_rust_bridge::DartOpaque>> for *mut wire_cst_list_DartOpaque {
    fn cst_decode(self) -> Vec<flutter_rust_bridge::DartOpaque> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
    for *mut wire_cst_list_RustOpaque_hide_data
{
    fn cst_decode(
        self,
    ) -> Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar>>
    for *mut wire_cst_list_application_env_var
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::optional::AttributeTwinNormal>>
    for *mut wire_cst_list_attribute_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::optional::AttributeTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    for *mut wire_cst_list_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>
    for *mut wire_cst_list_attribute_twin_sync
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<bool>> for *mut wire_cst_list_bool {
    fn cst_decode(self) -> Vec<bool> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::auxiliary::sample_types::MySize>> for *mut wire_cst_list_my_size {
    fn cst_decode(self) -> Vec<crate::auxiliary::sample_types::MySize> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>
    for *mut wire_cst_list_my_tree_node_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl
    CstDecodable<
        Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>,
    > for *mut wire_cst_list_my_tree_node_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>>
    for *mut wire_cst_list_my_tree_node_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<Option<String>>> for *mut wire_cst_list_opt_String {
    fn cst_decode(self) -> Vec<Option<String>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<Option<crate::api::optional::AttributeTwinNormal>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal
{
    fn cst_decode(self) -> Vec<Option<crate::api::optional::AttributeTwinNormal>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl
    CstDecodable<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    > for *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<Option<i32>>> for *mut wire_cst_list_opt_box_autoadd_i_32 {
    fn cst_decode(self) -> Vec<Option<i32>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>
    for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal
{
    fn cst_decode(self) -> Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl
    CstDecodable<
        Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>,
    > for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>>
    for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<Option<Vec<i32>>>> for *mut wire_cst_list_opt_list_prim_i_32 {
    fn cst_decode(self) -> Vec<Option<Vec<i32>>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<f32>> for *mut wire_cst_list_prim_f_32 {
    fn cst_decode(self) -> Vec<f32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<f64>> for *mut wire_cst_list_prim_f_64 {
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<i16>> for *mut wire_cst_list_prim_i_16 {
    fn cst_decode(self) -> Vec<i16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<i32>> for *mut wire_cst_list_prim_i_32 {
    fn cst_decode(self) -> Vec<i32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<i64>> for *mut wire_cst_list_prim_i_64 {
    fn cst_decode(self) -> Vec<i64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<i8>> for *mut wire_cst_list_prim_i_8 {
    fn cst_decode(self) -> Vec<i8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<u16>> for *mut wire_cst_list_prim_u_16 {
    fn cst_decode(self) -> Vec<u16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<u32>> for *mut wire_cst_list_prim_u_32 {
    fn cst_decode(self) -> Vec<u32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<u64>> for *mut wire_cst_list_prim_u_64 {
    fn cst_decode(self) -> Vec<u64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<u8>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecodable<Vec<(String, i32)>> for *mut wire_cst_list_record_string_i_32 {
    fn cst_decode(self) -> Vec<(String, i32)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::array::TestIdTwinNormal>>
    for *mut wire_cst_list_test_id_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::array::TestIdTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>
    for *mut wire_cst_list_test_id_twin_sync
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::misc_example::WeekdaysTwinNormal>>
    for *mut wire_cst_list_weekdays_twin_normal
{
    fn cst_decode(self) -> Vec<crate::api::misc_example::WeekdaysTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl
    CstDecodable<
        Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>,
    > for *mut wire_cst_list_weekdays_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for *mut wire_cst_list_weekdays_twin_sync
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecodable::cst_decode).collect()
    }
}
impl CstDecodable<crate::api::inside_macro::MacroStruct> for wire_cst_macro_struct {
    fn cst_decode(self) -> crate::api::inside_macro::MacroStruct {
        crate::api::inside_macro::MacroStruct {
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::enumeration::MeasureTwinNormal> for wire_cst_measure_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::MeasureTwinNormal {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::enumeration::MeasureTwinNormal::Speed(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::enumeration::MeasureTwinNormal::Distance(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
    for wire_cst_measure_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance( ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
    for wire_cst_measure_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Speed);
                crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(
                    ans.field0.cst_decode(),
                )
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Distance);
                crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::array::MessageIdTwinNormal> for wire_cst_message_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::MessageIdTwinNormal {
        crate::api::array::MessageIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
    for wire_cst_message_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for wire_cst_message_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecodable<crate::api::misc_example::MyNestedStructTwinNormal>
    for wire_cst_my_nested_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        crate::api::misc_example::MyNestedStructTwinNormal {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
    > for wire_cst_my_nested_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
    for wire_cst_my_nested_struct_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecodable<crate::auxiliary::sample_types::MySize> for wire_cst_my_size {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MySize {
        crate::auxiliary::sample_types::MySize {
            width: self.width.cst_decode(),
            height: self.height.cst_decode(),
        }
    }
}
impl CstDecodable<crate::auxiliary::sample_types::MyStruct> for wire_cst_my_struct {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyStruct {
        crate::auxiliary::sample_types::MyStruct {
            content: self.content.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::misc_example::MyTreeNodeTwinNormal>
    for wire_cst_my_tree_node_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        crate::api::misc_example::MyTreeNodeTwinNormal {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
    for wire_cst_my_tree_node_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
    for wire_cst_my_tree_node_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for wire_cst_new_type_int_twin_normal
{
    fn cst_decode(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        crate::api::newtype_pattern::NewTypeIntTwinNormal(self.field0.cst_decode())
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
    > for wire_cst_new_type_int_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
    for wire_cst_new_type_int_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::enumeration::NoteTwinNormal> for wire_cst_note_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::NoteTwinNormal {
        crate::api::enumeration::NoteTwinNormal {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
    for wire_cst_note_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
    for wire_cst_note_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::Numbers> for wire_cst_numbers {
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::Numbers {
        crate::api::pseudo_manual::mirror_twin_sync::Numbers(self.field0.cst_decode())
    }
}
impl CstDecodable<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for wire_cst_opaque_nested_twin_normal
{
    fn cst_decode(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        crate::api::rust_opaque::OpaqueNestedTwinNormal {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
    for wire_cst_opaque_nested_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
    for wire_cst_opaque_nested_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::optional::OptVecsTwinNormal> for wire_cst_opt_vecs_twin_normal {
    fn cst_decode(self) -> crate::api::optional::OptVecsTwinNormal {
        crate::api::optional::OptVecsTwinNormal {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
    for wire_cst_opt_vecs_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
    for wire_cst_opt_vecs_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecodable<(String, i32)> for wire_cst_record_string_i_32 {
    fn cst_decode(self) -> (String, i32) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecodable<crate::api::pseudo_manual::mirror_twin_sync::Sequences> for wire_cst_sequences {
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::Sequences {
        crate::api::pseudo_manual::mirror_twin_sync::Sequences(self.field0.cst_decode())
    }
}
impl CstDecodable<crate::api::exception::SomeStructTwinNormal>
    for wire_cst_some_struct_twin_normal
{
    fn cst_decode(self) -> crate::api::exception::SomeStructTwinNormal {
        crate::api::exception::SomeStructTwinNormal {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
    for wire_cst_some_struct_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
    for wire_cst_some_struct_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::enumeration::SpeedTwinNormal> for wire_cst_speed_twin_normal {
    fn cst_decode(self) -> crate::api::enumeration::SpeedTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::SpeedTwinNormal::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::enumeration::SpeedTwinNormal::GPS(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>
    for wire_cst_speed_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
        match self.tag {
            0 => {
                crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown
            }
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>
    for wire_cst_speed_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.GPS);
                crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(
                    ans.field0.cst_decode(),
                )
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecodable<crate::api::comment::StructWithCommentsTwinNormal>
    for wire_cst_struct_with_comments_twin_normal
{
    fn cst_decode(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        crate::api::comment::StructWithCommentsTwinNormal {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
    > for wire_cst_struct_with_comments_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
    for wire_cst_struct_with_comments_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::misc_example::StructWithEnumTwinNormal>
    for wire_cst_struct_with_enum_twin_normal
{
    fn cst_decode(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        crate::api::misc_example::StructWithEnumTwinNormal {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
    > for wire_cst_struct_with_enum_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
    for wire_cst_struct_with_enum_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::structure::StructWithOneFieldTwinNormal>
    for wire_cst_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        crate::api::structure::StructWithOneFieldTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
    > for wire_cst_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
    for wire_cst_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::structure::StructWithTwoFieldTwinNormal>
    for wire_cst_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        crate::api::structure::StructWithTwoFieldTwinNormal {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
    > for wire_cst_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
    for wire_cst_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::structure::StructWithZeroFieldTwinNormal>
    for wire_cst_struct_with_zero_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        crate::api::structure::StructWithZeroFieldTwinNormal {}
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for wire_cst_struct_with_zero_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync {}
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
    for wire_cst_struct_with_zero_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {}
    }
}
impl CstDecodable<crate::api::method::SumWithTwinNormal> for wire_cst_sum_with_twin_normal {
    fn cst_decode(self) -> crate::api::method::SumWithTwinNormal {
        crate::api::method::SumWithTwinNormal {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
    for wire_cst_sum_with_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for wire_cst_sum_with_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::array::TestIdTwinNormal> for wire_cst_test_id_twin_normal {
    fn cst_decode(self) -> crate::api::array::TestIdTwinNormal {
        crate::api::array::TestIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecodable<[crate::api::array::TestIdTwinNormal; 4]>
    for *mut wire_cst_list_test_id_twin_normal
{
    fn cst_decode(self) -> [crate::api::array::TestIdTwinNormal; 4] {
        let vec: Vec<crate::api::array::TestIdTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
    for wire_cst_test_id_twin_rust_async
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4]>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for wire_cst_test_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecodable<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4]>
    for *mut wire_cst_list_test_id_twin_sync
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for wire_cst_tuple_struct_with_one_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        crate::api::structure::TupleStructWithOneFieldTwinNormal(self.field0.cst_decode())
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    > for wire_cst_tuple_struct_with_one_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
    for wire_cst_tuple_struct_with_one_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for wire_cst_tuple_struct_with_two_field_twin_normal
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        crate::api::structure::TupleStructWithTwoFieldTwinNormal(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl
    CstDecodable<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    > for wire_cst_tuple_struct_with_two_field_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecodable<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
    for wire_cst_tuple_struct_with_two_field_twin_sync
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecodable<[u8; 1600]> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> [u8; 1600] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<[u8; 32]> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> [u8; 32] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<[u8; 8]> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> [u8; 8] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecodable<crate::api::attribute::UserIdTwinNormal> for wire_cst_user_id_twin_normal {
    fn cst_decode(self) -> crate::api::attribute::UserIdTwinNormal {
        crate::api::attribute::UserIdTwinNormal {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
    for wire_cst_user_id_twin_rust_async
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecodable<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
    for wire_cst_user_id_twin_sync
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
            value: self.value.cst_decode(),
        }
    }
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_StringList {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_normal {
    a: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_a_twin_sync {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_normal {
    tag: i32,
    kind: *mut AbcTwinNormalKind,
}

#[repr(C)]
pub union AbcTwinNormalKind {
    A: *mut wire_cst_AbcTwinNormal_A,
    B: *mut wire_cst_AbcTwinNormal_B,
    C: *mut wire_cst_AbcTwinNormal_C,
    JustInt: *mut wire_cst_AbcTwinNormal_JustInt,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_A {
    field0: *mut wire_cst_a_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_B {
    field0: *mut wire_cst_b_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_C {
    field0: *mut wire_cst_c_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinNormal_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_rust_async {
    tag: i32,
    kind: *mut AbcTwinRustAsyncKind,
}

#[repr(C)]
pub union AbcTwinRustAsyncKind {
    A: *mut wire_cst_AbcTwinRustAsync_A,
    B: *mut wire_cst_AbcTwinRustAsync_B,
    C: *mut wire_cst_AbcTwinRustAsync_C,
    JustInt: *mut wire_cst_AbcTwinRustAsync_JustInt,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_A {
    field0: *mut wire_cst_a_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_B {
    field0: *mut wire_cst_b_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_C {
    field0: *mut wire_cst_c_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinRustAsync_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_abc_twin_sync {
    tag: i32,
    kind: *mut AbcTwinSyncKind,
}

#[repr(C)]
pub union AbcTwinSyncKind {
    A: *mut wire_cst_AbcTwinSync_A,
    B: *mut wire_cst_AbcTwinSync_B,
    C: *mut wire_cst_AbcTwinSync_C,
    JustInt: *mut wire_cst_AbcTwinSync_JustInt,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_A {
    field0: *mut wire_cst_a_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_B {
    field0: *mut wire_cst_b_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_C {
    field0: *mut wire_cst_c_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_AbcTwinSync_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_application_env {
    vars: *mut wire_cst_list_application_env_var,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_application_env_var {
    field0: *mut wire_cst_list_prim_u_8,
    field1: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_application_settings {
    name: *mut wire_cst_list_prim_u_8,
    version: *mut wire_cst_list_prim_u_8,
    mode: i32,
    env: *mut wire_cst_application_env,
    env_optional: *mut wire_cst_application_env,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_normal {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_rust_async {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_attribute_twin_sync {
    key: *mut wire_cst_list_prim_u_8,
    value: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_normal {
    b: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_rust_async {
    b: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_b_twin_sync {
    b: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_normal {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_blob_twin_sync {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_normal {
    c: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_rust_async {
    c: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_c_twin_sync {
    c: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_normal {
    a: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_concatenate_with_twin_sync {
    a: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_normal {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinNormalKind,
}

#[repr(C)]
pub union CustomNestedErrorInnerTwinNormalKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinNormal_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinNormal_Four,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinNormal_Three {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinNormal_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_rust_async {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinRustAsyncKind,
}

#[repr(C)]
pub union CustomNestedErrorInnerTwinRustAsyncKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinRustAsync_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinRustAsync_Four,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsync_Three {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsync_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_inner_twin_sync {
    tag: i32,
    kind: *mut CustomNestedErrorInnerTwinSyncKind,
}

#[repr(C)]
pub union CustomNestedErrorInnerTwinSyncKind {
    Three: *mut wire_cst_CustomNestedErrorInnerTwinSync_Three,
    Four: *mut wire_cst_CustomNestedErrorInnerTwinSync_Four,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSync_Three {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorInnerTwinSync_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_normal {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinNormalKind,
}

#[repr(C)]
pub union CustomNestedErrorOuterTwinNormalKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinNormal_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinNormal_Two,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinNormal_One {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinNormal_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_rust_async {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinRustAsyncKind,
}

#[repr(C)]
pub union CustomNestedErrorOuterTwinRustAsyncKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinRustAsync_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinRustAsync_Two,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsync_One {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsync_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_nested_error_outer_twin_sync {
    tag: i32,
    kind: *mut CustomNestedErrorOuterTwinSyncKind,
}

#[repr(C)]
pub union CustomNestedErrorOuterTwinSyncKind {
    One: *mut wire_cst_CustomNestedErrorOuterTwinSync_One,
    Two: *mut wire_cst_CustomNestedErrorOuterTwinSync_Two,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSync_One {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_CustomNestedErrorOuterTwinSync_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_normal {
    a: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_error_twin_sync {
    a: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_normal {
    message: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_rust_async {
    message: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_custom_struct_twin_sync {
    message: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_normal {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_rust_async {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_customized_twin_sync {
    final_field: *mut wire_cst_list_prim_u_8,
    non_final_field: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_normal {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_rust_async {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_dart_opaque_nested_twin_sync {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_normal {
    tag: i32,
    kind: *mut DistanceTwinNormalKind,
}

#[repr(C)]
pub union DistanceTwinNormalKind {
    Unknown: *mut wire_cst_DistanceTwinNormal_Unknown,
    Map: *mut wire_cst_DistanceTwinNormal_Map,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinNormal_Unknown {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinNormal_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_rust_async {
    tag: i32,
    kind: *mut DistanceTwinRustAsyncKind,
}

#[repr(C)]
pub union DistanceTwinRustAsyncKind {
    Unknown: *mut wire_cst_DistanceTwinRustAsync_Unknown,
    Map: *mut wire_cst_DistanceTwinRustAsync_Map,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinRustAsync_Unknown {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinRustAsync_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_distance_twin_sync {
    tag: i32,
    kind: *mut DistanceTwinSyncKind,
}

#[repr(C)]
pub union DistanceTwinSyncKind {
    Unknown: *mut wire_cst_DistanceTwinSync_Unknown,
    Map: *mut wire_cst_DistanceTwinSync_Map,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSync_Unknown {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DistanceTwinSync_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_normal {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_rust_async {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_empty_twin_sync {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_normal {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinNormalKind,
}

#[repr(C)]
pub union EnumDartOpaqueTwinNormalKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinNormal_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinNormal_Opaque,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinNormal_Primitive {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinNormal_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_rust_async {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinRustAsyncKind,
}

#[repr(C)]
pub union EnumDartOpaqueTwinRustAsyncKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinRustAsync_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinRustAsync_Opaque,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsync_Primitive {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsync_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_dart_opaque_twin_sync {
    tag: i32,
    kind: *mut EnumDartOpaqueTwinSyncKind,
}

#[repr(C)]
pub union EnumDartOpaqueTwinSyncKind {
    Primitive: *mut wire_cst_EnumDartOpaqueTwinSync_Primitive,
    Opaque: *mut wire_cst_EnumDartOpaqueTwinSync_Opaque,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSync_Primitive {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumDartOpaqueTwinSync_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_normal {
    tag: i32,
    kind: *mut EnumOpaqueTwinNormalKind,
}

#[repr(C)]
pub union EnumOpaqueTwinNormalKind {
    Struct: *mut wire_cst_EnumOpaqueTwinNormal_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinNormal_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinNormal_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinNormal_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinNormal_RwLock,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_Struct {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_Primitive {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_TraitObj {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_Mutex {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinNormal_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_rust_async {
    tag: i32,
    kind: *mut EnumOpaqueTwinRustAsyncKind,
}

#[repr(C)]
pub union EnumOpaqueTwinRustAsyncKind {
    Struct: *mut wire_cst_EnumOpaqueTwinRustAsync_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinRustAsync_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinRustAsync_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinRustAsync_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinRustAsync_RwLock,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Struct {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Primitive {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_TraitObj {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Mutex {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_opaque_twin_sync {
    tag: i32,
    kind: *mut EnumOpaqueTwinSyncKind,
}

#[repr(C)]
pub union EnumOpaqueTwinSyncKind {
    Struct: *mut wire_cst_EnumOpaqueTwinSync_Struct,
    Primitive: *mut wire_cst_EnumOpaqueTwinSync_Primitive,
    TraitObj: *mut wire_cst_EnumOpaqueTwinSync_TraitObj,
    Mutex: *mut wire_cst_EnumOpaqueTwinSync_Mutex,
    RwLock: *mut wire_cst_EnumOpaqueTwinSync_RwLock,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_Struct {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_Primitive {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_TraitObj {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_Mutex {
    field0: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumOpaqueTwinSync_RwLock {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_normal {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinNormalKind,
}

#[repr(C)]
pub union EnumWithItemMixedTwinNormalKind {
    A: *mut wire_cst_EnumWithItemMixedTwinNormal_A,
    B: *mut wire_cst_EnumWithItemMixedTwinNormal_B,
    C: *mut wire_cst_EnumWithItemMixedTwinNormal_C,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_A {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_B {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_rust_async {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinRustAsyncKind,
}

#[repr(C)]
pub union EnumWithItemMixedTwinRustAsyncKind {
    A: *mut wire_cst_EnumWithItemMixedTwinRustAsync_A,
    B: *mut wire_cst_EnumWithItemMixedTwinRustAsync_B,
    C: *mut wire_cst_EnumWithItemMixedTwinRustAsync_C,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_A {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_B {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_mixed_twin_sync {
    tag: i32,
    kind: *mut EnumWithItemMixedTwinSyncKind,
}

#[repr(C)]
pub union EnumWithItemMixedTwinSyncKind {
    A: *mut wire_cst_EnumWithItemMixedTwinSync_A,
    B: *mut wire_cst_EnumWithItemMixedTwinSync_B,
    C: *mut wire_cst_EnumWithItemMixedTwinSync_C,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSync_A {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSync_B {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemMixedTwinSync_C {
    c_field: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_normal {
    tag: i32,
    kind: *mut EnumWithItemStructTwinNormalKind,
}

#[repr(C)]
pub union EnumWithItemStructTwinNormalKind {
    A: *mut wire_cst_EnumWithItemStructTwinNormal_A,
    B: *mut wire_cst_EnumWithItemStructTwinNormal_B,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinNormal_A {
    a_field: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinNormal_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_rust_async {
    tag: i32,
    kind: *mut EnumWithItemStructTwinRustAsyncKind,
}

#[repr(C)]
pub union EnumWithItemStructTwinRustAsyncKind {
    A: *mut wire_cst_EnumWithItemStructTwinRustAsync_A,
    B: *mut wire_cst_EnumWithItemStructTwinRustAsync_B,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinRustAsync_A {
    a_field: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinRustAsync_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_struct_twin_sync {
    tag: i32,
    kind: *mut EnumWithItemStructTwinSyncKind,
}

#[repr(C)]
pub union EnumWithItemStructTwinSyncKind {
    A: *mut wire_cst_EnumWithItemStructTwinSync_A,
    B: *mut wire_cst_EnumWithItemStructTwinSync_B,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSync_A {
    a_field: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemStructTwinSync_B {
    b_field: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_normal {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinNormalKind,
}

#[repr(C)]
pub union EnumWithItemTupleTwinNormalKind {
    A: *mut wire_cst_EnumWithItemTupleTwinNormal_A,
    B: *mut wire_cst_EnumWithItemTupleTwinNormal_B,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinNormal_A {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinNormal_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_rust_async {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinRustAsyncKind,
}

#[repr(C)]
pub union EnumWithItemTupleTwinRustAsyncKind {
    A: *mut wire_cst_EnumWithItemTupleTwinRustAsync_A,
    B: *mut wire_cst_EnumWithItemTupleTwinRustAsync_B,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsync_A {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsync_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_enum_with_item_tuple_twin_sync {
    tag: i32,
    kind: *mut EnumWithItemTupleTwinSyncKind,
}

#[repr(C)]
pub union EnumWithItemTupleTwinSyncKind {
    A: *mut wire_cst_EnumWithItemTupleTwinSync_A,
    B: *mut wire_cst_EnumWithItemTupleTwinSync_B,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSync_A {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_EnumWithItemTupleTwinSync_B {
    field0: *mut wire_cst_list_prim_i_32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_event_twin_normal {
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_event_twin_rust_async {
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_event_twin_sync {
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_normal {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_normal,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal,
    newtypeint: *mut wire_cst_new_type_int_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_rust_async {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_rust_async,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async,
    newtypeint: *mut wire_cst_new_type_int_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_exotic_optionals_twin_sync {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8,
    int8list: *mut wire_cst_list_prim_i_8,
    uint8list: *mut wire_cst_list_prim_u_8,
    int32list: *mut wire_cst_list_prim_i_32,
    float32list: *mut wire_cst_list_prim_f_32,
    float64list: *mut wire_cst_list_prim_f_64,
    attributes: *mut wire_cst_list_attribute_twin_sync,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync,
    newtypeint: *mut wire_cst_new_type_int_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_chrono_twin_normal {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_chrono_twin_rust_async {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_chrono_twin_sync {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_uuid_twin_normal {
    one: *mut wire_cst_list_prim_u_8,
    many: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_uuid_twin_rust_async {
    one: *mut wire_cst_list_prim_u_8,
    many: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feature_uuid_twin_sync {
    one: *mut wire_cst_list_prim_u_8,
    many: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_normal {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_feed_id_twin_sync {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_normal {
    tag: i32,
    kind: *mut KitchenSinkTwinNormalKind,
}

#[repr(C)]
pub union KitchenSinkTwinNormalKind {
    Empty: *mut wire_cst_KitchenSinkTwinNormal_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinNormal_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinNormal_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinNormal_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinNormal_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinNormal_Enums,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Empty {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Optional {
    field0: *mut i32,
    field1: *mut i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinNormal_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_rust_async {
    tag: i32,
    kind: *mut KitchenSinkTwinRustAsyncKind,
}

#[repr(C)]
pub union KitchenSinkTwinRustAsyncKind {
    Empty: *mut wire_cst_KitchenSinkTwinRustAsync_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinRustAsync_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinRustAsync_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinRustAsync_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinRustAsync_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinRustAsync_Enums,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Empty {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Optional {
    field0: *mut i32,
    field1: *mut i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_kitchen_sink_twin_sync {
    tag: i32,
    kind: *mut KitchenSinkTwinSyncKind,
}

#[repr(C)]
pub union KitchenSinkTwinSyncKind {
    Empty: *mut wire_cst_KitchenSinkTwinSync_Empty,
    Primitives: *mut wire_cst_KitchenSinkTwinSync_Primitives,
    Nested: *mut wire_cst_KitchenSinkTwinSync_Nested,
    Optional: *mut wire_cst_KitchenSinkTwinSync_Optional,
    Buffer: *mut wire_cst_KitchenSinkTwinSync_Buffer,
    Enums: *mut wire_cst_KitchenSinkTwinSync_Enums,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Empty {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Optional {
    field0: *mut i32,
    field1: *mut i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Buffer {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_KitchenSinkTwinSync_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_DartOpaque {
    ptr: *mut *const std::ffi::c_void,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_RustOpaque_hide_data {
    ptr: *mut *const std::ffi::c_void,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_application_env_var {
    ptr: *mut wire_cst_application_env_var,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_normal {
    ptr: *mut wire_cst_attribute_twin_normal,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_rust_async {
    ptr: *mut wire_cst_attribute_twin_rust_async,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_attribute_twin_sync {
    ptr: *mut wire_cst_attribute_twin_sync,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_bool {
    ptr: *mut bool,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_size {
    ptr: *mut wire_cst_my_size,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_normal {
    ptr: *mut wire_cst_my_tree_node_twin_normal,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_rust_async {
    ptr: *mut wire_cst_my_tree_node_twin_rust_async,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_my_tree_node_twin_sync {
    ptr: *mut wire_cst_my_tree_node_twin_sync,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_normal {
    ptr: *mut *mut wire_cst_attribute_twin_normal,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
    ptr: *mut *mut wire_cst_attribute_twin_rust_async,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_sync {
    ptr: *mut *mut wire_cst_attribute_twin_sync,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_i_32 {
    ptr: *mut *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
    ptr: *mut *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
    ptr: *mut *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
    ptr: *mut *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_list_prim_i_32 {
    ptr: *mut *mut wire_cst_list_prim_i_32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_f_32 {
    ptr: *mut f32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_f_64 {
    ptr: *mut f64,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_16 {
    ptr: *mut i16,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_32 {
    ptr: *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_64 {
    ptr: *mut i64,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_8 {
    ptr: *mut i8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_16 {
    ptr: *mut u16,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_32 {
    ptr: *mut u32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_64 {
    ptr: *mut u64,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_8 {
    ptr: *mut u8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_record_string_i_32 {
    ptr: *mut wire_cst_record_string_i_32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_normal {
    ptr: *mut wire_cst_test_id_twin_normal,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_rust_async {
    ptr: *mut wire_cst_test_id_twin_rust_async,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_test_id_twin_sync {
    ptr: *mut wire_cst_test_id_twin_sync,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_normal {
    ptr: *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_rust_async {
    ptr: *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_weekdays_twin_sync {
    ptr: *mut i32,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_macro_struct {
    data: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_normal {
    tag: i32,
    kind: *mut MeasureTwinNormalKind,
}

#[repr(C)]
pub union MeasureTwinNormalKind {
    Speed: *mut wire_cst_MeasureTwinNormal_Speed,
    Distance: *mut wire_cst_MeasureTwinNormal_Distance,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinNormal_Speed {
    field0: *mut wire_cst_speed_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinNormal_Distance {
    field0: *mut wire_cst_distance_twin_normal,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_rust_async {
    tag: i32,
    kind: *mut MeasureTwinRustAsyncKind,
}

#[repr(C)]
pub union MeasureTwinRustAsyncKind {
    Speed: *mut wire_cst_MeasureTwinRustAsync_Speed,
    Distance: *mut wire_cst_MeasureTwinRustAsync_Distance,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinRustAsync_Speed {
    field0: *mut wire_cst_speed_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinRustAsync_Distance {
    field0: *mut wire_cst_distance_twin_rust_async,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_measure_twin_sync {
    tag: i32,
    kind: *mut MeasureTwinSyncKind,
}

#[repr(C)]
pub union MeasureTwinSyncKind {
    Speed: *mut wire_cst_MeasureTwinSync_Speed,
    Distance: *mut wire_cst_MeasureTwinSync_Distance,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSync_Speed {
    field0: *mut wire_cst_speed_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_MeasureTwinSync_Distance {
    field0: *mut wire_cst_distance_twin_sync,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_normal {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_message_id_twin_sync {
    field0: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_normal {
    tree_node: wire_cst_my_tree_node_twin_normal,
    weekday: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_rust_async {
    tree_node: wire_cst_my_tree_node_twin_rust_async,
    weekday: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_nested_struct_twin_sync {
    tree_node: wire_cst_my_tree_node_twin_sync,
    weekday: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_size {
    width: i32,
    height: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_struct {
    content: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_normal {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_rust_async {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_my_tree_node_twin_sync {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_normal {
    field0: i64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_rust_async {
    field0: i64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_new_type_int_twin_sync {
    field0: i64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_normal {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_rust_async {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_note_twin_sync {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_numbers {
    field0: *mut wire_cst_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_normal {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_rust_async {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opaque_nested_twin_sync {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_normal {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_rust_async {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_opt_vecs_twin_sync {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_record_string_i_32 {
    field0: *mut wire_cst_list_prim_u_8,
    field1: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sequences {
    field0: *mut wire_cst_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_normal {
    value: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_rust_async {
    value: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_some_struct_twin_sync {
    value: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_normal {
    tag: i32,
    kind: *mut SpeedTwinNormalKind,
}

#[repr(C)]
pub union SpeedTwinNormalKind {
    Unknown: *mut wire_cst_SpeedTwinNormal_Unknown,
    GPS: *mut wire_cst_SpeedTwinNormal_GPS,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinNormal_Unknown {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinNormal_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_rust_async {
    tag: i32,
    kind: *mut SpeedTwinRustAsyncKind,
}

#[repr(C)]
pub union SpeedTwinRustAsyncKind {
    Unknown: *mut wire_cst_SpeedTwinRustAsync_Unknown,
    GPS: *mut wire_cst_SpeedTwinRustAsync_GPS,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinRustAsync_Unknown {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinRustAsync_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_speed_twin_sync {
    tag: i32,
    kind: *mut SpeedTwinSyncKind,
}

#[repr(C)]
pub union SpeedTwinSyncKind {
    Unknown: *mut wire_cst_SpeedTwinSync_Unknown,
    GPS: *mut wire_cst_SpeedTwinSync_GPS,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSync_Unknown {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_SpeedTwinSync_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_normal {
    field_with_comments: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_rust_async {
    field_with_comments: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_comments_twin_sync {
    field_with_comments: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_normal {
    abc1: wire_cst_abc_twin_normal,
    abc2: wire_cst_abc_twin_normal,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_rust_async {
    abc1: wire_cst_abc_twin_rust_async,
    abc2: wire_cst_abc_twin_rust_async,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_enum_twin_sync {
    abc1: wire_cst_abc_twin_sync,
    abc2: wire_cst_abc_twin_sync,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_normal {
    a: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_rust_async {
    a: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_one_field_twin_sync {
    a: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_normal {
    a: i32,
    b: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_rust_async {
    a: i32,
    b: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_two_field_twin_sync {
    a: i32,
    b: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_normal {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_rust_async {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_struct_with_zero_field_twin_sync {}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_normal {
    x: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_rust_async {
    x: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_sum_with_twin_sync {
    x: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_normal {
    field0: *mut wire_cst_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_test_id_twin_sync {
    field0: *mut wire_cst_list_prim_i_32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_normal {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_rust_async {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_one_field_twin_sync {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_normal {
    field0: i32,
    field1: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_rust_async {
    field0: i32,
    field1: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_tuple_struct_with_two_field_twin_sync {
    field0: i32,
    field1: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_normal {
    value: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_rust_async {
    value: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_user_id_twin_sync {
    value: u32,
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_abc_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_env {
    fn new_with_null_ptr() -> Self {
        Self {
            vars: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_application_env {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_env_var {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_application_env_var {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_settings {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            version: core::ptr::null_mut(),
            mode: Default::default(),
            env: core::ptr::null_mut(),
            env_optional: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_application_settings {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_distance_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
            many: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
            many: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
            many: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_macro_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
        }
    }
}
impl Default for wire_cst_macro_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_measure_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_size {
    fn new_with_null_ptr() -> Self {
        Self {
            width: Default::default(),
            height: Default::default(),
        }
    }
}
impl Default for wire_cst_my_size {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            content: Default::default(),
        }
    }
}
impl Default for wire_cst_my_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_numbers {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_numbers {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_i_32 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_i_32 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sequences {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_sequences {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_speed_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frb_initialize_rust(
    dart_opaque_drop_port: flutter_rust_bridge::for_generated::MessagePort,
    dart_fn_invoke_port: flutter_rust_bridge::for_generated::MessagePort,
) {
    flutter_rust_bridge::for_generated::handler_initialize(
        &*FLUTTER_RUST_BRIDGE_HANDLER,
        dart_opaque_drop_port,
        dart_fn_invoke_port,
    )
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_normal(port_: i64, blob: *mut wire_cst_list_prim_u_8) {
    wire_boxed_blob_twin_normal_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_normal(port_: i64, id: *mut wire_cst_test_id_twin_normal) {
    wire_func_test_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_normal(port_: i64) {
    wire_get_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_normal(port_: i64) {
    wire_get_complex_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_normal(port_: i64, array: *mut wire_cst_list_prim_f_64) {
    wire_last_number_twin_normal_impl(port_, array)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_test_id_twin_normal,
) {
    wire_nested_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_normal(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_new_msgid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8,
) {
    wire_return_boxed_feed_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_feed_id_twin_normal,
) {
    wire_return_boxed_raw_feed_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_normal(
    port_: i64,
    blob: *mut wire_cst_blob_twin_normal,
) {
    wire_use_boxed_blob_twin_normal_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_normal(port_: i64, id: *mut wire_cst_message_id_twin_normal) {
    wire_use_msgid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_func_async_simple_add(port_: i64, a: i32, b: i32) {
    wire_func_async_simple_add_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_func_async_void(port_: i64) {
    wire_func_async_void_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_normal(
    port_: i64,
    val: *mut wire_cst_customized_twin_normal,
) {
    wire_handle_customized_struct_twin_normal_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_normal(
    port_: i64,
    user_id: *mut wire_cst_user_id_twin_normal,
) {
    wire_next_user_id_twin_normal_impl(port_, user_id)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_normal(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8,
) {
    wire_benchmark_input_bytes_twin_normal_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_normal(port_: i64, size: i32) {
    wire_benchmark_output_bytes_twin_normal_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_normal(port_: i64) {
    wire_benchmark_void_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_datetime_local_twin_normal(port_: i64, d: i64) {
    wire_datetime_local_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_datetime_utc_twin_normal(port_: i64, d: i64) {
    wire_datetime_utc_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_duration_twin_normal(port_: i64, d: i64) {
    wire_duration_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_handle_durations_twin_normal(
    port_: i64,
    durations: *mut wire_cst_list_prim_i_64,
    since: i64,
) {
    wire_handle_durations_twin_normal_impl(port_, durations, since)
}

#[no_mangle]
pub extern "C" fn wire_handle_timestamps_twin_normal(
    port_: i64,
    timestamps: *mut wire_cst_list_prim_i_64,
    epoch: i64,
) {
    wire_handle_timestamps_twin_normal_impl(port_, timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn wire_how_long_does_it_take_twin_normal(
    port_: i64,
    mine: *mut wire_cst_feature_chrono_twin_normal,
) {
    wire_how_long_does_it_take_twin_normal_impl(port_, mine)
}

#[no_mangle]
pub extern "C" fn wire_naivedatetime_twin_normal(port_: i64, d: i64) {
    wire_naivedatetime_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_optional_empty_datetime_utc_twin_normal(port_: i64, d: *mut i64) {
    wire_optional_empty_datetime_utc_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_test_chrono_twin_normal(port_: i64) {
    wire_test_chrono_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_precise_chrono_twin_normal(port_: i64) {
    wire_test_precise_chrono_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal(
    port_: i64,
    that: *mut wire_cst_struct_with_comments_twin_normal,
) {
    wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinNormal_static_method_twin_normal(port_: i64) {
    wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_normal(port_: i64) {
    wire_function_with_comments_slash_star_star_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_normal(port_: i64) {
    wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_normal(port_: i64) {
    wire_function_with_comments_triple_slash_single_line_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_dart_dynamic_twin_normal(port_: i64) {
    wire_return_dart_dynamic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_call_dart_simple(port_: i64, callback: *const std::ffi::c_void) {
    wire_rust_call_dart_simple_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_async_accept_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_clone_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_create_enum_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_normal(
    port_: i64,
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) {
    wire_create_nested_dart_opaque_twin_normal_impl(port_, opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_normal(port_: i64, id: i32) {
    wire_drop_static_dart_opaque_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_enum_dart_opaque_twin_normal,
) {
    wire_get_enum_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_dart_opaque_nested_twin_normal,
) {
    wire_get_nested_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_array_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_array_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_normal(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_loop_back_option_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_option_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_vec_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_vec_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_panic_unwrap_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_normal(
    port_: i64,
    id: i32,
    opaque: *const std::ffi::c_void,
) {
    wire_set_static_dart_opaque_twin_normal_impl(port_, id, opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_accept_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_accept_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_loopback_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_loopback_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_option_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_option_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_sync_option_loopback_twin_normal(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_option_loopback_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_unwrap_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_normal(port_: i64, arg: i32) {
    wire_func_enum_simple_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_mixed_twin_normal,
) {
    wire_func_enum_with_item_mixed_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_struct_twin_normal,
) {
    wire_func_enum_with_item_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_tuple_twin_normal,
) {
    wire_func_enum_with_item_tuple_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_normal(port_: i64, weekday: i32) {
    wire_handle_enum_parameter_twin_normal_impl(port_, weekday)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_normal(
    port_: i64,
    val: *mut wire_cst_kitchen_sink_twin_normal,
) {
    wire_handle_enum_struct_twin_normal_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_normal(
    port_: i64,
    input: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_return_enum_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_normal(
    port_: i64,
    measure: *mut wire_cst_measure_twin_normal,
) {
    wire_multiply_by_ten_twin_normal_impl(port_, measure)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_normal(port_: i64, note: *mut wire_cst_note_twin_normal) {
    wire_print_note_twin_normal_impl(port_, note)
}

#[no_mangle]
pub extern "C" fn wire_EventTwinNormal_as_string_twin_normal(
    port_: i64,
    that: *mut wire_cst_event_twin_normal,
) {
    wire_EventTwinNormal_as_string_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_close_event_listener_twin_normal(port_: i64) {
    wire_close_event_listener_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_event_twin_normal(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
) {
    wire_create_event_twin_normal_impl(port_, address, payload)
}

#[no_mangle]
pub extern "C" fn wire_register_event_listener_twin_normal(port_: i64) {
    wire_register_event_listener_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_new_twin_normal(
    port_: i64,
    message: *mut wire_cst_list_prim_u_8,
) {
    wire_CustomStructTwinNormal_new_twin_normal_impl(port_, message)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_normal,
) {
    wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_normal,
) {
    wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal(
    port_: i64,
) {
    wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal(
    port_: i64,
) {
    wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_new_twin_normal(port_: i64, value: u32) {
    wire_SomeStructTwinNormal_new_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_normal,
) {
    wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_normal,
) {
    wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal(port_: i64) {
    wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal(port_: i64) {
    wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_normal(port_: i64) {
    wire_custom_enum_error_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_normal(port_: i64) {
    wire_custom_enum_error_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_normal(port_: i64, arg: u32) {
    wire_custom_enum_error_return_ok_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_normal(
    port_: i64,
    arg: *mut wire_cst_custom_nested_error_outer_twin_normal,
) {
    wire_custom_nested_error_return_error_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_normal(
    port_: i64,
    arg: *mut wire_cst_custom_struct_error_twin_normal,
) {
    wire_custom_struct_error_return_error_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_normal(port_: i64) {
    wire_func_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_normal(port_: i64) {
    wire_func_type_fallible_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_normal(port_: i64) {
    wire_func_type_infallible_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_normal(port_: i64) {
    wire_panic_with_custom_result_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_normal(port_: i64) {
    wire_return_custom_nested_error_1_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_normal(port_: i64) {
    wire_return_custom_nested_error_1_variant1_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_normal(port_: i64) {
    wire_return_custom_nested_error_2_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_normal(port_: i64) {
    wire_return_custom_struct_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_normal(port_: i64) {
    wire_return_custom_struct_ok_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_normal(port_: i64) {
    wire_return_err_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_normal(port_: i64, variant: u32) {
    wire_return_error_variant_twin_normal_impl(port_, variant)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_normal(port_: i64) {
    wire_return_ok_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_normal(port_: i64) {
    wire_stream_sink_throw_anyhow_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_normal(port_: i64) {
    wire_throw_anyhow_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_normal(port_: i64) {
    wire_call_new_module_system_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_normal(port_: i64) {
    wire_call_old_module_system_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_normal(port_: i64, my_enum: i32) {
    wire_use_imported_enum_twin_normal_impl(port_, my_enum)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_normal(
    port_: i64,
    my_struct: *mut wire_cst_my_struct,
) {
    wire_use_imported_struct_twin_normal_impl(port_, my_struct)
}

#[no_mangle]
pub extern "C" fn wire_another_macro_struct_twin_normal(port_: i64) {
    wire_another_macro_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_macro_struct_twin_normal(port_: i64, arg: *mut wire_cst_macro_struct) {
    wire_func_macro_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_concatenate_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinNormal_concatenate_twin_normal_impl(port_, that, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal(
    port_: i64,
) {
    wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
) {
    wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal_impl(port_, that, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinNormal_new_twin_normal(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinNormal_new_twin_normal_impl(port_, a)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinNormal_sum_twin_normal(
    port_: i64,
    that: *mut wire_cst_sum_with_twin_normal,
    y: u32,
    z: u32,
) {
    wire_SumWithTwinNormal_sum_twin_normal_impl(port_, that, y, z)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_normal(port_: i64, a: u32, b: u32, c: u32) {
    wire_get_sum_array_twin_normal_impl(port_, a, b, c)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_normal(port_: i64) {
    wire_get_sum_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_normal(port_: i64) {
    wire_app_settings_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_normal(port_: i64) {
    wire_app_settings_vec_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_normal(port_: i64, nums: *mut wire_cst_numbers) {
    wire_first_number_twin_normal_impl(port_, nums)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_normal(port_: i64, seqs: *mut wire_cst_sequences) {
    wire_first_sequence_twin_normal_impl(port_, seqs)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_normal(port_: i64) {
    wire_get_app_settings_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_normal(port_: i64) {
    wire_get_fallible_app_settings_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_normal(port_: i64) {
    wire_get_message_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_normal(
    port_: i64,
    app_settings: *mut wire_cst_application_settings,
) {
    wire_is_app_embedded_twin_normal_impl(port_, app_settings)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_normal(port_: i64) {
    wire_mirror_struct_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_normal(port_: i64) {
    wire_mirror_tuple_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_normal(port_: i64, num: i32, times: usize) {
    wire_repeat_number_twin_normal_impl(port_, num, times)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_normal(port_: i64, seq: i32, times: usize) {
    wire_repeat_sequence_twin_normal_impl(port_, seq, times)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_normal(port_: i64) {
    wire_test_contains_mirrored_sub_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_normal(port_: i64) {
    wire_test_fallible_of_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_normal(port_: i64) {
    wire_test_list_of_nested_enums_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_normal(port_: i64) {
    wire_test_list_of_raw_nested_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_normal(port_: i64) {
    wire_test_nested_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_normal(port_: i64, nested: bool) {
    wire_test_raw_string_enum_mirrored_twin_normal_impl(port_, nested)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_normal(port_: i64) {
    wire_test_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_normal(port_: i64) {
    wire_handle_big_buffers_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_normal(
    port_: i64,
    s: *mut wire_cst_my_tree_node_twin_normal,
) {
    wire_handle_complex_struct_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_normal(
    port_: i64,
    s: *mut wire_cst_my_nested_struct_twin_normal,
) {
    wire_handle_nested_struct_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_normal(port_: i64, s: *mut wire_cst_list_prim_u_8) {
    wire_handle_string_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) {
    wire_handle_struct_twin_normal_impl(port_, arg, boxed)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_normal(port_: i64, v: *mut wire_cst_list_prim_u_8) {
    wire_handle_vec_u8_twin_normal_impl(port_, v)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_normal(
    port_: i64,
    weekdays: *mut wire_cst_list_weekdays_twin_normal,
) {
    wire_list_of_primitive_enums_twin_normal_impl(port_, weekdays)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_normal(port_: i64, abc: *mut wire_cst_abc_twin_normal) {
    wire_test_abc_enum_twin_normal_impl(port_, abc)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_normal(
    port_: i64,
    se: *mut wire_cst_struct_with_enum_twin_normal,
) {
    wire_test_struct_with_enum_twin_normal_impl(port_, se)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_normal(
    port_: i64,
    empty: *mut wire_cst_empty_twin_normal,
) {
    wire_empty_struct_twin_normal_impl(port_, empty)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_normal(port_: i64) {
    wire_func_return_unit_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_normal(port_: i64, arg: *mut wire_cst_list_prim_u_8) {
    wire_func_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_normal(
    port_: i64,
    l: *mut wire_cst_list_my_size,
) {
    wire_handle_list_of_struct_twin_normal_impl(port_, l)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_normal(port_: i64, names: *mut wire_cst_StringList) {
    wire_handle_string_list_twin_normal_impl(port_, names)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_normal(
    port_: i64,
    arg: *mut wire_cst_new_type_int_twin_normal,
) {
    wire_handle_newtype_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_normal(port_: i64, opt: *mut f64) {
    wire_handle_increment_boxed_optional_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_normal(
    port_: i64,
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_normal,
) {
    wire_handle_option_box_arguments_twin_normal_impl(
        port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_normal(
    port_: i64,
    opt: *mut wire_cst_exotic_optionals_twin_normal,
) {
    wire_handle_optional_increment_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_normal(port_: i64, left: f64, right: f64) {
    wire_handle_optional_return_twin_normal_impl(port_, left, right)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_normal(
    port_: i64,
    document: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_optional_struct_twin_normal_impl(port_, document)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_normal(
    port_: i64,
    opt: *mut wire_cst_opt_vecs_twin_normal,
) {
    wire_handle_vec_of_opts_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_normal(
    port_: i64,
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) {
    wire_primitive_optional_types_twin_normal_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_normal(port_: i64, n: i32) {
    wire_handle_vec_of_primitive_twin_normal_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn wire_handle_zero_copy_vec_of_primitive_twin_normal(port_: i64, n: i32) {
    wire_handle_zero_copy_vec_of_primitive_twin_normal_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_normal(
    port_: i64,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    wire_primitive_types_twin_normal_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_normal(port_: i64, my_u32: u32) {
    wire_primitive_u32_twin_normal_impl(port_, my_u32)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_rust_async(port_: i64, blob: *mut wire_cst_list_prim_u_8) {
    wire_boxed_blob_twin_rust_async_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_test_id_twin_rust_async,
) {
    wire_func_test_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_rust_async(port_: i64) {
    wire_get_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_rust_async(port_: i64) {
    wire_get_complex_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_rust_async(
    port_: i64,
    array: *mut wire_cst_list_prim_f_64,
) {
    wire_last_number_twin_rust_async_impl(port_, array)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_test_id_twin_rust_async,
) {
    wire_nested_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_rust_async(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_new_msgid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8,
) {
    wire_return_boxed_feed_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_feed_id_twin_rust_async,
) {
    wire_return_boxed_raw_feed_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_rust_async(
    port_: i64,
    blob: *mut wire_cst_blob_twin_rust_async,
) {
    wire_use_boxed_blob_twin_rust_async_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_message_id_twin_rust_async,
) {
    wire_use_msgid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_boxed_blob_twin_sync(
    blob: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_boxed_blob_twin_sync_impl(blob)
}

#[no_mangle]
pub extern "C" fn wire_func_test_id_twin_sync(
    id: *mut wire_cst_test_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_test_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_get_array_twin_sync() -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_get_complex_array_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_complex_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_last_number_twin_sync(
    array: *mut wire_cst_list_prim_f_64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_last_number_twin_sync_impl(array)
}

#[no_mangle]
pub extern "C" fn wire_nested_id_twin_sync(
    id: *mut wire_cst_list_test_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_nested_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_new_msgid_twin_sync(
    id: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_new_msgid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_feed_id_twin_sync(
    id: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_boxed_feed_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_return_boxed_raw_feed_id_twin_sync(
    id: *mut wire_cst_feed_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_boxed_raw_feed_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_use_boxed_blob_twin_sync(
    blob: *mut wire_cst_blob_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_use_boxed_blob_twin_sync_impl(blob)
}

#[no_mangle]
pub extern "C" fn wire_use_msgid_twin_sync(
    id: *mut wire_cst_message_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_use_msgid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_rust_async(
    port_: i64,
    val: *mut wire_cst_customized_twin_rust_async,
) {
    wire_handle_customized_struct_twin_rust_async_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_rust_async(
    port_: i64,
    user_id: *mut wire_cst_user_id_twin_rust_async,
) {
    wire_next_user_id_twin_rust_async_impl(port_, user_id)
}

#[no_mangle]
pub extern "C" fn wire_handle_customized_struct_twin_sync(
    val: *mut wire_cst_customized_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_customized_struct_twin_sync_impl(val)
}

#[no_mangle]
pub extern "C" fn wire_next_user_id_twin_sync(
    user_id: *mut wire_cst_user_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_next_user_id_twin_sync_impl(user_id)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_rust_async(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8,
) {
    wire_benchmark_input_bytes_twin_rust_async_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_rust_async(port_: i64, size: i32) {
    wire_benchmark_output_bytes_twin_rust_async_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_rust_async(port_: i64) {
    wire_benchmark_void_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_input_bytes_twin_sync(
    bytes: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_benchmark_input_bytes_twin_sync_impl(bytes)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_output_bytes_twin_sync(
    size: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_benchmark_output_bytes_twin_sync_impl(size)
}

#[no_mangle]
pub extern "C" fn wire_benchmark_void_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_benchmark_void_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_datetime_local_twin_rust_async(port_: i64, d: i64) {
    wire_datetime_local_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_datetime_utc_twin_rust_async(port_: i64, d: i64) {
    wire_datetime_utc_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_duration_twin_rust_async(port_: i64, d: i64) {
    wire_duration_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_handle_durations_twin_rust_async(
    port_: i64,
    durations: *mut wire_cst_list_prim_i_64,
    since: i64,
) {
    wire_handle_durations_twin_rust_async_impl(port_, durations, since)
}

#[no_mangle]
pub extern "C" fn wire_handle_timestamps_twin_rust_async(
    port_: i64,
    timestamps: *mut wire_cst_list_prim_i_64,
    epoch: i64,
) {
    wire_handle_timestamps_twin_rust_async_impl(port_, timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn wire_how_long_does_it_take_twin_rust_async(
    port_: i64,
    mine: *mut wire_cst_feature_chrono_twin_rust_async,
) {
    wire_how_long_does_it_take_twin_rust_async_impl(port_, mine)
}

#[no_mangle]
pub extern "C" fn wire_naivedatetime_twin_rust_async(port_: i64, d: i64) {
    wire_naivedatetime_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_optional_empty_datetime_utc_twin_rust_async(port_: i64, d: *mut i64) {
    wire_optional_empty_datetime_utc_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn wire_test_chrono_twin_rust_async(port_: i64) {
    wire_test_chrono_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_precise_chrono_twin_rust_async(port_: i64) {
    wire_test_precise_chrono_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_datetime_local_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_datetime_local_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_datetime_utc_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_datetime_utc_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_duration_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_duration_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_handle_durations_twin_sync(
    durations: *mut wire_cst_list_prim_i_64,
    since: i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_durations_twin_sync_impl(durations, since)
}

#[no_mangle]
pub extern "C" fn wire_handle_timestamps_twin_sync(
    timestamps: *mut wire_cst_list_prim_i_64,
    epoch: i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_timestamps_twin_sync_impl(timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn wire_how_long_does_it_take_twin_sync(
    mine: *mut wire_cst_feature_chrono_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_how_long_does_it_take_twin_sync_impl(mine)
}

#[no_mangle]
pub extern "C" fn wire_naivedatetime_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_naivedatetime_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_optional_empty_datetime_utc_twin_sync(
    d: *mut i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_optional_empty_datetime_utc_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn wire_test_chrono_twin_sync() -> flutter_rust_bridge::for_generated::WireSyncReturn
{
    wire_test_chrono_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_precise_chrono_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_precise_chrono_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_struct_with_comments_twin_rust_async,
) {
    wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async(port_: i64) {
    wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_rust_async(port_: i64) {
    wire_function_with_comments_slash_star_star_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_rust_async(port_: i64) {
    wire_function_with_comments_triple_slash_multi_line_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_rust_async(port_: i64) {
    wire_function_with_comments_triple_slash_single_line_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSync_instance_method_twin_sync(
    that: *mut wire_cst_struct_with_comments_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_StructWithCommentsTwinSync_static_method_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_StructWithCommentsTwinSync_static_method_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_slash_star_star_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_function_with_comments_slash_star_star_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_multi_line_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_function_with_comments_triple_slash_multi_line_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_function_with_comments_triple_slash_single_line_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_function_with_comments_triple_slash_single_line_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_dart_dynamic_twin_rust_async(port_: i64) {
    wire_return_dart_dynamic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_dart_dynamic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_dart_dynamic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_async_accept_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_clone_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_create_enum_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_rust_async(
    port_: i64,
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) {
    wire_create_nested_dart_opaque_twin_rust_async_impl(port_, opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_rust_async(port_: i64, id: i32) {
    wire_drop_static_dart_opaque_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_enum_dart_opaque_twin_rust_async,
) {
    wire_get_enum_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_dart_opaque_nested_twin_rust_async,
) {
    wire_get_nested_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_array_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_array_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_rust_async(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_loop_back_option_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_option_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_rust_async(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_vec_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_rust_async(port_: i64, opaque: *const std::ffi::c_void) {
    wire_loop_back_vec_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_panic_unwrap_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_rust_async(
    port_: i64,
    id: i32,
    opaque: *const std::ffi::c_void,
) {
    wire_set_static_dart_opaque_twin_rust_async_impl(port_, id, opaque)
}

#[no_mangle]
pub extern "C" fn wire_async_accept_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_async_accept_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_clone_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_clone_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_enum_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_enum_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_dart_opaque_twin_sync(
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_nested_dart_opaque_twin_sync_impl(opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn wire_drop_static_dart_opaque_twin_sync(
    id: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_drop_static_dart_opaque_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_get_enum_dart_opaque_twin_sync(
    opaque: *mut wire_cst_enum_dart_opaque_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_enum_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_get_nested_dart_opaque_twin_sync(
    opaque: *mut wire_cst_dart_opaque_nested_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_nested_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_get_twin_sync(
    opaque: *mut wire_cst_list_DartOpaque,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_loop_back_array_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_array_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_loop_back_array_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_get_twin_sync(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_loop_back_option_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_option_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_loop_back_option_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_loop_back_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_get_twin_sync(
    opaque: *mut wire_cst_list_DartOpaque,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_loop_back_vec_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_loop_back_vec_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_loop_back_vec_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_panic_unwrap_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_panic_unwrap_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_set_static_dart_opaque_twin_sync(
    id: i32,
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_set_static_dart_opaque_twin_sync_impl(id, opaque)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_rust_async(port_: i64, arg: i32) {
    wire_func_enum_simple_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_mixed_twin_rust_async,
) {
    wire_func_enum_with_item_mixed_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_struct_twin_rust_async,
) {
    wire_func_enum_with_item_struct_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_tuple_twin_rust_async,
) {
    wire_func_enum_with_item_tuple_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_rust_async(port_: i64, weekday: i32) {
    wire_handle_enum_parameter_twin_rust_async_impl(port_, weekday)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_rust_async(
    port_: i64,
    val: *mut wire_cst_kitchen_sink_twin_rust_async,
) {
    wire_handle_enum_struct_twin_rust_async_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_rust_async(
    port_: i64,
    input: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_return_enum_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_rust_async(
    port_: i64,
    measure: *mut wire_cst_measure_twin_rust_async,
) {
    wire_multiply_by_ten_twin_rust_async_impl(port_, measure)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_rust_async(
    port_: i64,
    note: *mut wire_cst_note_twin_rust_async,
) {
    wire_print_note_twin_rust_async_impl(port_, note)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_simple_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_enum_simple_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_mixed_twin_sync(
    arg: *mut wire_cst_enum_with_item_mixed_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_enum_with_item_mixed_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_struct_twin_sync(
    arg: *mut wire_cst_enum_with_item_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_enum_with_item_struct_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_enum_with_item_tuple_twin_sync(
    arg: *mut wire_cst_enum_with_item_tuple_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_enum_with_item_tuple_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_parameter_twin_sync(
    weekday: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_enum_parameter_twin_sync_impl(weekday)
}

#[no_mangle]
pub extern "C" fn wire_handle_enum_struct_twin_sync(
    val: *mut wire_cst_kitchen_sink_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_enum_struct_twin_sync_impl(val)
}

#[no_mangle]
pub extern "C" fn wire_handle_return_enum_twin_sync(
    input: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_return_enum_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_multiply_by_ten_twin_sync(
    measure: *mut wire_cst_measure_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_multiply_by_ten_twin_sync_impl(measure)
}

#[no_mangle]
pub extern "C" fn wire_print_note_twin_sync(
    note: *mut wire_cst_note_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_print_note_twin_sync_impl(note)
}

#[no_mangle]
pub extern "C" fn wire_EventTwinRustAsync_as_string_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_event_twin_rust_async,
) {
    wire_EventTwinRustAsync_as_string_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_close_event_listener_twin_rust_async(port_: i64) {
    wire_close_event_listener_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_event_twin_rust_async(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
) {
    wire_create_event_twin_rust_async_impl(port_, address, payload)
}

#[no_mangle]
pub extern "C" fn wire_register_event_listener_twin_rust_async(port_: i64) {
    wire_register_event_listener_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_EventTwinSync_as_string_twin_sync(
    that: *mut wire_cst_event_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_EventTwinSync_as_string_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_close_event_listener_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_close_event_listener_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_create_event_twin_sync(
    address: *mut wire_cst_list_prim_u_8,
    payload: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_event_twin_sync_impl(address, payload)
}

#[no_mangle]
pub extern "C" fn wire_register_event_listener_twin_sync(port_: i64) {
    wire_register_event_listener_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_new_twin_rust_async(
    port_: i64,
    message: *mut wire_cst_list_prim_u_8,
) {
    wire_CustomStructTwinRustAsync_new_twin_rust_async_impl(port_, message)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_rust_async,
) {
    wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_rust_async,
) {
    wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async(
    port_: i64,
) {
    wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async(
    port_: i64,
) {
    wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_new_twin_rust_async(port_: i64, value: u32) {
    wire_SomeStructTwinRustAsync_new_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_rust_async,
) {
    wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_rust_async,
) {
    wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_rust_async(port_: i64) {
    wire_custom_enum_error_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_rust_async(port_: i64) {
    wire_custom_enum_error_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_rust_async(port_: i64, arg: u32) {
    wire_custom_enum_error_return_ok_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_custom_nested_error_outer_twin_rust_async,
) {
    wire_custom_nested_error_return_error_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_custom_struct_error_twin_rust_async,
) {
    wire_custom_struct_error_return_error_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_rust_async(port_: i64) {
    wire_func_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_rust_async(port_: i64) {
    wire_func_type_fallible_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_rust_async(port_: i64) {
    wire_func_type_infallible_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_rust_async(port_: i64) {
    wire_panic_with_custom_result_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_rust_async(port_: i64) {
    wire_return_custom_nested_error_1_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_rust_async(port_: i64) {
    wire_return_custom_nested_error_1_variant1_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_rust_async(port_: i64) {
    wire_return_custom_nested_error_2_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_rust_async(port_: i64) {
    wire_return_custom_struct_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_rust_async(port_: i64) {
    wire_return_custom_struct_ok_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_rust_async(port_: i64) {
    wire_return_err_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_rust_async(port_: i64, variant: u32) {
    wire_return_error_variant_twin_rust_async_impl(port_, variant)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_rust_async(port_: i64) {
    wire_return_ok_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_rust_async(port_: i64) {
    wire_stream_sink_throw_anyhow_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_rust_async(port_: i64) {
    wire_throw_anyhow_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_new_twin_sync(
    message: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_CustomStructTwinSync_new_twin_sync_impl(message)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync(
    that: *mut wire_cst_custom_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync(
    that: *mut wire_cst_custom_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_new_twin_sync(
    value: u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_SomeStructTwinSync_new_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync(
    that: *mut wire_cst_some_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync(
    that: *mut wire_cst_some_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_custom_enum_error_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_custom_enum_error_return_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_custom_enum_error_return_ok_twin_sync(
    arg: u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_custom_enum_error_return_ok_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_nested_error_return_error_twin_sync(
    arg: *mut wire_cst_custom_nested_error_outer_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_custom_nested_error_return_error_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_custom_struct_error_return_error_twin_sync(
    arg: *mut wire_cst_custom_struct_error_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_custom_struct_error_return_error_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_return_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_return_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_func_type_fallible_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_type_fallible_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_func_type_infallible_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_type_infallible_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_panic_with_custom_result_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_panic_with_custom_result_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_custom_nested_error_1_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_1_variant1_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_custom_nested_error_1_variant1_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_nested_error_2_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_custom_nested_error_2_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_custom_struct_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_custom_struct_ok_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_custom_struct_ok_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_err_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_err_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_return_error_variant_twin_sync(
    variant: u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_error_variant_twin_sync_impl(variant)
}

#[no_mangle]
pub extern "C" fn wire_return_ok_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_return_ok_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_stream_sink_throw_anyhow_twin_sync(port_: i64) {
    wire_stream_sink_throw_anyhow_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_throw_anyhow_twin_sync() -> flutter_rust_bridge::for_generated::WireSyncReturn
{
    wire_throw_anyhow_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_rust_async(port_: i64) {
    wire_call_new_module_system_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_rust_async(port_: i64) {
    wire_call_old_module_system_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_rust_async(port_: i64, my_enum: i32) {
    wire_use_imported_enum_twin_rust_async_impl(port_, my_enum)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_rust_async(
    port_: i64,
    my_struct: *mut wire_cst_my_struct,
) {
    wire_use_imported_struct_twin_rust_async_impl(port_, my_struct)
}

#[no_mangle]
pub extern "C" fn wire_call_new_module_system_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_call_new_module_system_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_call_old_module_system_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_call_old_module_system_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_use_imported_enum_twin_sync(
    my_enum: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_use_imported_enum_twin_sync_impl(my_enum)
}

#[no_mangle]
pub extern "C" fn wire_use_imported_struct_twin_sync(
    my_struct: *mut wire_cst_my_struct,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_use_imported_struct_twin_sync_impl(my_struct)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async_impl(port_, that, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async(
    port_: i64,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async_impl(
        port_,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async_impl(
        port_, key, max,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async_impl(
        port_, that, key, max,
    )
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinRustAsync_new_twin_rust_async(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8,
) {
    wire_ConcatenateWithTwinRustAsync_new_twin_rust_async_impl(port_, a)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinRustAsync_sum_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_sum_with_twin_rust_async,
    y: u32,
    z: u32,
) {
    wire_SumWithTwinRustAsync_sum_twin_rust_async_impl(port_, that, y, z)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_rust_async(port_: i64, a: u32, b: u32, c: u32) {
    wire_get_sum_array_twin_rust_async_impl(port_, a, b, c)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_rust_async(port_: i64) {
    wire_get_sum_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_concatenate_static_twin_sync(
    a: *mut wire_cst_list_prim_u_8,
    b: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_ConcatenateWithTwinSync_concatenate_static_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_concatenate_twin_sync(
    that: *mut wire_cst_concatenate_with_twin_sync,
    b: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_ConcatenateWithTwinSync_concatenate_twin_sync_impl(that, b)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync(
    port_: i64,
) {
    wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_sync,
) {
    wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_sync,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync_impl(port_, that, key, max)
}

#[no_mangle]
pub extern "C" fn wire_ConcatenateWithTwinSync_new_twin_sync(
    a: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_ConcatenateWithTwinSync_new_twin_sync_impl(a)
}

#[no_mangle]
pub extern "C" fn wire_SumWithTwinSync_sum_twin_sync(
    that: *mut wire_cst_sum_with_twin_sync,
    y: u32,
    z: u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_SumWithTwinSync_sum_twin_sync_impl(that, y, z)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_array_twin_sync(
    a: u32,
    b: u32,
    c: u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_sum_array_twin_sync_impl(a, b, c)
}

#[no_mangle]
pub extern "C" fn wire_get_sum_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_sum_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_rust_async(port_: i64) {
    wire_app_settings_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_rust_async(port_: i64) {
    wire_app_settings_vec_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_rust_async(port_: i64, nums: *mut wire_cst_numbers) {
    wire_first_number_twin_rust_async_impl(port_, nums)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_rust_async(port_: i64, seqs: *mut wire_cst_sequences) {
    wire_first_sequence_twin_rust_async_impl(port_, seqs)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_rust_async(port_: i64) {
    wire_get_app_settings_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_rust_async(port_: i64) {
    wire_get_fallible_app_settings_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_rust_async(port_: i64) {
    wire_get_message_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_rust_async(
    port_: i64,
    app_settings: *mut wire_cst_application_settings,
) {
    wire_is_app_embedded_twin_rust_async_impl(port_, app_settings)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_rust_async(port_: i64) {
    wire_mirror_struct_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_rust_async(port_: i64) {
    wire_mirror_tuple_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_rust_async(port_: i64, num: i32, times: usize) {
    wire_repeat_number_twin_rust_async_impl(port_, num, times)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_rust_async(port_: i64, seq: i32, times: usize) {
    wire_repeat_sequence_twin_rust_async_impl(port_, seq, times)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_rust_async(port_: i64) {
    wire_test_contains_mirrored_sub_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_fallible_of_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_rust_async(port_: i64) {
    wire_test_list_of_nested_enums_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_nested_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_rust_async(port_: i64, nested: bool) {
    wire_test_raw_string_enum_mirrored_twin_rust_async_impl(port_, nested)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_rust_async(port_: i64) {
    wire_test_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_stream_twin_sync(port_: i64) {
    wire_app_settings_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_app_settings_vec_stream_twin_sync(port_: i64) {
    wire_app_settings_vec_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_first_number_twin_sync(
    nums: *mut wire_cst_numbers,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_first_number_twin_sync_impl(nums)
}

#[no_mangle]
pub extern "C" fn wire_first_sequence_twin_sync(
    seqs: *mut wire_cst_sequences,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_first_sequence_twin_sync_impl(seqs)
}

#[no_mangle]
pub extern "C" fn wire_get_app_settings_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_app_settings_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_get_fallible_app_settings_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_get_fallible_app_settings_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_get_message_twin_sync() -> flutter_rust_bridge::for_generated::WireSyncReturn
{
    wire_get_message_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_is_app_embedded_twin_sync(
    app_settings: *mut wire_cst_application_settings,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_is_app_embedded_twin_sync_impl(app_settings)
}

#[no_mangle]
pub extern "C" fn wire_mirror_struct_stream_twin_sync(port_: i64) {
    wire_mirror_struct_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_mirror_tuple_stream_twin_sync(port_: i64) {
    wire_mirror_tuple_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_repeat_number_twin_sync(
    num: i32,
    times: usize,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_repeat_number_twin_sync_impl(num, times)
}

#[no_mangle]
pub extern "C" fn wire_repeat_sequence_twin_sync(
    seq: i32,
    times: usize,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_repeat_sequence_twin_sync_impl(seq, times)
}

#[no_mangle]
pub extern "C" fn wire_test_contains_mirrored_sub_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_contains_mirrored_sub_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_fallible_of_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_fallible_of_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_nested_enums_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_list_of_nested_enums_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_list_of_raw_nested_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_list_of_raw_nested_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_nested_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_nested_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_enum_mirrored_twin_sync(
    nested: bool,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_raw_string_enum_mirrored_twin_sync_impl(nested)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_rust_async(port_: i64) {
    wire_handle_big_buffers_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_rust_async(
    port_: i64,
    s: *mut wire_cst_my_tree_node_twin_rust_async,
) {
    wire_handle_complex_struct_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_rust_async(
    port_: i64,
    s: *mut wire_cst_my_nested_struct_twin_rust_async,
) {
    wire_handle_nested_struct_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_rust_async(port_: i64, s: *mut wire_cst_list_prim_u_8) {
    wire_handle_string_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) {
    wire_handle_struct_twin_rust_async_impl(port_, arg, boxed)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_rust_async(port_: i64, v: *mut wire_cst_list_prim_u_8) {
    wire_handle_vec_u8_twin_rust_async_impl(port_, v)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_rust_async(
    port_: i64,
    weekdays: *mut wire_cst_list_weekdays_twin_rust_async,
) {
    wire_list_of_primitive_enums_twin_rust_async_impl(port_, weekdays)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_rust_async(
    port_: i64,
    abc: *mut wire_cst_abc_twin_rust_async,
) {
    wire_test_abc_enum_twin_rust_async_impl(port_, abc)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_rust_async(
    port_: i64,
    se: *mut wire_cst_struct_with_enum_twin_rust_async,
) {
    wire_test_struct_with_enum_twin_rust_async_impl(port_, se)
}

#[no_mangle]
pub extern "C" fn wire_handle_big_buffers_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_big_buffers_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct_twin_sync(
    s: *mut wire_cst_my_tree_node_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_complex_struct_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_struct_twin_sync(
    s: *mut wire_cst_my_nested_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_nested_struct_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_twin_sync(
    s: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_string_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn wire_handle_struct_twin_sync(
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_struct_twin_sync_impl(arg, boxed)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8_twin_sync(
    v: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_vec_u8_twin_sync_impl(v)
}

#[no_mangle]
pub extern "C" fn wire_list_of_primitive_enums_twin_sync(
    weekdays: *mut wire_cst_list_weekdays_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_list_of_primitive_enums_twin_sync_impl(weekdays)
}

#[no_mangle]
pub extern "C" fn wire_test_abc_enum_twin_sync(
    abc: *mut wire_cst_abc_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_abc_enum_twin_sync_impl(abc)
}

#[no_mangle]
pub extern "C" fn wire_test_struct_with_enum_twin_sync(
    se: *mut wire_cst_struct_with_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_struct_with_enum_twin_sync_impl(se)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_rust_async(
    port_: i64,
    empty: *mut wire_cst_empty_twin_rust_async,
) {
    wire_empty_struct_twin_rust_async_impl(port_, empty)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_rust_async(port_: i64) {
    wire_func_return_unit_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_rust_async(port_: i64, arg: *mut wire_cst_list_prim_u_8) {
    wire_func_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_rust_async(
    port_: i64,
    l: *mut wire_cst_list_my_size,
) {
    wire_handle_list_of_struct_twin_rust_async_impl(port_, l)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_rust_async(
    port_: i64,
    names: *mut wire_cst_StringList,
) {
    wire_handle_string_list_twin_rust_async_impl(port_, names)
}

#[no_mangle]
pub extern "C" fn wire_empty_struct_twin_sync(
    empty: *mut wire_cst_empty_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_empty_struct_twin_sync_impl(empty)
}

#[no_mangle]
pub extern "C" fn wire_func_return_unit_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_return_unit_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_func_string_twin_sync(
    arg: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct_twin_sync(
    l: *mut wire_cst_list_my_size,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_list_of_struct_twin_sync_impl(l)
}

#[no_mangle]
pub extern "C" fn wire_handle_string_list_twin_sync(
    names: *mut wire_cst_StringList,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_string_list_twin_sync_impl(names)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_new_type_int_twin_rust_async,
) {
    wire_handle_newtype_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype_twin_sync(
    arg: *mut wire_cst_new_type_int_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_newtype_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_normal(
    port_: i64,
    arg: *mut bool,
) {
    wire_example_optional_primitive_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_normal(port_: i64, arg: *mut f32) {
    wire_example_optional_primitive_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_normal(port_: i64, arg: *mut f64) {
    wire_example_optional_primitive_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_normal(port_: i64, arg: *mut i16) {
    wire_example_optional_primitive_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_normal(port_: i64, arg: *mut i32) {
    wire_example_optional_primitive_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_normal(port_: i64, arg: *mut i64) {
    wire_example_optional_primitive_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_normal(port_: i64, arg: *mut i8) {
    wire_example_optional_primitive_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_normal(port_: i64, arg: *mut u16) {
    wire_example_optional_primitive_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_normal(port_: i64, arg: *mut u32) {
    wire_example_optional_primitive_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_normal(port_: i64, arg: *mut u64) {
    wire_example_optional_primitive_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_normal(port_: i64, arg: *mut u8) {
    wire_example_optional_primitive_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_rust_async(
    port_: i64,
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) {
    wire_primitive_optional_types_twin_rust_async_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_optional_types_twin_sync(
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_primitive_optional_types_twin_sync_impl(my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_rust_async(
    port_: i64,
    arg: *mut bool,
) {
    wire_example_optional_primitive_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_rust_async(
    port_: i64,
    arg: *mut f32,
) {
    wire_example_optional_primitive_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_rust_async(
    port_: i64,
    arg: *mut f64,
) {
    wire_example_optional_primitive_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_rust_async(
    port_: i64,
    arg: *mut i16,
) {
    wire_example_optional_primitive_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_rust_async(
    port_: i64,
    arg: *mut i32,
) {
    wire_example_optional_primitive_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_rust_async(
    port_: i64,
    arg: *mut i64,
) {
    wire_example_optional_primitive_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_rust_async(
    port_: i64,
    arg: *mut i8,
) {
    wire_example_optional_primitive_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_rust_async(
    port_: i64,
    arg: *mut u16,
) {
    wire_example_optional_primitive_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_rust_async(
    port_: i64,
    arg: *mut u32,
) {
    wire_example_optional_primitive_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_rust_async(
    port_: i64,
    arg: *mut u64,
) {
    wire_example_optional_primitive_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_rust_async(
    port_: i64,
    arg: *mut u8,
) {
    wire_example_optional_primitive_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_bool_twin_sync(
    arg: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f32_twin_sync(
    arg: *mut f32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_f64_twin_sync(
    arg: *mut f64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i16_twin_sync(
    arg: *mut i16,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i32_twin_sync(
    arg: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i64_twin_sync(
    arg: *mut i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_i8_twin_sync(
    arg: *mut i8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u16_twin_sync(
    arg: *mut u16,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u32_twin_sync(
    arg: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u64_twin_sync(
    arg: *mut u64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_optional_primitive_type_u8_twin_sync(
    arg: *mut u8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_optional_primitive_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_rust_async(port_: i64, opt: *mut f64) {
    wire_handle_increment_boxed_optional_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_rust_async(
    port_: i64,
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_rust_async,
) {
    wire_handle_option_box_arguments_twin_rust_async_impl(
        port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_rust_async(
    port_: i64,
    opt: *mut wire_cst_exotic_optionals_twin_rust_async,
) {
    wire_handle_optional_increment_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_rust_async(port_: i64, left: f64, right: f64) {
    wire_handle_optional_return_twin_rust_async_impl(port_, left, right)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_rust_async(
    port_: i64,
    document: *mut wire_cst_list_prim_u_8,
) {
    wire_handle_optional_struct_twin_rust_async_impl(port_, document)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_rust_async(
    port_: i64,
    opt: *mut wire_cst_opt_vecs_twin_rust_async,
) {
    wire_handle_vec_of_opts_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_increment_boxed_optional_twin_sync(
    opt: *mut f64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_increment_boxed_optional_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_option_box_arguments_twin_sync(
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_option_box_arguments_twin_sync_impl(
        i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_increment_twin_sync(
    opt: *mut wire_cst_exotic_optionals_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_optional_increment_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return_twin_sync(
    left: f64,
    right: f64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_optional_return_twin_sync_impl(left, right)
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct_twin_sync(
    document: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_optional_struct_twin_sync_impl(document)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_opts_twin_sync(
    opt: *mut wire_cst_opt_vecs_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_vec_of_opts_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_normal(port_: i64, arg: bool) {
    wire_example_primitive_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_normal(port_: i64, arg: f32) {
    wire_example_primitive_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_normal(port_: i64, arg: f64) {
    wire_example_primitive_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_normal(port_: i64, arg: i16) {
    wire_example_primitive_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_normal(port_: i64, arg: i32) {
    wire_example_primitive_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_normal(port_: i64, arg: i64) {
    wire_example_primitive_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_normal(port_: i64, arg: i8) {
    wire_example_primitive_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_normal(port_: i64, arg: u16) {
    wire_example_primitive_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_normal(port_: i64, arg: u32) {
    wire_example_primitive_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_normal(port_: i64, arg: u64) {
    wire_example_primitive_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_normal(port_: i64, arg: u8) {
    wire_example_primitive_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_bool,
) {
    wire_example_primitive_list_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_32,
) {
    wire_example_primitive_list_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_64,
) {
    wire_example_primitive_list_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_16,
) {
    wire_example_primitive_list_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32,
) {
    wire_example_primitive_list_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_64,
) {
    wire_example_primitive_list_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_8,
) {
    wire_example_primitive_list_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_16,
) {
    wire_example_primitive_list_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_32,
) {
    wire_example_primitive_list_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_64,
) {
    wire_example_primitive_list_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8,
) {
    wire_example_primitive_list_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_rust_async(port_: i64, n: i32) {
    wire_handle_vec_of_primitive_twin_rust_async_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn wire_handle_zero_copy_vec_of_primitive_twin_rust_async(port_: i64, n: i32) {
    wire_handle_zero_copy_vec_of_primitive_twin_rust_async_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_of_primitive_twin_sync(
    n: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_vec_of_primitive_twin_sync_impl(n)
}

#[no_mangle]
pub extern "C" fn wire_handle_zero_copy_vec_of_primitive_twin_sync(
    n: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_zero_copy_vec_of_primitive_twin_sync_impl(n)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_bool,
) {
    wire_example_primitive_list_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_32,
) {
    wire_example_primitive_list_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_64,
) {
    wire_example_primitive_list_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_16,
) {
    wire_example_primitive_list_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32,
) {
    wire_example_primitive_list_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_64,
) {
    wire_example_primitive_list_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_8,
) {
    wire_example_primitive_list_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_16,
) {
    wire_example_primitive_list_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_32,
) {
    wire_example_primitive_list_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_64,
) {
    wire_example_primitive_list_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8,
) {
    wire_example_primitive_list_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_bool_twin_sync(
    arg: *mut wire_cst_list_bool,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f32_twin_sync(
    arg: *mut wire_cst_list_prim_f_32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_f64_twin_sync(
    arg: *mut wire_cst_list_prim_f_64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i16_twin_sync(
    arg: *mut wire_cst_list_prim_i_16,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i32_twin_sync(
    arg: *mut wire_cst_list_prim_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i64_twin_sync(
    arg: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_i8_twin_sync(
    arg: *mut wire_cst_list_prim_i_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u16_twin_sync(
    arg: *mut wire_cst_list_prim_u_16,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u32_twin_sync(
    arg: *mut wire_cst_list_prim_u_32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u64_twin_sync(
    arg: *mut wire_cst_list_prim_u_64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_list_type_u8_twin_sync(
    arg: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_list_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_rust_async(
    port_: i64,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    wire_primitive_types_twin_rust_async_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_rust_async(port_: i64, my_u32: u32) {
    wire_primitive_u32_twin_rust_async_impl(port_, my_u32)
}

#[no_mangle]
pub extern "C" fn wire_primitive_types_twin_sync(
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_primitive_types_twin_sync_impl(my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn wire_primitive_u32_twin_sync(
    my_u32: u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_primitive_u32_twin_sync_impl(my_u32)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_rust_async(port_: i64, arg: bool) {
    wire_example_primitive_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_rust_async(port_: i64, arg: f32) {
    wire_example_primitive_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_rust_async(port_: i64, arg: f64) {
    wire_example_primitive_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_rust_async(port_: i64, arg: i16) {
    wire_example_primitive_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_rust_async(port_: i64, arg: i32) {
    wire_example_primitive_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_rust_async(port_: i64, arg: i64) {
    wire_example_primitive_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_rust_async(port_: i64, arg: i8) {
    wire_example_primitive_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_rust_async(port_: i64, arg: u16) {
    wire_example_primitive_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_rust_async(port_: i64, arg: u32) {
    wire_example_primitive_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_rust_async(port_: i64, arg: u64) {
    wire_example_primitive_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_rust_async(port_: i64, arg: u8) {
    wire_example_primitive_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_bool_twin_sync(
    arg: bool,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f32_twin_sync(
    arg: f32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_f64_twin_sync(
    arg: f64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i16_twin_sync(
    arg: i16,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i32_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i64_twin_sync(
    arg: i64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_i8_twin_sync(
    arg: i8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u16_twin_sync(
    arg: u16,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u32_twin_sync(
    arg: u32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u64_twin_sync(
    arg: u64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_example_primitive_type_u8_twin_sync(
    arg: u8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_example_primitive_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_rust_async(port_: i64) {
    wire_test_more_than_just_one_raw_string_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_rust_async(port_: i64) {
    wire_test_raw_string_item_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_more_than_just_one_raw_string_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_raw_string_item_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_new_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_new_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_arg_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: i32,
    adder: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sync_impl(arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_arg_own_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_arg_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_callable_arg_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_return_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_callable_return_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync(
    a: *const std::ffi::c_void,
    b: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_arg_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_plus_sign_arg_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_return_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_plus_sign_return_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_return_own_twin_sync(
    initial: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_return_own_twin_sync_impl(initial)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync(
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_two_args_twin_sync(
    a: *const std::ffi::c_void,
    b: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_rust_auto_opaque_two_args_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_rust_async(port_: i64) {
    wire_create_array_opaque_enum_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_rust_async(port_: i64) {
    wire_create_nested_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_rust_async(port_: i64) {
    wire_create_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_create_option_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_rust_async(port_: i64) {
    wire_create_sync_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_rust_async(port_: i64) {
    wire_frb_generator_test_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_rust_async(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_array_run_twin_rust_async_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_rust_async(port_: i64) {
    wire_opaque_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_rust_async(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_vec_run_twin_rust_async_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_rust_async(port_: i64) {
    wire_opaque_vec_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_rust_async,
) {
    wire_run_enum_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_rust_async,
) {
    wire_run_nested_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_rust_async(port_: i64, clone: *const std::ffi::c_void) {
    wire_run_non_clone_twin_rust_async_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_rust_async(port_: i64, opaque: *const std::ffi::c_void) {
    wire_run_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_run_opaque_with_delay_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_unwrap_rust_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_array_opaque_enum_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_nested_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_sync(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_option_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_create_sync_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_frb_generator_test_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_sync(
    data: *mut wire_cst_list_RustOpaque_hide_data,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_opaque_array_run_twin_sync_impl(data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_sync() -> flutter_rust_bridge::for_generated::WireSyncReturn
{
    wire_opaque_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_sync(
    data: *mut wire_cst_list_RustOpaque_hide_data,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_opaque_vec_run_twin_sync_impl(data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_sync() -> flutter_rust_bridge::for_generated::WireSyncReturn
{
    wire_opaque_vec_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_sync(
    opaque: *mut wire_cst_enum_opaque_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_run_enum_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_sync(
    opaque: *mut wire_cst_opaque_nested_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_run_nested_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_sync(
    clone: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_run_non_clone_twin_sync_impl(clone)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_run_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_run_opaque_with_delay_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_unwrap_rust_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_rust_async(port_: i64, a: i32, b: i32) {
    wire_simple_adder_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_sync(
    a: i32,
    b: i32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_simple_adder_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_error_twin_rust_async(port_: i64) {
    wire_func_stream_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_panic_twin_rust_async(port_: i64) {
    wire_func_stream_return_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_sink_arg_position_twin_rust_async(port_: i64, a: u32, b: u32) {
    wire_func_stream_sink_arg_position_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_of_struct_twin_rust_async(port_: i64) {
    wire_handle_stream_of_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_1_twin_rust_async(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_1_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_2_twin_rust_async(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_2_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_3_twin_rust_async(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_3_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_one_field_twin_rust_async,
) {
    wire_func_struct_with_one_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_two_field_twin_rust_async,
) {
    wire_func_struct_with_two_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_zero_field_twin_rust_async,
) {
    wire_func_struct_with_zero_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_rust_async,
) {
    wire_func_tuple_struct_with_one_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_rust_async,
) {
    wire_func_tuple_struct_with_two_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_sync(
    arg: *mut wire_cst_struct_with_one_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_struct_with_one_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_sync(
    arg: *mut wire_cst_struct_with_two_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_struct_with_two_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_sync(
    arg: *mut wire_cst_struct_with_zero_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_struct_with_zero_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_sync(
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_tuple_struct_with_one_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_sync(
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_func_tuple_struct_with_two_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_rust_async(
    port_: i64,
    value: *mut wire_cst_list_record_string_i_32,
) {
    wire_test_tuple_2_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_rust_async(
    port_: i64,
    value: *mut wire_cst_record_string_i_32,
) {
    wire_test_tuple_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_sync(
    value: *mut wire_cst_list_record_string_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_tuple_2_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_sync(
    value: *mut wire_cst_record_string_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_test_tuple_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_rust_async(port_: i64, input: u64) {
    wire_handle_type_alias_id_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_rust_async(port_: i64, input: u64) {
    wire_handle_type_alias_model_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_rust_async(port_: i64, input: u64) {
    wire_handle_type_nest_alias_id_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_type_alias_id_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_type_alias_model_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_type_nest_alias_id_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_uuids_twin_rust_async(
    port_: i64,
    ids: *mut wire_cst_feature_uuid_twin_rust_async,
) {
    wire_handle_nested_uuids_twin_rust_async_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuid_twin_rust_async(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_handle_uuid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuids_twin_rust_async(port_: i64, ids: *mut wire_cst_list_prim_u_8) {
    wire_handle_uuids_twin_rust_async_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_uuids_twin_sync(
    ids: *mut wire_cst_feature_uuid_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_nested_uuids_twin_sync_impl(ids)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuid_twin_sync(
    id: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_uuid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuids_twin_sync(
    ids: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_handle_uuids_twin_sync_impl(ids)
}

#[no_mangle]
pub extern "C" fn wire_test_more_than_just_one_raw_string_struct_twin_normal(port_: i64) {
    wire_test_more_than_just_one_raw_string_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_test_raw_string_item_struct_twin_normal(port_: i64) {
    wire_test_raw_string_item_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal(port_: i64) {
    wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_new_twin_normal(port_: i64) {
    wire_NonCloneSimpleTwinNormal_new_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal(port_: i64) {
    wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: i32,
    adder: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_normal_impl(port_, arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_and_return_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_arg_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_callable_arg_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_callable_return_twin_normal(port_: i64) {
    wire_rust_auto_opaque_callable_return_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal(
    port_: i64,
    a: *const std::ffi::c_void,
    b: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_arg_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_plus_sign_return_twin_normal(port_: i64) {
    wire_rust_auto_opaque_plus_sign_return_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_return_own_twin_normal(port_: i64, initial: i32) {
    wire_rust_auto_opaque_return_own_twin_normal_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_arg_own_twin_normal(
    port_: i64,
    arg: *const std::ffi::c_void,
    expect: *mut wire_cst_list_prim_u_8,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_one_twin_normal(port_: i64) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_trait_object_return_own_two_twin_normal(port_: i64) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_auto_opaque_two_args_twin_normal(
    port_: i64,
    a: *const std::ffi::c_void,
    b: *const std::ffi::c_void,
) {
    wire_rust_auto_opaque_two_args_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_create_array_opaque_enum_twin_normal(port_: i64) {
    wire_create_array_opaque_enum_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_nested_opaque_twin_normal(port_: i64) {
    wire_create_nested_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_opaque_twin_normal(port_: i64) {
    wire_create_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_create_option_opaque_twin_normal(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_create_option_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_create_sync_opaque_twin_normal(port_: i64) {
    wire_create_sync_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_frb_generator_test_twin_normal(port_: i64) {
    wire_frb_generator_test_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_run_twin_normal(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_array_run_twin_normal_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_array_twin_normal(port_: i64) {
    wire_opaque_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_run_twin_normal(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_hide_data,
) {
    wire_opaque_vec_run_twin_normal_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn wire_opaque_vec_twin_normal(port_: i64) {
    wire_opaque_vec_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_run_enum_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_normal,
) {
    wire_run_enum_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_nested_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_normal,
) {
    wire_run_nested_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_non_clone_twin_normal(port_: i64, clone: *const std::ffi::c_void) {
    wire_run_non_clone_twin_normal_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_run_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_run_opaque_with_delay_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_run_opaque_with_delay_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_unwrap_rust_opaque_twin_normal(port_: i64, opaque: *const std::ffi::c_void) {
    wire_unwrap_rust_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn wire_frb_sync_generator_test_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_frb_sync_generator_test_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_create_non_clone_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_create_non_clone_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_create_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_create_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_create_sync_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_create_sync_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_option_rust_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_option_rust_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn wire_sync_run_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncReturn {
    wire_sync_run_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn wire_simple_adder_twin_normal(port_: i64, a: i32, b: i32) {
    wire_simple_adder_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_error_twin_normal(port_: i64) {
    wire_func_stream_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_return_panic_twin_normal(port_: i64) {
    wire_func_stream_return_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_sink_arg_position_twin_normal(port_: i64, a: u32, b: u32) {
    wire_func_stream_sink_arg_position_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_of_struct_twin_normal(port_: i64) {
    wire_handle_stream_of_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_1_twin_normal(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_1_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_2_twin_normal(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_2_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_handle_stream_sink_at_3_twin_normal(port_: i64, key: u32, max: u32) {
    wire_handle_stream_sink_at_3_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn wire_func_stream_realistic_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8,
) {
    wire_func_stream_realistic_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_one_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_one_field_twin_normal,
) {
    wire_func_struct_with_one_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_two_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_two_field_twin_normal,
) {
    wire_func_struct_with_two_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_struct_with_zero_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_zero_field_twin_normal,
) {
    wire_func_struct_with_zero_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_one_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_normal,
) {
    wire_func_tuple_struct_with_one_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_func_tuple_struct_with_two_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_normal,
) {
    wire_func_tuple_struct_with_two_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_2_twin_normal(
    port_: i64,
    value: *mut wire_cst_list_record_string_i_32,
) {
    wire_test_tuple_2_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_test_tuple_twin_normal(port_: i64, value: *mut wire_cst_record_string_i_32) {
    wire_test_tuple_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_id_twin_normal(port_: i64, input: u64) {
    wire_handle_type_alias_id_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_alias_model_twin_normal(port_: i64, input: u64) {
    wire_handle_type_alias_model_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_type_nest_alias_id_twin_normal(port_: i64, input: u64) {
    wire_handle_type_nest_alias_id_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn wire_handle_nested_uuids_twin_normal(
    port_: i64,
    ids: *mut wire_cst_feature_uuid_twin_normal,
) {
    wire_handle_nested_uuids_twin_normal_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuid_twin_normal(port_: i64, id: *mut wire_cst_list_prim_u_8) {
    wire_handle_uuid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_handle_uuids_twin_normal(port_: i64, ids: *mut wire_cst_list_prim_u_8) {
    wire_handle_uuids_twin_normal_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn dart_opaque_dart2rust_encode(
    handle: flutter_rust_bridge::for_generated::dart_sys::Dart_Handle,
) -> *const std::ffi::c_void {
    unsafe {
        flutter_rust_bridge::for_generated::dart_opaque_dart2rust_encode(
            &*FLUTTER_RUST_BRIDGE_HANDLER,
            handle,
        )
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_MutexHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<Mutex<HideData>>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_MutexHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<Mutex<HideData>>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_RwLockHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<RwLock<HideData>>(
            ptr,
        );
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_RwLockHideData(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<RwLock<HideData>>(
            ptr,
        );
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinRustAsync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinRustAsync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            Box<dyn DartDebugTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            Box<dyn DartDebugTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_frb_opaque_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueSyncReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::FrbOpaqueSyncReturn,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::HideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::HideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_i_32(ptr: *const std::ffi::c_void) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<i32>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_i_32(ptr: *const std::ffi::c_void) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<i32>(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_non_clone_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::NonCloneData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_non_clone_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::NonCloneData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_non_send_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            crate::auxiliary::sample_types::NonSendHideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_non_send_hide_data(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            crate::auxiliary::sample_types::NonSendHideData,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
            >,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynFnStringStringSendSyncUnwindSafeRefUnwindSafe(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
            >,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynHelloTraitTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn HelloTraitTwinSync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinNormalSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockBoxdynMyTraitTwinSyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockNonCloneSimpleTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<NonCloneSimpleTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn cst_new_StringList(len: i32) -> *mut wire_cst_StringList {
    let wrap = wire_cst_StringList {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_box_application_env() -> *mut wire_cst_application_env {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_env::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Utc(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_DartOpaque(
    value: *const std::ffi::c_void,
) -> *mut *const std::ffi::c_void {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_RustOpaque_hide_data(
    value: *const std::ffi::c_void,
) -> *mut *const std::ffi::c_void {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_normal() -> *mut wire_cst_a_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_a_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_rust_async() -> *mut wire_cst_a_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_a_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_a_twin_sync() -> *mut wire_cst_a_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_a_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_normal() -> *mut wire_cst_abc_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_rust_async() -> *mut wire_cst_abc_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_abc_twin_sync() -> *mut wire_cst_abc_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_abc_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_application_env() -> *mut wire_cst_application_env {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_env::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_application_settings() -> *mut wire_cst_application_settings {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_settings::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_normal() -> *mut wire_cst_attribute_twin_normal
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_rust_async(
) -> *mut wire_cst_attribute_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_attribute_twin_sync() -> *mut wire_cst_attribute_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_normal() -> *mut wire_cst_b_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_b_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_rust_async() -> *mut wire_cst_b_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_b_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_b_twin_sync() -> *mut wire_cst_b_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_b_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_normal() -> *mut wire_cst_c_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_c_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_rust_async() -> *mut wire_cst_c_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_c_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_c_twin_sync() -> *mut wire_cst_c_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_c_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_normal(
) -> *mut wire_cst_concatenate_with_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_rust_async(
) -> *mut wire_cst_concatenate_with_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_concatenate_with_twin_sync(
) -> *mut wire_cst_concatenate_with_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_normal(
) -> *mut wire_cst_custom_nested_error_inner_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_inner_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_inner_twin_sync(
) -> *mut wire_cst_custom_nested_error_inner_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_normal(
) -> *mut wire_cst_custom_nested_error_outer_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_outer_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_nested_error_outer_twin_sync(
) -> *mut wire_cst_custom_nested_error_outer_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_normal(
) -> *mut wire_cst_custom_struct_error_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_rust_async(
) -> *mut wire_cst_custom_struct_error_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_error_twin_sync(
) -> *mut wire_cst_custom_struct_error_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_normal(
) -> *mut wire_cst_custom_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_rust_async(
) -> *mut wire_cst_custom_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_custom_struct_twin_sync(
) -> *mut wire_cst_custom_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_normal(
) -> *mut wire_cst_customized_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_rust_async(
) -> *mut wire_cst_customized_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_customized_twin_sync() -> *mut wire_cst_customized_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_normal(
) -> *mut wire_cst_dart_opaque_nested_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_rust_async(
) -> *mut wire_cst_dart_opaque_nested_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_dart_opaque_nested_twin_sync(
) -> *mut wire_cst_dart_opaque_nested_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_normal() -> *mut wire_cst_empty_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_rust_async() -> *mut wire_cst_empty_twin_rust_async
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_empty_twin_sync() -> *mut wire_cst_empty_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_normal(
) -> *mut wire_cst_enum_dart_opaque_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_rust_async(
) -> *mut wire_cst_enum_dart_opaque_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_dart_opaque_twin_sync(
) -> *mut wire_cst_enum_dart_opaque_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_normal(
) -> *mut wire_cst_enum_opaque_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_rust_async(
) -> *mut wire_cst_enum_opaque_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_opaque_twin_sync() -> *mut wire_cst_enum_opaque_twin_sync
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_normal(
) -> *mut wire_cst_enum_with_item_mixed_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_rust_async(
) -> *mut wire_cst_enum_with_item_mixed_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_mixed_twin_sync(
) -> *mut wire_cst_enum_with_item_mixed_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_normal(
) -> *mut wire_cst_enum_with_item_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_rust_async(
) -> *mut wire_cst_enum_with_item_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_struct_twin_sync(
) -> *mut wire_cst_enum_with_item_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_normal(
) -> *mut wire_cst_enum_with_item_tuple_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_rust_async(
) -> *mut wire_cst_enum_with_item_tuple_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_enum_with_item_tuple_twin_sync(
) -> *mut wire_cst_enum_with_item_tuple_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_event_twin_normal() -> *mut wire_cst_event_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_event_twin_rust_async() -> *mut wire_cst_event_twin_rust_async
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_event_twin_sync() -> *mut wire_cst_event_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_normal(
) -> *mut wire_cst_exotic_optionals_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_rust_async(
) -> *mut wire_cst_exotic_optionals_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_exotic_optionals_twin_sync(
) -> *mut wire_cst_exotic_optionals_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_f_32(value: f32) -> *mut f32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_chrono_twin_normal(
) -> *mut wire_cst_feature_chrono_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_chrono_twin_rust_async(
) -> *mut wire_cst_feature_chrono_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_chrono_twin_sync(
) -> *mut wire_cst_feature_chrono_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_uuid_twin_normal(
) -> *mut wire_cst_feature_uuid_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_uuid_twin_rust_async(
) -> *mut wire_cst_feature_uuid_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feature_uuid_twin_sync(
) -> *mut wire_cst_feature_uuid_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_normal() -> *mut wire_cst_feed_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_rust_async(
) -> *mut wire_cst_feed_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_feed_id_twin_sync() -> *mut wire_cst_feed_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_16(value: i16) -> *mut i16 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_8(value: i8) -> *mut i8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_normal(
) -> *mut wire_cst_kitchen_sink_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_rust_async(
) -> *mut wire_cst_kitchen_sink_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_kitchen_sink_twin_sync(
) -> *mut wire_cst_kitchen_sink_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_macro_struct() -> *mut wire_cst_macro_struct {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_macro_struct::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_normal() -> *mut wire_cst_measure_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_rust_async(
) -> *mut wire_cst_measure_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_measure_twin_sync() -> *mut wire_cst_measure_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_normal(
) -> *mut wire_cst_message_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_rust_async(
) -> *mut wire_cst_message_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_message_id_twin_sync() -> *mut wire_cst_message_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_normal(
) -> *mut wire_cst_my_nested_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_rust_async(
) -> *mut wire_cst_my_nested_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_nested_struct_twin_sync(
) -> *mut wire_cst_my_nested_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_size() -> *mut wire_cst_my_size {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_size::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_struct() -> *mut wire_cst_my_struct {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_struct::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_normal(
) -> *mut wire_cst_my_tree_node_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_rust_async(
) -> *mut wire_cst_my_tree_node_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_my_tree_node_twin_sync(
) -> *mut wire_cst_my_tree_node_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_normal(
) -> *mut wire_cst_new_type_int_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_rust_async(
) -> *mut wire_cst_new_type_int_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_new_type_int_twin_sync(
) -> *mut wire_cst_new_type_int_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_normal() -> *mut wire_cst_note_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_rust_async() -> *mut wire_cst_note_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_note_twin_sync() -> *mut wire_cst_note_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_numbers() -> *mut wire_cst_numbers {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_numbers::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_normal(
) -> *mut wire_cst_opaque_nested_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_rust_async(
) -> *mut wire_cst_opaque_nested_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opaque_nested_twin_sync(
) -> *mut wire_cst_opaque_nested_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_normal() -> *mut wire_cst_opt_vecs_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_rust_async(
) -> *mut wire_cst_opt_vecs_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_opt_vecs_twin_sync() -> *mut wire_cst_opt_vecs_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_record_string_i_32() -> *mut wire_cst_record_string_i_32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_record_string_i_32::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sequences() -> *mut wire_cst_sequences {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_sequences::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_normal(
) -> *mut wire_cst_some_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_rust_async(
) -> *mut wire_cst_some_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_some_struct_twin_sync() -> *mut wire_cst_some_struct_twin_sync
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_normal(
) -> *mut wire_cst_struct_with_comments_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_rust_async(
) -> *mut wire_cst_struct_with_comments_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_comments_twin_sync(
) -> *mut wire_cst_struct_with_comments_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_normal(
) -> *mut wire_cst_struct_with_enum_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_rust_async(
) -> *mut wire_cst_struct_with_enum_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_enum_twin_sync(
) -> *mut wire_cst_struct_with_enum_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_normal(
) -> *mut wire_cst_struct_with_one_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_rust_async(
) -> *mut wire_cst_struct_with_one_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_one_field_twin_sync(
) -> *mut wire_cst_struct_with_one_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_normal(
) -> *mut wire_cst_struct_with_two_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_rust_async(
) -> *mut wire_cst_struct_with_two_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_two_field_twin_sync(
) -> *mut wire_cst_struct_with_two_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_normal(
) -> *mut wire_cst_struct_with_zero_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_rust_async(
) -> *mut wire_cst_struct_with_zero_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_struct_with_zero_field_twin_sync(
) -> *mut wire_cst_struct_with_zero_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_normal() -> *mut wire_cst_sum_with_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_rust_async(
) -> *mut wire_cst_sum_with_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sum_with_twin_sync() -> *mut wire_cst_sum_with_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_normal() -> *mut wire_cst_test_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_rust_async(
) -> *mut wire_cst_test_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_test_id_twin_sync() -> *mut wire_cst_test_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_normal(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_one_field_twin_sync(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_normal(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_tuple_struct_with_two_field_twin_sync(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_16(value: u16) -> *mut u16 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_normal() -> *mut wire_cst_user_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_rust_async(
) -> *mut wire_cst_user_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_user_id_twin_sync() -> *mut wire_cst_user_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_normal(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_rust_async(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_weekdays_twin_sync(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_normal() -> *mut wire_cst_blob_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_rust_async() -> *mut wire_cst_blob_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_blob_twin_sync() -> *mut wire_cst_blob_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_normal() -> *mut wire_cst_distance_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_rust_async() -> *mut wire_cst_distance_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_distance_twin_sync() -> *mut wire_cst_distance_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_normal(
) -> *mut wire_cst_exotic_optionals_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_rust_async(
) -> *mut wire_cst_exotic_optionals_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_exotic_optionals_twin_sync(
) -> *mut wire_cst_exotic_optionals_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_i_8(value: i8) -> *mut i8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_normal() -> *mut wire_cst_kitchen_sink_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_rust_async(
) -> *mut wire_cst_kitchen_sink_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_kitchen_sink_twin_sync() -> *mut wire_cst_kitchen_sink_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_my_size() -> *mut wire_cst_my_size {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_size::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_normal() -> *mut wire_cst_speed_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_rust_async() -> *mut wire_cst_speed_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_speed_twin_sync() -> *mut wire_cst_speed_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn cst_new_box_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_normal(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_rust_async(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_weekdays_twin_sync(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_list_DartOpaque(len: i32) -> *mut wire_cst_list_DartOpaque {
    let wrap = wire_cst_list_DartOpaque {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_RustOpaque_hide_data(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_hide_data {
    let wrap = wire_cst_list_RustOpaque_hide_data {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_application_env_var(
    len: i32,
) -> *mut wire_cst_list_application_env_var {
    let wrap = wire_cst_list_application_env_var {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_application_env_var>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_normal(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_normal {
    let wrap = wire_cst_list_attribute_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_rust_async {
    let wrap = wire_cst_list_attribute_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_attribute_twin_sync(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_sync {
    let wrap = wire_cst_list_attribute_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_bool(len: i32) -> *mut wire_cst_list_bool {
    let wrap = wire_cst_list_bool {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_size(len: i32) -> *mut wire_cst_list_my_size {
    let wrap = wire_cst_list_my_size {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_size>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_normal(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_normal {
    let wrap = wire_cst_list_my_tree_node_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_rust_async {
    let wrap = wire_cst_list_my_tree_node_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_my_tree_node_twin_sync(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_sync {
    let wrap = wire_cst_list_my_tree_node_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_String(len: i32) -> *mut wire_cst_list_opt_String {
    let wrap = wire_cst_list_opt_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_normal(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_attribute_twin_sync(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_i_32(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_i_32 {
    let wrap = wire_cst_list_opt_box_autoadd_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_normal(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_weekdays_twin_sync(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_list_prim_i_32(
    len: i32,
) -> *mut wire_cst_list_opt_list_prim_i_32 {
    let wrap = wire_cst_list_opt_list_prim_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_f_32(len: i32) -> *mut wire_cst_list_prim_f_32 {
    let ans = wire_cst_list_prim_f_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_f_64(len: i32) -> *mut wire_cst_list_prim_f_64 {
    let ans = wire_cst_list_prim_f_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_16(len: i32) -> *mut wire_cst_list_prim_i_16 {
    let ans = wire_cst_list_prim_i_16 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_32(len: i32) -> *mut wire_cst_list_prim_i_32 {
    let ans = wire_cst_list_prim_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_64(len: i32) -> *mut wire_cst_list_prim_i_64 {
    let ans = wire_cst_list_prim_i_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_8(len: i32) -> *mut wire_cst_list_prim_i_8 {
    let ans = wire_cst_list_prim_i_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_16(len: i32) -> *mut wire_cst_list_prim_u_16 {
    let ans = wire_cst_list_prim_u_16 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_32(len: i32) -> *mut wire_cst_list_prim_u_32 {
    let ans = wire_cst_list_prim_u_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_64(len: i32) -> *mut wire_cst_list_prim_u_64 {
    let ans = wire_cst_list_prim_u_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_8(len: i32) -> *mut wire_cst_list_prim_u_8 {
    let ans = wire_cst_list_prim_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_record_string_i_32(
    len: i32,
) -> *mut wire_cst_list_record_string_i_32 {
    let wrap = wire_cst_list_record_string_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_i_32>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_normal(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_normal {
    let wrap = wire_cst_list_test_id_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_rust_async {
    let wrap = wire_cst_list_test_id_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_test_id_twin_sync(len: i32) -> *mut wire_cst_list_test_id_twin_sync {
    let wrap = wire_cst_list_test_id_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_normal(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_normal {
    let wrap = wire_cst_list_weekdays_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_rust_async {
    let wrap = wire_cst_list_weekdays_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_weekdays_twin_sync(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_sync {
    let wrap = wire_cst_list_weekdays_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_A() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinNormal_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_B() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinNormal_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_C() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinNormal_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinNormal_JustInt() -> *mut AbcTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinNormalKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinNormal_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_A() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsync_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_B() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsync_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_C() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinRustAsync_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinRustAsync_JustInt() -> *mut AbcTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinRustAsyncKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinRustAsync_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_A() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSync_A {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_B() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSync_B {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_C() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_AbcTwinSync_C {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_AbcTwinSync_JustInt() -> *mut AbcTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(AbcTwinSyncKind {
        JustInt: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_AbcTwinSync_JustInt {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinNormal_Three(
) -> *mut CustomNestedErrorInnerTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinNormalKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinNormal_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinNormal_Four(
) -> *mut CustomNestedErrorInnerTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinNormalKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinNormal_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinRustAsync_Three(
) -> *mut CustomNestedErrorInnerTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinRustAsyncKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinRustAsync_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinRustAsync_Four(
) -> *mut CustomNestedErrorInnerTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinRustAsyncKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinRustAsync_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSync_Three(
) -> *mut CustomNestedErrorInnerTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSyncKind {
        Three: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSync_Three {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorInnerTwinSync_Four(
) -> *mut CustomNestedErrorInnerTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorInnerTwinSyncKind {
        Four: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorInnerTwinSync_Four {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinNormal_One(
) -> *mut CustomNestedErrorOuterTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinNormalKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinNormal_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinNormal_Two(
) -> *mut CustomNestedErrorOuterTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinNormalKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinNormal_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinRustAsync_One(
) -> *mut CustomNestedErrorOuterTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinRustAsyncKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinRustAsync_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinRustAsync_Two(
) -> *mut CustomNestedErrorOuterTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinRustAsyncKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinRustAsync_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSync_One(
) -> *mut CustomNestedErrorOuterTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSyncKind {
        One: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSync_One {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_CustomNestedErrorOuterTwinSync_Two(
) -> *mut CustomNestedErrorOuterTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(CustomNestedErrorOuterTwinSyncKind {
        Two: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_CustomNestedErrorOuterTwinSync_Two {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinNormal_Map() -> *mut DistanceTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinNormalKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DistanceTwinNormal_Map {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinRustAsync_Map() -> *mut DistanceTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinRustAsyncKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DistanceTwinRustAsync_Map {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DistanceTwinSync_Map() -> *mut DistanceTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DistanceTwinSyncKind {
        Map: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_DistanceTwinSync_Map {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinNormal_Primitive(
) -> *mut EnumDartOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinNormalKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinNormal_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinNormal_Opaque() -> *mut EnumDartOpaqueTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinNormalKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinNormal_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinRustAsync_Primitive(
) -> *mut EnumDartOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinRustAsyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinRustAsync_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinRustAsync_Opaque(
) -> *mut EnumDartOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinRustAsyncKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinRustAsync_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSync_Primitive() -> *mut EnumDartOpaqueTwinSyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSync_Primitive {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumDartOpaqueTwinSync_Opaque() -> *mut EnumDartOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumDartOpaqueTwinSyncKind {
        Opaque: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumDartOpaqueTwinSync_Opaque {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_Struct() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_Primitive() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_TraitObj() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_Mutex() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinNormal_RwLock() -> *mut EnumOpaqueTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinNormalKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinNormal_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_Struct() -> *mut EnumOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_Primitive() -> *mut EnumOpaqueTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_TraitObj() -> *mut EnumOpaqueTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_Mutex() -> *mut EnumOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinRustAsync_RwLock() -> *mut EnumOpaqueTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinRustAsyncKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinRustAsync_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_Struct() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_Struct {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_Primitive() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        Primitive: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_Primitive {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_TraitObj() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        TraitObj: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_TraitObj {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_Mutex() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        Mutex: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_Mutex {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumOpaqueTwinSync_RwLock() -> *mut EnumOpaqueTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumOpaqueTwinSyncKind {
        RwLock: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumOpaqueTwinSync_RwLock {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinNormal_B() -> *mut EnumWithItemMixedTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinNormal_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinNormal_C() -> *mut EnumWithItemMixedTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinNormalKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinNormal_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinRustAsync_B(
) -> *mut EnumWithItemMixedTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinRustAsync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinRustAsync_C(
) -> *mut EnumWithItemMixedTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinRustAsyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinRustAsync_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSync_B() -> *mut EnumWithItemMixedTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemMixedTwinSync_C() -> *mut EnumWithItemMixedTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemMixedTwinSyncKind {
        C: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemMixedTwinSync_C {
                c_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinNormal_A(
) -> *mut EnumWithItemStructTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinNormalKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinNormal_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinNormal_B(
) -> *mut EnumWithItemStructTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinNormal_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinRustAsync_A(
) -> *mut EnumWithItemStructTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinRustAsyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinRustAsync_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinRustAsync_B(
) -> *mut EnumWithItemStructTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinRustAsync_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSync_A() -> *mut EnumWithItemStructTwinSyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSync_A {
                a_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemStructTwinSync_B() -> *mut EnumWithItemStructTwinSyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemStructTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemStructTwinSync_B {
                b_field: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinNormal_A() -> *mut EnumWithItemTupleTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinNormalKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinNormal_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinNormal_B() -> *mut EnumWithItemTupleTwinNormalKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinNormalKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinNormal_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinRustAsync_A(
) -> *mut EnumWithItemTupleTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinRustAsyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinRustAsync_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinRustAsync_B(
) -> *mut EnumWithItemTupleTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinRustAsyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinRustAsync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSync_A() -> *mut EnumWithItemTupleTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSyncKind {
        A: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSync_A {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_EnumWithItemTupleTwinSync_B() -> *mut EnumWithItemTupleTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(EnumWithItemTupleTwinSyncKind {
        B: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_EnumWithItemTupleTwinSync_B {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Primitives() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Nested() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Optional() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Buffer() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinNormal_Enums() -> *mut KitchenSinkTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinNormalKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinNormal_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Primitives(
) -> *mut KitchenSinkTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Nested() -> *mut KitchenSinkTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Optional(
) -> *mut KitchenSinkTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Buffer() -> *mut KitchenSinkTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinRustAsync_Enums() -> *mut KitchenSinkTwinRustAsyncKind
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinRustAsyncKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinRustAsync_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Primitives() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Primitives: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Primitives {
                int32: Default::default(),
                float64: Default::default(),
                boolean: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Nested() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Nested: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Nested {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Optional() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Optional: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Optional {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Buffer() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Buffer: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Buffer {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_KitchenSinkTwinSync_Enums() -> *mut KitchenSinkTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(KitchenSinkTwinSyncKind {
        Enums: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_KitchenSinkTwinSync_Enums {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinNormal_Speed() -> *mut MeasureTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinNormalKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinNormal_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinNormal_Distance() -> *mut MeasureTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinNormalKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinNormal_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinRustAsync_Speed() -> *mut MeasureTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinRustAsyncKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinRustAsync_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinRustAsync_Distance() -> *mut MeasureTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinRustAsyncKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinRustAsync_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSync_Speed() -> *mut MeasureTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSyncKind {
        Speed: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSync_Speed {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_MeasureTwinSync_Distance() -> *mut MeasureTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(MeasureTwinSyncKind {
        Distance: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_MeasureTwinSync_Distance {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinNormal_GPS() -> *mut SpeedTwinNormalKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinNormalKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_SpeedTwinNormal_GPS {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinRustAsync_GPS() -> *mut SpeedTwinRustAsyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinRustAsyncKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_SpeedTwinRustAsync_GPS {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_SpeedTwinSync_GPS() -> *mut SpeedTwinSyncKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(SpeedTwinSyncKind {
        GPS: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_SpeedTwinSync_GPS {
            field0: Default::default(),
        }),
    })
}
