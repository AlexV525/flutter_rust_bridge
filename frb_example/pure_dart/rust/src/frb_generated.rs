// Section: file_attributes

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: code_header

// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use crate::api::comment::StructWithCommentsTwinNormal;
use crate::api::comment::*;
use crate::api::enumeration::EnumWithItemMixedTwinNormal;
use crate::api::enumeration::EnumWithItemStructTwinNormal;
use crate::api::enumeration::EnumWithItemTupleTwinNormal;
use crate::api::enumeration::*;
use crate::api::exception::CustomEnumErrorTwinNormal;
use crate::api::exception::CustomNestedErrorInnerTwinNormal;
use crate::api::exception::CustomNestedErrorOuterTwinNormal;
use crate::api::exception::CustomStructErrorTwinNormal;
use crate::api::exception::*;
use crate::api::inside_macro::MacroStruct;
use crate::api::inside_macro::*;
use crate::api::misc_type::*;
use crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync;
use crate::api::pseudo_manual::comment_twin_sync::*;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::*;
use crate::api::pseudo_manual::exception_twin_sync::*;
use crate::api::pseudo_manual::misc_type_twin_sync::*;
use crate::api::pseudo_manual::optional_primitive::*;
use crate::api::pseudo_manual::optional_primitive_twin_sync::*;
use crate::api::pseudo_manual::primitive::*;
use crate::api::pseudo_manual::primitive_list::*;
use crate::api::pseudo_manual::primitive_list_twin_sync::*;
use crate::api::pseudo_manual::primitive_twin_sync::*;
use crate::api::pseudo_manual::simple_twin_sync::*;
use crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::*;
use crate::api::simple::*;
use crate::api::stream::*;
use crate::api::structure::StructWithOneFieldTwinNormal;
use crate::api::structure::StructWithTwoFieldTwinNormal;
use crate::api::structure::StructWithZeroFieldTwinNormal;
use crate::api::structure::TupleStructWithOneFieldTwinNormal;
use crate::api::structure::TupleStructWithTwoFieldTwinNormal;
use crate::api::structure::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: wire_funcs

fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(
    port_: MessagePort,
    that: impl Wire2Api<StructWithCommentsTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_instance_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::instance_method_twin_normal(
                    &api_that,
                ))
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_static_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::static_method_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_slash_star_star_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_normal())
            }
        },
    )
}
fn wire_func_enum_simple_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumSimpleTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumSimpleTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_simple_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_simple_twin_normal(api_arg))
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemMixedTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemMixedTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_mixed_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_with_item_mixed_twin_normal(api_arg))
        },
    )
}
fn wire_func_enum_with_item_struct_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemStructTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemStructTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_struct_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_enum_with_item_struct_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemTupleTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemTupleTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_tuple_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_with_item_tuple_twin_normal(api_arg))
        },
    )
}
fn wire_custom_enum_error_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_enum_error_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| custom_enum_error_panic_twin_normal(),
    )
}
fn wire_custom_enum_error_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "custom_enum_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| custom_enum_error_return_error_twin_normal(),
    )
}
fn wire_custom_enum_error_return_ok_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "custom_enum_error_return_ok_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| custom_enum_error_return_ok_twin_normal(),
    )
}
fn wire_custom_nested_error_return_error_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<CustomNestedErrorOuterTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_nested_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_nested_error_return_error_twin_normal(api_arg)
        },
    )
}
fn wire_custom_struct_error_return_error_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<CustomStructErrorTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_struct_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_struct_error_return_error_twin_normal(api_arg)
        },
    )
}
fn wire_func_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| func_return_error_twin_normal(),
    )
}
fn wire_func_type_fallible_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_type_fallible_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| func_type_fallible_panic_twin_normal(),
    )
}
fn wire_func_type_infallible_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_type_infallible_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(func_type_infallible_panic_twin_normal()),
    )
}
fn wire_func_macro_struct_impl(port_: MessagePort, arg: impl Wire2Api<MacroStruct> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MacroStruct, _>(
        WrapInfo {
            debug_name: "func_macro_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_macro_struct(api_arg))
        },
    )
}
fn wire_func_return_unit_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_return_unit_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(func_return_unit_twin_normal()),
    )
}
fn wire_func_string_twin_normal_impl(port_: MessagePort, arg: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "func_string_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_string_twin_normal(api_arg))
        },
    )
}
fn wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(
    that: impl Wire2Api<StructWithCommentsTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_instance_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(StructWithCommentsTwinSync::instance_method_twin_sync(
                &api_that,
            ))
        },
    )
}
fn wire_StructWithCommentsTwinSync_static_method_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_static_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(StructWithCommentsTwinSync::static_method_twin_sync()),
    )
}
fn wire_function_with_comments_slash_star_star_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_impl() -> support::WireSyncReturn
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_sync()),
    )
}
fn wire_func_enum_simple_twin_sync_impl(
    arg: impl Wire2Api<EnumSimpleTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_simple_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_simple_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemMixedTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_mixed_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_mixed_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_struct_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemStructTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_struct_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_struct_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemTupleTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_tuple_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_tuple_twin_sync(api_arg))
        },
    )
}
fn wire_func_return_error_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || func_return_error_twin_sync(),
    )
}
fn wire_func_return_panic_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_return_panic_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(func_return_panic_twin_sync()),
    )
}
fn wire_func_return_unit_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_return_unit_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(func_return_unit_twin_sync()),
    )
}
fn wire_func_string_twin_sync_impl(
    arg: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_string_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_string_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<bool>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_i8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_u8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<bool>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<f32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<f64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<i16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<i64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<i8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<u16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<u64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<u8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_simple_adder_twin_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Result::<_, ()>::Ok(simple_adder_twin_sync(api_a, api_b))
        },
    )
}
fn wire_func_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithOneFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_one_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_one_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithTwoFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_two_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_two_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_struct_with_zero_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithZeroFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_zero_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_zero_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<TupleStructWithOneFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_tuple_struct_with_one_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<TupleStructWithTwoFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_tuple_struct_with_two_field_twin_sync(api_arg))
        },
    )
}
fn wire_simple_adder_twin_normal_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "simple_adder_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Result::<_, ()>::Ok(simple_adder_twin_normal(api_a, api_b))
        },
    )
}
fn wire_func_stream_realistic_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_realistic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_stream_realistic_twin_normal(
                    task_callback.stream_sink::<_, String>(),
                    api_arg,
                ))
            }
        },
    )
}
fn wire_func_stream_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                func_stream_return_error_twin_normal(task_callback.stream_sink::<_, String>())
            }
        },
    )
}
fn wire_func_stream_return_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_return_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                func_stream_return_panic_twin_normal(task_callback.stream_sink::<_, String>())
            }
        },
    )
}
fn wire_func_stream_sink_arg_position_twin_normal_impl(
    port_: MessagePort,
    a: impl Wire2Api<u32> + UnwindSafe,
    b: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_sink_arg_position_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_stream_sink_arg_position_twin_normal(
                    api_a,
                    api_b,
                    task_callback.stream_sink::<_, u32>(),
                ))
            }
        },
    )
}
fn wire_func_struct_with_one_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithOneFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithOneFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_one_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_struct_with_two_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithTwoFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithTwoFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_two_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_struct_with_zero_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithZeroFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithZeroFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_zero_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_zero_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<TupleStructWithOneFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TupleStructWithOneFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_tuple_struct_with_one_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<TupleStructWithTwoFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TupleStructWithTwoFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_tuple_struct_with_two_field_twin_normal(api_arg))
            }
        },
    )
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: impl_wire2api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<EnumSimpleTwinNormal> for i32 {
    fn wire2api(self) -> EnumSimpleTwinNormal {
        match self {
            0 => EnumSimpleTwinNormal::A,
            1 => EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", self),
        }
    }
}
impl Wire2Api<EnumSimpleTwinSync> for i32 {
    fn wire2api(self) -> EnumSimpleTwinSync {
        match self {
            0 => EnumSimpleTwinSync::A,
            1 => EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", self),
        }
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i16> for i16 {
    fn wire2api(self) -> i16 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl_into_dart

impl support::IntoDart for CustomEnumErrorTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Error0 { e, backtrace } => vec![
                0.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
            Self::Error1 { e, backtrace } => vec![
                1.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomEnumErrorTwinNormal {}
impl rust2dart::IntoIntoDart<CustomEnumErrorTwinNormal> for CustomEnumErrorTwinNormal {
    fn into_into_dart(self) -> CustomEnumErrorTwinNormal {
        self
    }
}
impl support::IntoDart for CustomNestedErrorInnerTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Three(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Four(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorInnerTwinNormal {}
impl rust2dart::IntoIntoDart<CustomNestedErrorInnerTwinNormal>
    for CustomNestedErrorInnerTwinNormal
{
    fn into_into_dart(self) -> CustomNestedErrorInnerTwinNormal {
        self
    }
}
impl support::IntoDart for CustomNestedErrorOuterTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Two(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorOuterTwinNormal {}
impl rust2dart::IntoIntoDart<CustomNestedErrorOuterTwinNormal>
    for CustomNestedErrorOuterTwinNormal
{
    fn into_into_dart(self) -> CustomNestedErrorOuterTwinNormal {
        self
    }
}
impl support::IntoDart for CustomStructErrorTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomStructErrorTwinNormal {}
impl rust2dart::IntoIntoDart<CustomStructErrorTwinNormal> for CustomStructErrorTwinNormal {
    fn into_into_dart(self) -> CustomStructErrorTwinNormal {
        self
    }
}
impl support::IntoDart for EnumSimpleTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumSimpleTwinNormal {}
impl rust2dart::IntoIntoDart<EnumSimpleTwinNormal> for EnumSimpleTwinNormal {
    fn into_into_dart(self) -> EnumSimpleTwinNormal {
        self
    }
}
impl support::IntoDart for EnumSimpleTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumSimpleTwinSync {}
impl rust2dart::IntoIntoDart<EnumSimpleTwinSync> for EnumSimpleTwinSync {
    fn into_into_dart(self) -> EnumSimpleTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemMixedTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemMixedTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemMixedTwinNormal> for EnumWithItemMixedTwinNormal {
    fn into_into_dart(self) -> EnumWithItemMixedTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemMixedTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemMixedTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemMixedTwinSync> for EnumWithItemMixedTwinSync {
    fn into_into_dart(self) -> EnumWithItemMixedTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemStructTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemStructTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemStructTwinNormal> for EnumWithItemStructTwinNormal {
    fn into_into_dart(self) -> EnumWithItemStructTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemStructTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemStructTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemStructTwinSync> for EnumWithItemStructTwinSync {
    fn into_into_dart(self) -> EnumWithItemStructTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemTupleTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemTupleTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemTupleTwinNormal> for EnumWithItemTupleTwinNormal {
    fn into_into_dart(self) -> EnumWithItemTupleTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemTupleTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemTupleTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemTupleTwinSync> for EnumWithItemTupleTwinSync {
    fn into_into_dart(self) -> EnumWithItemTupleTwinSync {
        self
    }
}
impl support::IntoDart for MacroStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.data.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MacroStruct {}
impl rust2dart::IntoIntoDart<MacroStruct> for MacroStruct {
    fn into_into_dart(self) -> MacroStruct {
        self
    }
}
impl support::IntoDart for StructWithOneFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithOneFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithOneFieldTwinNormal> for StructWithOneFieldTwinNormal {
    fn into_into_dart(self) -> StructWithOneFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithOneFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithOneFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithOneFieldTwinSync> for StructWithOneFieldTwinSync {
    fn into_into_dart(self) -> StructWithOneFieldTwinSync {
        self
    }
}
impl support::IntoDart for StructWithTwoFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithTwoFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithTwoFieldTwinNormal> for StructWithTwoFieldTwinNormal {
    fn into_into_dart(self) -> StructWithTwoFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithTwoFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithTwoFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithTwoFieldTwinSync> for StructWithTwoFieldTwinSync {
    fn into_into_dart(self) -> StructWithTwoFieldTwinSync {
        self
    }
}
impl support::IntoDart for StructWithZeroFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithZeroFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithZeroFieldTwinNormal> for StructWithZeroFieldTwinNormal {
    fn into_into_dart(self) -> StructWithZeroFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithZeroFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithZeroFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithZeroFieldTwinSync> for StructWithZeroFieldTwinSync {
    fn into_into_dart(self) -> StructWithZeroFieldTwinSync {
        self
    }
}
impl support::IntoDart for TupleStructWithOneFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithOneFieldTwinNormal {}
impl rust2dart::IntoIntoDart<TupleStructWithOneFieldTwinNormal>
    for TupleStructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> TupleStructWithOneFieldTwinNormal {
        self
    }
}
impl support::IntoDart for TupleStructWithOneFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithOneFieldTwinSync {}
impl rust2dart::IntoIntoDart<TupleStructWithOneFieldTwinSync> for TupleStructWithOneFieldTwinSync {
    fn into_into_dart(self) -> TupleStructWithOneFieldTwinSync {
        self
    }
}
impl support::IntoDart for TupleStructWithTwoFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithTwoFieldTwinNormal {}
impl rust2dart::IntoIntoDart<TupleStructWithTwoFieldTwinNormal>
    for TupleStructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> TupleStructWithTwoFieldTwinNormal {
        self
    }
}
impl support::IntoDart for TupleStructWithTwoFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithTwoFieldTwinSync {}
impl rust2dart::IntoIntoDart<TupleStructWithTwoFieldTwinSync> for TupleStructWithTwoFieldTwinSync {
    fn into_into_dart(self) -> TupleStructWithTwoFieldTwinSync {
        self
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
