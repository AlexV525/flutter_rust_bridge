// Section: file_attributes

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: code_header

// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use crate::api::rust_opaque::*;
use crate::api::rust_opaque_sync::*;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::Handler;

// Section: wire_funcs

fn wire_boxed_blob_impl(
    port_: flutter_rust_bridge::MessagePort,
    blob: impl Wire2Api<Box<[u8; 1600]>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::array::Blob, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "boxed_blob",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::array::boxed_blob(api_blob))
        },
    )
}
fn wire_func_test_id_impl(
    port_: flutter_rust_bridge::MessagePort,
    id: impl Wire2Api<crate::api::array::TestId> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::array::TestId, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_test_id",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::array::func_test_id(api_id))
        },
    )
}
fn wire_get_array_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 5], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_array",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::array::get_array()),
    )
}
fn wire_get_complex_array_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [crate::api::array::Point; 2], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_complex_array",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::array::get_complex_array()),
    )
}
fn wire_last_number_impl(
    port_: flutter_rust_bridge::MessagePort,
    array: impl Wire2Api<[f64; 16]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "last_number",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_array = array.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::array::last_number(api_array))
        },
    )
}
fn wire_nested_id_impl(
    port_: flutter_rust_bridge::MessagePort,
    id: impl Wire2Api<[crate::api::array::TestId; 4]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [crate::api::array::TestId; 2], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "nested_id",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::array::nested_id(api_id))
        },
    )
}
fn wire_new_msgid_impl(
    port_: flutter_rust_bridge::MessagePort,
    id: impl Wire2Api<[u8; 32]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::array::MessageId, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "new_msgid",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::array::new_msgid(api_id))
        },
    )
}
fn wire_return_boxed_feed_id_impl(
    port_: flutter_rust_bridge::MessagePort,
    id: impl Wire2Api<[u8; 8]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::array::FeedId, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "return_boxed_feed_id",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::array::return_boxed_feed_id(api_id))
            }
        },
    )
}
fn wire_return_boxed_raw_feed_id_impl(
    port_: flutter_rust_bridge::MessagePort,
    id: impl Wire2Api<crate::api::array::FeedId> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 8], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "return_boxed_raw_feed_id",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::array::return_boxed_raw_feed_id(api_id))
            }
        },
    )
}
fn wire_use_boxed_blob_impl(
    port_: flutter_rust_bridge::MessagePort,
    blob: impl Wire2Api<Box<crate::api::array::Blob>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 1600], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "use_boxed_blob",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::array::use_boxed_blob(api_blob))
        },
    )
}
fn wire_use_msgid_impl(
    port_: flutter_rust_bridge::MessagePort,
    id: impl Wire2Api<crate::api::array::MessageId> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 32], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "use_msgid",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::array::use_msgid(api_id))
        },
    )
}
fn wire_handle_customized_struct_impl(
    port_: flutter_rust_bridge::MessagePort,
    val: impl Wire2Api<crate::api::attribute::Customized> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_customized_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_val = val.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::attribute::handle_customized_struct(api_val))
            }
        },
    )
}
fn wire_next_user_id_impl(
    port_: flutter_rust_bridge::MessagePort,
    user_id: impl Wire2Api<crate::api::attribute::UserId> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::attribute::UserId, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "next_user_id",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_user_id = user_id.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::attribute::next_user_id(api_user_id))
            }
        },
    )
}
fn wire_datetime_local_impl(
    port_: flutter_rust_bridge::MessagePort,
    d: impl Wire2Api<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::DateTime<chrono::Local>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "datetime_local",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::chrono_type::datetime_local(api_d))
        },
    )
}
fn wire_datetime_utc_impl(
    port_: flutter_rust_bridge::MessagePort,
    d: impl Wire2Api<chrono::DateTime<chrono::Utc>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::DateTime<chrono::Utc>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "datetime_utc",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::chrono_type::datetime_utc(api_d))
        },
    )
}
fn wire_duration_impl(
    port_: flutter_rust_bridge::MessagePort,
    d: impl Wire2Api<chrono::Duration> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::Duration, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "duration",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::chrono_type::duration(api_d))
        },
    )
}
fn wire_handle_durations_impl(
    port_: flutter_rust_bridge::MessagePort,
    durations: impl Wire2Api<Vec<chrono::Duration>> + core::panic::UnwindSafe,
    since: impl Wire2Api<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<chrono::DateTime<chrono::Local>>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_durations",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_durations = durations.wire2api();
            let api_since = since.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::chrono_type::handle_durations(
                    api_durations,
                    api_since,
                ))
            }
        },
    )
}
fn wire_handle_timestamps_impl(
    port_: flutter_rust_bridge::MessagePort,
    timestamps: impl Wire2Api<Vec<chrono::NaiveDateTime>> + core::panic::UnwindSafe,
    epoch: impl Wire2Api<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<chrono::Duration>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_timestamps",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_timestamps = timestamps.wire2api();
            let api_epoch = epoch.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::chrono_type::handle_timestamps(
                    api_timestamps,
                    api_epoch,
                ))
            }
        },
    )
}
fn wire_how_long_does_it_take_impl(
    port_: flutter_rust_bridge::MessagePort,
    mine: impl Wire2Api<crate::api::chrono_type::FeatureChrono> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::Duration, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "how_long_does_it_take",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_mine = mine.wire2api();
            move |task_callback| crate::api::chrono_type::how_long_does_it_take(api_mine)
        },
    )
}
fn wire_naivedatetime_impl(
    port_: flutter_rust_bridge::MessagePort,
    d: impl Wire2Api<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::NaiveDateTime, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "naivedatetime",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::chrono_type::naivedatetime(api_d))
        },
    )
}
fn wire_optional_empty_datetime_utc_impl(
    port_: flutter_rust_bridge::MessagePort,
    d: impl Wire2Api<Option<chrono::DateTime<chrono::Utc>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<chrono::DateTime<chrono::Utc>>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "optional_empty_datetime_utc",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::chrono_type::optional_empty_datetime_utc(api_d))
            }
        },
    )
}
fn wire_test_chrono_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::chrono_type::TestChrono, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_chrono",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::chrono_type::test_chrono()),
    )
}
fn wire_test_precise_chrono_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::chrono_type::TestChrono, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_precise_chrono",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(crate::api::chrono_type::test_precise_chrono())
        },
    )
}
fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    that: impl Wire2Api<crate::api::comment::StructWithCommentsTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_instance_method_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::comment::StructWithCommentsTwinNormal::instance_method_twin_normal(
                        &api_that,
                    ),
                )
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_static_method_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::comment::StructWithCommentsTwinNormal::static_method_twin_normal(),
                )
            }
        },
    )
}
fn wire_function_with_comments_slash_star_star_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::comment::function_with_comments_slash_star_star_twin_normal(),
                )
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::comment::function_with_comments_triple_slash_multi_line_twin_normal(
                    ),
                )
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,(),_>(flutter_rust_bridge::WrapInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || {  move |task_callback| Result::<_,()>::Ok(crate::api::comment::function_with_comments_triple_slash_single_line_twin_normal()) })
}
fn wire_return_dart_dynamic_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,flutter_rust_bridge::DartAbi,_>(flutter_rust_bridge::WrapInfo{ debug_name: "return_dart_dynamic", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || {  move |task_callback| Result::<_,()>::Ok(crate::api::dart_dynamic::return_dart_dynamic()) })
}
fn wire_async_accept_dart_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "async_accept_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::async_accept_dart_opaque(
                    api_opaque,
                ))
            }
        },
    )
}
fn wire_create_enum_dart_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::dart_opaque::EnumDartOpaque, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "create_enum_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::create_enum_dart_opaque(api_opaque))
            }
        },
    )
}
fn wire_create_nested_dart_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque1: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
    opaque2: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::dart_opaque::DartOpaqueNested, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "create_nested_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque1 = opaque1.wire2api();
            let api_opaque2 = opaque2.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::create_nested_dart_opaque(
                    api_opaque1,
                    api_opaque2,
                ))
            }
        },
    )
}
fn wire_drop_static_dart_opaque_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "drop_static_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::drop_static_dart_opaque())
            }
        },
    )
}
fn wire_get_enum_dart_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<crate::api::dart_opaque::EnumDartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_enum_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::get_enum_dart_opaque(api_opaque))
            }
        },
    )
}
fn wire_get_nested_dart_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<crate::api::dart_opaque::DartOpaqueNested> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_nested_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::get_nested_dart_opaque(api_opaque))
            }
        },
    )
}
fn wire_loop_back_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, flutter_rust_bridge::DartOpaque, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "loop_back",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back(api_opaque))
        },
    )
}
fn wire_loop_back_array_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [flutter_rust_bridge::DartOpaque; 1], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "loop_back_array",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_array(api_opaque))
            }
        },
    )
}
fn wire_loop_back_array_get_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<[flutter_rust_bridge::DartOpaque; 1]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "loop_back_array_get",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_array_get(api_opaque))
            }
        },
    )
}
fn wire_loop_back_option_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<flutter_rust_bridge::DartOpaque>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "loop_back_option",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_option(api_opaque))
            }
        },
    )
}
fn wire_loop_back_option_get_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<Option<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "loop_back_option_get",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_option_get(api_opaque))
            }
        },
    )
}
fn wire_loop_back_vec_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<flutter_rust_bridge::DartOpaque>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "loop_back_vec",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_vec(api_opaque))
            }
        },
    )
}
fn wire_loop_back_vec_get_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<Vec<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "loop_back_vec_get",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_vec_get(api_opaque))
            }
        },
    )
}
fn wire_panic_unwrap_dart_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "panic_unwrap_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::panic_unwrap_dart_opaque(
                    api_opaque,
                ))
            }
        },
    )
}
fn wire_set_static_dart_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "set_static_dart_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::dart_opaque::set_static_dart_opaque(api_opaque))
            }
        },
    )
}
fn wire_return_non_droppable_dart_opaque_impl(
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "return_non_droppable_dart_opaque",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(
                crate::api::dart_opaque_sync::return_non_droppable_dart_opaque(api_opaque),
            )
        },
    )
}
fn wire_sync_accept_dart_opaque_impl(
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "sync_accept_dart_opaque",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(crate::api::dart_opaque_sync::sync_accept_dart_opaque(
                api_opaque,
            ))
        },
    )
}
fn wire_sync_loopback_impl(
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "sync_loopback",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(crate::api::dart_opaque_sync::sync_loopback(api_opaque))
        },
    )
}
fn wire_sync_option_loopback_impl(
    opaque: impl Wire2Api<Option<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "sync_option_loopback",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(crate::api::dart_opaque_sync::sync_option_loopback(
                api_opaque,
            ))
        },
    )
}
fn wire_unwrap_dart_opaque_impl(
    opaque: impl Wire2Api<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "unwrap_dart_opaque",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(crate::api::dart_opaque_sync::unwrap_dart_opaque(api_opaque))
        },
    )
}
fn wire_func_enum_simple_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::enumeration::EnumSimpleTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::enumeration::EnumSimpleTwinNormal, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_enum_simple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::enumeration::func_enum_simple_twin_normal(
                    api_arg,
                ))
            }
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::enumeration::EnumWithItemMixedTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::enumeration::EnumWithItemMixedTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_enum_with_item_mixed_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::enumeration::func_enum_with_item_mixed_twin_normal(api_arg),
                    )
                }
            },
        )
}
fn wire_func_enum_with_item_struct_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::enumeration::EnumWithItemStructTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::enumeration::EnumWithItemStructTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_enum_with_item_struct_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::enumeration::func_enum_with_item_struct_twin_normal(api_arg),
                    )
                }
            },
        )
}
fn wire_func_enum_with_item_tuple_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::enumeration::EnumWithItemTupleTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::enumeration::EnumWithItemTupleTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_enum_with_item_tuple_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::enumeration::func_enum_with_item_tuple_twin_normal(api_arg),
                    )
                }
            },
        )
}
fn wire_handle_enum_parameter_impl(
    port_: flutter_rust_bridge::MessagePort,
    weekday: impl Wire2Api<crate::api::misc_example::Weekdays> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::misc_example::Weekdays, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_enum_parameter",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_weekday = weekday.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::enumeration::handle_enum_parameter(api_weekday))
            }
        },
    )
}
fn wire_handle_return_enum_impl(
    port_: flutter_rust_bridge::MessagePort,
    input: impl Wire2Api<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<crate::api::misc_example::Weekdays>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_return_enum",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::enumeration::handle_return_enum(api_input))
            }
        },
    )
}
fn wire_multiply_by_ten_impl(
    port_: flutter_rust_bridge::MessagePort,
    measure: impl Wire2Api<crate::api::enumeration::Measure> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<crate::api::enumeration::Measure>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "multiply_by_ten",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_measure = measure.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::enumeration::multiply_by_ten(api_measure))
            }
        },
    )
}
fn wire_print_note_impl(
    port_: flutter_rust_bridge::MessagePort,
    note: impl Wire2Api<crate::api::enumeration::Note> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, flutter_rust_bridge::ZeroCopyBuffer<Vec<u8>>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "print_note",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_note = note.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::enumeration::print_note(api_note))
        },
    )
}
fn wire_Event_as_string_impl(
    port_: flutter_rust_bridge::MessagePort,
    that: impl Wire2Api<crate::api::event_listener::Event> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "Event_as_string",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::event_listener::Event::as_string(&api_that))
            }
        },
    )
}
fn wire_close_event_listener_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "close_event_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::event_listener::close_event_listener())
            }
        },
    )
}
fn wire_create_event_impl(
    port_: flutter_rust_bridge::MessagePort,
    address: impl Wire2Api<String> + core::panic::UnwindSafe,
    payload: impl Wire2Api<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "create_event",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_address = address.wire2api();
            let api_payload = payload.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::event_listener::create_event(
                    api_address,
                    api_payload,
                ))
            }
        },
    )
}
fn wire_register_event_listener_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "register_event_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                crate::api::event_listener::register_event_listener(
                    task_callback.stream_sink::<_, crate::api::event_listener::Event>(),
                )
            }
        },
    )
}
fn wire_custom_enum_error_panic_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "custom_enum_error_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| crate::api::exception::custom_enum_error_panic_twin_normal(),
    )
}
fn wire_custom_enum_error_return_error_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "custom_enum_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| crate::api::exception::custom_enum_error_return_error_twin_normal()
        },
    )
}
fn wire_custom_enum_error_return_ok_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "custom_enum_error_return_ok_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                crate::api::exception::custom_enum_error_return_ok_twin_normal(api_arg)
            }
        },
    )
}
fn wire_custom_nested_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::exception::CustomNestedErrorOuterTwinNormal>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "custom_nested_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                crate::api::exception::custom_nested_error_return_error_twin_normal(api_arg)
            }
        },
    )
}
fn wire_custom_struct_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::exception::CustomStructErrorTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "custom_struct_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                crate::api::exception::custom_struct_error_return_error_twin_normal(api_arg)
            }
        },
    )
}
fn wire_func_return_error_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| crate::api::exception::func_return_error_twin_normal(),
    )
}
fn wire_func_type_fallible_panic_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_type_fallible_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| crate::api::exception::func_type_fallible_panic_twin_normal(),
    )
}
fn wire_func_type_infallible_panic_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_type_infallible_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::exception::func_type_infallible_panic_twin_normal())
            }
        },
    )
}
fn wire_call_new_module_system_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,crate::auxiliary::new_module_system::sub_module::NewSimpleStruct,_>(flutter_rust_bridge::WrapInfo{ debug_name: "call_new_module_system", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || {  move |task_callback| Result::<_,()>::Ok(crate::api::external_type_in_crate::call_new_module_system()) })
}
fn wire_call_old_module_system_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,crate::auxiliary::old_module_system::sub_module::OldSimpleStruct,_>(flutter_rust_bridge::WrapInfo{ debug_name: "call_old_module_system", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || {  move |task_callback| Result::<_,()>::Ok(crate::api::external_type_in_crate::call_old_module_system()) })
}
fn wire_use_imported_enum_impl(
    port_: flutter_rust_bridge::MessagePort,
    my_enum: impl Wire2Api<crate::auxiliary::sample_types::MyEnum> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "use_imported_enum",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_my_enum = my_enum.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::external_type_in_crate::use_imported_enum(
                    api_my_enum,
                ))
            }
        },
    )
}
fn wire_use_imported_struct_impl(
    port_: flutter_rust_bridge::MessagePort,
    my_struct: impl Wire2Api<crate::auxiliary::sample_types::MyStruct> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "use_imported_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_my_struct = my_struct.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::external_type_in_crate::use_imported_struct(
                    api_my_struct,
                ))
            }
        },
    )
}
fn wire_func_macro_struct_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::inside_macro::MacroStruct> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::inside_macro::MacroStruct, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_macro_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::inside_macro::func_macro_struct(api_arg))
            }
        },
    )
}
fn wire_ConcatenateWith_concatenate_impl(
    port_: flutter_rust_bridge::MessagePort,
    that: impl Wire2Api<crate::api::method::ConcatenateWith> + core::panic::UnwindSafe,
    b: impl Wire2Api<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "ConcatenateWith_concatenate",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::method::ConcatenateWith::concatenate(
                    &api_that, api_b,
                ))
            }
        },
    )
}
fn wire_ConcatenateWith_concatenate_static_impl(
    port_: flutter_rust_bridge::MessagePort,
    a: impl Wire2Api<String> + core::panic::UnwindSafe,
    b: impl Wire2Api<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "ConcatenateWith_concatenate_static",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::method::ConcatenateWith::concatenate_static(
                    api_a, api_b,
                ))
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_static_stream_sink_impl(
    port_: flutter_rust_bridge::MessagePort,
    key: impl Wire2Api<u32> + core::panic::UnwindSafe,
    max: impl Wire2Api<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "ConcatenateWith_handle_some_static_stream_sink",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::method::ConcatenateWith::handle_some_static_stream_sink(
                        api_key,
                        api_max,
                        task_callback.stream_sink::<_, crate::api::method::Log2>(),
                    ),
                )
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_static_stream_sink_single_arg_impl(
    port_: flutter_rust_bridge::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "ConcatenateWith_handle_some_static_stream_sink_single_arg",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::method::ConcatenateWith::handle_some_static_stream_sink_single_arg(
                        task_callback.stream_sink::<_, u32>(),
                    ),
                )
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_stream_sink_impl(
    port_: flutter_rust_bridge::MessagePort,
    that: impl Wire2Api<crate::api::method::ConcatenateWith> + core::panic::UnwindSafe,
    key: impl Wire2Api<u32> + core::panic::UnwindSafe,
    max: impl Wire2Api<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "ConcatenateWith_handle_some_stream_sink",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::method::ConcatenateWith::handle_some_stream_sink(
                        &api_that,
                        api_key,
                        api_max,
                        task_callback.stream_sink::<_, crate::api::method::Log2>(),
                    ),
                )
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_stream_sink_at_1_impl(
    port_: flutter_rust_bridge::MessagePort,
    that: impl Wire2Api<crate::api::method::ConcatenateWith> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "ConcatenateWith_handle_some_stream_sink_at_1",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::method::ConcatenateWith::handle_some_stream_sink_at_1(
                        &api_that,
                        task_callback.stream_sink::<_, u32>(),
                    ),
                )
            }
        },
    )
}
fn wire_ConcatenateWith_new_impl(
    port_: flutter_rust_bridge::MessagePort,
    a: impl Wire2Api<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::method::ConcatenateWith, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "ConcatenateWith_new",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::method::ConcatenateWith::new(api_a))
            }
        },
    )
}
fn wire_SumWith_sum_impl(
    port_: flutter_rust_bridge::MessagePort,
    that: impl Wire2Api<crate::api::method::SumWith> + core::panic::UnwindSafe,
    y: impl Wire2Api<u32> + core::panic::UnwindSafe,
    z: impl Wire2Api<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "SumWith_sum",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_y = y.wire2api();
            let api_z = z.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::method::SumWith::sum(&api_that, api_y, api_z))
            }
        },
    )
}
fn wire_get_sum_array_impl(
    port_: flutter_rust_bridge::MessagePort,
    a: impl Wire2Api<u32> + core::panic::UnwindSafe,
    b: impl Wire2Api<u32> + core::panic::UnwindSafe,
    c: impl Wire2Api<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [crate::api::method::SumWith; 3], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_sum_array",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            let api_c = c.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::method::get_sum_array(api_a, api_b, api_c))
            }
        },
    )
}
fn wire_get_sum_struct_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::method::SumWith, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_sum_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::method::get_sum_struct()),
    )
}
fn wire_app_settings_stream_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "app_settings_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::app_settings_stream(
                    task_callback.stream_sink::<_, mirror_ApplicationSettings>(),
                ))
            }
        },
    )
}
fn wire_app_settings_vec_stream_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "app_settings_vec_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::app_settings_vec_stream(
                    task_callback.stream_sink::<_, Vec<mirror_ApplicationSettings>>(),
                ))
            }
        },
    )
}
fn wire_first_number_impl(
    port_: flutter_rust_bridge::MessagePort,
    nums: impl Wire2Api<crate::api::mirror::Numbers> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "first_number",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_nums = nums.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::mirror::first_number(api_nums))
        },
    )
}
fn wire_first_sequence_impl(
    port_: flutter_rust_bridge::MessagePort,
    seqs: impl Wire2Api<crate::api::mirror::Sequences> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "first_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_seqs = seqs.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::mirror::first_sequence(api_seqs))
        },
    )
}
fn wire_get_app_settings_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationSettings, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_app_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::mirror::get_app_settings()),
    )
}
fn wire_get_fallible_app_settings_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationSettings, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_fallible_app_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| crate::api::mirror::get_fallible_app_settings(),
    )
}
fn wire_get_message_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationMessage, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "get_message",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::mirror::get_message()),
    )
}
fn wire_is_app_embedded_impl(
    port_: flutter_rust_bridge::MessagePort,
    app_settings: impl Wire2Api<crate::api::mirror::ApplicationSettings> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "is_app_embedded",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_app_settings = app_settings.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::is_app_embedded(api_app_settings))
            }
        },
    )
}
fn wire_mirror_struct_stream_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "mirror_struct_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::mirror_struct_stream(
                    task_callback.stream_sink::<_, crate::api::mirror::MirrorStruct>(),
                ))
            }
        },
    )
}
fn wire_mirror_tuple_stream_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,(),_>(flutter_rust_bridge::WrapInfo{ debug_name: "mirror_tuple_stream", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Stream }, move || {  move |task_callback| Result::<_,()>::Ok(crate::api::mirror::mirror_tuple_stream(task_callback.stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>())) })
}
fn wire_repeat_number_impl(
    port_: flutter_rust_bridge::MessagePort,
    num: impl Wire2Api<i32> + core::panic::UnwindSafe,
    times: impl Wire2Api<usize> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_Numbers, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "repeat_number",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_num = num.wire2api();
            let api_times = times.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::repeat_number(api_num, api_times))
            }
        },
    )
}
fn wire_repeat_sequence_impl(
    port_: flutter_rust_bridge::MessagePort,
    seq: impl Wire2Api<i32> + core::panic::UnwindSafe,
    times: impl Wire2Api<usize> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_Sequences, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "repeat_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_seq = seq.wire2api();
            let api_times = times.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::repeat_sequence(api_seq, api_times))
            }
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::mirror::ContainsMirroredSubStruct, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_contains_mirrored_sub_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::test_contains_mirrored_sub_struct())
            }
        },
    )
}
fn wire_test_fallible_of_raw_string_mirrored_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<mirror_RawStringMirrored>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_fallible_of_raw_string_mirrored",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| crate::api::mirror::test_fallible_of_raw_string_mirrored(),
    )
}
fn wire_test_list_of_nested_enums_mirrored_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<mirror_RawStringEnumMirrored>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_list_of_nested_enums_mirrored",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::test_list_of_nested_enums_mirrored())
            }
        },
    )
}
fn wire_test_list_of_raw_nested_string_mirrored_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ListOfNestedRawStringMirrored, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_list_of_raw_nested_string_mirrored",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::test_list_of_raw_nested_string_mirrored())
            }
        },
    )
}
fn wire_test_nested_raw_string_mirrored_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_NestedRawStringMirrored, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_nested_raw_string_mirrored",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::test_nested_raw_string_mirrored())
            }
        },
    )
}
fn wire_test_raw_string_enum_mirrored_impl(
    port_: flutter_rust_bridge::MessagePort,
    nested: impl Wire2Api<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_RawStringEnumMirrored, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_raw_string_enum_mirrored",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_nested = nested.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::mirror::test_raw_string_enum_mirrored(
                    api_nested,
                ))
            }
        },
    )
}
fn wire_test_raw_string_mirrored_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_RawStringMirrored, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_raw_string_mirrored",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(crate::api::mirror::test_raw_string_mirrored())
        },
    )
}
fn wire_handle_big_buffers_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::misc_example::BigBuffers, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_big_buffers",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(crate::api::misc_example::handle_big_buffers())
        },
    )
}
fn wire_handle_complex_struct_impl(
    port_: flutter_rust_bridge::MessagePort,
    s: impl Wire2Api<crate::api::misc_example::MyTreeNode> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::misc_example::MyTreeNode, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_complex_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_example::handle_complex_struct(api_s))
            }
        },
    )
}
fn wire_handle_nested_struct_impl(
    port_: flutter_rust_bridge::MessagePort,
    s: impl Wire2Api<crate::api::misc_example::MyNestedStruct> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::misc_example::MyNestedStruct, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_nested_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_example::handle_nested_struct(api_s))
            }
        },
    )
}
fn wire_list_of_primitive_enums_impl(
    port_: flutter_rust_bridge::MessagePort,
    weekdays: impl Wire2Api<Vec<crate::api::misc_example::Weekdays>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<crate::api::misc_example::Weekdays>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "list_of_primitive_enums",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_weekdays = weekdays.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_example::list_of_primitive_enums(
                    api_weekdays,
                ))
            }
        },
    )
}
fn wire_test_abc_enum_impl(
    port_: flutter_rust_bridge::MessagePort,
    abc: impl Wire2Api<crate::api::misc_example::Abc> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::misc_example::Abc, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_abc_enum",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_abc = abc.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_example::test_abc_enum(api_abc))
            }
        },
    )
}
fn wire_test_struct_with_enum_impl(
    port_: flutter_rust_bridge::MessagePort,
    se: impl Wire2Api<crate::api::misc_example::StructWithEnum> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::misc_example::StructWithEnum, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_struct_with_enum",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_se = se.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_example::test_struct_with_enum(api_se))
            }
        },
    )
}
fn wire_func_return_unit_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_return_unit_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_type::func_return_unit_twin_normal())
            }
        },
    )
}
fn wire_func_string_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_type::func_string_twin_normal(api_arg))
            }
        },
    )
}
fn wire_handle_list_of_struct_impl(
    port_: flutter_rust_bridge::MessagePort,
    l: impl Wire2Api<Vec<crate::auxiliary::sample_types::MySize>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<crate::auxiliary::sample_types::MySize>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_list_of_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_l = l.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_type::handle_list_of_struct(api_l))
            }
        },
    )
}
fn wire_handle_string_list_impl(
    port_: flutter_rust_bridge::MessagePort,
    names: impl Wire2Api<Vec<String>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_string_list",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_names = names.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::misc_type::handle_string_list(api_names))
            }
        },
    )
}
fn wire_handle_newtype_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::newtype_pattern::NewTypeInt> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::newtype_pattern::NewTypeInt, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_newtype",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::newtype_pattern::handle_newtype(api_arg))
            }
        },
    )
}
fn wire_handle_increment_boxed_optional_impl(
    port_: flutter_rust_bridge::MessagePort,
    opt: impl Wire2Api<Option<Box<f64>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_increment_boxed_optional",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::optional::handle_increment_boxed_optional(
                    api_opt,
                ))
            }
        },
    )
}
fn wire_handle_option_box_arguments_impl(
    port_: flutter_rust_bridge::MessagePort,
    i8box: impl Wire2Api<Option<Box<i8>>> + core::panic::UnwindSafe,
    u8box: impl Wire2Api<Option<Box<u8>>> + core::panic::UnwindSafe,
    i32box: impl Wire2Api<Option<Box<i32>>> + core::panic::UnwindSafe,
    i64box: impl Wire2Api<Option<Box<i64>>> + core::panic::UnwindSafe,
    f64box: impl Wire2Api<Option<Box<f64>>> + core::panic::UnwindSafe,
    boolbox: impl Wire2Api<Option<Box<bool>>> + core::panic::UnwindSafe,
    structbox: impl Wire2Api<Option<Box<crate::api::optional::ExoticOptionals>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_option_box_arguments",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_i8box = i8box.wire2api();
            let api_u8box = u8box.wire2api();
            let api_i32box = i32box.wire2api();
            let api_i64box = i64box.wire2api();
            let api_f64box = f64box.wire2api();
            let api_boolbox = boolbox.wire2api();
            let api_structbox = structbox.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::optional::handle_option_box_arguments(
                    api_i8box,
                    api_u8box,
                    api_i32box,
                    api_i64box,
                    api_f64box,
                    api_boolbox,
                    api_structbox,
                ))
            }
        },
    )
}
fn wire_handle_optional_increment_impl(
    port_: flutter_rust_bridge::MessagePort,
    opt: impl Wire2Api<Option<crate::api::optional::ExoticOptionals>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<crate::api::optional::ExoticOptionals>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_optional_increment",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::optional::handle_optional_increment(api_opt))
            }
        },
    )
}
fn wire_handle_optional_return_impl(
    port_: flutter_rust_bridge::MessagePort,
    left: impl Wire2Api<f64> + core::panic::UnwindSafe,
    right: impl Wire2Api<f64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f64>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_optional_return",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_left = left.wire2api();
            let api_right = right.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::optional::handle_optional_return(
                    api_left, api_right,
                ))
            }
        },
    )
}
fn wire_handle_optional_struct_impl(
    port_: flutter_rust_bridge::MessagePort,
    document: impl Wire2Api<Option<String>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<crate::api::optional::Element>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_optional_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_document = document.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::optional::handle_optional_struct(api_document))
            }
        },
    )
}
fn wire_handle_vec_of_opts_impl(
    port_: flutter_rust_bridge::MessagePort,
    opt: impl Wire2Api<crate::api::optional::OptVecs> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::optional::OptVecs, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_vec_of_opts",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::optional::handle_vec_of_opts(api_opt))
            }
        },
    )
}
fn wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(
    that: impl Wire2Api<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "StructWithCommentsTwinSync_instance_method_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_that = that.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync::instance_method_twin_sync(&api_that)) })
}
fn wire_StructWithCommentsTwinSync_static_method_twin_sync_impl(
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "StructWithCommentsTwinSync_static_method_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { 
                Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync::static_method_twin_sync()) })
}
fn wire_function_with_comments_slash_star_star_twin_sync_impl(
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "function_with_comments_slash_star_star_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { 
                Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_slash_star_star_twin_sync()) })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_impl(
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { 
                Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_triple_slash_multi_line_twin_sync()) })
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_impl(
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { 
                Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_triple_slash_single_line_twin_sync()) })
}
fn wire_func_enum_simple_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_enum_simple_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(
                crate::api::pseudo_manual::enumeration_twin_sync::func_enum_simple_twin_sync(
                    api_arg,
                ),
            )
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_enum_with_item_mixed_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_mixed_twin_sync(api_arg)) })
}
fn wire_func_enum_with_item_struct_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_enum_with_item_struct_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_struct_twin_sync(api_arg)) })
}
fn wire_func_enum_with_item_tuple_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_enum_with_item_tuple_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_tuple_twin_sync(api_arg)) })
}
fn wire_custom_enum_error_panic_twin_sync_impl() -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "custom_enum_error_panic_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_panic_twin_sync(),
    )
}
fn wire_custom_enum_error_return_error_twin_sync_impl(
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "custom_enum_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { 
                crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_return_error_twin_sync() })
}
fn wire_custom_enum_error_return_ok_twin_sync_impl(
    arg: impl Wire2Api<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "custom_enum_error_return_ok_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_return_ok_twin_sync(
                api_arg,
            )
        },
    )
}
fn wire_custom_nested_error_return_error_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "custom_nested_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                crate::api::pseudo_manual::exception_twin_sync::custom_nested_error_return_error_twin_sync(api_arg) })
}
fn wire_custom_struct_error_return_error_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "custom_struct_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                crate::api::pseudo_manual::exception_twin_sync::custom_struct_error_return_error_twin_sync(api_arg) })
}
fn wire_func_return_error_twin_sync_impl() -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_return_error_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || crate::api::pseudo_manual::exception_twin_sync::func_return_error_twin_sync(),
    )
}
fn wire_func_type_fallible_panic_twin_sync_impl() -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_type_fallible_panic_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            crate::api::pseudo_manual::exception_twin_sync::func_type_fallible_panic_twin_sync()
        },
    )
}
fn wire_func_type_infallible_panic_twin_sync_impl() -> flutter_rust_bridge::support::WireSyncReturn
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_type_infallible_panic_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { 
                Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync::func_type_infallible_panic_twin_sync()) })
}
fn wire_func_return_unit_twin_sync_impl() -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_return_unit_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_type_twin_sync::func_return_unit_twin_sync(),
            )
        },
    )
}
fn wire_func_string_twin_sync_impl(
    arg: impl Wire2Api<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_string_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_type_twin_sync::func_string_twin_sync(api_arg),
            )
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<bool>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_bool_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_bool_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<f32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<f32>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_f32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_f32_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<f64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<f64>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_f64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_f64_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<i16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<i16>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i16_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<i32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<i32>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i32_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<i64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<i64>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i64_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<i8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<i8>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i8_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<u16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<u16>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u16_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<u32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<u32>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u32_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<u64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<u64>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u64_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Option<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Option<u8>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u8_twin_normal(api_arg)) })
}
fn wire_example_optional_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Option<bool>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_bool_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Option<f32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_f32_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Option<f64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_f64_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Option<i16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i16_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Option<i32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i32_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Option<i64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i64_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Option<i8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_i8_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i8_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Option<u16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u16_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Option<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u32_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Option<u64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u64_twin_sync(api_arg)) })
}
fn wire_example_optional_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Option<u8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_optional_primitive_type_u8_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u8_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_bool_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<f32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_f32_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<f64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_f64_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<i16> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i16, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i16_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i32_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<i64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i64, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i64_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<i8> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i8, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i8_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<u16> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u16, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u16_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u32_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u64_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<u8> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u8, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u8_twin_normal(
                        api_arg,
                    ),
                )
            }
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<bool>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_bool_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_bool_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<f32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<f32>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_f32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_f32_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<f64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<f64>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_f64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_f64_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<i16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<i16>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i16_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<i32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<i32>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i32_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<i64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<i64>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i64_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<i8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<i8>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i8_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<u16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<u16>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u16_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<u32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<u32>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u32_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<u64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<u64>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u64_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<Vec<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,Vec<u8>,_>(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || { let api_arg = arg.wire2api(); move |task_callback| Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u8_twin_normal(api_arg)) })
}
fn wire_example_primitive_list_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Vec<bool>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_bool_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Vec<f32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_f32_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Vec<f64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_f64_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Vec<i16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i16_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Vec<i32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i32_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Vec<i64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i64_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Vec<i8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_i8_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i8_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Vec<u16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u16_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Vec<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u32_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Vec<u64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u64_twin_sync(api_arg)) })
}
fn wire_example_primitive_list_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Vec<u8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_list_type_u8_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u8_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_bool_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<f32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_f32_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<f64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_f64_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<i16> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i16_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i32_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<i64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i64_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<i8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_i8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(
                crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i8_twin_sync(
                    api_arg,
                ),
            )
        },
    )
}
fn wire_example_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<u16> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u16_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u32_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<u64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "example_primitive_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u64_twin_sync(api_arg)) })
}
fn wire_example_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "example_primitive_type_u8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(
                crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u8_twin_sync(
                    api_arg,
                ),
            )
        },
    )
}
fn wire_simple_adder_twin_sync_impl(
    a: impl Wire2Api<i32> + core::panic::UnwindSafe,
    b: impl Wire2Api<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "simple_adder_twin_sync",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Result::<_, ()>::Ok(
                crate::api::pseudo_manual::simple_twin_sync::simple_adder_twin_sync(api_a, api_b),
            )
        },
    )
}
fn wire_func_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_struct_with_one_field_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_one_field_twin_sync(api_arg)) })
}
fn wire_func_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_struct_with_two_field_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_two_field_twin_sync(api_arg)) })
}
fn wire_func_struct_with_zero_field_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_struct_with_zero_field_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_zero_field_twin_sync(api_arg)) })
}
fn wire_func_tuple_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_tuple_struct_with_one_field_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_tuple_struct_with_one_field_twin_sync(api_arg)) })
}
fn wire_func_tuple_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(flutter_rust_bridge::WrapInfo{ debug_name: "func_tuple_struct_with_two_field_twin_sync", port: None, mode: flutter_rust_bridge::FfiCallMode::Sync }, move || { let api_arg = arg.wire2api();
                Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_tuple_struct_with_two_field_twin_sync(api_arg)) })
}
fn wire_test_more_than_just_one_raw_string_struct_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::raw_string::MoreThanJustOneRawStringStruct, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "test_more_than_just_one_raw_string_struct",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::raw_string::test_more_than_just_one_raw_string_struct(),
                    )
                }
            },
        )
}
fn wire_test_raw_string_item_struct_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::raw_string::RawStringItemStruct, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_raw_string_item_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::raw_string::test_raw_string_item_struct())
            }
        },
    )
}
fn wire_create_array_opaque_enum_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [crate::api::rust_opaque::EnumOpaque; 5], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "create_array_opaque_enum",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::create_array_opaque_enum())
            }
        },
    )
}
fn wire_create_nested_opaque_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,crate::api::rust_opaque::OpaqueNested,_>(flutter_rust_bridge::WrapInfo{ debug_name: "create_nested_opaque", port: Some(port_), mode: flutter_rust_bridge::FfiCallMode::Normal }, move || {  move |task_callback| Result::<_,()>::Ok(crate::api::rust_opaque::create_nested_opaque()) })
}
fn wire_create_opaque_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, flutter_rust_bridge::RustOpaque<
        crate::auxiliary::sample_types::HideData,
    >, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "create_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::rust_opaque::create_opaque()),
    )
}
fn wire_create_option_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<Option<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<
        flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>,
    >, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "create_option_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::create_option_opaque(api_opaque))
            }
        },
    )
}
fn wire_create_sync_opaque_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, flutter_rust_bridge::RustOpaque<
        crate::auxiliary::sample_types::NonSendHideData,
    >, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "create_sync_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(crate::api::rust_opaque::create_sync_opaque())
        },
    )
}
fn wire_frb_generator_test_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, flutter_rust_bridge::RustOpaque<
        crate::auxiliary::sample_types::FrbOpaqueReturn,
    >, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "frb_generator_test",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(crate::api::rust_opaque::frb_generator_test())
        },
    )
}
fn wire_opaque_array_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [flutter_rust_bridge::RustOpaque<
        crate::auxiliary::sample_types::HideData,
    >; 2], _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "opaque_array",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_array()),
    )
}
fn wire_opaque_array_run_impl(
    port_: flutter_rust_bridge::MessagePort,
    data: impl Wire2Api<[flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2]>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "opaque_array_run",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_array_run(api_data))
            }
        },
    )
}
fn wire_opaque_vec_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<
        flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>,
    >, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "opaque_vec",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_vec()),
    )
}
fn wire_opaque_vec_run_impl(
    port_: flutter_rust_bridge::MessagePort,
    data: impl Wire2Api<Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "opaque_vec_run",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_vec_run(api_data))
            }
        },
    )
}
fn wire_run_enum_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<crate::api::rust_opaque::EnumOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "run_enum_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::run_enum_opaque(api_opaque))
            }
        },
    )
}
fn wire_run_nested_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<crate::api::rust_opaque::OpaqueNested> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "run_nested_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::run_nested_opaque(api_opaque))
            }
        },
    )
}
fn wire_run_non_clone_impl(
    port_: flutter_rust_bridge::MessagePort,
    clone: impl Wire2Api<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "run_non_clone",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_clone = clone.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::run_non_clone(api_clone))
            }
        },
    )
}
fn wire_run_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "run_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::run_opaque(api_opaque))
            }
        },
    )
}
fn wire_run_opaque_with_delay_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "run_opaque_with_delay",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque::run_opaque_with_delay(api_opaque))
            }
        },
    )
}
fn wire_unwrap_rust_opaque_impl(
    port_: flutter_rust_bridge::MessagePort,
    opaque: impl Wire2Api<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "unwrap_rust_opaque",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| crate::api::rust_opaque::unwrap_rust_opaque(api_opaque)
        },
    )
}
fn wire_frb_sync_generator_test_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, flutter_rust_bridge::RustOpaque<
        crate::auxiliary::sample_types::FrbOpaqueSyncReturn,
    >, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "frb_sync_generator_test",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::rust_opaque_sync::frb_sync_generator_test())
            }
        },
    )
}
fn wire_sync_create_sync_opaque_impl() -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "sync_create_sync_opaque",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(crate::api::rust_opaque_sync::sync_create_sync_opaque()),
    )
}
fn wire_sync_run_opaque_impl(
    opaque: impl Wire2Api<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        flutter_rust_bridge::WrapInfo {
            debug_name: "sync_run_opaque",
            port: None,
            mode: flutter_rust_bridge::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(crate::api::rust_opaque_sync::sync_run_opaque(api_opaque))
        },
    )
}
fn wire_simple_adder_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    a: impl Wire2Api<i32> + core::panic::UnwindSafe,
    b: impl Wire2Api<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "simple_adder_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::simple::simple_adder_twin_normal(api_a, api_b))
            }
        },
    )
}
fn wire_func_stream_realistic_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_stream_realistic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::stream::func_stream_realistic_twin_normal(
                    task_callback.stream_sink::<_, String>(),
                    api_arg,
                ))
            }
        },
    )
}
fn wire_func_stream_return_error_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_stream_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                crate::api::stream::func_stream_return_error_twin_normal(
                    task_callback.stream_sink::<_, String>(),
                )
            }
        },
    )
}
fn wire_func_stream_return_panic_twin_normal_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_stream_return_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                crate::api::stream::func_stream_return_panic_twin_normal(
                    task_callback.stream_sink::<_, String>(),
                )
            }
        },
    )
}
fn wire_func_stream_sink_arg_position_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    a: impl Wire2Api<u32> + core::panic::UnwindSafe,
    b: impl Wire2Api<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "func_stream_sink_arg_position_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(
                    crate::api::stream::func_stream_sink_arg_position_twin_normal(
                        api_a,
                        api_b,
                        task_callback.stream_sink::<_, u32>(),
                    ),
                )
            }
        },
    )
}
fn wire_handle_stream_of_struct_impl(port_: flutter_rust_bridge::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_stream_of_struct",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::stream::handle_stream_of_struct(
                    task_callback.stream_sink::<_, crate::api::stream::MyStreamEntry>(),
                ))
            }
        },
    )
}
fn wire_func_struct_with_one_field_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::structure::StructWithOneFieldTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::structure::StructWithOneFieldTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_struct_with_one_field_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_struct_with_one_field_twin_normal(api_arg),
                    )
                }
            },
        )
}
fn wire_func_struct_with_two_field_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::structure::StructWithTwoFieldTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::structure::StructWithTwoFieldTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_struct_with_two_field_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_struct_with_two_field_twin_normal(api_arg),
                    )
                }
            },
        )
}
fn wire_func_struct_with_zero_field_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::structure::StructWithZeroFieldTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::structure::StructWithZeroFieldTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_struct_with_zero_field_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_struct_with_zero_field_twin_normal(api_arg),
                    )
                }
            },
        )
}
fn wire_func_tuple_struct_with_one_field_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::structure::TupleStructWithOneFieldTwinNormal>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::structure::TupleStructWithOneFieldTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_tuple_struct_with_one_field_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_tuple_struct_with_one_field_twin_normal(
                            api_arg,
                        ),
                    )
                }
            },
        )
}
fn wire_func_tuple_struct_with_two_field_twin_normal_impl(
    port_: flutter_rust_bridge::MessagePort,
    arg: impl Wire2Api<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, crate::api::structure::TupleStructWithTwoFieldTwinNormal, _>(
            flutter_rust_bridge::WrapInfo {
                debug_name: "func_tuple_struct_with_two_field_twin_normal",
                port: Some(port_),
                mode: flutter_rust_bridge::FfiCallMode::Normal,
            },
            move || {
                let api_arg = arg.wire2api();
                move |task_callback| {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_tuple_struct_with_two_field_twin_normal(
                            api_arg,
                        ),
                    )
                }
            },
        )
}
fn wire_test_tuple_impl(
    port_: flutter_rust_bridge::MessagePort,
    value: impl Wire2Api<Option<(String, i32)>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (String, i32), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_tuple",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::tuple::test_tuple(api_value))
        },
    )
}
fn wire_test_tuple_2_impl(
    port_: flutter_rust_bridge::MessagePort,
    value: impl Wire2Api<Vec<(String, i32)>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "test_tuple_2",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| Result::<_, ()>::Ok(crate::api::tuple::test_tuple_2(api_value))
        },
    )
}
fn wire_handle_type_alias_id_impl(
    port_: flutter_rust_bridge::MessagePort,
    input: impl Wire2Api<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_type_alias_id",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::type_alias::handle_type_alias_id(api_input))
            }
        },
    )
}
fn wire_handle_type_alias_model_impl(
    port_: flutter_rust_bridge::MessagePort,
    input: impl Wire2Api<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::type_alias::TestModel, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_type_alias_model",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::type_alias::handle_type_alias_model(api_input))
            }
        },
    )
}
fn wire_handle_type_nest_alias_id_impl(
    port_: flutter_rust_bridge::MessagePort,
    input: impl Wire2Api<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_type_nest_alias_id",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(crate::api::type_alias::handle_type_nest_alias_id(api_input))
            }
        },
    )
}
fn wire_handle_nested_uuids_impl(
    port_: flutter_rust_bridge::MessagePort,
    ids: impl Wire2Api<crate::api::uuid_type::FeatureUuid> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, crate::api::uuid_type::FeatureUuid, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_nested_uuids",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.wire2api();
            move |task_callback| crate::api::uuid_type::handle_nested_uuids(api_ids)
        },
    )
}
fn wire_handle_uuid_impl(
    port_: flutter_rust_bridge::MessagePort,
    id: impl Wire2Api<uuid::Uuid> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, uuid::Uuid, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_uuid",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| crate::api::uuid_type::handle_uuid(api_id)
        },
    )
}
fn wire_handle_uuids_impl(
    port_: flutter_rust_bridge::MessagePort,
    ids: impl Wire2Api<Vec<uuid::Uuid>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<uuid::Uuid>, _>(
        flutter_rust_bridge::WrapInfo {
            debug_name: "handle_uuids",
            port: Some(port_),
            mode: flutter_rust_bridge::FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.wire2api();
            move |task_callback| crate::api::uuid_type::handle_uuids(api_ids)
        },
    )
}

// Section: wrapper_structs

#[derive(Clone)]
pub struct mirror_ApplicationEnv(crate::api::mirror::ApplicationEnv);

#[derive(Clone)]
pub struct mirror_ApplicationEnvVar(crate::api::mirror::ApplicationEnvVar);

#[derive(Clone)]
pub struct mirror_ApplicationMessage(crate::api::mirror::ApplicationMessage);

#[derive(Clone)]
pub struct mirror_ApplicationMode(crate::api::mirror::ApplicationMode);

#[derive(Clone)]
pub struct mirror_ApplicationSettings(crate::api::mirror::ApplicationSettings);

#[derive(Clone)]
pub struct mirror_ListOfNestedRawStringMirrored(crate::api::mirror::ListOfNestedRawStringMirrored);

#[derive(Clone)]
pub struct mirror_NestedRawStringMirrored(crate::api::mirror::NestedRawStringMirrored);

#[derive(Clone)]
pub struct mirror_Numbers(crate::api::mirror::Numbers);

#[derive(Clone)]
pub struct mirror_RawStringEnumMirrored(crate::api::mirror::RawStringEnumMirrored);

#[derive(Clone)]
pub struct mirror_RawStringMirrored(crate::api::mirror::RawStringMirrored);

#[derive(Clone)]
pub struct mirror_Sequences(crate::api::mirror::Sequences);

// Section: static_checks

const _: fn() = || {
    {
        let ApplicationEnv = None::<crate::api::mirror::ApplicationEnv>.unwrap();
        let _: Vec<crate::api::mirror::ApplicationEnvVar> = ApplicationEnv.vars;
    }
    {
        let ApplicationEnvVar_ = None::<crate::api::mirror::ApplicationEnvVar>.unwrap();
        let _: String = ApplicationEnvVar_.0;
        let _: bool = ApplicationEnvVar_.1;
    }
    match None::<crate::api::mirror::ApplicationMessage>.unwrap() {
        crate::api::mirror::ApplicationMessage::DisplayMessage(field0) => {
            let _: String = field0;
        }
        crate::api::mirror::ApplicationMessage::RenderPixel { x, y } => {
            let _: i32 = x;
            let _: i32 = y;
        }
        crate::api::mirror::ApplicationMessage::Exit => {}
    }
    {
        let ApplicationSettings = None::<crate::api::mirror::ApplicationSettings>.unwrap();
        let _: String = ApplicationSettings.name;
        let _: String = ApplicationSettings.version;
        let _: crate::api::mirror::ApplicationMode = ApplicationSettings.mode;
        let _: Box<crate::api::mirror::ApplicationEnv> = ApplicationSettings.env;
        let _: Option<crate::api::mirror::ApplicationEnv> = ApplicationSettings.env_optional;
    }
    {
        let ListOfNestedRawStringMirrored =
            None::<crate::api::mirror::ListOfNestedRawStringMirrored>.unwrap();
        let _: Vec<crate::api::mirror::NestedRawStringMirrored> = ListOfNestedRawStringMirrored.raw;
    }
    {
        let NestedRawStringMirrored = None::<crate::api::mirror::NestedRawStringMirrored>.unwrap();
        let _: crate::api::mirror::RawStringMirrored = NestedRawStringMirrored.raw;
    }
    {
        let Numbers_ = None::<crate::api::mirror::Numbers>.unwrap();
        let _: Vec<i32> = Numbers_.0;
    }
    match None::<crate::api::mirror::RawStringEnumMirrored>.unwrap() {
        crate::api::mirror::RawStringEnumMirrored::Raw(field0) => {
            let _: crate::api::mirror::RawStringMirrored = field0;
        }
        crate::api::mirror::RawStringEnumMirrored::Nested(field0) => {
            let _: crate::api::mirror::NestedRawStringMirrored = field0;
        }
        crate::api::mirror::RawStringEnumMirrored::ListOfNested(field0) => {
            let _: crate::api::mirror::ListOfNestedRawStringMirrored = field0;
        }
    }
    {
        let RawStringMirrored = None::<crate::api::mirror::RawStringMirrored>.unwrap();
        let _: String = RawStringMirrored.value;
    }
    {
        let Sequences_ = None::<crate::api::mirror::Sequences>.unwrap();
        let _: Vec<i32> = Sequences_.0;
    }
};

// Section: executor

flutter_rust_bridge::support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: flutter_rust_bridge::support::DefaultHandler = Default::default();
}

// Section: impl_wire2api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<chrono::DateTime<chrono::Local>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Local> {
        let flutter_rust_bridge::Timestamp { s, ns } =
            flutter_rust_bridge::wire2api_timestamp(self);
        chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        ))
    }
}
impl Wire2Api<chrono::NaiveDateTime> for i64 {
    fn wire2api(self) -> chrono::NaiveDateTime {
        let flutter_rust_bridge::Timestamp { s, ns } =
            flutter_rust_bridge::wire2api_timestamp(self);
        chrono::NaiveDateTime::from_timestamp_opt(s, ns).expect("invalid or out-of-range datetime")
    }
}
impl Wire2Api<chrono::DateTime<chrono::Utc>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Utc> {
        let flutter_rust_bridge::Timestamp { s, ns } =
            flutter_rust_bridge::wire2api_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}
impl Wire2Api<crate::api::mirror::ApplicationMode> for i32 {
    fn wire2api(self) -> crate::api::mirror::ApplicationMode {
        match self {
            0 => crate::api::mirror::ApplicationMode::Standalone,
            1 => crate::api::mirror::ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        }
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<crate::api::enumeration::EnumSimpleTwinNormal> for i32 {
    fn wire2api(self) -> crate::api::enumeration::EnumSimpleTwinNormal {
        match self {
            0 => crate::api::enumeration::EnumSimpleTwinNormal::A,
            1 => crate::api::enumeration::EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", self),
        }
    }
}
impl Wire2Api<crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync> for i32 {
    fn wire2api(self) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
        match self {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", self),
        }
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i16> for i16 {
    fn wire2api(self) -> i16 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}
impl Wire2Api<crate::auxiliary::sample_types::MyEnum> for i32 {
    fn wire2api(self) -> crate::auxiliary::sample_types::MyEnum {
        match self {
            0 => crate::auxiliary::sample_types::MyEnum::False,
            1 => crate::auxiliary::sample_types::MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", self),
        }
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}
impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
impl Wire2Api<crate::api::misc_example::Weekdays> for i32 {
    fn wire2api(self) -> crate::api::misc_example::Weekdays {
        match self {
            0 => crate::api::misc_example::Weekdays::Monday,
            1 => crate::api::misc_example::Weekdays::Tuesday,
            2 => crate::api::misc_example::Weekdays::Wednesday,
            3 => crate::api::misc_example::Weekdays::Thursday,
            4 => crate::api::misc_example::Weekdays::Friday,
            5 => crate::api::misc_example::Weekdays::Saturday,
            6 => crate::api::misc_example::Weekdays::Sunday,
            _ => unreachable!("Invalid variant for Weekdays: {}", self),
        }
    }
}

// Section: impl_into_dart

impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::A {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::misc_example::A {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::A>
    for crate::api::misc_example::A
{
    fn into_into_dart(self) -> crate::api::misc_example::A {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::Abc {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
            Self::JustInt(field0) => vec![3.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::misc_example::Abc {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::Abc>
    for crate::api::misc_example::Abc
{
    fn into_into_dart(self) -> crate::api::misc_example::Abc {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::mirror::Another {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::mirror::Another {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::mirror::Another>
    for crate::api::mirror::Another
{
    fn into_into_dart(self) -> crate::api::mirror::Another {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_ApplicationEnv {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.vars.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_ApplicationEnv {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_ApplicationEnv>
    for crate::api::mirror::ApplicationEnv
{
    fn into_into_dart(self) -> mirror_ApplicationEnv {
        mirror_ApplicationEnv(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_ApplicationEnvVar {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.0 .0.into_into_dart().into_dart(),
            self.0 .1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_ApplicationEnvVar {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_ApplicationEnvVar>
    for crate::api::mirror::ApplicationEnvVar
{
    fn into_into_dart(self) -> mirror_ApplicationEnvVar {
        mirror_ApplicationEnvVar(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_ApplicationMessage {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self.0 {
            crate::api::mirror::ApplicationMessage::DisplayMessage(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::mirror::ApplicationMessage::RenderPixel { x, y } => vec![
                1.into_dart(),
                x.into_into_dart().into_dart(),
                y.into_into_dart().into_dart(),
            ],
            crate::api::mirror::ApplicationMessage::Exit => vec![2.into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_ApplicationMessage {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_ApplicationMessage>
    for crate::api::mirror::ApplicationMessage
{
    fn into_into_dart(self) -> mirror_ApplicationMessage {
        mirror_ApplicationMessage(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_ApplicationMode {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self.0 {
            crate::api::mirror::ApplicationMode::Standalone => 0,
            crate::api::mirror::ApplicationMode::Embedded => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_ApplicationMode {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_ApplicationMode>
    for crate::api::mirror::ApplicationMode
{
    fn into_into_dart(self) -> mirror_ApplicationMode {
        mirror_ApplicationMode(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_ApplicationSettings {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.0.name.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.mode.into_into_dart().into_dart(),
            self.0.env.into_into_dart().into_dart(),
            self.0.env_optional.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_ApplicationSettings {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_ApplicationSettings>
    for crate::api::mirror::ApplicationSettings
{
    fn into_into_dart(self) -> mirror_ApplicationSettings {
        mirror_ApplicationSettings(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::optional::Attribute {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::optional::Attribute {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::optional::Attribute>
    for crate::api::optional::Attribute
{
    fn into_into_dart(self) -> crate::api::optional::Attribute {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::B {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::misc_example::B {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::B>
    for crate::api::misc_example::B
{
    fn into_into_dart(self) -> crate::api::misc_example::B {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::BigBuffers {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::misc_example::BigBuffers
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::BigBuffers>
    for crate::api::misc_example::BigBuffers
{
    fn into_into_dart(self) -> crate::api::misc_example::BigBuffers {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::array::Blob {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::array::Blob {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::array::Blob>
    for crate::api::array::Blob
{
    fn into_into_dart(self) -> crate::api::array::Blob {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::C {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::misc_example::C {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::C>
    for crate::api::misc_example::C
{
    fn into_into_dart(self) -> crate::api::misc_example::C {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::method::ConcatenateWith {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::method::ConcatenateWith {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::method::ConcatenateWith>
    for crate::api::method::ConcatenateWith
{
    fn into_into_dart(self) -> crate::api::method::ConcatenateWith {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::mirror::ContainsMirroredSubStruct {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::mirror::ContainsMirroredSubStruct
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::mirror::ContainsMirroredSubStruct>
    for crate::api::mirror::ContainsMirroredSubStruct
{
    fn into_into_dart(self) -> crate::api::mirror::ContainsMirroredSubStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::exception::CustomEnumErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::One { message, backtrace } => vec![
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
            Self::Two { message, backtrace } => vec![
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::exception::CustomEnumErrorTwinNormal
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::exception::CustomEnumErrorTwinNormal>
    for crate::api::exception::CustomEnumErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomEnumErrorTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::One { message, backtrace } => vec![
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
            Self::Two { message, backtrace } => vec![
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::exception::CustomNestedErrorInnerTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Three(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Four(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedErrorInnerTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::exception::CustomNestedErrorInnerTwinNormal,
    > for crate::api::exception::CustomNestedErrorInnerTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Three(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Four(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::exception::CustomNestedErrorOuterTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::One(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Two(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedErrorOuterTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::exception::CustomNestedErrorOuterTwinNormal,
    > for crate::api::exception::CustomNestedErrorOuterTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::One(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Two(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::exception::CustomStructErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::exception::CustomStructErrorTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::exception::CustomStructErrorTwinNormal>
    for crate::api::exception::CustomStructErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::dart_opaque::DartOpaqueNested {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::dart_opaque::DartOpaqueNested
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::dart_opaque::DartOpaqueNested>
    for crate::api::dart_opaque::DartOpaqueNested
{
    fn into_into_dart(self) -> crate::api::dart_opaque::DartOpaqueNested {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::enumeration::Distance {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::Map(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::enumeration::Distance {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::enumeration::Distance>
    for crate::api::enumeration::Distance
{
    fn into_into_dart(self) -> crate::api::enumeration::Distance {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::optional::Element {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::optional::Element {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::optional::Element>
    for crate::api::optional::Element
{
    fn into_into_dart(self) -> crate::api::optional::Element {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::dart_opaque::EnumDartOpaque {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Primitive(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Opaque(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::dart_opaque::EnumDartOpaque
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::dart_opaque::EnumDartOpaque>
    for crate::api::dart_opaque::EnumDartOpaque
{
    fn into_into_dart(self) -> crate::api::dart_opaque::EnumDartOpaque {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::rust_opaque::EnumOpaque {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Struct(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Primitive(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::TraitObj(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
            Self::Mutex(field0) => vec![3.into_dart(), field0.into_into_dart().into_dart()],
            Self::RwLock(field0) => vec![4.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::rust_opaque::EnumOpaque {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::rust_opaque::EnumOpaque>
    for crate::api::rust_opaque::EnumOpaque
{
    fn into_into_dart(self) -> crate::api::rust_opaque::EnumOpaque {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::enumeration::EnumSimpleTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumSimpleTwinNormal
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::enumeration::EnumSimpleTwinNormal>
    for crate::api::enumeration::EnumSimpleTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumSimpleTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::enumeration::EnumWithItemMixedTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemMixedTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::enumeration::EnumWithItemMixedTwinNormal,
    > for crate::api::enumeration::EnumWithItemMixedTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::enumeration::EnumWithItemStructTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemStructTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::enumeration::EnumWithItemStructTwinNormal,
    > for crate::api::enumeration::EnumWithItemStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::enumeration::EnumWithItemTupleTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemTupleTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::enumeration::EnumWithItemTupleTwinNormal,
    > for crate::api::enumeration::EnumWithItemTupleTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::event_listener::Event {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::event_listener::Event {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::event_listener::Event>
    for crate::api::event_listener::Event
{
    fn into_into_dart(self) -> crate::api::event_listener::Event {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::optional::ExoticOptionals {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::optional::ExoticOptionals
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::optional::ExoticOptionals>
    for crate::api::optional::ExoticOptionals
{
    fn into_into_dart(self) -> crate::api::optional::ExoticOptionals {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::uuid_type::FeatureUuid {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.one.into_into_dart().into_dart(),
            self.many.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::uuid_type::FeatureUuid {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::uuid_type::FeatureUuid>
    for crate::api::uuid_type::FeatureUuid
{
    fn into_into_dart(self) -> crate::api::uuid_type::FeatureUuid {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::array::FeedId {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::array::FeedId {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::array::FeedId>
    for crate::api::array::FeedId
{
    fn into_into_dart(self) -> crate::api::array::FeedId {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_ListOfNestedRawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for mirror_ListOfNestedRawStringMirrored
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_ListOfNestedRawStringMirrored>
    for crate::api::mirror::ListOfNestedRawStringMirrored
{
    fn into_into_dart(self) -> mirror_ListOfNestedRawStringMirrored {
        mirror_ListOfNestedRawStringMirrored(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::method::Log2 {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::method::Log2 {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::method::Log2>
    for crate::api::method::Log2
{
    fn into_into_dart(self) -> crate::api::method::Log2 {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::inside_macro::MacroStruct {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.data.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::inside_macro::MacroStruct
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::inside_macro::MacroStruct>
    for crate::api::inside_macro::MacroStruct
{
    fn into_into_dart(self) -> crate::api::inside_macro::MacroStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::enumeration::Measure {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Speed(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Distance(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::enumeration::Measure {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::enumeration::Measure>
    for crate::api::enumeration::Measure
{
    fn into_into_dart(self) -> crate::api::enumeration::Measure {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::array::MessageId {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::array::MessageId {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::array::MessageId>
    for crate::api::array::MessageId
{
    fn into_into_dart(self) -> crate::api::array::MessageId {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::mirror::MirrorStruct {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::mirror::MirrorStruct {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::mirror::MirrorStruct>
    for crate::api::mirror::MirrorStruct
{
    fn into_into_dart(self) -> crate::api::mirror::MirrorStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::raw_string::MoreThanJustOneRawStringStruct
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::raw_string::MoreThanJustOneRawStringStruct
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::raw_string::MoreThanJustOneRawStringStruct,
    > for crate::api::raw_string::MoreThanJustOneRawStringStruct
{
    fn into_into_dart(self) -> crate::api::raw_string::MoreThanJustOneRawStringStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::auxiliary::sample_types::MyEnum {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::False => 0,
            Self::True => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MyEnum
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::auxiliary::sample_types::MyEnum>
    for crate::auxiliary::sample_types::MyEnum
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MyEnum {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::MyNestedStruct {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::misc_example::MyNestedStruct
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::MyNestedStruct>
    for crate::api::misc_example::MyNestedStruct
{
    fn into_into_dart(self) -> crate::api::misc_example::MyNestedStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::auxiliary::sample_types::MySize {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MySize
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::auxiliary::sample_types::MySize>
    for crate::auxiliary::sample_types::MySize
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MySize {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::stream::MyStreamEntry {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::stream::MyStreamEntry {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::stream::MyStreamEntry>
    for crate::api::stream::MyStreamEntry
{
    fn into_into_dart(self) -> crate::api::stream::MyStreamEntry {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::auxiliary::sample_types::MyStruct {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.content.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MyStruct
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::auxiliary::sample_types::MyStruct>
    for crate::auxiliary::sample_types::MyStruct
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MyStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::MyTreeNode {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::misc_example::MyTreeNode
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::MyTreeNode>
    for crate::api::misc_example::MyTreeNode
{
    fn into_into_dart(self) -> crate::api::misc_example::MyTreeNode {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_NestedRawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_NestedRawStringMirrored {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_NestedRawStringMirrored>
    for crate::api::mirror::NestedRawStringMirrored
{
    fn into_into_dart(self) -> mirror_NestedRawStringMirrored {
        mirror_NestedRawStringMirrored(self)
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::auxiliary::new_module_system::sub_module::NewSimpleStruct,
    > for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
    fn into_into_dart(self) -> crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::newtype_pattern::NewTypeInt {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::newtype_pattern::NewTypeInt
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::newtype_pattern::NewTypeInt>
    for crate::api::newtype_pattern::NewTypeInt
{
    fn into_into_dart(self) -> crate::api::newtype_pattern::NewTypeInt {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_Numbers {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_Numbers {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_Numbers> for crate::api::mirror::Numbers {
    fn into_into_dart(self) -> mirror_Numbers {
        mirror_Numbers(self)
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::auxiliary::old_module_system::sub_module::OldSimpleStruct,
    > for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
    fn into_into_dart(self) -> crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::rust_opaque::OpaqueNested {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::rust_opaque::OpaqueNested
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::rust_opaque::OpaqueNested>
    for crate::api::rust_opaque::OpaqueNested
{
    fn into_into_dart(self) -> crate::api::rust_opaque::OpaqueNested {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::optional::OptVecs {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::optional::OptVecs {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::optional::OptVecs>
    for crate::api::optional::OptVecs
{
    fn into_into_dart(self) -> crate::api::optional::OptVecs {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::array::Point {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::array::Point {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::array::Point>
    for crate::api::array::Point
{
    fn into_into_dart(self) -> crate::api::array::Point {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_RawStringEnumMirrored {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self.0 {
            crate::api::mirror::RawStringEnumMirrored::Raw(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::mirror::RawStringEnumMirrored::Nested(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::mirror::RawStringEnumMirrored::ListOfNested(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_RawStringEnumMirrored {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_RawStringEnumMirrored>
    for crate::api::mirror::RawStringEnumMirrored
{
    fn into_into_dart(self) -> mirror_RawStringEnumMirrored {
        mirror_RawStringEnumMirrored(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::raw_string::RawStringItemStruct {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::raw_string::RawStringItemStruct
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::raw_string::RawStringItemStruct>
    for crate::api::raw_string::RawStringItemStruct
{
    fn into_into_dart(self) -> crate::api::raw_string::RawStringItemStruct {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_RawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_RawStringMirrored {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_RawStringMirrored>
    for crate::api::mirror::RawStringMirrored
{
    fn into_into_dart(self) -> mirror_RawStringMirrored {
        mirror_RawStringMirrored(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for mirror_Sequences {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for mirror_Sequences {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<mirror_Sequences>
    for crate::api::mirror::Sequences
{
    fn into_into_dart(self) -> mirror_Sequences {
        mirror_Sequences(self)
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::enumeration::Speed {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::GPS(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::enumeration::Speed {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::enumeration::Speed>
    for crate::api::enumeration::Speed
{
    fn into_into_dart(self) -> crate::api::enumeration::Speed {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::StructWithEnum {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::misc_example::StructWithEnum
{
}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::StructWithEnum>
    for crate::api::misc_example::StructWithEnum
{
    fn into_into_dart(self) -> crate::api::misc_example::StructWithEnum {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::structure::StructWithOneFieldTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::structure::StructWithOneFieldTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::structure::StructWithOneFieldTwinNormal,
    > for crate::api::structure::StructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::structure::StructWithTwoFieldTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::structure::StructWithTwoFieldTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::structure::StructWithTwoFieldTwinNormal,
    > for crate::api::structure::StructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::structure::StructWithZeroFieldTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::structure::StructWithZeroFieldTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::structure::StructWithZeroFieldTwinNormal,
    > for crate::api::structure::StructWithZeroFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::method::SumWith {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::method::SumWith {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::method::SumWith>
    for crate::api::method::SumWith
{
    fn into_into_dart(self) -> crate::api::method::SumWith {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::chrono_type::TestChrono {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.dt.into_into_dart().into_dart(),
            self.dt2.into_into_dart().into_dart(),
            self.du.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::chrono_type::TestChrono {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::chrono_type::TestChrono>
    for crate::api::chrono_type::TestChrono
{
    fn into_into_dart(self) -> crate::api::chrono_type::TestChrono {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::array::TestId {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::array::TestId {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::array::TestId>
    for crate::api::array::TestId
{
    fn into_into_dart(self) -> crate::api::array::TestId {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::type_alias::TestModel {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::type_alias::TestModel {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::type_alias::TestModel>
    for crate::api::type_alias::TestModel
{
    fn into_into_dart(self) -> crate::api::type_alias::TestModel {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::structure::TupleStructWithOneFieldTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::structure::TupleStructWithOneFieldTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::structure::TupleStructWithOneFieldTwinNormal,
    > for crate::api::structure::TupleStructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::structure::TupleStructWithTwoFieldTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::structure::TupleStructWithTwoFieldTwinNormal
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::structure::TupleStructWithTwoFieldTwinNormal,
    > for crate::api::structure::TupleStructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
}
impl
    flutter_rust_bridge::rust2dart::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::attribute::UserId {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::attribute::UserId {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::attribute::UserId>
    for crate::api::attribute::UserId
{
    fn into_into_dart(self) -> crate::api::attribute::UserId {
        self
    }
}
impl flutter_rust_bridge::support::IntoDart for crate::api::misc_example::Weekdays {
    fn into_dart(self) -> flutter_rust_bridge::support::DartAbi {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::support::IntoDartExceptPrimitive for crate::api::misc_example::Weekdays {}
impl flutter_rust_bridge::rust2dart::IntoIntoDart<crate::api::misc_example::Weekdays>
    for crate::api::misc_example::Weekdays
{
    fn into_into_dart(self) -> crate::api::misc_example::Weekdays {
        self
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
