// Section: file_attributes

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: code_header

// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use crate::api::comment::StructWithCommentsTwinNormal;
use crate::api::comment::*;
use crate::api::enumeration::*;
use crate::api::exception::*;
use crate::api::misc_type::*;
use crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync;
use crate::api::pseudo_manual::comment_twin_sync::*;
use crate::api::pseudo_manual::exception_twin_sync::*;
use crate::api::pseudo_manual::misc_type_twin_sync::*;
use crate::api::pseudo_manual::optional_primitive::*;
use crate::api::pseudo_manual::optional_primitive_twin_sync::*;
use crate::api::pseudo_manual::primitive::*;
use crate::api::pseudo_manual::primitive_list::*;
use crate::api::pseudo_manual::primitive_list_twin_sync::*;
use crate::api::pseudo_manual::primitive_twin_sync::*;
use crate::api::pseudo_manual::simple_twin_sync::*;
use crate::api::simple::*;
use crate::api::structure::StructWithZeroField;
use crate::api::structure::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: wire_funcs

fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(
    port_: MessagePort,
    that: impl Wire2Api<StructWithCommentsTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_instance_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::instance_method_twin_normal(
                    &api_that,
                ))
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_static_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::static_method_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_slash_star_star_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_normal())
            }
        },
    )
}
fn wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(
    that: impl Wire2Api<StructWithCommentsTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_instance_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(StructWithCommentsTwinSync::instance_method_twin_sync(
                &api_that,
            ))
        },
    )
}
fn wire_StructWithCommentsTwinSync_static_method_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_static_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(StructWithCommentsTwinSync::static_method_twin_sync()),
    )
}
fn wire_function_with_comments_slash_star_star_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_impl() -> support::WireSyncReturn
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_sync()),
    )
}
fn wire_example_optional_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<bool>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_i8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_u8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<bool>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<f32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<f64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<i16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<i64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<i8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<u16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<u64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<u8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_simple_adder_twin_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Result::<_, ()>::Ok(simple_adder_twin_sync(api_a, api_b))
        },
    )
}
fn wire_simple_adder_twin_normal_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "simple_adder_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Result::<_, ()>::Ok(simple_adder_twin_normal(api_a, api_b))
        },
    )
}
fn wire_func_struct_with_zero_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithZeroField> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithZeroField, _>(
        WrapInfo {
            debug_name: "func_struct_with_zero_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_zero_field_twin_normal(api_arg))
            }
        },
    )
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: impl_wire2api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i16> for i16 {
    fn wire2api(self) -> i16 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl_into_dart

impl support::IntoDart for StructWithZeroField {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithZeroField {}
impl rust2dart::IntoIntoDart<StructWithZeroField> for StructWithZeroField {
    fn into_into_dart(self) -> StructWithZeroField {
        self
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
