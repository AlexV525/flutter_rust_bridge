// Section: file_attributes

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: code_header

// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use crate::api::array::Blob;
use crate::api::array::FeedId;
use crate::api::array::MessageId;
use crate::api::array::Point;
use crate::api::array::TestId;
use crate::api::array::*;
use crate::api::attribute::Customized;
use crate::api::attribute::UserId;
use crate::api::attribute::*;
use crate::api::chrono_type::FeatureChrono;
use crate::api::chrono_type::TestChrono;
use crate::api::chrono_type::*;
use crate::api::comment::StructWithCommentsTwinNormal;
use crate::api::comment::*;
use crate::api::dart_dynamic::*;
use crate::api::dart_opaque::DartOpaqueNested;
use crate::api::dart_opaque::EnumDartOpaque;
use crate::api::dart_opaque::*;
use crate::api::dart_opaque_sync::*;
use crate::api::enumeration::Distance;
use crate::api::enumeration::EnumWithItemMixedTwinNormal;
use crate::api::enumeration::EnumWithItemStructTwinNormal;
use crate::api::enumeration::EnumWithItemTupleTwinNormal;
use crate::api::enumeration::Measure;
use crate::api::enumeration::Note;
use crate::api::enumeration::Speed;
use crate::api::enumeration::*;
use crate::api::event_listener::Event;
use crate::api::event_listener::*;
use crate::api::exception::CustomEnumErrorTwinNormal;
use crate::api::exception::CustomNestedErrorInnerTwinNormal;
use crate::api::exception::CustomNestedErrorOuterTwinNormal;
use crate::api::exception::CustomStructErrorTwinNormal;
use crate::api::exception::*;
use crate::api::external_type_in_crate::*;
use crate::api::inside_macro::MacroStruct;
use crate::api::inside_macro::*;
use crate::api::method::ConcatenateWith;
use crate::api::method::Log2;
use crate::api::method::SumWith;
use crate::api::method::*;
use crate::api::mirror::Another;
use crate::api::mirror::ApplicationEnv;
use crate::api::mirror::ApplicationEnvVar;
use crate::api::mirror::ApplicationMessage;
use crate::api::mirror::ApplicationSettings;
use crate::api::mirror::ContainsMirroredSubStruct;
use crate::api::mirror::ListOfNestedRawStringMirrored;
use crate::api::mirror::MirrorStruct;
use crate::api::mirror::NestedRawStringMirrored;
use crate::api::mirror::Numbers;
use crate::api::mirror::RawStringEnumMirrored;
use crate::api::mirror::RawStringMirrored;
use crate::api::mirror::Sequences;
use crate::api::mirror::*;
use crate::api::misc_example::Abc;
use crate::api::misc_example::BigBuffers;
use crate::api::misc_example::MyNestedStruct;
use crate::api::misc_example::MyTreeNode;
use crate::api::misc_example::StructWithEnum;
use crate::api::misc_example::A;
use crate::api::misc_example::B;
use crate::api::misc_example::C;
use crate::api::misc_example::*;
use crate::api::misc_type::*;
use crate::api::newtype_pattern::NewTypeInt;
use crate::api::newtype_pattern::*;
use crate::api::optional::Attribute;
use crate::api::optional::Element;
use crate::api::optional::ExoticOptionals;
use crate::api::optional::OptVecs;
use crate::api::optional::*;
use crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync;
use crate::api::pseudo_manual::comment_twin_sync::*;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::*;
use crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::*;
use crate::api::pseudo_manual::misc_type_twin_sync::*;
use crate::api::pseudo_manual::optional_primitive::*;
use crate::api::pseudo_manual::optional_primitive_twin_sync::*;
use crate::api::pseudo_manual::primitive::*;
use crate::api::pseudo_manual::primitive_list::*;
use crate::api::pseudo_manual::primitive_list_twin_sync::*;
use crate::api::pseudo_manual::primitive_twin_sync::*;
use crate::api::pseudo_manual::simple_twin_sync::*;
use crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::*;
use crate::api::raw_string::MoreThanJustOneRawStringStruct;
use crate::api::raw_string::RawStringItemStruct;
use crate::api::raw_string::*;
use crate::api::rust_opaque::EnumOpaque;
use crate::api::rust_opaque::OpaqueNested;
use crate::api::rust_opaque::*;
use crate::api::rust_opaque_sync::*;
use crate::api::simple::*;
use crate::api::stream::MyStreamEntry;
use crate::api::stream::*;
use crate::api::structure::StructWithOneFieldTwinNormal;
use crate::api::structure::StructWithTwoFieldTwinNormal;
use crate::api::structure::StructWithZeroFieldTwinNormal;
use crate::api::structure::TupleStructWithOneFieldTwinNormal;
use crate::api::structure::TupleStructWithTwoFieldTwinNormal;
use crate::api::structure::*;
use crate::api::tuple::*;
use crate::api::type_alias::TestModel;
use crate::api::type_alias::*;
use crate::api::uuid_type::FeatureUuid;
use crate::api::uuid_type::*;
use crate::auxiliary::new_module_system::sub_module::NewSimpleStruct;
use crate::auxiliary::old_module_system::sub_module::OldSimpleStruct;
use crate::auxiliary::sample_types::MySize;
use crate::auxiliary::sample_types::MyStruct;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: wire_funcs

fn wire_boxed_blob_impl(port_: MessagePort, blob: impl Wire2Api<Box<[u8; 1600]>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Blob, _>(
        WrapInfo {
            debug_name: "boxed_blob",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Result::<_, ()>::Ok(boxed_blob(api_blob))
        },
    )
}
fn wire_func_test_id_impl(port_: MessagePort, id: impl Wire2Api<TestId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TestId, _>(
        WrapInfo {
            debug_name: "func_test_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_test_id(api_id))
        },
    )
}
fn wire_get_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 5], _>(
        WrapInfo {
            debug_name: "get_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_array()),
    )
}
fn wire_get_complex_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [Point; 2], _>(
        WrapInfo {
            debug_name: "get_complex_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_complex_array()),
    )
}
fn wire_last_number_impl(port_: MessagePort, array: impl Wire2Api<[f64; 16]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        WrapInfo {
            debug_name: "last_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_array = array.wire2api();
            move |task_callback| Result::<_, ()>::Ok(last_number(api_array))
        },
    )
}
fn wire_nested_id_impl(port_: MessagePort, id: impl Wire2Api<[TestId; 4]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [TestId; 2], _>(
        WrapInfo {
            debug_name: "nested_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(nested_id(api_id))
        },
    )
}
fn wire_new_msgid_impl(port_: MessagePort, id: impl Wire2Api<[u8; 32]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MessageId, _>(
        WrapInfo {
            debug_name: "new_msgid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(new_msgid(api_id))
        },
    )
}
fn wire_return_boxed_feed_id_impl(port_: MessagePort, id: impl Wire2Api<[u8; 8]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FeedId, _>(
        WrapInfo {
            debug_name: "return_boxed_feed_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(return_boxed_feed_id(api_id))
        },
    )
}
fn wire_return_boxed_raw_feed_id_impl(port_: MessagePort, id: impl Wire2Api<FeedId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 8], _>(
        WrapInfo {
            debug_name: "return_boxed_raw_feed_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(return_boxed_raw_feed_id(api_id))
        },
    )
}
fn wire_use_boxed_blob_impl(port_: MessagePort, blob: impl Wire2Api<Box<Blob>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 1600], _>(
        WrapInfo {
            debug_name: "use_boxed_blob",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Result::<_, ()>::Ok(use_boxed_blob(api_blob))
        },
    )
}
fn wire_use_msgid_impl(port_: MessagePort, id: impl Wire2Api<MessageId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 32], _>(
        WrapInfo {
            debug_name: "use_msgid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(use_msgid(api_id))
        },
    )
}
fn wire_handle_customized_struct_impl(
    port_: MessagePort,
    val: impl Wire2Api<Customized> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "handle_customized_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_val = val.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_customized_struct(api_val))
        },
    )
}
fn wire_next_user_id_impl(port_: MessagePort, user_id: impl Wire2Api<UserId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UserId, _>(
        WrapInfo {
            debug_name: "next_user_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_user_id = user_id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(next_user_id(api_user_id))
        },
    )
}
fn wire_datetime_local_impl(
    port_: MessagePort,
    d: impl Wire2Api<chrono::DateTime<chrono::Local>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::DateTime<chrono::Local>, _>(
        WrapInfo {
            debug_name: "datetime_local",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(datetime_local(api_d))
        },
    )
}
fn wire_datetime_utc_impl(
    port_: MessagePort,
    d: impl Wire2Api<chrono::DateTime<chrono::Utc>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::DateTime<chrono::Utc>, _>(
        WrapInfo {
            debug_name: "datetime_utc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(datetime_utc(api_d))
        },
    )
}
fn wire_duration_impl(port_: MessagePort, d: impl Wire2Api<chrono::Duration> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::Duration, _>(
        WrapInfo {
            debug_name: "duration",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(duration(api_d))
        },
    )
}
fn wire_handle_durations_impl(
    port_: MessagePort,
    durations: impl Wire2Api<Vec<chrono::Duration>> + UnwindSafe,
    since: impl Wire2Api<chrono::DateTime<chrono::Local>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<chrono::DateTime<chrono::Local>>, _>(
        WrapInfo {
            debug_name: "handle_durations",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_durations = durations.wire2api();
            let api_since = since.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_durations(api_durations, api_since))
        },
    )
}
fn wire_handle_timestamps_impl(
    port_: MessagePort,
    timestamps: impl Wire2Api<Vec<chrono::NaiveDateTime>> + UnwindSafe,
    epoch: impl Wire2Api<chrono::NaiveDateTime> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<chrono::Duration>, _>(
        WrapInfo {
            debug_name: "handle_timestamps",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_timestamps = timestamps.wire2api();
            let api_epoch = epoch.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_timestamps(api_timestamps, api_epoch))
        },
    )
}
fn wire_how_long_does_it_take_impl(
    port_: MessagePort,
    mine: impl Wire2Api<FeatureChrono> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::Duration, _>(
        WrapInfo {
            debug_name: "how_long_does_it_take",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mine = mine.wire2api();
            move |task_callback| how_long_does_it_take(api_mine)
        },
    )
}
fn wire_naivedatetime_impl(
    port_: MessagePort,
    d: impl Wire2Api<chrono::NaiveDateTime> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, chrono::NaiveDateTime, _>(
        WrapInfo {
            debug_name: "naivedatetime",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(naivedatetime(api_d))
        },
    )
}
fn wire_optional_empty_datetime_utc_impl(
    port_: MessagePort,
    d: impl Wire2Api<Option<chrono::DateTime<chrono::Utc>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<chrono::DateTime<chrono::Utc>>, _>(
        WrapInfo {
            debug_name: "optional_empty_datetime_utc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Result::<_, ()>::Ok(optional_empty_datetime_utc(api_d))
        },
    )
}
fn wire_test_chrono_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TestChrono, _>(
        WrapInfo {
            debug_name: "test_chrono",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_chrono()),
    )
}
fn wire_test_precise_chrono_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TestChrono, _>(
        WrapInfo {
            debug_name: "test_precise_chrono",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_precise_chrono()),
    )
}
fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(
    port_: MessagePort,
    that: impl Wire2Api<StructWithCommentsTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_instance_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::instance_method_twin_normal(
                    &api_that,
                ))
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_static_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::static_method_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_slash_star_star_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_normal())
            }
        },
    )
}
fn wire_return_dart_dynamic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, flutter_rust_bridge::DartAbi, _>(
        WrapInfo {
            debug_name: "return_dart_dynamic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(return_dart_dynamic()),
    )
}
fn wire_async_accept_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "async_accept_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(async_accept_dart_opaque(api_opaque))
        },
    )
}
fn wire_create_enum_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumDartOpaque, _>(
        WrapInfo {
            debug_name: "create_enum_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_enum_dart_opaque(api_opaque))
        },
    )
}
fn wire_create_nested_dart_opaque_impl(
    port_: MessagePort,
    opaque1: impl Wire2Api<DartOpaque> + UnwindSafe,
    opaque2: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, DartOpaqueNested, _>(
        WrapInfo {
            debug_name: "create_nested_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque1 = opaque1.wire2api();
            let api_opaque2 = opaque2.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(create_nested_dart_opaque(api_opaque1, api_opaque2))
            }
        },
    )
}
fn wire_drop_static_dart_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "drop_static_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(drop_static_dart_opaque()),
    )
}
fn wire_get_enum_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<EnumDartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "get_enum_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(get_enum_dart_opaque(api_opaque))
        },
    )
}
fn wire_get_nested_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaqueNested> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "get_nested_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(get_nested_dart_opaque(api_opaque))
        },
    )
}
fn wire_loop_back_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, DartOpaque, _>(
        WrapInfo {
            debug_name: "loop_back",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(loop_back(api_opaque))
        },
    )
}
fn wire_loop_back_array_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [DartOpaque; 1], _>(
        WrapInfo {
            debug_name: "loop_back_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(loop_back_array(api_opaque))
        },
    )
}
fn wire_loop_back_array_get_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<[DartOpaque; 1]> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "loop_back_array_get",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(loop_back_array_get(api_opaque))
        },
    )
}
fn wire_loop_back_option_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<DartOpaque>, _>(
        WrapInfo {
            debug_name: "loop_back_option",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(loop_back_option(api_opaque))
        },
    )
}
fn wire_loop_back_option_get_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<Option<DartOpaque>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "loop_back_option_get",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(loop_back_option_get(api_opaque))
        },
    )
}
fn wire_loop_back_vec_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<DartOpaque>, _>(
        WrapInfo {
            debug_name: "loop_back_vec",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(loop_back_vec(api_opaque))
        },
    )
}
fn wire_loop_back_vec_get_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<Vec<DartOpaque>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "loop_back_vec_get",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(loop_back_vec_get(api_opaque))
        },
    )
}
fn wire_panic_unwrap_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "panic_unwrap_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(panic_unwrap_dart_opaque(api_opaque))
        },
    )
}
fn wire_set_static_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "set_static_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(set_static_dart_opaque(api_opaque))
        },
    )
}
fn wire_return_non_droppable_dart_opaque_impl(
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "return_non_droppable_dart_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(return_non_droppable_dart_opaque(api_opaque))
        },
    )
}
fn wire_unwrap_dart_opaque_impl(
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "unwrap_dart_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(unwrap_dart_opaque(api_opaque))
        },
    )
}
fn wire_func_enum_simple_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumSimpleTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumSimpleTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_simple_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_simple_twin_normal(api_arg))
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemMixedTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemMixedTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_mixed_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_with_item_mixed_twin_normal(api_arg))
        },
    )
}
fn wire_func_enum_with_item_struct_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemStructTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemStructTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_struct_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_enum_with_item_struct_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemTupleTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemTupleTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_tuple_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_with_item_tuple_twin_normal(api_arg))
        },
    )
}
fn wire_handle_enum_parameter_impl(
    port_: MessagePort,
    weekday: impl Wire2Api<Weekdays> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Weekdays, _>(
        WrapInfo {
            debug_name: "handle_enum_parameter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_weekday = weekday.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_enum_parameter(api_weekday))
        },
    )
}
fn wire_handle_return_enum_impl(port_: MessagePort, input: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<Weekdays>, _>(
        WrapInfo {
            debug_name: "handle_return_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_return_enum(api_input))
        },
    )
}
fn wire_multiply_by_ten_impl(port_: MessagePort, measure: impl Wire2Api<Measure> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<Measure>, _>(
        WrapInfo {
            debug_name: "multiply_by_ten",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_measure = measure.wire2api();
            move |task_callback| Result::<_, ()>::Ok(multiply_by_ten(api_measure))
        },
    )
}
fn wire_print_note_impl(port_: MessagePort, note: impl Wire2Api<Note> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
        WrapInfo {
            debug_name: "print_note",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_note = note.wire2api();
            move |task_callback| Result::<_, ()>::Ok(print_note(api_note))
        },
    )
}
fn wire_Event_as_string_impl(port_: MessagePort, that: impl Wire2Api<Event> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "Event_as_string",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(Event::as_string(&api_that))
        },
    )
}
fn wire_close_event_listener_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "close_event_listener",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(close_event_listener()),
    )
}
fn wire_create_event_impl(
    port_: MessagePort,
    address: impl Wire2Api<String> + UnwindSafe,
    payload: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "create_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_address = address.wire2api();
            let api_payload = payload.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_event(api_address, api_payload))
        },
    )
}
fn wire_register_event_listener_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "register_event_listener",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| register_event_listener(task_callback.stream_sink::<_, Event>())
        },
    )
}
fn wire_custom_enum_error_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_enum_error_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| custom_enum_error_panic_twin_normal(),
    )
}
fn wire_custom_enum_error_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "custom_enum_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| custom_enum_error_return_error_twin_normal(),
    )
}
fn wire_custom_enum_error_return_ok_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "custom_enum_error_return_ok_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_enum_error_return_ok_twin_normal(api_arg)
        },
    )
}
fn wire_custom_nested_error_return_error_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<CustomNestedErrorOuterTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_nested_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_nested_error_return_error_twin_normal(api_arg)
        },
    )
}
fn wire_custom_struct_error_return_error_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<CustomStructErrorTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_struct_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_struct_error_return_error_twin_normal(api_arg)
        },
    )
}
fn wire_func_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| func_return_error_twin_normal(),
    )
}
fn wire_func_type_fallible_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_type_fallible_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| func_type_fallible_panic_twin_normal(),
    )
}
fn wire_func_type_infallible_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_type_infallible_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(func_type_infallible_panic_twin_normal()),
    )
}
fn wire_call_new_module_system_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, NewSimpleStruct, _>(
        WrapInfo {
            debug_name: "call_new_module_system",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(call_new_module_system()),
    )
}
fn wire_call_old_module_system_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OldSimpleStruct, _>(
        WrapInfo {
            debug_name: "call_old_module_system",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(call_old_module_system()),
    )
}
fn wire_use_imported_enum_impl(port_: MessagePort, my_enum: impl Wire2Api<MyEnum> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "use_imported_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_enum = my_enum.wire2api();
            move |task_callback| Result::<_, ()>::Ok(use_imported_enum(api_my_enum))
        },
    )
}
fn wire_use_imported_struct_impl(
    port_: MessagePort,
    my_struct: impl Wire2Api<MyStruct> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "use_imported_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_struct = my_struct.wire2api();
            move |task_callback| Result::<_, ()>::Ok(use_imported_struct(api_my_struct))
        },
    )
}
fn wire_func_macro_struct_impl(port_: MessagePort, arg: impl Wire2Api<MacroStruct> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MacroStruct, _>(
        WrapInfo {
            debug_name: "func_macro_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_macro_struct(api_arg))
        },
    )
}
fn wire_ConcatenateWith_concatenate_impl(
    port_: MessagePort,
    that: impl Wire2Api<ConcatenateWith> + UnwindSafe,
    b: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "ConcatenateWith_concatenate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Result::<_, ()>::Ok(ConcatenateWith::concatenate(&api_that, api_b))
        },
    )
}
fn wire_ConcatenateWith_concatenate_static_impl(
    port_: MessagePort,
    a: impl Wire2Api<String> + UnwindSafe,
    b: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "ConcatenateWith_concatenate_static",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(ConcatenateWith::concatenate_static(api_a, api_b))
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_static_stream_sink_impl(
    port_: MessagePort,
    key: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "ConcatenateWith_handle_some_static_stream_sink",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(ConcatenateWith::handle_some_static_stream_sink(
                    api_key,
                    api_max,
                    task_callback.stream_sink::<_, Log2>(),
                ))
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_static_stream_sink_single_arg_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "ConcatenateWith_handle_some_static_stream_sink_single_arg",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(ConcatenateWith::handle_some_static_stream_sink_single_arg(
                    task_callback.stream_sink::<_, u32>(),
                ))
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_stream_sink_impl(
    port_: MessagePort,
    that: impl Wire2Api<ConcatenateWith> + UnwindSafe,
    key: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "ConcatenateWith_handle_some_stream_sink",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(ConcatenateWith::handle_some_stream_sink(
                    &api_that,
                    api_key,
                    api_max,
                    task_callback.stream_sink::<_, Log2>(),
                ))
            }
        },
    )
}
fn wire_ConcatenateWith_handle_some_stream_sink_at_1_impl(
    port_: MessagePort,
    that: impl Wire2Api<ConcatenateWith> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "ConcatenateWith_handle_some_stream_sink_at_1",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(ConcatenateWith::handle_some_stream_sink_at_1(
                    &api_that,
                    task_callback.stream_sink::<_, u32>(),
                ))
            }
        },
    )
}
fn wire_ConcatenateWith_new_impl(port_: MessagePort, a: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ConcatenateWith, _>(
        WrapInfo {
            debug_name: "ConcatenateWith_new",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Result::<_, ()>::Ok(ConcatenateWith::new(api_a))
        },
    )
}
fn wire_SumWith_sum_impl(
    port_: MessagePort,
    that: impl Wire2Api<SumWith> + UnwindSafe,
    y: impl Wire2Api<u32> + UnwindSafe,
    z: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "SumWith_sum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_y = y.wire2api();
            let api_z = z.wire2api();
            move |task_callback| Result::<_, ()>::Ok(SumWith::sum(&api_that, api_y, api_z))
        },
    )
}
fn wire_get_sum_array_impl(
    port_: MessagePort,
    a: impl Wire2Api<u32> + UnwindSafe,
    b: impl Wire2Api<u32> + UnwindSafe,
    c: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [SumWith; 3], _>(
        WrapInfo {
            debug_name: "get_sum_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            let api_c = c.wire2api();
            move |task_callback| Result::<_, ()>::Ok(get_sum_array(api_a, api_b, api_c))
        },
    )
}
fn wire_get_sum_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SumWith, _>(
        WrapInfo {
            debug_name: "get_sum_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_sum_struct()),
    )
}
fn wire_app_settings_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "app_settings_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(app_settings_stream(
                    task_callback.stream_sink::<_, mirror_ApplicationSettings>(),
                ))
            }
        },
    )
}
fn wire_app_settings_vec_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "app_settings_vec_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(app_settings_vec_stream(
                    task_callback.stream_sink::<_, Vec<mirror_ApplicationSettings>>(),
                ))
            }
        },
    )
}
fn wire_first_number_impl(port_: MessagePort, nums: impl Wire2Api<Numbers> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        WrapInfo {
            debug_name: "first_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_nums = nums.wire2api();
            move |task_callback| Result::<_, ()>::Ok(first_number(api_nums))
        },
    )
}
fn wire_first_sequence_impl(port_: MessagePort, seqs: impl Wire2Api<Sequences> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        WrapInfo {
            debug_name: "first_sequence",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seqs = seqs.wire2api();
            move |task_callback| Result::<_, ()>::Ok(first_sequence(api_seqs))
        },
    )
}
fn wire_get_app_settings_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationSettings, _>(
        WrapInfo {
            debug_name: "get_app_settings",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_app_settings()),
    )
}
fn wire_get_fallible_app_settings_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationSettings, _>(
        WrapInfo {
            debug_name: "get_fallible_app_settings",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_fallible_app_settings(),
    )
}
fn wire_get_message_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationMessage, _>(
        WrapInfo {
            debug_name: "get_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_message()),
    )
}
fn wire_is_app_embedded_impl(
    port_: MessagePort,
    app_settings: impl Wire2Api<ApplicationSettings> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "is_app_embedded",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_app_settings = app_settings.wire2api();
            move |task_callback| Result::<_, ()>::Ok(is_app_embedded(api_app_settings))
        },
    )
}
fn wire_mirror_struct_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "mirror_struct_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(mirror_struct_stream(
                    task_callback.stream_sink::<_, MirrorStruct>(),
                ))
            }
        },
    )
}
fn wire_mirror_tuple_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_,_,_,(),_>(WrapInfo{ debug_name: "mirror_tuple_stream", port: Some(port_), mode: FfiCallMode::Stream }, move || {  move |task_callback| Result::<_,()>::Ok(mirror_tuple_stream(task_callback.stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>())) })
}
fn wire_repeat_number_impl(
    port_: MessagePort,
    num: impl Wire2Api<i32> + UnwindSafe,
    times: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_Numbers, _>(
        WrapInfo {
            debug_name: "repeat_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_num = num.wire2api();
            let api_times = times.wire2api();
            move |task_callback| Result::<_, ()>::Ok(repeat_number(api_num, api_times))
        },
    )
}
fn wire_repeat_sequence_impl(
    port_: MessagePort,
    seq: impl Wire2Api<i32> + UnwindSafe,
    times: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_Sequences, _>(
        WrapInfo {
            debug_name: "repeat_sequence",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seq = seq.wire2api();
            let api_times = times.wire2api();
            move |task_callback| Result::<_, ()>::Ok(repeat_sequence(api_seq, api_times))
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ContainsMirroredSubStruct, _>(
        WrapInfo {
            debug_name: "test_contains_mirrored_sub_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_contains_mirrored_sub_struct()),
    )
}
fn wire_test_fallible_of_raw_string_mirrored_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<mirror_RawStringMirrored>, _>(
        WrapInfo {
            debug_name: "test_fallible_of_raw_string_mirrored",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| test_fallible_of_raw_string_mirrored(),
    )
}
fn wire_test_list_of_nested_enums_mirrored_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<mirror_RawStringEnumMirrored>, _>(
        WrapInfo {
            debug_name: "test_list_of_nested_enums_mirrored",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_list_of_nested_enums_mirrored()),
    )
}
fn wire_test_list_of_raw_nested_string_mirrored_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ListOfNestedRawStringMirrored, _>(
        WrapInfo {
            debug_name: "test_list_of_raw_nested_string_mirrored",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_list_of_raw_nested_string_mirrored()),
    )
}
fn wire_test_nested_raw_string_mirrored_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_NestedRawStringMirrored, _>(
        WrapInfo {
            debug_name: "test_nested_raw_string_mirrored",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_nested_raw_string_mirrored()),
    )
}
fn wire_test_raw_string_enum_mirrored_impl(
    port_: MessagePort,
    nested: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_RawStringEnumMirrored, _>(
        WrapInfo {
            debug_name: "test_raw_string_enum_mirrored",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_nested = nested.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_raw_string_enum_mirrored(api_nested))
        },
    )
}
fn wire_test_raw_string_mirrored_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_RawStringMirrored, _>(
        WrapInfo {
            debug_name: "test_raw_string_mirrored",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_raw_string_mirrored()),
    )
}
fn wire_handle_big_buffers_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, BigBuffers, _>(
        WrapInfo {
            debug_name: "handle_big_buffers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(handle_big_buffers()),
    )
}
fn wire_handle_complex_struct_impl(port_: MessagePort, s: impl Wire2Api<MyTreeNode> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MyTreeNode, _>(
        WrapInfo {
            debug_name: "handle_complex_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_complex_struct(api_s))
        },
    )
}
fn wire_handle_nested_struct_impl(
    port_: MessagePort,
    s: impl Wire2Api<MyNestedStruct> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MyNestedStruct, _>(
        WrapInfo {
            debug_name: "handle_nested_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_nested_struct(api_s))
        },
    )
}
fn wire_list_of_primitive_enums_impl(
    port_: MessagePort,
    weekdays: impl Wire2Api<Vec<Weekdays>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<Weekdays>, _>(
        WrapInfo {
            debug_name: "list_of_primitive_enums",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_weekdays = weekdays.wire2api();
            move |task_callback| Result::<_, ()>::Ok(list_of_primitive_enums(api_weekdays))
        },
    )
}
fn wire_test_abc_enum_impl(port_: MessagePort, abc: impl Wire2Api<Abc> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Abc, _>(
        WrapInfo {
            debug_name: "test_abc_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_abc = abc.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_abc_enum(api_abc))
        },
    )
}
fn wire_test_struct_with_enum_impl(
    port_: MessagePort,
    se: impl Wire2Api<StructWithEnum> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithEnum, _>(
        WrapInfo {
            debug_name: "test_struct_with_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_se = se.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_struct_with_enum(api_se))
        },
    )
}
fn wire_func_return_unit_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_return_unit_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(func_return_unit_twin_normal()),
    )
}
fn wire_func_string_twin_normal_impl(port_: MessagePort, arg: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "func_string_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_string_twin_normal(api_arg))
        },
    )
}
fn wire_handle_list_of_struct_impl(port_: MessagePort, l: impl Wire2Api<Vec<MySize>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<MySize>, _>(
        WrapInfo {
            debug_name: "handle_list_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_l = l.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_list_of_struct(api_l))
        },
    )
}
fn wire_handle_string_list_impl(
    port_: MessagePort,
    names: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>, _>(
        WrapInfo {
            debug_name: "handle_string_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_names = names.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_string_list(api_names))
        },
    )
}
fn wire_handle_newtype_impl(port_: MessagePort, arg: impl Wire2Api<NewTypeInt> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, NewTypeInt, _>(
        WrapInfo {
            debug_name: "handle_newtype",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_newtype(api_arg))
        },
    )
}
fn wire_handle_increment_boxed_optional_impl(
    port_: MessagePort,
    opt: impl Wire2Api<Option<Box<f64>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        WrapInfo {
            debug_name: "handle_increment_boxed_optional",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_increment_boxed_optional(api_opt))
        },
    )
}
fn wire_handle_option_box_arguments_impl(
    port_: MessagePort,
    i8box: impl Wire2Api<Option<Box<i8>>> + UnwindSafe,
    u8box: impl Wire2Api<Option<Box<u8>>> + UnwindSafe,
    i32box: impl Wire2Api<Option<Box<i32>>> + UnwindSafe,
    i64box: impl Wire2Api<Option<Box<i64>>> + UnwindSafe,
    f64box: impl Wire2Api<Option<Box<f64>>> + UnwindSafe,
    boolbox: impl Wire2Api<Option<Box<bool>>> + UnwindSafe,
    structbox: impl Wire2Api<Option<Box<ExoticOptionals>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "handle_option_box_arguments",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_i8box = i8box.wire2api();
            let api_u8box = u8box.wire2api();
            let api_i32box = i32box.wire2api();
            let api_i64box = i64box.wire2api();
            let api_f64box = f64box.wire2api();
            let api_boolbox = boolbox.wire2api();
            let api_structbox = structbox.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(handle_option_box_arguments(
                    api_i8box,
                    api_u8box,
                    api_i32box,
                    api_i64box,
                    api_f64box,
                    api_boolbox,
                    api_structbox,
                ))
            }
        },
    )
}
fn wire_handle_optional_increment_impl(
    port_: MessagePort,
    opt: impl Wire2Api<Option<ExoticOptionals>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<ExoticOptionals>, _>(
        WrapInfo {
            debug_name: "handle_optional_increment",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_optional_increment(api_opt))
        },
    )
}
fn wire_handle_optional_return_impl(
    port_: MessagePort,
    left: impl Wire2Api<f64> + UnwindSafe,
    right: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f64>, _>(
        WrapInfo {
            debug_name: "handle_optional_return",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_left = left.wire2api();
            let api_right = right.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_optional_return(api_left, api_right))
        },
    )
}
fn wire_handle_optional_struct_impl(
    port_: MessagePort,
    document: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<Element>, _>(
        WrapInfo {
            debug_name: "handle_optional_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_document = document.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_optional_struct(api_document))
        },
    )
}
fn wire_handle_vec_of_opts_impl(port_: MessagePort, opt: impl Wire2Api<OptVecs> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OptVecs, _>(
        WrapInfo {
            debug_name: "handle_vec_of_opts",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_vec_of_opts(api_opt))
        },
    )
}
fn wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(
    that: impl Wire2Api<StructWithCommentsTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_instance_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(StructWithCommentsTwinSync::instance_method_twin_sync(
                &api_that,
            ))
        },
    )
}
fn wire_StructWithCommentsTwinSync_static_method_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_static_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(StructWithCommentsTwinSync::static_method_twin_sync()),
    )
}
fn wire_function_with_comments_slash_star_star_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_impl() -> support::WireSyncReturn
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_sync()),
    )
}
fn wire_func_enum_simple_twin_sync_impl(
    arg: impl Wire2Api<EnumSimpleTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_simple_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_simple_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemMixedTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_mixed_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_mixed_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_struct_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemStructTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_struct_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_struct_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemTupleTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_tuple_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_tuple_twin_sync(api_arg))
        },
    )
}
fn wire_custom_enum_error_panic_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_enum_error_panic_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || custom_enum_error_panic_twin_sync(),
    )
}
fn wire_custom_enum_error_return_error_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_enum_error_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || custom_enum_error_return_error_twin_sync(),
    )
}
fn wire_custom_enum_error_return_ok_twin_sync_impl(
    arg: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_enum_error_return_ok_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            custom_enum_error_return_ok_twin_sync(api_arg)
        },
    )
}
fn wire_custom_nested_error_return_error_twin_sync_impl(
    arg: impl Wire2Api<CustomNestedErrorOuterTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_nested_error_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            custom_nested_error_return_error_twin_sync(api_arg)
        },
    )
}
fn wire_custom_struct_error_return_error_twin_sync_impl(
    arg: impl Wire2Api<CustomStructErrorTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_struct_error_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            custom_struct_error_return_error_twin_sync(api_arg)
        },
    )
}
fn wire_func_return_error_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || func_return_error_twin_sync(),
    )
}
fn wire_func_type_fallible_panic_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_type_fallible_panic_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || func_type_fallible_panic_twin_sync(),
    )
}
fn wire_func_type_infallible_panic_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_type_infallible_panic_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(func_type_infallible_panic_twin_sync()),
    )
}
fn wire_func_return_unit_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_return_unit_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(func_return_unit_twin_sync()),
    )
}
fn wire_func_string_twin_sync_impl(
    arg: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_string_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_string_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<bool>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_i8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_u8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<bool>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<f32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<f64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<i16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<i64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<i8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<u16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<u64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<u8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_simple_adder_twin_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Result::<_, ()>::Ok(simple_adder_twin_sync(api_a, api_b))
        },
    )
}
fn wire_func_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithOneFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_one_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_one_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithTwoFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_two_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_two_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_struct_with_zero_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithZeroFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_zero_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_zero_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<TupleStructWithOneFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_tuple_struct_with_one_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<TupleStructWithTwoFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_tuple_struct_with_two_field_twin_sync(api_arg))
        },
    )
}
fn wire_test_more_than_just_one_raw_string_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MoreThanJustOneRawStringStruct, _>(
        WrapInfo {
            debug_name: "test_more_than_just_one_raw_string_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(test_more_than_just_one_raw_string_struct())
        },
    )
}
fn wire_test_raw_string_item_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RawStringItemStruct, _>(
        WrapInfo {
            debug_name: "test_raw_string_item_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_raw_string_item_struct()),
    )
}
fn wire_create_array_opaque_enum_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [EnumOpaque; 5], _>(
        WrapInfo {
            debug_name: "create_array_opaque_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(create_array_opaque_enum()),
    )
}
fn wire_create_nested_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OpaqueNested, _>(
        WrapInfo {
            debug_name: "create_nested_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(create_nested_opaque()),
    )
}
fn wire_create_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RustOpaque<HideData>, _>(
        WrapInfo {
            debug_name: "create_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(create_opaque()),
    )
}
fn wire_create_option_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<Option<RustOpaque<HideData>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<RustOpaque<HideData>>, _>(
        WrapInfo {
            debug_name: "create_option_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_option_opaque(api_opaque))
        },
    )
}
fn wire_create_sync_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RustOpaque<NonSendHideData>, _>(
        WrapInfo {
            debug_name: "create_sync_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(create_sync_opaque()),
    )
}
fn wire_frb_generator_test_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RustOpaque<FrbOpaqueReturn>, _>(
        WrapInfo {
            debug_name: "frb_generator_test",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(frb_generator_test()),
    )
}
fn wire_opaque_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [RustOpaque<HideData>; 2], _>(
        WrapInfo {
            debug_name: "opaque_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(opaque_array()),
    )
}
fn wire_opaque_array_run_impl(
    port_: MessagePort,
    data: impl Wire2Api<[RustOpaque<HideData>; 2]> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "opaque_array_run",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| Result::<_, ()>::Ok(opaque_array_run(api_data))
        },
    )
}
fn wire_opaque_vec_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<RustOpaque<HideData>>, _>(
        WrapInfo {
            debug_name: "opaque_vec",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(opaque_vec()),
    )
}
fn wire_opaque_vec_run_impl(
    port_: MessagePort,
    data: impl Wire2Api<Vec<RustOpaque<HideData>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "opaque_vec_run",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| Result::<_, ()>::Ok(opaque_vec_run(api_data))
        },
    )
}
fn wire_run_enum_opaque_impl(port_: MessagePort, opaque: impl Wire2Api<EnumOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "run_enum_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(run_enum_opaque(api_opaque))
        },
    )
}
fn wire_run_nested_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<OpaqueNested> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "run_nested_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(run_nested_opaque(api_opaque))
        },
    )
}
fn wire_run_non_clone_impl(
    port_: MessagePort,
    clone: impl Wire2Api<RustOpaque<NonCloneData>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "run_non_clone",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_clone = clone.wire2api();
            move |task_callback| Result::<_, ()>::Ok(run_non_clone(api_clone))
        },
    )
}
fn wire_run_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<RustOpaque<HideData>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "run_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(run_opaque(api_opaque))
        },
    )
}
fn wire_run_opaque_with_delay_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<RustOpaque<HideData>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "run_opaque_with_delay",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Result::<_, ()>::Ok(run_opaque_with_delay(api_opaque))
        },
    )
}
fn wire_unwrap_rust_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<RustOpaque<HideData>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "unwrap_rust_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| unwrap_rust_opaque(api_opaque)
        },
    )
}
fn wire_frb_sync_generator_test_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RustOpaque<FrbOpaqueSyncReturn>, _>(
        WrapInfo {
            debug_name: "frb_sync_generator_test",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(frb_sync_generator_test()),
    )
}
fn wire_sync_run_opaque_impl(
    opaque: impl Wire2Api<RustOpaque<NonSendHideData>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_run_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Result::<_, ()>::Ok(sync_run_opaque(api_opaque))
        },
    )
}
fn wire_simple_adder_twin_normal_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "simple_adder_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Result::<_, ()>::Ok(simple_adder_twin_normal(api_a, api_b))
        },
    )
}
fn wire_func_stream_realistic_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_realistic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_stream_realistic_twin_normal(
                    task_callback.stream_sink::<_, String>(),
                    api_arg,
                ))
            }
        },
    )
}
fn wire_func_stream_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                func_stream_return_error_twin_normal(task_callback.stream_sink::<_, String>())
            }
        },
    )
}
fn wire_func_stream_return_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_return_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                func_stream_return_panic_twin_normal(task_callback.stream_sink::<_, String>())
            }
        },
    )
}
fn wire_func_stream_sink_arg_position_twin_normal_impl(
    port_: MessagePort,
    a: impl Wire2Api<u32> + UnwindSafe,
    b: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_sink_arg_position_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_stream_sink_arg_position_twin_normal(
                    api_a,
                    api_b,
                    task_callback.stream_sink::<_, u32>(),
                ))
            }
        },
    )
}
fn wire_handle_stream_of_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "handle_stream_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(handle_stream_of_struct(
                    task_callback.stream_sink::<_, MyStreamEntry>(),
                ))
            }
        },
    )
}
fn wire_func_struct_with_one_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithOneFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithOneFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_one_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_struct_with_two_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithTwoFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithTwoFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_two_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_struct_with_zero_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithZeroFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithZeroFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_zero_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_zero_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<TupleStructWithOneFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TupleStructWithOneFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_tuple_struct_with_one_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<TupleStructWithTwoFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TupleStructWithTwoFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_tuple_struct_with_two_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_test_tuple_impl(
    port_: MessagePort,
    value: impl Wire2Api<Option<(String, i32)>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (String, i32), _>(
        WrapInfo {
            debug_name: "test_tuple",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_tuple(api_value))
        },
    )
}
fn wire_test_tuple_2_impl(
    port_: MessagePort,
    value: impl Wire2Api<Vec<(String, i32)>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "test_tuple_2",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_tuple_2(api_value))
        },
    )
}
fn wire_handle_type_alias_id_impl(port_: MessagePort, input: impl Wire2Api<u64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        WrapInfo {
            debug_name: "handle_type_alias_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_type_alias_id(api_input))
        },
    )
}
fn wire_handle_type_alias_model_impl(port_: MessagePort, input: impl Wire2Api<u64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TestModel, _>(
        WrapInfo {
            debug_name: "handle_type_alias_model",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_type_alias_model(api_input))
        },
    )
}
fn wire_handle_type_nest_alias_id_impl(port_: MessagePort, input: impl Wire2Api<u64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        WrapInfo {
            debug_name: "handle_type_nest_alias_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_type_nest_alias_id(api_input))
        },
    )
}
fn wire_handle_nested_uuids_impl(port_: MessagePort, ids: impl Wire2Api<FeatureUuid> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FeatureUuid, _>(
        WrapInfo {
            debug_name: "handle_nested_uuids",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.wire2api();
            move |task_callback| handle_nested_uuids(api_ids)
        },
    )
}
fn wire_handle_uuid_impl(port_: MessagePort, id: impl Wire2Api<uuid::Uuid> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, uuid::Uuid, _>(
        WrapInfo {
            debug_name: "handle_uuid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| handle_uuid(api_id)
        },
    )
}
fn wire_handle_uuids_impl(port_: MessagePort, ids: impl Wire2Api<Vec<uuid::Uuid>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<uuid::Uuid>, _>(
        WrapInfo {
            debug_name: "handle_uuids",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.wire2api();
            move |task_callback| handle_uuids(api_ids)
        },
    )
}

// Section: wrapper_structs

#[derive(Clone)]
pub struct mirror_ApplicationEnv(ApplicationEnv);

#[derive(Clone)]
pub struct mirror_ApplicationEnvVar(ApplicationEnvVar);

#[derive(Clone)]
pub struct mirror_ApplicationMessage(ApplicationMessage);

#[derive(Clone)]
pub struct mirror_ApplicationMode(ApplicationMode);

#[derive(Clone)]
pub struct mirror_ApplicationSettings(ApplicationSettings);

#[derive(Clone)]
pub struct mirror_ListOfNestedRawStringMirrored(ListOfNestedRawStringMirrored);

#[derive(Clone)]
pub struct mirror_NestedRawStringMirrored(NestedRawStringMirrored);

#[derive(Clone)]
pub struct mirror_Numbers(Numbers);

#[derive(Clone)]
pub struct mirror_RawStringEnumMirrored(RawStringEnumMirrored);

#[derive(Clone)]
pub struct mirror_RawStringMirrored(RawStringMirrored);

#[derive(Clone)]
pub struct mirror_Sequences(Sequences);

// Section: static_checks

const _: fn() = || {
    {
        let ApplicationEnv = None::<ApplicationEnv>.unwrap();
        let _: Vec<ApplicationEnvVar> = ApplicationEnv.vars;
    }
    {
        let ApplicationEnvVar_ = None::<ApplicationEnvVar>.unwrap();
        let _: String = ApplicationEnvVar_.0;
        let _: bool = ApplicationEnvVar_.1;
    }
    match None::<ApplicationMessage>.unwrap() {
        ApplicationMessage::DisplayMessage(field0) => {
            let _: String = field0;
        }
        ApplicationMessage::RenderPixel { x, y } => {
            let _: i32 = x;
            let _: i32 = y;
        }
        ApplicationMessage::Exit => {}
    }
    {
        let ApplicationSettings = None::<ApplicationSettings>.unwrap();
        let _: String = ApplicationSettings.name;
        let _: String = ApplicationSettings.version;
        let _: ApplicationMode = ApplicationSettings.mode;
        let _: Box<ApplicationEnv> = ApplicationSettings.env;
        let _: Option<ApplicationEnv> = ApplicationSettings.env_optional;
    }
    {
        let ListOfNestedRawStringMirrored = None::<ListOfNestedRawStringMirrored>.unwrap();
        let _: Vec<NestedRawStringMirrored> = ListOfNestedRawStringMirrored.raw;
    }
    {
        let NestedRawStringMirrored = None::<NestedRawStringMirrored>.unwrap();
        let _: RawStringMirrored = NestedRawStringMirrored.raw;
    }
    {
        let Numbers_ = None::<Numbers>.unwrap();
        let _: Vec<i32> = Numbers_.0;
    }
    match None::<RawStringEnumMirrored>.unwrap() {
        RawStringEnumMirrored::Raw(field0) => {
            let _: RawStringMirrored = field0;
        }
        RawStringEnumMirrored::Nested(field0) => {
            let _: NestedRawStringMirrored = field0;
        }
        RawStringEnumMirrored::ListOfNested(field0) => {
            let _: ListOfNestedRawStringMirrored = field0;
        }
    }
    {
        let RawStringMirrored = None::<RawStringMirrored>.unwrap();
        let _: String = RawStringMirrored.value;
    }
    {
        let Sequences_ = None::<Sequences>.unwrap();
        let _: Vec<i32> = Sequences_.0;
    }
};

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: impl_wire2api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<chrono::DateTime<chrono::Local>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Local> {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        ))
    }
}
impl Wire2Api<chrono::NaiveDateTime> for i64 {
    fn wire2api(self) -> chrono::NaiveDateTime {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::NaiveDateTime::from_timestamp_opt(s, ns).expect("invalid or out-of-range datetime")
    }
}
impl Wire2Api<chrono::DateTime<chrono::Utc>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Utc> {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}
impl Wire2Api<ApplicationMode> for i32 {
    fn wire2api(self) -> ApplicationMode {
        match self {
            0 => ApplicationMode::Standalone,
            1 => ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        }
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<EnumSimpleTwinNormal> for i32 {
    fn wire2api(self) -> EnumSimpleTwinNormal {
        match self {
            0 => EnumSimpleTwinNormal::A,
            1 => EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", self),
        }
    }
}
impl Wire2Api<EnumSimpleTwinSync> for i32 {
    fn wire2api(self) -> EnumSimpleTwinSync {
        match self {
            0 => EnumSimpleTwinSync::A,
            1 => EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", self),
        }
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i16> for i16 {
    fn wire2api(self) -> i16 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}
impl Wire2Api<MyEnum> for i32 {
    fn wire2api(self) -> MyEnum {
        match self {
            0 => MyEnum::False,
            1 => MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", self),
        }
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}
impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
impl Wire2Api<Weekdays> for i32 {
    fn wire2api(self) -> Weekdays {
        match self {
            0 => Weekdays::Monday,
            1 => Weekdays::Tuesday,
            2 => Weekdays::Wednesday,
            3 => Weekdays::Thursday,
            4 => Weekdays::Friday,
            5 => Weekdays::Saturday,
            6 => Weekdays::Sunday,
            _ => unreachable!("Invalid variant for Weekdays: {}", self),
        }
    }
}

// Section: impl_into_dart

impl support::IntoDart for A {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for A {}
impl rust2dart::IntoIntoDart<A> for A {
    fn into_into_dart(self) -> A {
        self
    }
}
impl support::IntoDart for Abc {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
            Self::JustInt(field0) => vec![3.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Abc {}
impl rust2dart::IntoIntoDart<Abc> for Abc {
    fn into_into_dart(self) -> Abc {
        self
    }
}
impl support::IntoDart for Another {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Another {}
impl rust2dart::IntoIntoDart<Another> for Another {
    fn into_into_dart(self) -> Another {
        self
    }
}
impl support::IntoDart for mirror_ApplicationEnv {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.vars.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnv {}
impl rust2dart::IntoIntoDart<mirror_ApplicationEnv> for ApplicationEnv {
    fn into_into_dart(self) -> mirror_ApplicationEnv {
        mirror_ApplicationEnv
    }
}
impl support::IntoDart for mirror_ApplicationEnvVar {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0 .0.into_into_dart().into_dart(),
            self.0 .1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnvVar {}
impl rust2dart::IntoIntoDart<mirror_ApplicationEnvVar> for ApplicationEnvVar {
    fn into_into_dart(self) -> mirror_ApplicationEnvVar {
        mirror_ApplicationEnvVar
    }
}
impl support::IntoDart for mirror_ApplicationMessage {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            ApplicationMessage::DisplayMessage(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            ApplicationMessage::RenderPixel { x, y } => vec![
                1.into_dart(),
                x.into_into_dart().into_dart(),
                y.into_into_dart().into_dart(),
            ],
            ApplicationMessage::Exit => vec![2.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationMessage {}
impl rust2dart::IntoIntoDart<mirror_ApplicationMessage> for ApplicationMessage {
    fn into_into_dart(self) -> mirror_ApplicationMessage {
        mirror_ApplicationMessage
    }
}
impl support::IntoDart for mirror_ApplicationMode {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            ApplicationMode::Standalone => 0,
            ApplicationMode::Embedded => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationMode {}
impl rust2dart::IntoIntoDart<mirror_ApplicationMode> for ApplicationMode {
    fn into_into_dart(self) -> mirror_ApplicationMode {
        mirror_ApplicationMode
    }
}
impl support::IntoDart for mirror_ApplicationSettings {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.name.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.mode.into_into_dart().into_dart(),
            self.0.env.into_into_dart().into_dart(),
            self.0.env_optional.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationSettings {}
impl rust2dart::IntoIntoDart<mirror_ApplicationSettings> for ApplicationSettings {
    fn into_into_dart(self) -> mirror_ApplicationSettings {
        mirror_ApplicationSettings
    }
}
impl support::IntoDart for Attribute {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Attribute {}
impl rust2dart::IntoIntoDart<Attribute> for Attribute {
    fn into_into_dart(self) -> Attribute {
        self
    }
}
impl support::IntoDart for B {
    fn into_dart(self) -> support::DartAbi {
        vec![self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for B {}
impl rust2dart::IntoIntoDart<B> for B {
    fn into_into_dart(self) -> B {
        self
    }
}
impl support::IntoDart for BigBuffers {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BigBuffers {}
impl rust2dart::IntoIntoDart<BigBuffers> for BigBuffers {
    fn into_into_dart(self) -> BigBuffers {
        self
    }
}
impl support::IntoDart for Blob {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Blob {}
impl rust2dart::IntoIntoDart<Blob> for Blob {
    fn into_into_dart(self) -> Blob {
        self
    }
}
impl support::IntoDart for C {
    fn into_dart(self) -> support::DartAbi {
        vec![self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for C {}
impl rust2dart::IntoIntoDart<C> for C {
    fn into_into_dart(self) -> C {
        self
    }
}
impl support::IntoDart for ConcatenateWith {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConcatenateWith {}
impl rust2dart::IntoIntoDart<ConcatenateWith> for ConcatenateWith {
    fn into_into_dart(self) -> ConcatenateWith {
        self
    }
}
impl support::IntoDart for ContainsMirroredSubStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ContainsMirroredSubStruct {}
impl rust2dart::IntoIntoDart<ContainsMirroredSubStruct> for ContainsMirroredSubStruct {
    fn into_into_dart(self) -> ContainsMirroredSubStruct {
        self
    }
}
impl support::IntoDart for CustomEnumErrorTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One { message, backtrace } => vec![
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
            Self::Two { message, backtrace } => vec![
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomEnumErrorTwinNormal {}
impl rust2dart::IntoIntoDart<CustomEnumErrorTwinNormal> for CustomEnumErrorTwinNormal {
    fn into_into_dart(self) -> CustomEnumErrorTwinNormal {
        self
    }
}
impl support::IntoDart for CustomEnumErrorTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One { message, backtrace } => vec![
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
            Self::Two { message, backtrace } => vec![
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomEnumErrorTwinSync {}
impl rust2dart::IntoIntoDart<CustomEnumErrorTwinSync> for CustomEnumErrorTwinSync {
    fn into_into_dart(self) -> CustomEnumErrorTwinSync {
        self
    }
}
impl support::IntoDart for CustomNestedErrorInnerTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Three(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Four(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorInnerTwinNormal {}
impl rust2dart::IntoIntoDart<CustomNestedErrorInnerTwinNormal>
    for CustomNestedErrorInnerTwinNormal
{
    fn into_into_dart(self) -> CustomNestedErrorInnerTwinNormal {
        self
    }
}
impl support::IntoDart for CustomNestedErrorInnerTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Three(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Four(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorInnerTwinSync {}
impl rust2dart::IntoIntoDart<CustomNestedErrorInnerTwinSync> for CustomNestedErrorInnerTwinSync {
    fn into_into_dart(self) -> CustomNestedErrorInnerTwinSync {
        self
    }
}
impl support::IntoDart for CustomNestedErrorOuterTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Two(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorOuterTwinNormal {}
impl rust2dart::IntoIntoDart<CustomNestedErrorOuterTwinNormal>
    for CustomNestedErrorOuterTwinNormal
{
    fn into_into_dart(self) -> CustomNestedErrorOuterTwinNormal {
        self
    }
}
impl support::IntoDart for CustomNestedErrorOuterTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Two(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorOuterTwinSync {}
impl rust2dart::IntoIntoDart<CustomNestedErrorOuterTwinSync> for CustomNestedErrorOuterTwinSync {
    fn into_into_dart(self) -> CustomNestedErrorOuterTwinSync {
        self
    }
}
impl support::IntoDart for CustomStructErrorTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomStructErrorTwinNormal {}
impl rust2dart::IntoIntoDart<CustomStructErrorTwinNormal> for CustomStructErrorTwinNormal {
    fn into_into_dart(self) -> CustomStructErrorTwinNormal {
        self
    }
}
impl support::IntoDart for CustomStructErrorTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomStructErrorTwinSync {}
impl rust2dart::IntoIntoDart<CustomStructErrorTwinSync> for CustomStructErrorTwinSync {
    fn into_into_dart(self) -> CustomStructErrorTwinSync {
        self
    }
}
impl support::IntoDart for DartOpaqueNested {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartOpaqueNested {}
impl rust2dart::IntoIntoDart<DartOpaqueNested> for DartOpaqueNested {
    fn into_into_dart(self) -> DartOpaqueNested {
        self
    }
}
impl support::IntoDart for Distance {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::Map(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Distance {}
impl rust2dart::IntoIntoDart<Distance> for Distance {
    fn into_into_dart(self) -> Distance {
        self
    }
}
impl support::IntoDart for Element {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.tag.into_dart(),
            self.text.into_dart(),
            self.attributes.into_dart(),
            self.children.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Element {}
impl rust2dart::IntoIntoDart<Element> for Element {
    fn into_into_dart(self) -> Element {
        self
    }
}
impl support::IntoDart for EnumDartOpaque {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Primitive(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Opaque(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumDartOpaque {}
impl rust2dart::IntoIntoDart<EnumDartOpaque> for EnumDartOpaque {
    fn into_into_dart(self) -> EnumDartOpaque {
        self
    }
}
impl support::IntoDart for EnumOpaque {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Struct(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Primitive(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::TraitObj(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::Mutex(field0) => vec![3.into_dart(), field0.into_dart()],
            Self::RwLock(field0) => vec![4.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumOpaque {}
impl rust2dart::IntoIntoDart<EnumOpaque> for EnumOpaque {
    fn into_into_dart(self) -> EnumOpaque {
        self
    }
}
impl support::IntoDart for EnumSimpleTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumSimpleTwinNormal {}
impl rust2dart::IntoIntoDart<EnumSimpleTwinNormal> for EnumSimpleTwinNormal {
    fn into_into_dart(self) -> EnumSimpleTwinNormal {
        self
    }
}
impl support::IntoDart for EnumSimpleTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumSimpleTwinSync {}
impl rust2dart::IntoIntoDart<EnumSimpleTwinSync> for EnumSimpleTwinSync {
    fn into_into_dart(self) -> EnumSimpleTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemMixedTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemMixedTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemMixedTwinNormal> for EnumWithItemMixedTwinNormal {
    fn into_into_dart(self) -> EnumWithItemMixedTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemMixedTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemMixedTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemMixedTwinSync> for EnumWithItemMixedTwinSync {
    fn into_into_dart(self) -> EnumWithItemMixedTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemStructTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemStructTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemStructTwinNormal> for EnumWithItemStructTwinNormal {
    fn into_into_dart(self) -> EnumWithItemStructTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemStructTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemStructTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemStructTwinSync> for EnumWithItemStructTwinSync {
    fn into_into_dart(self) -> EnumWithItemStructTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemTupleTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemTupleTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemTupleTwinNormal> for EnumWithItemTupleTwinNormal {
    fn into_into_dart(self) -> EnumWithItemTupleTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemTupleTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemTupleTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemTupleTwinSync> for EnumWithItemTupleTwinSync {
    fn into_into_dart(self) -> EnumWithItemTupleTwinSync {
        self
    }
}
impl support::IntoDart for Event {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Event {}
impl rust2dart::IntoIntoDart<Event> for Event {
    fn into_into_dart(self) -> Event {
        self
    }
}
impl support::IntoDart for ExoticOptionals {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.int32.into_dart(),
            self.int64.into_dart(),
            self.float64.into_dart(),
            self.boolean.into_dart(),
            self.zerocopy.into_dart(),
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.int32list.into_dart(),
            self.float32list.into_dart(),
            self.float64list.into_dart(),
            self.attributes.into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_dart(),
            self.newtypeint.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ExoticOptionals {}
impl rust2dart::IntoIntoDart<ExoticOptionals> for ExoticOptionals {
    fn into_into_dart(self) -> ExoticOptionals {
        self
    }
}
impl support::IntoDart for FeatureUuid {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.one.into_into_dart().into_dart(),
            self.many.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FeatureUuid {}
impl rust2dart::IntoIntoDart<FeatureUuid> for FeatureUuid {
    fn into_into_dart(self) -> FeatureUuid {
        self
    }
}
impl support::IntoDart for FeedId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FeedId {}
impl rust2dart::IntoIntoDart<FeedId> for FeedId {
    fn into_into_dart(self) -> FeedId {
        self
    }
}
impl support::IntoDart for mirror_ListOfNestedRawStringMirrored {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ListOfNestedRawStringMirrored {}
impl rust2dart::IntoIntoDart<mirror_ListOfNestedRawStringMirrored>
    for ListOfNestedRawStringMirrored
{
    fn into_into_dart(self) -> mirror_ListOfNestedRawStringMirrored {
        mirror_ListOfNestedRawStringMirrored
    }
}
impl support::IntoDart for Log2 {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Log2 {}
impl rust2dart::IntoIntoDart<Log2> for Log2 {
    fn into_into_dart(self) -> Log2 {
        self
    }
}
impl support::IntoDart for MacroStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.data.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MacroStruct {}
impl rust2dart::IntoIntoDart<MacroStruct> for MacroStruct {
    fn into_into_dart(self) -> MacroStruct {
        self
    }
}
impl support::IntoDart for Measure {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Speed(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Distance(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Measure {}
impl rust2dart::IntoIntoDart<Measure> for Measure {
    fn into_into_dart(self) -> Measure {
        self
    }
}
impl support::IntoDart for MessageId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MessageId {}
impl rust2dart::IntoIntoDart<MessageId> for MessageId {
    fn into_into_dart(self) -> MessageId {
        self
    }
}
impl support::IntoDart for MirrorStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MirrorStruct {}
impl rust2dart::IntoIntoDart<MirrorStruct> for MirrorStruct {
    fn into_into_dart(self) -> MirrorStruct {
        self
    }
}
impl support::IntoDart for MoreThanJustOneRawStringStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MoreThanJustOneRawStringStruct {}
impl rust2dart::IntoIntoDart<MoreThanJustOneRawStringStruct> for MoreThanJustOneRawStringStruct {
    fn into_into_dart(self) -> MoreThanJustOneRawStringStruct {
        self
    }
}
impl support::IntoDart for MyEnum {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::False => 0,
            Self::True => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyEnum {}
impl rust2dart::IntoIntoDart<MyEnum> for MyEnum {
    fn into_into_dart(self) -> MyEnum {
        self
    }
}
impl support::IntoDart for MyNestedStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyNestedStruct {}
impl rust2dart::IntoIntoDart<MyNestedStruct> for MyNestedStruct {
    fn into_into_dart(self) -> MyNestedStruct {
        self
    }
}
impl support::IntoDart for MySize {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MySize {}
impl rust2dart::IntoIntoDart<MySize> for MySize {
    fn into_into_dart(self) -> MySize {
        self
    }
}
impl support::IntoDart for MyStreamEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyStreamEntry {}
impl rust2dart::IntoIntoDart<MyStreamEntry> for MyStreamEntry {
    fn into_into_dart(self) -> MyStreamEntry {
        self
    }
}
impl support::IntoDart for MyStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.content.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyStruct {}
impl rust2dart::IntoIntoDart<MyStruct> for MyStruct {
    fn into_into_dart(self) -> MyStruct {
        self
    }
}
impl support::IntoDart for MyTreeNode {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyTreeNode {}
impl rust2dart::IntoIntoDart<MyTreeNode> for MyTreeNode {
    fn into_into_dart(self) -> MyTreeNode {
        self
    }
}
impl support::IntoDart for mirror_NestedRawStringMirrored {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_NestedRawStringMirrored {}
impl rust2dart::IntoIntoDart<mirror_NestedRawStringMirrored> for NestedRawStringMirrored {
    fn into_into_dart(self) -> mirror_NestedRawStringMirrored {
        mirror_NestedRawStringMirrored
    }
}
impl support::IntoDart for NewSimpleStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NewSimpleStruct {}
impl rust2dart::IntoIntoDart<NewSimpleStruct> for NewSimpleStruct {
    fn into_into_dart(self) -> NewSimpleStruct {
        self
    }
}
impl support::IntoDart for NewTypeInt {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NewTypeInt {}
impl rust2dart::IntoIntoDart<NewTypeInt> for NewTypeInt {
    fn into_into_dart(self) -> NewTypeInt {
        self
    }
}
impl support::IntoDart for mirror_Numbers {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Numbers {}
impl rust2dart::IntoIntoDart<mirror_Numbers> for Numbers {
    fn into_into_dart(self) -> mirror_Numbers {
        mirror_Numbers
    }
}
impl support::IntoDart for OldSimpleStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OldSimpleStruct {}
impl rust2dart::IntoIntoDart<OldSimpleStruct> for OldSimpleStruct {
    fn into_into_dart(self) -> OldSimpleStruct {
        self
    }
}
impl support::IntoDart for OpaqueNested {
    fn into_dart(self) -> support::DartAbi {
        vec![self.first.into_dart(), self.second.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OpaqueNested {}
impl rust2dart::IntoIntoDart<OpaqueNested> for OpaqueNested {
    fn into_into_dart(self) -> OpaqueNested {
        self
    }
}
impl support::IntoDart for OptVecs {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OptVecs {}
impl rust2dart::IntoIntoDart<OptVecs> for OptVecs {
    fn into_into_dart(self) -> OptVecs {
        self
    }
}
impl support::IntoDart for Point {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Point {}
impl rust2dart::IntoIntoDart<Point> for Point {
    fn into_into_dart(self) -> Point {
        self
    }
}
impl support::IntoDart for mirror_RawStringEnumMirrored {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            RawStringEnumMirrored::Raw(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            RawStringEnumMirrored::Nested(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            RawStringEnumMirrored::ListOfNested(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_RawStringEnumMirrored {}
impl rust2dart::IntoIntoDart<mirror_RawStringEnumMirrored> for RawStringEnumMirrored {
    fn into_into_dart(self) -> mirror_RawStringEnumMirrored {
        mirror_RawStringEnumMirrored
    }
}
impl support::IntoDart for RawStringItemStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RawStringItemStruct {}
impl rust2dart::IntoIntoDart<RawStringItemStruct> for RawStringItemStruct {
    fn into_into_dart(self) -> RawStringItemStruct {
        self
    }
}
impl support::IntoDart for mirror_RawStringMirrored {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.value.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_RawStringMirrored {}
impl rust2dart::IntoIntoDart<mirror_RawStringMirrored> for RawStringMirrored {
    fn into_into_dart(self) -> mirror_RawStringMirrored {
        mirror_RawStringMirrored
    }
}
impl support::IntoDart for mirror_Sequences {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Sequences {}
impl rust2dart::IntoIntoDart<mirror_Sequences> for Sequences {
    fn into_into_dart(self) -> mirror_Sequences {
        mirror_Sequences
    }
}
impl support::IntoDart for Speed {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::GPS(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Speed {}
impl rust2dart::IntoIntoDart<Speed> for Speed {
    fn into_into_dart(self) -> Speed {
        self
    }
}
impl support::IntoDart for StructWithEnum {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithEnum {}
impl rust2dart::IntoIntoDart<StructWithEnum> for StructWithEnum {
    fn into_into_dart(self) -> StructWithEnum {
        self
    }
}
impl support::IntoDart for StructWithOneFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithOneFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithOneFieldTwinNormal> for StructWithOneFieldTwinNormal {
    fn into_into_dart(self) -> StructWithOneFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithOneFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithOneFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithOneFieldTwinSync> for StructWithOneFieldTwinSync {
    fn into_into_dart(self) -> StructWithOneFieldTwinSync {
        self
    }
}
impl support::IntoDart for StructWithTwoFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithTwoFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithTwoFieldTwinNormal> for StructWithTwoFieldTwinNormal {
    fn into_into_dart(self) -> StructWithTwoFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithTwoFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithTwoFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithTwoFieldTwinSync> for StructWithTwoFieldTwinSync {
    fn into_into_dart(self) -> StructWithTwoFieldTwinSync {
        self
    }
}
impl support::IntoDart for StructWithZeroFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithZeroFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithZeroFieldTwinNormal> for StructWithZeroFieldTwinNormal {
    fn into_into_dart(self) -> StructWithZeroFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithZeroFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithZeroFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithZeroFieldTwinSync> for StructWithZeroFieldTwinSync {
    fn into_into_dart(self) -> StructWithZeroFieldTwinSync {
        self
    }
}
impl support::IntoDart for SumWith {
    fn into_dart(self) -> support::DartAbi {
        vec![self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SumWith {}
impl rust2dart::IntoIntoDart<SumWith> for SumWith {
    fn into_into_dart(self) -> SumWith {
        self
    }
}
impl support::IntoDart for TestChrono {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.dt.into_dart(),
            self.dt2.into_dart(),
            self.du.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TestChrono {}
impl rust2dart::IntoIntoDart<TestChrono> for TestChrono {
    fn into_into_dart(self) -> TestChrono {
        self
    }
}
impl support::IntoDart for TestId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TestId {}
impl rust2dart::IntoIntoDart<TestId> for TestId {
    fn into_into_dart(self) -> TestId {
        self
    }
}
impl support::IntoDart for TestModel {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TestModel {}
impl rust2dart::IntoIntoDart<TestModel> for TestModel {
    fn into_into_dart(self) -> TestModel {
        self
    }
}
impl support::IntoDart for TupleStructWithOneFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithOneFieldTwinNormal {}
impl rust2dart::IntoIntoDart<TupleStructWithOneFieldTwinNormal>
    for TupleStructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> TupleStructWithOneFieldTwinNormal {
        self
    }
}
impl support::IntoDart for TupleStructWithOneFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithOneFieldTwinSync {}
impl rust2dart::IntoIntoDart<TupleStructWithOneFieldTwinSync> for TupleStructWithOneFieldTwinSync {
    fn into_into_dart(self) -> TupleStructWithOneFieldTwinSync {
        self
    }
}
impl support::IntoDart for TupleStructWithTwoFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithTwoFieldTwinNormal {}
impl rust2dart::IntoIntoDart<TupleStructWithTwoFieldTwinNormal>
    for TupleStructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> TupleStructWithTwoFieldTwinNormal {
        self
    }
}
impl support::IntoDart for TupleStructWithTwoFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithTwoFieldTwinSync {}
impl rust2dart::IntoIntoDart<TupleStructWithTwoFieldTwinSync> for TupleStructWithTwoFieldTwinSync {
    fn into_into_dart(self) -> TupleStructWithTwoFieldTwinSync {
        self
    }
}
impl support::IntoDart for UserId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UserId {}
impl rust2dart::IntoIntoDart<UserId> for UserId {
    fn into_into_dart(self) -> UserId {
        self
    }
}
impl support::IntoDart for Weekdays {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Weekdays {}
impl rust2dart::IntoIntoDart<Weekdays> for Weekdays {
    fn into_into_dart(self) -> Weekdays {
        self
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
