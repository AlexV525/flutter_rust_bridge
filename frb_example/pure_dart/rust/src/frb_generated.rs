// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 1.82.4.

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: imports

use crate::api::pseudo_manual::rust_auto_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync::*;
use crate::api::rust_auto_opaque::*;
use crate::api::rust_opaque::*;
use crate::api::rust_opaque_sync::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: executor

#[cfg(not(target_family = "wasm"))]
flutter_rust_bridge::for_generated::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER:
    flutter_rust_bridge::DefaultHandler<flutter_rust_bridge::for_generated::SimpleThreadPool>
    = flutter_rust_bridge::DefaultHandler::new_simple(Default::default());
}

#[cfg(target_family = "wasm")]
thread_local! {
    pub static THREAD_POOL: flutter_rust_bridge::for_generated::SimpleThreadPool = Default::default();
}

#[cfg(target_family = "wasm")]
flutter_rust_bridge::for_generated::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER:
    flutter_rust_bridge::DefaultHandler<&'static std::thread::LocalKey<flutter_rust_bridge::for_generated::SimpleThreadPool>>
    = flutter_rust_bridge::DefaultHandler::new_simple(&THREAD_POOL);
}

// Section: wire_funcs

fn wire_boxed_blob_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<[u8; 1600]>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "boxed_blob_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::boxed_blob_twin_normal(api_blob),
                ))
            }
        },
    )
}
fn wire_func_test_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::array::TestIdTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_test_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::func_test_id_twin_normal(api_id),
                ))
            }
        },
    )
}
fn wire_get_array_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::get_array_twin_normal(),
                ))
            }
        },
    )
}
fn wire_get_complex_array_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_complex_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::get_complex_array_twin_normal(),
                ))
            }
        },
    )
}
fn wire_last_number_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    array: impl CstDecode<[f64; 16]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "last_number_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_array = array.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::last_number_twin_normal(api_array),
                ))
            }
        },
    )
}
fn wire_nested_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[crate::api::array::TestIdTwinNormal; 4]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "nested_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::nested_id_twin_normal(api_id),
                ))
            }
        },
    )
}
fn wire_new_msgid_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 32]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msgid_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::new_msgid_twin_normal(api_id),
                ))
            }
        },
    )
}
fn wire_return_boxed_feed_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 8]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_feed_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::return_boxed_feed_id_twin_normal(api_id),
                ))
            }
        },
    )
}
fn wire_return_boxed_raw_feed_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::array::FeedIdTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_raw_feed_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::return_boxed_raw_feed_id_twin_normal(api_id),
                ))
            }
        },
    )
}
fn wire_use_boxed_blob_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<crate::api::array::BlobTwinNormal>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_boxed_blob_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::use_boxed_blob_twin_normal(api_blob),
                ))
            }
        },
    )
}
fn wire_use_msgid_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::array::MessageIdTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_msgid_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::array::use_msgid_twin_normal(api_id),
                ))
            }
        },
    )
}
fn wire_func_async_simple_add_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<i32> + core::panic::UnwindSafe,
    b: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_async_simple_add",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::async_misc::func_async_simple_add(api_a, api_b).await,
                ))
            }
        },
    )
}
fn wire_func_async_void_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_async_void",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::async_misc::func_async_void().await,
                ))
            }
        },
    )
}
fn wire_handle_customized_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<crate::api::attribute::CustomizedTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_customized_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_val = val.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::attribute::handle_customized_struct_twin_normal(api_val),
                ))
            }
        },
    )
}
fn wire_next_user_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    user_id: impl CstDecode<crate::api::attribute::UserIdTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "next_user_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_user_id = user_id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::attribute::next_user_id_twin_normal(api_user_id),
                ))
            }
        },
    )
}
fn wire_benchmark_input_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bytes: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_input_bytes_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::benchmark_api::benchmark_input_bytes_twin_normal(api_bytes),
                ))
            }
        },
    )
}
fn wire_benchmark_output_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_output_bytes_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_size = size.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::benchmark_api::benchmark_output_bytes_twin_normal(api_size),
                ))
            }
        },
    )
}
fn wire_benchmark_void_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_void_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::benchmark_api::benchmark_void_twin_normal(),
                ))
            }
        },
    )
}
fn wire_datetime_local_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_local_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::datetime_local_twin_normal(api_d),
                ))
            }
        },
    )
}
fn wire_datetime_utc_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Utc>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_utc_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::datetime_utc_twin_normal(api_d),
                ))
            }
        },
    )
}
fn wire_duration_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::Duration> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "duration_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::duration_twin_normal(api_d),
                ))
            }
        },
    )
}
fn wire_handle_durations_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    durations: impl CstDecode<Vec<chrono::Duration>> + core::panic::UnwindSafe,
    since: impl CstDecode<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_durations_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_durations = durations.cst_decode();
            let api_since = since.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::handle_durations_twin_normal(api_durations, api_since),
                ))
            }
        },
    )
}
fn wire_handle_timestamps_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    timestamps: impl CstDecode<Vec<chrono::NaiveDateTime>> + core::panic::UnwindSafe,
    epoch: impl CstDecode<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_timestamps_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_timestamps = timestamps.cst_decode();
            let api_epoch = epoch.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::handle_timestamps_twin_normal(
                        api_timestamps,
                        api_epoch,
                    ),
                ))
            }
        },
    )
}
fn wire_how_long_does_it_take_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    mine: impl CstDecode<crate::api::chrono_type::FeatureChronoTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "how_long_does_it_take_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_mine = mine.cst_decode();
            move |context| {
                transform_result_dco(crate::api::chrono_type::how_long_does_it_take_twin_normal(
                    api_mine,
                ))
            }
        },
    )
}
fn wire_naivedatetime_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "naivedatetime_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::naivedatetime_twin_normal(api_d),
                ))
            }
        },
    )
}
fn wire_optional_empty_datetime_utc_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<Option<chrono::DateTime<chrono::Utc>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "optional_empty_datetime_utc_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::optional_empty_datetime_utc_twin_normal(api_d),
                ))
            }
        },
    )
}
fn wire_test_chrono_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_chrono_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::test_chrono_twin_normal(),
                ))
            }
        },
    )
}
fn wire_test_precise_chrono_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_precise_chrono_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::chrono_type::test_precise_chrono_twin_normal(),
                ))
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::comment::StructWithCommentsTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "StructWithCommentsTwinNormal_instance_method_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::comment::StructWithCommentsTwinNormal::instance_method_twin_normal(
                        &api_that,
                    ),
                ))
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "StructWithCommentsTwinNormal_static_method_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::comment::StructWithCommentsTwinNormal::static_method_twin_normal(),
                ))
            }
        },
    )
}
fn wire_function_with_comments_slash_star_star_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "function_with_comments_slash_star_star_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::comment::function_with_comments_slash_star_star_twin_normal(),
                ))
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::comment::function_with_comments_triple_slash_multi_line_twin_normal(
                    ),
                ))
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::comment::function_with_comments_triple_slash_single_line_twin_normal())) } })
}
fn wire_return_dart_dynamic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_dart_dynamic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_dynamic::return_dart_dynamic_twin_normal(),
                ))
            }
        },
    )
}
fn wire_rust_call_dart_simple_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_call_dart_simple",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_callback = {
                use flutter_rust_bridge::IntoDart;
                let dart_opaque: flutter_rust_bridge::DartOpaque = callback.cst_decode();

                move || {
                    FLUTTER_RUST_BRIDGE_HANDLER
                        .dart_fn_invoke(vec![dart_opaque.clone().into_into_dart().into_dart()])
                }
            };
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_fn::rust_call_dart_simple(api_callback).await,
                ))
            }
        },
    )
}
fn wire_async_accept_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "async_accept_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::async_accept_dart_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_clone_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clone_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::clone_dart_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_create_enum_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_enum_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::create_enum_dart_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_create_nested_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque1: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
    opaque2: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_nested_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque1 = opaque1.cst_decode();
            let api_opaque2 = opaque2.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::create_nested_dart_opaque_twin_normal(
                        api_opaque1,
                        api_opaque2,
                    ),
                ))
            }
        },
    )
}
fn wire_drop_static_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "drop_static_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::drop_static_dart_opaque_twin_normal(api_id),
                ))
            }
        },
    )
}
fn wire_get_enum_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::dart_opaque::EnumDartOpaqueTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_enum_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::get_enum_dart_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_get_nested_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_nested_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::get_nested_dart_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_loop_back_array_get_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_get_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::loop_back_array_get_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_loop_back_array_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::loop_back_array_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_loop_back_option_get_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_get_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::loop_back_option_get_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_loop_back_option_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::loop_back_option_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_loop_back_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::loop_back_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_loop_back_vec_get_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_get_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::loop_back_vec_get_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_loop_back_vec_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::loop_back_vec_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_panic_unwrap_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "panic_unwrap_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::panic_unwrap_dart_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_set_static_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32> + core::panic::UnwindSafe,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_static_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::dart_opaque::set_static_dart_opaque_twin_normal(api_id, api_opaque),
                ))
            }
        },
    )
}
fn wire_sync_accept_dart_opaque_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_accept_dart_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::dart_opaque_sync::sync_accept_dart_opaque_twin_normal(api_opaque),
            ))
        },
    )
}
fn wire_sync_loopback_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_loopback_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::dart_opaque_sync::sync_loopback_twin_normal(api_opaque),
            ))
        },
    )
}
fn wire_sync_option_dart_opaque_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_option_dart_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(
                crate::api::dart_opaque_sync::sync_option_dart_opaque_twin_normal(api_opaque),
            )
        },
    )
}
fn wire_sync_option_loopback_twin_normal_impl(
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_option_loopback_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::dart_opaque_sync::sync_option_loopback_twin_normal(api_opaque),
            ))
        },
    )
}
fn wire_unwrap_dart_opaque_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_dart_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::dart_opaque_sync::unwrap_dart_opaque_twin_normal(api_opaque),
            ))
        },
    )
}
fn wire_func_enum_simple_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumSimpleTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_simple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::func_enum_simple_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumWithItemMixedTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_with_item_mixed_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::func_enum_with_item_mixed_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_func_enum_with_item_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumWithItemStructTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_with_item_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::func_enum_with_item_struct_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumWithItemTupleTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_with_item_tuple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::func_enum_with_item_tuple_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_handle_enum_parameter_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekday: impl CstDecode<crate::api::misc_example::WeekdaysTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_enum_parameter_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_weekday = weekday.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::handle_enum_parameter_twin_normal(api_weekday),
                ))
            }
        },
    )
}
fn wire_handle_enum_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<crate::api::enumeration::KitchenSinkTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_enum_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_val = val.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::handle_enum_struct_twin_normal(api_val),
                ))
            }
        },
    )
}
fn wire_handle_return_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_return_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::handle_return_enum_twin_normal(api_input),
                ))
            }
        },
    )
}
fn wire_multiply_by_ten_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    measure: impl CstDecode<crate::api::enumeration::MeasureTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "multiply_by_ten_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_measure = measure.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::multiply_by_ten_twin_normal(api_measure),
                ))
            }
        },
    )
}
fn wire_print_note_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    note: impl CstDecode<crate::api::enumeration::NoteTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "print_note_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_note = note.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::enumeration::print_note_twin_normal(api_note),
                ))
            }
        },
    )
}
fn wire_EventTwinNormal_as_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::event_listener::EventTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "EventTwinNormal_as_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::event_listener::EventTwinNormal::as_string_twin_normal(&api_that),
                ))
            }
        },
    )
}
fn wire_close_event_listener_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "close_event_listener_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::event_listener::close_event_listener_twin_normal(),
                ))
            }
        },
    )
}
fn wire_create_event_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    address: impl CstDecode<String> + core::panic::UnwindSafe,
    payload: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_event_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_address = address.cst_decode();
            let api_payload = payload.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::event_listener::create_event_twin_normal(api_address, api_payload),
                ))
            }
        },
    )
}
fn wire_register_event_listener_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_event_listener_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(
                    crate::api::event_listener::register_event_listener_twin_normal(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::event_listener::EventTwinNormal>(),
                    ),
                )
            }
        },
    )
}
fn wire_CustomStructTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    message: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CustomStructTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_message = message.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::exception::CustomStructTwinNormal::new_twin_normal(api_message),
                ))
            }
        },
    )
}
fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::CustomStructTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {  transform_result_dco(crate::api::exception::CustomStructTwinNormal::nonstatic_return_custom_struct_error_twin_normal(&api_that)) } })
}
fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::CustomStructTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {  transform_result_dco(crate::api::exception::CustomStructTwinNormal::nonstatic_return_custom_struct_ok_twin_normal(&api_that)) } })
}
fn wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_static_return_custom_struct_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(crate::api::exception::CustomStructTwinNormal::static_return_custom_struct_error_twin_normal()) } })
}
fn wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(crate::api::exception::CustomStructTwinNormal::static_return_custom_struct_ok_twin_normal()) } })
}
fn wire_SomeStructTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SomeStructTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::exception::SomeStructTwinNormal::new_twin_normal(api_value),
                ))
            }
        },
    )
}
fn wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::SomeStructTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {  transform_result_dco(crate::api::exception::SomeStructTwinNormal::non_static_return_err_custom_error_twin_normal(&api_that)) } })
}
fn wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::SomeStructTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {  transform_result_dco(crate::api::exception::SomeStructTwinNormal::non_static_return_ok_custom_error_twin_normal(&api_that)) } })
}
fn wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_static_return_err_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(crate::api::exception::SomeStructTwinNormal::static_return_err_custom_error_twin_normal()) } })
}
fn wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_static_return_ok_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(crate::api::exception::SomeStructTwinNormal::static_return_ok_custom_error_twin_normal()) } })
}
fn wire_custom_enum_error_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::custom_enum_error_panic_twin_normal())
            }
        },
    )
}
fn wire_custom_enum_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    crate::api::exception::custom_enum_error_return_error_twin_normal(),
                )
            }
        },
    )
}
fn wire_custom_enum_error_return_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_return_ok_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(
                    crate::api::exception::custom_enum_error_return_ok_twin_normal(api_arg),
                )
            }
        },
    )
}
fn wire_custom_nested_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::exception::CustomNestedErrorOuterTwinNormal>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_nested_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(
                    crate::api::exception::custom_nested_error_return_error_twin_normal(api_arg),
                )
            }
        },
    )
}
fn wire_custom_struct_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::exception::CustomStructErrorTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_struct_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(
                    crate::api::exception::custom_struct_error_return_error_twin_normal(api_arg),
                )
            }
        },
    )
}
fn wire_func_return_error_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::func_return_error_twin_normal())
            }
        },
    )
}
fn wire_func_type_fallible_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_type_fallible_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::func_type_fallible_panic_twin_normal())
            }
        },
    )
}
fn wire_func_type_infallible_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_type_infallible_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::exception::func_type_infallible_panic_twin_normal(),
                ))
            }
        },
    )
}
fn wire_panic_with_custom_result_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "panic_with_custom_result_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::panic_with_custom_result_twin_normal())
            }
        },
    )
}
fn wire_return_custom_nested_error_1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_nested_error_1_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    crate::api::exception::return_custom_nested_error_1_twin_normal(),
                )
            }
        },
    )
}
fn wire_return_custom_nested_error_1_variant1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_nested_error_1_variant1_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    crate::api::exception::return_custom_nested_error_1_variant1_twin_normal(),
                )
            }
        },
    )
}
fn wire_return_custom_nested_error_2_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_nested_error_2_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    crate::api::exception::return_custom_nested_error_2_twin_normal(),
                )
            }
        },
    )
}
fn wire_return_custom_struct_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_struct_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    crate::api::exception::return_custom_struct_error_twin_normal(),
                )
            }
        },
    )
}
fn wire_return_custom_struct_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_struct_ok_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::return_custom_struct_ok_twin_normal())
            }
        },
    )
}
fn wire_return_err_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_err_custom_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::return_err_custom_error_twin_normal())
            }
        },
    )
}
fn wire_return_error_variant_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    variant: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_error_variant_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_variant = variant.cst_decode();
            move |context| {
                transform_result_dco(crate::api::exception::return_error_variant_twin_normal(
                    api_variant,
                ))
            }
        },
    )
}
fn wire_return_ok_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_ok_custom_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::return_ok_custom_error_twin_normal())
            }
        },
    )
}
fn wire_stream_sink_throw_anyhow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "stream_sink_throw_anyhow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::exception::stream_sink_throw_anyhow_twin_normal(
                    context.rust2dart_context().stream_sink::<_, String>(),
                ))
            }
        },
    )
}
fn wire_throw_anyhow_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "throw_anyhow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| transform_result_dco(crate::api::exception::throw_anyhow_twin_normal())
        },
    )
}
fn wire_call_new_module_system_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "call_new_module_system_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::external_type_in_crate::call_new_module_system_twin_normal(),
                ))
            }
        },
    )
}
fn wire_call_old_module_system_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "call_old_module_system_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::external_type_in_crate::call_old_module_system_twin_normal(),
                ))
            }
        },
    )
}
fn wire_use_imported_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_enum: impl CstDecode<crate::auxiliary::sample_types::MyEnum> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_imported_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_enum = my_enum.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::external_type_in_crate::use_imported_enum_twin_normal(api_my_enum),
                ))
            }
        },
    )
}
fn wire_use_imported_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_struct: impl CstDecode<crate::auxiliary::sample_types::MyStruct> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_imported_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_struct = my_struct.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::external_type_in_crate::use_imported_struct_twin_normal(
                        api_my_struct,
                    ),
                ))
            }
        },
    )
}
fn wire_another_macro_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "another_macro_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::inside_macro::another_macro_struct_twin_normal(),
                ))
            }
        },
    )
}
fn wire_func_macro_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::inside_macro::MacroStruct> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_macro_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::inside_macro::func_macro_struct_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String> + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ConcatenateWithTwinNormal_concatenate_static_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::method::ConcatenateWithTwinNormal::concatenate_static_twin_normal(
                        api_a, api_b,
                    ),
                ))
            }
        },
    )
}
fn wire_ConcatenateWithTwinNormal_concatenate_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::ConcatenateWithTwinNormal> + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ConcatenateWithTwinNormal_concatenate_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::method::ConcatenateWithTwinNormal::concatenate_twin_normal(
                        &api_that, api_b,
                    ),
                ))
            }
        },
    )
}
fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_static_stream_sink_single_arg_twin_normal(context.rust2dart_context().stream_sink::<_,u32>()))) } })
}
fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_static_stream_sink_twin_normal(api_key, api_max, context.rust2dart_context().stream_sink::<_,crate::api::method::Log2TwinNormal>()))) } })
}
fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::ConcatenateWithTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_stream_sink_at_1_twin_normal(&api_that, context.rust2dart_context().stream_sink::<_,u32>()))) } })
}
fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::ConcatenateWithTwinNormal> + core::panic::UnwindSafe,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode();let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_stream_sink_twin_normal(&api_that, api_key, api_max, context.rust2dart_context().stream_sink::<_,crate::api::method::Log2TwinNormal>()))) } })
}
fn wire_ConcatenateWithTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ConcatenateWithTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::method::ConcatenateWithTwinNormal::new_twin_normal(api_a),
                ))
            }
        },
    )
}
fn wire_SumWithTwinNormal_sum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::SumWithTwinNormal> + core::panic::UnwindSafe,
    y: impl CstDecode<u32> + core::panic::UnwindSafe,
    z: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SumWithTwinNormal_sum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_y = y.cst_decode();
            let api_z = z.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::method::SumWithTwinNormal::sum_twin_normal(&api_that, api_y, api_z),
                ))
            }
        },
    )
}
fn wire_get_sum_array_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32> + core::panic::UnwindSafe,
    b: impl CstDecode<u32> + core::panic::UnwindSafe,
    c: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            let api_c = c.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::method::get_sum_array_twin_normal(api_a, api_b, api_c),
                ))
            }
        },
    )
}
fn wire_get_sum_struct_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::method::get_sum_struct_twin_normal(),
                ))
            }
        },
    )
}
fn wire_app_settings_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_stream_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::app_settings_stream_twin_normal(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, mirror_ApplicationSettings>(),
                    ),
                ))
            }
        },
    )
}
fn wire_app_settings_vec_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_vec_stream_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::app_settings_vec_stream_twin_normal(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, Vec<mirror_ApplicationSettings>>(),
                    ),
                ))
            }
        },
    )
}
fn wire_first_number_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nums: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::Numbers> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_number_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_nums = nums.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::first_number_twin_normal(api_nums),
                ))
            }
        },
    )
}
fn wire_first_sequence_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seqs: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::Sequences>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_sequence_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_seqs = seqs.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::first_sequence_twin_normal(api_seqs),
                ))
            }
        },
    )
}
fn wire_get_app_settings_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_app_settings_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::get_app_settings_twin_normal(),
                ))
            }
        },
    )
}
fn wire_get_fallible_app_settings_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_fallible_app_settings_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::mirror::get_fallible_app_settings_twin_normal())
            }
        },
    )
}
fn wire_get_message_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_message_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::get_message_twin_normal(),
                ))
            }
        },
    )
}
fn wire_is_app_embedded_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    app_settings: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_app_embedded_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_app_settings = app_settings.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::is_app_embedded_twin_normal(api_app_settings),
                ))
            }
        },
    )
}
fn wire_mirror_struct_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mirror_struct_stream_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::mirror_struct_stream_twin_normal(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::mirror::MirrorStructTwinNormal>(),
                    ),
                ))
            }
        },
    )
}
fn wire_mirror_tuple_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_tuple_stream_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::mirror::mirror_tuple_stream_twin_normal(context.rust2dart_context().stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>()))) } })
}
fn wire_repeat_number_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    num: impl CstDecode<i32> + core::panic::UnwindSafe,
    times: impl CstDecode<usize> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_number_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_num = num.cst_decode();
            let api_times = times.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::repeat_number_twin_normal(api_num, api_times),
                ))
            }
        },
    )
}
fn wire_repeat_sequence_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seq: impl CstDecode<i32> + core::panic::UnwindSafe,
    times: impl CstDecode<usize> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_sequence_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_seq = seq.cst_decode();
            let api_times = times.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::repeat_sequence_twin_normal(api_seq, api_times),
                ))
            }
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_contains_mirrored_sub_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::test_contains_mirrored_sub_struct_twin_normal(),
                ))
            }
        },
    )
}
fn wire_test_fallible_of_raw_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_fallible_of_raw_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    crate::api::mirror::test_fallible_of_raw_string_mirrored_twin_normal(),
                )
            }
        },
    )
}
fn wire_test_list_of_nested_enums_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_list_of_nested_enums_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::test_list_of_nested_enums_mirrored_twin_normal(),
                ))
            }
        },
    )
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_list_of_raw_nested_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::test_list_of_raw_nested_string_mirrored_twin_normal(),
                ))
            }
        },
    )
}
fn wire_test_nested_raw_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_nested_raw_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::test_nested_raw_string_mirrored_twin_normal(),
                ))
            }
        },
    )
}
fn wire_test_raw_string_enum_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nested: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_enum_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_nested = nested.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::test_raw_string_enum_mirrored_twin_normal(api_nested),
                ))
            }
        },
    )
}
fn wire_test_raw_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::mirror::test_raw_string_mirrored_twin_normal(),
                ))
            }
        },
    )
}
fn wire_handle_big_buffers_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_big_buffers_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::handle_big_buffers_twin_normal(),
                ))
            }
        },
    )
}
fn wire_handle_complex_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<crate::api::misc_example::MyTreeNodeTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_complex_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::handle_complex_struct_twin_normal(api_s),
                ))
            }
        },
    )
}
fn wire_handle_nested_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<crate::api::misc_example::MyNestedStructTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_nested_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::handle_nested_struct_twin_normal(api_s),
                ))
            }
        },
    )
}
fn wire_handle_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::handle_string_twin_normal(api_s),
                ))
            }
        },
    )
}
fn wire_handle_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::auxiliary::sample_types::MySize> + core::panic::UnwindSafe,
    boxed: impl CstDecode<Box<crate::auxiliary::sample_types::MySize>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_boxed = boxed.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::handle_struct_twin_normal(api_arg, api_boxed),
                ))
            }
        },
    )
}
fn wire_handle_vec_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    v: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_u8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_v = v.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::handle_vec_u8_twin_normal(api_v),
                ))
            }
        },
    )
}
fn wire_list_of_primitive_enums_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekdays: impl CstDecode<Vec<crate::api::misc_example::WeekdaysTwinNormal>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_of_primitive_enums_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_weekdays = weekdays.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::list_of_primitive_enums_twin_normal(api_weekdays),
                ))
            }
        },
    )
}
fn wire_test_abc_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    abc: impl CstDecode<crate::api::misc_example::AbcTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_abc_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_abc = abc.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::test_abc_enum_twin_normal(api_abc),
                ))
            }
        },
    )
}
fn wire_test_struct_with_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    se: impl CstDecode<crate::api::misc_example::StructWithEnumTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_struct_with_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_se = se.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_example::test_struct_with_enum_twin_normal(api_se),
                ))
            }
        },
    )
}
fn wire_empty_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    empty: impl CstDecode<crate::api::misc_type::EmptyTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "empty_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_empty = empty.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_type::empty_struct_twin_normal(api_empty),
                ))
            }
        },
    )
}
fn wire_func_return_unit_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_unit_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_type::func_return_unit_twin_normal(),
                ))
            }
        },
    )
}
fn wire_func_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_type::func_string_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_handle_list_of_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    l: impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_list_of_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_l = l.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_type::handle_list_of_struct_twin_normal(api_l),
                ))
            }
        },
    )
}
fn wire_handle_string_list_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    names: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_list_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_names = names.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::misc_type::handle_string_list_twin_normal(api_names),
                ))
            }
        },
    )
}
fn wire_handle_newtype_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::newtype_pattern::NewTypeIntTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_newtype_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::newtype_pattern::handle_newtype_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_handle_increment_boxed_optional_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<Option<Box<f64>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_increment_boxed_optional_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::optional::handle_increment_boxed_optional_twin_normal(api_opt),
                ))
            }
        },
    )
}
fn wire_handle_option_box_arguments_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    i8box: impl CstDecode<Option<Box<i8>>> + core::panic::UnwindSafe,
    u8box: impl CstDecode<Option<Box<u8>>> + core::panic::UnwindSafe,
    i32box: impl CstDecode<Option<Box<i32>>> + core::panic::UnwindSafe,
    i64box: impl CstDecode<Option<Box<i64>>> + core::panic::UnwindSafe,
    f64box: impl CstDecode<Option<Box<f64>>> + core::panic::UnwindSafe,
    boolbox: impl CstDecode<Option<Box<bool>>> + core::panic::UnwindSafe,
    structbox: impl CstDecode<Option<Box<crate::api::optional::ExoticOptionalsTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_option_box_arguments_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_i8box = i8box.cst_decode();
            let api_u8box = u8box.cst_decode();
            let api_i32box = i32box.cst_decode();
            let api_i64box = i64box.cst_decode();
            let api_f64box = f64box.cst_decode();
            let api_boolbox = boolbox.cst_decode();
            let api_structbox = structbox.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::optional::handle_option_box_arguments_twin_normal(
                        api_i8box,
                        api_u8box,
                        api_i32box,
                        api_i64box,
                        api_f64box,
                        api_boolbox,
                        api_structbox,
                    ),
                ))
            }
        },
    )
}
fn wire_handle_optional_increment_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<Option<crate::api::optional::ExoticOptionalsTwinNormal>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_increment_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::optional::handle_optional_increment_twin_normal(api_opt),
                ))
            }
        },
    )
}
fn wire_handle_optional_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    left: impl CstDecode<f64> + core::panic::UnwindSafe,
    right: impl CstDecode<f64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_left = left.cst_decode();
            let api_right = right.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::optional::handle_optional_return_twin_normal(api_left, api_right),
                ))
            }
        },
    )
}
fn wire_handle_optional_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    document: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_document = document.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::optional::handle_optional_struct_twin_normal(api_document),
                ))
            }
        },
    )
}
fn wire_handle_vec_of_opts_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<crate::api::optional::OptVecsTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_of_opts_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::optional::handle_vec_of_opts_twin_normal(api_opt),
                ))
            }
        },
    )
}
fn wire_primitive_optional_types_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<Option<i32>> + core::panic::UnwindSafe,
    my_i64: impl CstDecode<Option<i64>> + core::panic::UnwindSafe,
    my_f64: impl CstDecode<Option<f64>> + core::panic::UnwindSafe,
    my_bool: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_optional_types_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_i32 = my_i32.cst_decode();
            let api_my_i64 = my_i64.cst_decode();
            let api_my_f64 = my_f64.cst_decode();
            let api_my_bool = my_bool.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::optional_primitive_misc::primitive_optional_types_twin_normal(
                        api_my_i32,
                        api_my_i64,
                        api_my_f64,
                        api_my_bool,
                    ),
                ))
            }
        },
    )
}
fn wire_handle_vec_of_primitive_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    n: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_of_primitive_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_n = n.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::primitive_list_misc::handle_vec_of_primitive_twin_normal(api_n),
                ))
            }
        },
    )
}
fn wire_primitive_types_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<i32> + core::panic::UnwindSafe,
    my_i64: impl CstDecode<i64> + core::panic::UnwindSafe,
    my_f64: impl CstDecode<f64> + core::panic::UnwindSafe,
    my_bool: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_types_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_i32 = my_i32.cst_decode();
            let api_my_i64 = my_i64.cst_decode();
            let api_my_f64 = my_f64.cst_decode();
            let api_my_bool = my_bool.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::primitive_misc::primitive_types_twin_normal(
                        api_my_i32,
                        api_my_i64,
                        api_my_f64,
                        api_my_bool,
                    ),
                ))
            }
        },
    )
}
fn wire_primitive_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_u32: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_u32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_u32 = my_u32.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::primitive_misc::primitive_u32_twin_normal(api_my_u32),
                ))
            }
        },
    )
}
fn wire_boxed_blob_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<[u8; 1600]>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "boxed_blob_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_rust_async::boxed_blob_twin_rust_async(
                        api_blob,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_func_test_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_test_id_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_rust_async::func_test_id_twin_rust_async(
                        api_id,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_get_array_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_array_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_rust_async::get_array_twin_rust_async()
                        .await,
                ))
            }
        },
    )
}
fn wire_get_complex_array_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_complex_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::get_complex_array_twin_rust_async().await)) } })
}
fn wire_last_number_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    array: impl CstDecode<[f64; 16]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "last_number_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_array = array.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_rust_async::last_number_twin_rust_async(
                        api_array,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_nested_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4]>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "nested_id_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_rust_async::nested_id_twin_rust_async(
                        api_id,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_new_msgid_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 32]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msgid_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_rust_async::new_msgid_twin_rust_async(
                        api_id,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_return_boxed_feed_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 8]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_feed_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::return_boxed_feed_id_twin_rust_async(api_id).await)) } })
}
fn wire_return_boxed_raw_feed_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_raw_feed_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::return_boxed_raw_feed_id_twin_rust_async(api_id).await)) } })
}
fn wire_use_boxed_blob_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_boxed_blob_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_blob = blob.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::use_boxed_blob_twin_rust_async(api_blob).await)) } })
}
fn wire_use_msgid_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_msgid_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_rust_async::use_msgid_twin_rust_async(
                        api_id,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_boxed_blob_twin_sync_impl(
    blob: impl CstDecode<Box<[u8; 1600]>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "boxed_blob_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_blob = blob.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::boxed_blob_twin_sync(api_blob),
            ))
        },
    )
}
fn wire_func_test_id_twin_sync_impl(
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_test_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::func_test_id_twin_sync(api_id),
            ))
        },
    )
}
fn wire_get_array_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::get_array_twin_sync(),
            ))
        },
    )
}
fn wire_get_complex_array_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_complex_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::get_complex_array_twin_sync(),
            ))
        },
    )
}
fn wire_last_number_twin_sync_impl(
    array: impl CstDecode<[f64; 16]> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "last_number_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_array = array.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::last_number_twin_sync(api_array),
            ))
        },
    )
}
fn wire_nested_id_twin_sync_impl(
    id: impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4]>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "nested_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::nested_id_twin_sync(api_id),
            ))
        },
    )
}
fn wire_new_msgid_twin_sync_impl(
    id: impl CstDecode<[u8; 32]> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msgid_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::new_msgid_twin_sync(api_id),
            ))
        },
    )
}
fn wire_return_boxed_feed_id_twin_sync_impl(
    id: impl CstDecode<[u8; 8]> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_feed_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::return_boxed_feed_id_twin_sync(api_id),
            ))
        },
    )
}
fn wire_return_boxed_raw_feed_id_twin_sync_impl(
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_raw_feed_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::return_boxed_raw_feed_id_twin_sync(
                    api_id,
                ),
            ))
        },
    )
}
fn wire_use_boxed_blob_twin_sync_impl(
    blob: impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_boxed_blob_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_blob = blob.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::use_boxed_blob_twin_sync(api_blob),
            ))
        },
    )
}
fn wire_use_msgid_twin_sync_impl(
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_msgid_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::array_twin_sync::use_msgid_twin_sync(api_id),
            ))
        },
    )
}
fn wire_handle_customized_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_customized_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_val = val.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_rust_async::handle_customized_struct_twin_rust_async(api_val).await)) } })
}
fn wire_next_user_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    user_id: impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "next_user_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_user_id = user_id.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_rust_async::next_user_id_twin_rust_async(api_user_id).await)) } })
}
fn wire_handle_customized_struct_twin_sync_impl(
    val: impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_customized_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_val = val.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::attribute_twin_sync::handle_customized_struct_twin_sync(
                    api_val,
                ),
            ))
        },
    )
}
fn wire_next_user_id_twin_sync_impl(
    user_id: impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "next_user_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_user_id = user_id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::attribute_twin_sync::next_user_id_twin_sync(api_user_id),
            ))
        },
    )
}
fn wire_benchmark_input_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bytes: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_input_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_bytes = bytes.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_input_bytes_twin_rust_async(api_bytes).await)) } })
}
fn wire_benchmark_output_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_output_bytes_twin_rust_async(api_size).await)) } })
}
fn wire_benchmark_void_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_void_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_void_twin_rust_async().await)) } })
}
fn wire_benchmark_input_bytes_twin_sync_impl(
    bytes: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_input_bytes_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_input_bytes_twin_sync(
                    api_bytes,
                ),
            ))
        },
    )
}
fn wire_benchmark_output_bytes_twin_sync_impl(
    size: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_size = size.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_output_bytes_twin_sync(api_size))) })
}
fn wire_benchmark_void_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_void_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_void_twin_sync(),
            ))
        },
    )
}
fn wire_datetime_local_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "datetime_local_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::datetime_local_twin_rust_async(api_d).await)) } })
}
fn wire_datetime_utc_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Utc>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "datetime_utc_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::datetime_utc_twin_rust_async(api_d).await)) } })
}
fn wire_duration_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::Duration> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "duration_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::duration_twin_rust_async(api_d).await)) } })
}
fn wire_handle_durations_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    durations: impl CstDecode<Vec<chrono::Duration>> + core::panic::UnwindSafe,
    since: impl CstDecode<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_durations_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_durations = durations.cst_decode();let api_since = since.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::handle_durations_twin_rust_async(api_durations, api_since).await)) } })
}
fn wire_handle_timestamps_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    timestamps: impl CstDecode<Vec<chrono::NaiveDateTime>> + core::panic::UnwindSafe,
    epoch: impl CstDecode<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_timestamps_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_timestamps = timestamps.cst_decode();let api_epoch = epoch.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::handle_timestamps_twin_rust_async(api_timestamps, api_epoch).await)) } })
}
fn wire_how_long_does_it_take_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    mine: impl CstDecode<
            crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "how_long_does_it_take_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_mine = mine.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::chrono_type_twin_rust_async::how_long_does_it_take_twin_rust_async(api_mine).await) } })
}
fn wire_naivedatetime_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "naivedatetime_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::naivedatetime_twin_rust_async(api_d).await)) } })
}
fn wire_optional_empty_datetime_utc_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<Option<chrono::DateTime<chrono::Utc>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "optional_empty_datetime_utc_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::optional_empty_datetime_utc_twin_rust_async(api_d).await)) } })
}
fn wire_test_chrono_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_chrono_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::test_chrono_twin_rust_async().await)) } })
}
fn wire_test_precise_chrono_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_precise_chrono_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::test_precise_chrono_twin_rust_async().await)) } })
}
fn wire_datetime_local_twin_sync_impl(
    d: impl CstDecode<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_local_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::datetime_local_twin_sync(api_d),
            ))
        },
    )
}
fn wire_datetime_utc_twin_sync_impl(
    d: impl CstDecode<chrono::DateTime<chrono::Utc>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_utc_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::datetime_utc_twin_sync(api_d),
            ))
        },
    )
}
fn wire_duration_twin_sync_impl(
    d: impl CstDecode<chrono::Duration> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "duration_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::duration_twin_sync(api_d),
            ))
        },
    )
}
fn wire_handle_durations_twin_sync_impl(
    durations: impl CstDecode<Vec<chrono::Duration>> + core::panic::UnwindSafe,
    since: impl CstDecode<chrono::DateTime<chrono::Local>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_durations_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_durations = durations.cst_decode();
            let api_since = since.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::handle_durations_twin_sync(
                    api_durations,
                    api_since,
                ),
            ))
        },
    )
}
fn wire_handle_timestamps_twin_sync_impl(
    timestamps: impl CstDecode<Vec<chrono::NaiveDateTime>> + core::panic::UnwindSafe,
    epoch: impl CstDecode<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_timestamps_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_timestamps = timestamps.cst_decode();
            let api_epoch = epoch.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::handle_timestamps_twin_sync(
                    api_timestamps,
                    api_epoch,
                ),
            ))
        },
    )
}
fn wire_how_long_does_it_take_twin_sync_impl(
    mine: impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "how_long_does_it_take_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_mine = mine.cst_decode();
            transform_result_dco(
                crate::api::pseudo_manual::chrono_type_twin_sync::how_long_does_it_take_twin_sync(
                    api_mine,
                ),
            )
        },
    )
}
fn wire_naivedatetime_twin_sync_impl(
    d: impl CstDecode<chrono::NaiveDateTime> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "naivedatetime_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::naivedatetime_twin_sync(api_d),
            ))
        },
    )
}
fn wire_optional_empty_datetime_utc_twin_sync_impl(
    d: impl CstDecode<Option<chrono::DateTime<chrono::Utc>>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "optional_empty_datetime_utc_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_d = d.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_sync::optional_empty_datetime_utc_twin_sync(api_d))) })
}
fn wire_test_chrono_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_chrono_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::test_chrono_twin_sync(),
            ))
        },
    )
}
fn wire_test_precise_chrono_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_precise_chrono_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::chrono_type_twin_sync::test_precise_chrono_twin_sync(),
            ))
        },
    )
}
fn wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
            crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinRustAsync_instance_method_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync::instance_method_twin_rust_async(&api_that).await)) } })
}
fn wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinRustAsync_static_method_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync::static_method_twin_rust_async().await)) } })
}
fn wire_function_with_comments_slash_star_star_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_slash_star_star_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::function_with_comments_slash_star_star_twin_rust_async().await)) } })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::function_with_comments_triple_slash_multi_line_twin_rust_async().await)) } })
}
fn wire_function_with_comments_triple_slash_single_line_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::function_with_comments_triple_slash_single_line_twin_rust_async().await)) } })
}
fn wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSync_instance_method_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync::instance_method_twin_sync(&api_that))) })
}
fn wire_StructWithCommentsTwinSync_static_method_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSync_static_method_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync::static_method_twin_sync())) })
}
fn wire_function_with_comments_slash_star_star_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_slash_star_star_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_slash_star_star_twin_sync())) })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_triple_slash_multi_line_twin_sync())) })
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_triple_slash_single_line_twin_sync())) })
}
fn wire_return_dart_dynamic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_dart_dynamic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_dynamic_twin_rust_async::return_dart_dynamic_twin_rust_async().await)) } })
}
fn wire_return_dart_dynamic_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_dart_dynamic_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_dynamic_twin_sync::return_dart_dynamic_twin_sync(),
            ))
        },
    )
}
fn wire_async_accept_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "async_accept_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::async_accept_dart_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_clone_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "clone_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::clone_dart_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_create_enum_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_enum_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::create_enum_dart_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_create_nested_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque1: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
    opaque2: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque1 = opaque1.cst_decode();let api_opaque2 = opaque2.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::create_nested_dart_opaque_twin_rust_async(api_opaque1, api_opaque2).await)) } })
}
fn wire_drop_static_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "drop_static_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::drop_static_dart_opaque_twin_rust_async(api_id).await)) } })
}
fn wire_get_enum_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_enum_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::get_enum_dart_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_get_nested_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_nested_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::get_nested_dart_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_loop_back_array_get_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_get_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_array_get_twin_rust_async(api_opaque).await)) } })
}
fn wire_loop_back_array_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_array_twin_rust_async(api_opaque).await)) } })
}
fn wire_loop_back_option_get_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_get_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_option_get_twin_rust_async(api_opaque).await)) } })
}
fn wire_loop_back_option_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_option_twin_rust_async(api_opaque).await)) } })
}
fn wire_loop_back_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_twin_rust_async(api_opaque).await)) } })
}
fn wire_loop_back_vec_get_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_get_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_vec_get_twin_rust_async(api_opaque).await)) } })
}
fn wire_loop_back_vec_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_vec_twin_rust_async(api_opaque).await)) } })
}
fn wire_panic_unwrap_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_unwrap_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::panic_unwrap_dart_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_set_static_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32> + core::panic::UnwindSafe,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_static_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode();let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::set_static_dart_opaque_twin_rust_async(api_id, api_opaque).await)) } })
}
fn wire_async_accept_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "async_accept_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::async_accept_dart_opaque_twin_sync(api_opaque))) })
}
fn wire_clone_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clone_dart_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::clone_dart_opaque_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_create_enum_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_enum_dart_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::create_enum_dart_opaque_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_create_nested_dart_opaque_twin_sync_impl(
    opaque1: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
    opaque2: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque1 = opaque1.cst_decode();let api_opaque2 = opaque2.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::create_nested_dart_opaque_twin_sync(api_opaque1, api_opaque2))) })
}
fn wire_drop_static_dart_opaque_twin_sync_impl(
    id: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "drop_static_dart_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::drop_static_dart_opaque_twin_sync(
                    api_id,
                ),
            ))
        },
    )
}
fn wire_get_enum_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_enum_dart_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::get_enum_dart_opaque_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_get_nested_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_nested_dart_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::get_nested_dart_opaque_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_loop_back_array_get_twin_sync_impl(
    opaque: impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_get_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_array_get_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_loop_back_array_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_array_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_loop_back_option_get_twin_sync_impl(
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_get_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_option_get_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_loop_back_option_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_option_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_loop_back_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_twin_sync(api_opaque),
            ))
        },
    )
}
fn wire_loop_back_vec_get_twin_sync_impl(
    opaque: impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_get_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_vec_get_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_loop_back_vec_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_vec_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_panic_unwrap_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_unwrap_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::panic_unwrap_dart_opaque_twin_sync(api_opaque))) })
}
fn wire_set_static_dart_opaque_twin_sync_impl(
    id: impl CstDecode<i32> + core::panic::UnwindSafe,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_static_dart_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::dart_opaque_twin_sync::set_static_dart_opaque_twin_sync(
                    api_id, api_opaque,
                ),
            ))
        },
    )
}
fn wire_func_enum_simple_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_simple_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_simple_twin_rust_async(api_arg).await)) } })
}
fn wire_func_enum_with_item_mixed_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_mixed_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_with_item_mixed_twin_rust_async(api_arg).await)) } })
}
fn wire_func_enum_with_item_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_with_item_struct_twin_rust_async(api_arg).await)) } })
}
fn wire_func_enum_with_item_tuple_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_tuple_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_with_item_tuple_twin_rust_async(api_arg).await)) } })
}
fn wire_handle_enum_parameter_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekday: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_parameter_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_weekday = weekday.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::handle_enum_parameter_twin_rust_async(api_weekday).await)) } })
}
fn wire_handle_enum_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_val = val.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::handle_enum_struct_twin_rust_async(api_val).await)) } })
}
fn wire_handle_return_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_return_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::handle_return_enum_twin_rust_async(api_input).await)) } })
}
fn wire_multiply_by_ten_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    measure: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "multiply_by_ten_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_measure = measure.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::multiply_by_ten_twin_rust_async(api_measure).await)) } })
}
fn wire_print_note_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    note: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "print_note_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_note = note.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::print_note_twin_rust_async(api_note).await)) } })
}
fn wire_func_enum_simple_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_simple_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::enumeration_twin_sync::func_enum_simple_twin_sync(
                    api_arg,
                ),
            ))
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_mixed_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_mixed_twin_sync(api_arg))) })
}
fn wire_func_enum_with_item_struct_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_struct_twin_sync(api_arg))) })
}
fn wire_func_enum_with_item_tuple_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_tuple_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_tuple_twin_sync(api_arg))) })
}
fn wire_handle_enum_parameter_twin_sync_impl(
    weekday: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_enum_parameter_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_weekday = weekday.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::enumeration_twin_sync::handle_enum_parameter_twin_sync(
                    api_weekday,
                ),
            ))
        },
    )
}
fn wire_handle_enum_struct_twin_sync_impl(
    val: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_enum_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_val = val.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::enumeration_twin_sync::handle_enum_struct_twin_sync(
                    api_val,
                ),
            ))
        },
    )
}
fn wire_handle_return_enum_twin_sync_impl(
    input: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_return_enum_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_input = input.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::enumeration_twin_sync::handle_return_enum_twin_sync(
                    api_input,
                ),
            ))
        },
    )
}
fn wire_multiply_by_ten_twin_sync_impl(
    measure: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "multiply_by_ten_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_measure = measure.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::enumeration_twin_sync::multiply_by_ten_twin_sync(
                    api_measure,
                ),
            ))
        },
    )
}
fn wire_print_note_twin_sync_impl(
    note: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "print_note_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_note = note.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::enumeration_twin_sync::print_note_twin_sync(api_note),
            ))
        },
    )
}
fn wire_EventTwinRustAsync_as_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "EventTwinRustAsync_as_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync::as_string_twin_rust_async(&api_that).await)) } })
}
fn wire_close_event_listener_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "close_event_listener_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async::close_event_listener_twin_rust_async().await)) } })
}
fn wire_create_event_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    address: impl CstDecode<String> + core::panic::UnwindSafe,
    payload: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_event_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_address = address.cst_decode();let api_payload = payload.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async::create_event_twin_rust_async(api_address, api_payload).await)) } })
}
fn wire_register_event_listener_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_event_listener_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::event_listener_twin_rust_async::register_event_listener_twin_rust_async(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>()).await) } })
}
fn wire_EventTwinSync_as_string_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "EventTwinSync_as_string_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync::as_string_twin_sync(&api_that))) })
}
fn wire_close_event_listener_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "close_event_listener_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::event_listener_twin_sync::close_event_listener_twin_sync(
                ),
            ))
        },
    )
}
fn wire_create_event_twin_sync_impl(
    address: impl CstDecode<String> + core::panic::UnwindSafe,
    payload: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_event_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_address = address.cst_decode();
            let api_payload = payload.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::event_listener_twin_sync::create_event_twin_sync(
                    api_address,
                    api_payload,
                ),
            ))
        },
    )
}
fn wire_register_event_listener_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_event_listener_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {  transform_result_dco(crate::api::pseudo_manual::event_listener_twin_sync::register_event_listener_twin_sync(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync>())) } })
}
fn wire_CustomStructTwinRustAsync_new_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    message: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_new_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_message = message.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::new_twin_rust_async(api_message).await)) } })
}
fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::nonstatic_return_custom_struct_error_twin_rust_async(&api_that).await) } })
}
fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::nonstatic_return_custom_struct_ok_twin_rust_async(&api_that).await) } })
}
fn wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::static_return_custom_struct_error_twin_rust_async().await) } })
}
fn wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::static_return_custom_struct_ok_twin_rust_async().await) } })
}
fn wire_SomeStructTwinRustAsync_new_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_new_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_value = value.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::new_twin_rust_async(api_value).await)) } })
}
fn wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::non_static_return_err_custom_error_twin_rust_async(&api_that).await) } })
}
fn wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::non_static_return_ok_custom_error_twin_rust_async(&api_that).await) } })
}
fn wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::static_return_err_custom_error_twin_rust_async().await) } })
}
fn wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::static_return_ok_custom_error_twin_rust_async().await) } })
}
fn wire_custom_enum_error_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::custom_enum_error_panic_twin_rust_async().await) } })
}
fn wire_custom_enum_error_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::custom_enum_error_return_error_twin_rust_async().await) } })
}
fn wire_custom_enum_error_return_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::custom_enum_error_return_ok_twin_rust_async(api_arg).await) } })
}
fn wire_custom_nested_error_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_nested_error_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::custom_nested_error_return_error_twin_rust_async(api_arg).await) } })
}
fn wire_custom_struct_error_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_struct_error_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::custom_struct_error_return_error_twin_rust_async(api_arg).await) } })
}
fn wire_func_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::func_return_error_twin_rust_async().await) } })
}
fn wire_func_type_fallible_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_fallible_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::func_type_fallible_panic_twin_rust_async().await) } })
}
fn wire_func_type_infallible_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_infallible_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async::func_type_infallible_panic_twin_rust_async().await)) } })
}
fn wire_panic_with_custom_result_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_with_custom_result_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::panic_with_custom_result_twin_rust_async().await) } })
}
fn wire_return_custom_nested_error_1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_custom_nested_error_1_twin_rust_async().await) } })
}
fn wire_return_custom_nested_error_1_variant1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_variant1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_custom_nested_error_1_variant1_twin_rust_async().await) } })
}
fn wire_return_custom_nested_error_2_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_2_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_custom_nested_error_2_twin_rust_async().await) } })
}
fn wire_return_custom_struct_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_custom_struct_error_twin_rust_async().await) } })
}
fn wire_return_custom_struct_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_custom_struct_ok_twin_rust_async().await) } })
}
fn wire_return_err_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_err_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_err_custom_error_twin_rust_async().await) } })
}
fn wire_return_error_variant_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    variant: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_error_variant_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_variant = variant.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_error_variant_twin_rust_async(api_variant).await) } })
}
fn wire_return_ok_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_ok_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::return_ok_custom_error_twin_rust_async().await) } })
}
fn wire_stream_sink_throw_anyhow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "stream_sink_throw_anyhow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::stream_sink_throw_anyhow_twin_rust_async(context.rust2dart_context().stream_sink::<_,String>()).await) } })
}
fn wire_throw_anyhow_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "throw_anyhow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::exception_twin_rust_async::throw_anyhow_twin_rust_async().await) } })
}
fn wire_CustomStructTwinSync_new_twin_sync_impl(
    message: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CustomStructTwinSync_new_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_message = message.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::new_twin_sync(
                    api_message,
                ),
            ))
        },
    )
}
fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::nonstatic_return_custom_struct_error_twin_sync(&api_that)) })
}
fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::nonstatic_return_custom_struct_ok_twin_sync(&api_that)) })
}
fn wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_static_return_custom_struct_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::static_return_custom_struct_error_twin_sync()) })
}
fn wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_static_return_custom_struct_ok_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::static_return_custom_struct_ok_twin_sync()) })
}
fn wire_SomeStructTwinSync_new_twin_sync_impl(
    value: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SomeStructTwinSync_new_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_value = value.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::new_twin_sync(
                    api_value,
                ),
            ))
        },
    )
}
fn wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_non_static_return_err_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::non_static_return_err_custom_error_twin_sync(&api_that)) })
}
fn wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::non_static_return_ok_custom_error_twin_sync(&api_that)) })
}
fn wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_static_return_err_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::static_return_err_custom_error_twin_sync()) })
}
fn wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_static_return_ok_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::static_return_ok_custom_error_twin_sync()) })
}
fn wire_custom_enum_error_panic_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_panic_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_panic_twin_sync(),
            )
        },
    )
}
fn wire_custom_enum_error_return_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_return_error_twin_sync()) })
}
fn wire_custom_enum_error_return_ok_twin_sync_impl(
    arg: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_ok_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_return_ok_twin_sync(api_arg)) })
}
fn wire_custom_nested_error_return_error_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_nested_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::custom_nested_error_return_error_twin_sync(api_arg)) })
}
fn wire_custom_struct_error_return_error_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_struct_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::custom_struct_error_return_error_twin_sync(api_arg)) })
}
fn wire_func_return_error_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_error_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::func_return_error_twin_sync(),
            )
        },
    )
}
fn wire_func_type_fallible_panic_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_type_fallible_panic_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::func_type_fallible_panic_twin_sync(
                ),
            )
        },
    )
}
fn wire_func_type_infallible_panic_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_infallible_panic_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync::func_type_infallible_panic_twin_sync())) })
}
fn wire_panic_with_custom_result_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "panic_with_custom_result_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::panic_with_custom_result_twin_sync(
                ),
            )
        },
    )
}
fn wire_return_custom_nested_error_1_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::return_custom_nested_error_1_twin_sync()) })
}
fn wire_return_custom_nested_error_1_variant1_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_variant1_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::return_custom_nested_error_1_variant1_twin_sync()) })
}
fn wire_return_custom_nested_error_2_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_2_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::return_custom_nested_error_2_twin_sync()) })
}
fn wire_return_custom_struct_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::return_custom_struct_error_twin_sync()) })
}
fn wire_return_custom_struct_ok_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_struct_ok_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::return_custom_struct_ok_twin_sync(),
            )
        },
    )
}
fn wire_return_err_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_err_custom_error_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::return_err_custom_error_twin_sync(),
            )
        },
    )
}
fn wire_return_error_variant_twin_sync_impl(
    variant: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_error_variant_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_variant = variant.cst_decode();
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::return_error_variant_twin_sync(
                    api_variant,
                ),
            )
        },
    )
}
fn wire_return_ok_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_ok_custom_error_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::return_ok_custom_error_twin_sync(),
            )
        },
    )
}
fn wire_stream_sink_throw_anyhow_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "stream_sink_throw_anyhow_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {  transform_result_dco(crate::api::pseudo_manual::exception_twin_sync::stream_sink_throw_anyhow_twin_sync(context.rust2dart_context().stream_sink::<_,String>())) } })
}
fn wire_throw_anyhow_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "throw_anyhow_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::exception_twin_sync::throw_anyhow_twin_sync(),
            )
        },
    )
}
fn wire_call_new_module_system_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_new_module_system_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::call_new_module_system_twin_rust_async().await)) } })
}
fn wire_call_old_module_system_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_old_module_system_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::call_old_module_system_twin_rust_async().await)) } })
}
fn wire_use_imported_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_enum: impl CstDecode<crate::auxiliary::sample_types::MyEnum> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_enum = my_enum.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::use_imported_enum_twin_rust_async(api_my_enum).await)) } })
}
fn wire_use_imported_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_struct: impl CstDecode<crate::auxiliary::sample_types::MyStruct> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_struct = my_struct.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::use_imported_struct_twin_rust_async(api_my_struct).await)) } })
}
fn wire_call_new_module_system_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_new_module_system_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::call_new_module_system_twin_sync())) })
}
fn wire_call_old_module_system_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_old_module_system_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::call_old_module_system_twin_sync())) })
}
fn wire_use_imported_enum_twin_sync_impl(
    my_enum: impl CstDecode<crate::auxiliary::sample_types::MyEnum> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_enum_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_my_enum = my_enum.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::use_imported_enum_twin_sync(api_my_enum))) })
}
fn wire_use_imported_struct_twin_sync_impl(
    my_struct: impl CstDecode<crate::auxiliary::sample_types::MyStruct> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_my_struct = my_struct.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::use_imported_struct_twin_sync(api_my_struct))) })
}
fn wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String> + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::concatenate_static_twin_rust_async(api_a, api_b).await)) } })
}
fn wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
        + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_concatenate_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_b = b.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::concatenate_twin_rust_async(&api_that, api_b).await)) } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_static_stream_sink_single_arg_twin_rust_async(context.rust2dart_context().stream_sink::<_,u32>()).await)) } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_static_stream_sink_twin_rust_async(api_key, api_max, context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync>()).await)) } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_stream_sink_at_1_twin_rust_async(&api_that, context.rust2dart_context().stream_sink::<_,u32>()).await)) } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
        + core::panic::UnwindSafe,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode();let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_stream_sink_twin_rust_async(&api_that, api_key, api_max, context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync>()).await)) } })
}
fn wire_ConcatenateWithTwinRustAsync_new_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_new_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::new_twin_rust_async(api_a).await)) } })
}
fn wire_SumWithTwinRustAsync_sum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
        + core::panic::UnwindSafe,
    y: impl CstDecode<u32> + core::panic::UnwindSafe,
    z: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SumWithTwinRustAsync_sum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_y = y.cst_decode();let api_z = z.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync::sum_twin_rust_async(&api_that, api_y, api_z).await)) } })
}
fn wire_get_sum_array_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32> + core::panic::UnwindSafe,
    b: impl CstDecode<u32> + core::panic::UnwindSafe,
    c: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_sum_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();let api_c = c.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::get_sum_array_twin_rust_async(api_a, api_b, api_c).await)) } })
}
fn wire_get_sum_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_sum_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::get_sum_struct_twin_rust_async().await)) } })
}
fn wire_ConcatenateWithTwinSync_concatenate_static_twin_sync_impl(
    a: impl CstDecode<String> + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_concatenate_static_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::concatenate_static_twin_sync(api_a, api_b))) })
}
fn wire_ConcatenateWithTwinSync_concatenate_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
        + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_concatenate_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();let api_b = b.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::concatenate_twin_sync(&api_that, api_b))) })
}
fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_static_stream_sink_single_arg_twin_sync(context.rust2dart_context().stream_sink::<_,u32>()))) } })
}
fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_static_stream_sink_twin_sync(api_key, api_max, context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>()))) } })
}
fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_stream_sink_at_1_twin_sync(&api_that, context.rust2dart_context().stream_sink::<_,u32>()))) } })
}
fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
        + core::panic::UnwindSafe,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode();let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_stream_sink_twin_sync(&api_that, api_key, api_max, context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>()))) } })
}
fn wire_ConcatenateWithTwinSync_new_twin_sync_impl(
    a: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ConcatenateWithTwinSync_new_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_a = a.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::new_twin_sync(
                    api_a,
                ),
            ))
        },
    )
}
fn wire_SumWithTwinSync_sum_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
        + core::panic::UnwindSafe,
    y: impl CstDecode<u32> + core::panic::UnwindSafe,
    z: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SumWithTwinSync_sum_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_y = y.cst_decode();
            let api_z = z.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync::sum_twin_sync(
                    &api_that, api_y, api_z,
                ),
            ))
        },
    )
}
fn wire_get_sum_array_twin_sync_impl(
    a: impl CstDecode<u32> + core::panic::UnwindSafe,
    b: impl CstDecode<u32> + core::panic::UnwindSafe,
    c: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            let api_c = c.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::method_twin_sync::get_sum_array_twin_sync(
                    api_a, api_b, api_c,
                ),
            ))
        },
    )
}
fn wire_get_sum_struct_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::method_twin_sync::get_sum_struct_twin_sync(),
            ))
        },
    )
}
fn wire_app_settings_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::app_settings_stream_twin_rust_async(context.rust2dart_context().stream_sink::<_,mirror_ApplicationSettings>()).await)) } })
}
fn wire_app_settings_vec_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_vec_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::app_settings_vec_stream_twin_rust_async(context.rust2dart_context().stream_sink::<_,Vec<mirror_ApplicationSettings>>()).await)) } })
}
fn wire_first_number_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nums: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::Numbers> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "first_number_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_nums = nums.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::first_number_twin_rust_async(api_nums).await)) } })
}
fn wire_first_sequence_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seqs: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::Sequences>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "first_sequence_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_seqs = seqs.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::first_sequence_twin_rust_async(api_seqs).await)) } })
}
fn wire_get_app_settings_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_app_settings_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::get_app_settings_twin_rust_async().await)) } })
}
fn wire_get_fallible_app_settings_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_fallible_app_settings_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::mirror_twin_rust_async::get_fallible_app_settings_twin_rust_async().await) } })
}
fn wire_get_message_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_message_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_rust_async::get_message_twin_rust_async(
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_is_app_embedded_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    app_settings: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "is_app_embedded_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_app_settings = app_settings.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::is_app_embedded_twin_rust_async(api_app_settings).await)) } })
}
fn wire_mirror_struct_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_struct_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::mirror_struct_stream_twin_rust_async(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync>()).await)) } })
}
fn wire_mirror_tuple_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_tuple_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::mirror_tuple_stream_twin_rust_async(context.rust2dart_context().stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>()).await)) } })
}
fn wire_repeat_number_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    num: impl CstDecode<i32> + core::panic::UnwindSafe,
    times: impl CstDecode<usize> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "repeat_number_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_num = num.cst_decode();let api_times = times.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::repeat_number_twin_rust_async(api_num, api_times).await)) } })
}
fn wire_repeat_sequence_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seq: impl CstDecode<i32> + core::panic::UnwindSafe,
    times: impl CstDecode<usize> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "repeat_sequence_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_seq = seq.cst_decode();let api_times = times.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::repeat_sequence_twin_rust_async(api_seq, api_times).await)) } })
}
fn wire_test_contains_mirrored_sub_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_contains_mirrored_sub_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_contains_mirrored_sub_struct_twin_rust_async().await)) } })
}
fn wire_test_fallible_of_raw_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_fallible_of_raw_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::mirror_twin_rust_async::test_fallible_of_raw_string_mirrored_twin_rust_async().await) } })
}
fn wire_test_list_of_nested_enums_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_nested_enums_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_list_of_nested_enums_mirrored_twin_rust_async().await)) } })
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_raw_nested_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_list_of_raw_nested_string_mirrored_twin_rust_async().await)) } })
}
fn wire_test_nested_raw_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_nested_raw_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_nested_raw_string_mirrored_twin_rust_async().await)) } })
}
fn wire_test_raw_string_enum_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nested: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_enum_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_nested = nested.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_raw_string_enum_mirrored_twin_rust_async(api_nested).await)) } })
}
fn wire_test_raw_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_raw_string_mirrored_twin_rust_async().await)) } })
}
fn wire_app_settings_stream_twin_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_stream_twin_sync",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::app_settings_stream_twin_sync(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, mirror_ApplicationSettings>(),
                    ),
                ))
            }
        },
    )
}
fn wire_app_settings_vec_stream_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_vec_stream_twin_sync",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::app_settings_vec_stream_twin_sync(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, Vec<mirror_ApplicationSettings>>(),
                    ),
                ))
            }
        },
    )
}
fn wire_first_number_twin_sync_impl(
    nums: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::Numbers> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_number_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_nums = nums.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::first_number_twin_sync(api_nums),
            ))
        },
    )
}
fn wire_first_sequence_twin_sync_impl(
    seqs: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::Sequences>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_sequence_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_seqs = seqs.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::first_sequence_twin_sync(api_seqs),
            ))
        },
    )
}
fn wire_get_app_settings_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_app_settings_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::get_app_settings_twin_sync(),
            ))
        },
    )
}
fn wire_get_fallible_app_settings_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_fallible_app_settings_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::pseudo_manual::mirror_twin_sync::get_fallible_app_settings_twin_sync(),
            )
        },
    )
}
fn wire_get_message_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_message_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::get_message_twin_sync(),
            ))
        },
    )
}
fn wire_is_app_embedded_twin_sync_impl(
    app_settings: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_app_embedded_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_app_settings = app_settings.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::is_app_embedded_twin_sync(
                    api_app_settings,
                ),
            ))
        },
    )
}
fn wire_mirror_struct_stream_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_struct_stream_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::mirror_struct_stream_twin_sync(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync>()))) } })
}
fn wire_mirror_tuple_stream_twin_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_tuple_stream_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::mirror_tuple_stream_twin_sync(context.rust2dart_context().stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>()))) } })
}
fn wire_repeat_number_twin_sync_impl(
    num: impl CstDecode<i32> + core::panic::UnwindSafe,
    times: impl CstDecode<usize> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_number_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_num = num.cst_decode();
            let api_times = times.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::repeat_number_twin_sync(
                    api_num, api_times,
                ),
            ))
        },
    )
}
fn wire_repeat_sequence_twin_sync_impl(
    seq: impl CstDecode<i32> + core::panic::UnwindSafe,
    times: impl CstDecode<usize> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_sequence_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_seq = seq.cst_decode();
            let api_times = times.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::repeat_sequence_twin_sync(
                    api_seq, api_times,
                ),
            ))
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_contains_mirrored_sub_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_contains_mirrored_sub_struct_twin_sync())) })
}
fn wire_test_fallible_of_raw_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_fallible_of_raw_string_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(crate::api::pseudo_manual::mirror_twin_sync::test_fallible_of_raw_string_mirrored_twin_sync()) })
}
fn wire_test_list_of_nested_enums_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_nested_enums_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_list_of_nested_enums_mirrored_twin_sync())) })
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_raw_nested_string_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_list_of_raw_nested_string_mirrored_twin_sync())) })
}
fn wire_test_nested_raw_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_nested_raw_string_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_nested_raw_string_mirrored_twin_sync())) })
}
fn wire_test_raw_string_enum_mirrored_twin_sync_impl(
    nested: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_enum_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_nested = nested.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_raw_string_enum_mirrored_twin_sync(api_nested))) })
}
fn wire_test_raw_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_mirrored_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::mirror_twin_sync::test_raw_string_mirrored_twin_sync(),
            ))
        },
    )
}
fn wire_handle_big_buffers_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_big_buffers_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_big_buffers_twin_rust_async().await)) } })
}
fn wire_handle_complex_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_complex_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_s = s.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_complex_struct_twin_rust_async(api_s).await)) } })
}
fn wire_handle_nested_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<
            crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_s = s.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_nested_struct_twin_rust_async(api_s).await)) } })
}
fn wire_handle_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_s = s.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_string_twin_rust_async(api_s).await)) } })
}
fn wire_handle_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::auxiliary::sample_types::MySize> + core::panic::UnwindSafe,
    boxed: impl CstDecode<Box<crate::auxiliary::sample_types::MySize>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_boxed = boxed.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_struct_twin_rust_async(api_arg, api_boxed).await)) } })
}
fn wire_handle_vec_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    v: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_v = v.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_vec_u8_twin_rust_async(api_v).await)) } })
}
fn wire_list_of_primitive_enums_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekdays: impl CstDecode<
            Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_of_primitive_enums_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_weekdays = weekdays.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::list_of_primitive_enums_twin_rust_async(api_weekdays).await)) } })
}
fn wire_test_abc_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    abc: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_abc_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_abc = abc.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::test_abc_enum_twin_rust_async(api_abc).await)) } })
}
fn wire_test_struct_with_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    se: impl CstDecode<
            crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_struct_with_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_se = se.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::test_struct_with_enum_twin_rust_async(api_se).await)) } })
}
fn wire_handle_big_buffers_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_big_buffers_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::handle_big_buffers_twin_sync(),
            ))
        },
    )
}
fn wire_handle_complex_struct_twin_sync_impl(
    s: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_complex_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_s = s.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::handle_complex_struct_twin_sync(
                    api_s,
                ),
            ))
        },
    )
}
fn wire_handle_nested_struct_twin_sync_impl(
    s: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_nested_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_s = s.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::handle_nested_struct_twin_sync(
                    api_s,
                ),
            ))
        },
    )
}
fn wire_handle_string_twin_sync_impl(
    s: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_s = s.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::handle_string_twin_sync(api_s),
            ))
        },
    )
}
fn wire_handle_struct_twin_sync_impl(
    arg: impl CstDecode<crate::auxiliary::sample_types::MySize> + core::panic::UnwindSafe,
    boxed: impl CstDecode<Box<crate::auxiliary::sample_types::MySize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_boxed = boxed.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::handle_struct_twin_sync(
                    api_arg, api_boxed,
                ),
            ))
        },
    )
}
fn wire_handle_vec_u8_twin_sync_impl(
    v: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_u8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_v = v.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::handle_vec_u8_twin_sync(api_v),
            ))
        },
    )
}
fn wire_list_of_primitive_enums_twin_sync_impl(
    weekdays: impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_of_primitive_enums_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_weekdays = weekdays.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync::list_of_primitive_enums_twin_sync(api_weekdays))) })
}
fn wire_test_abc_enum_twin_sync_impl(
    abc: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_abc_enum_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_abc = abc.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::test_abc_enum_twin_sync(api_abc),
            ))
        },
    )
}
fn wire_test_struct_with_enum_twin_sync_impl(
    se: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_struct_with_enum_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_se = se.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_example_twin_sync::test_struct_with_enum_twin_sync(
                    api_se,
                ),
            ))
        },
    )
}
fn wire_empty_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    empty: impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "empty_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_empty = empty.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::empty_struct_twin_rust_async(api_empty).await)) } })
}
fn wire_func_return_unit_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_return_unit_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::func_return_unit_twin_rust_async().await)) } })
}
fn wire_func_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::func_string_twin_rust_async(api_arg).await)) } })
}
fn wire_handle_list_of_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    l: impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_list_of_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_l = l.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::handle_list_of_struct_twin_rust_async(api_l).await)) } })
}
fn wire_handle_string_list_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    names: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_list_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_names = names.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::handle_string_list_twin_rust_async(api_names).await)) } })
}
fn wire_empty_struct_twin_sync_impl(
    empty: impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "empty_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_empty = empty.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_type_twin_sync::empty_struct_twin_sync(api_empty),
            ))
        },
    )
}
fn wire_func_return_unit_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_unit_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_type_twin_sync::func_return_unit_twin_sync(),
            ))
        },
    )
}
fn wire_func_string_twin_sync_impl(
    arg: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_string_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_type_twin_sync::func_string_twin_sync(api_arg),
            ))
        },
    )
}
fn wire_handle_list_of_struct_twin_sync_impl(
    l: impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_list_of_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_l = l.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_type_twin_sync::handle_list_of_struct_twin_sync(
                    api_l,
                ),
            ))
        },
    )
}
fn wire_handle_string_list_twin_sync_impl(
    names: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_list_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_names = names.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::misc_type_twin_sync::handle_string_list_twin_sync(
                    api_names,
                ),
            ))
        },
    )
}
fn wire_handle_newtype_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_newtype_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::newtype_pattern_twin_rust_async::handle_newtype_twin_rust_async(api_arg).await)) } })
}
fn wire_handle_newtype_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_newtype_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::newtype_pattern_twin_sync::handle_newtype_twin_sync(
                    api_arg,
                ),
            ))
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_bool_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_bool_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_f32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_f32_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_f64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_f64_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i16_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i32_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i64_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_i8_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u16_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u32_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u64_twin_normal(api_arg))) } })
}
fn wire_example_optional_primitive_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive::example_optional_primitive_type_u8_twin_normal(api_arg))) } })
}
fn wire_primitive_optional_types_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<Option<i32>> + core::panic::UnwindSafe,
    my_i64: impl CstDecode<Option<i64>> + core::panic::UnwindSafe,
    my_f64: impl CstDecode<Option<f64>> + core::panic::UnwindSafe,
    my_bool: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_optional_types_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_i32 = my_i32.cst_decode();let api_my_i64 = my_i64.cst_decode();let api_my_f64 = my_f64.cst_decode();let api_my_bool = my_bool.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_misc_twin_rust_async::primitive_optional_types_twin_rust_async(api_my_i32, api_my_i64, api_my_f64, api_my_bool).await)) } })
}
fn wire_primitive_optional_types_twin_sync_impl(
    my_i32: impl CstDecode<Option<i32>> + core::panic::UnwindSafe,
    my_i64: impl CstDecode<Option<i64>> + core::panic::UnwindSafe,
    my_f64: impl CstDecode<Option<f64>> + core::panic::UnwindSafe,
    my_bool: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_optional_types_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_my_i32 = my_i32.cst_decode();let api_my_i64 = my_i64.cst_decode();let api_my_f64 = my_f64.cst_decode();let api_my_bool = my_bool.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_misc_twin_sync::primitive_optional_types_twin_sync(api_my_i32, api_my_i64, api_my_f64, api_my_bool))) })
}
fn wire_example_optional_primitive_type_bool_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_bool_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_bool_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_f32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_f32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_f32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_f64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_f64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_f64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_i16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_i16_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_i32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_i64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_i64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_i8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_i8_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_u16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_u16_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_u32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_u64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_u64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_rust_async::example_optional_primitive_type_u8_twin_rust_async(api_arg).await)) } })
}
fn wire_example_optional_primitive_type_bool_twin_sync_impl(
    arg: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_bool_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_f32_twin_sync_impl(
    arg: impl CstDecode<Option<f32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_f32_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_f64_twin_sync_impl(
    arg: impl CstDecode<Option<f64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_f64_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_i16_twin_sync_impl(
    arg: impl CstDecode<Option<i16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i16_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_i32_twin_sync_impl(
    arg: impl CstDecode<Option<i32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i32_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_i64_twin_sync_impl(
    arg: impl CstDecode<Option<i64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i64_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_i8_twin_sync_impl(
    arg: impl CstDecode<Option<i8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_i8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_i8_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_u16_twin_sync_impl(
    arg: impl CstDecode<Option<u16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u16_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_u32_twin_sync_impl(
    arg: impl CstDecode<Option<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u32_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_u64_twin_sync_impl(
    arg: impl CstDecode<Option<u64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u64_twin_sync(api_arg))) })
}
fn wire_example_optional_primitive_type_u8_twin_sync_impl(
    arg: impl CstDecode<Option<u8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_optional_primitive_type_u8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_twin_sync::example_optional_primitive_type_u8_twin_sync(api_arg))) })
}
fn wire_handle_increment_boxed_optional_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<Option<Box<f64>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_increment_boxed_optional_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opt = opt.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_increment_boxed_optional_twin_rust_async(api_opt).await)) } })
}
fn wire_handle_option_box_arguments_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    i8box: impl CstDecode<Option<Box<i8>>> + core::panic::UnwindSafe,
    u8box: impl CstDecode<Option<Box<u8>>> + core::panic::UnwindSafe,
    i32box: impl CstDecode<Option<Box<i32>>> + core::panic::UnwindSafe,
    i64box: impl CstDecode<Option<Box<i64>>> + core::panic::UnwindSafe,
    f64box: impl CstDecode<Option<Box<f64>>> + core::panic::UnwindSafe,
    boolbox: impl CstDecode<Option<Box<bool>>> + core::panic::UnwindSafe,
    structbox: impl CstDecode<Option<Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_option_box_arguments_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_i8box = i8box.cst_decode();let api_u8box = u8box.cst_decode();let api_i32box = i32box.cst_decode();let api_i64box = i64box.cst_decode();let api_f64box = f64box.cst_decode();let api_boolbox = boolbox.cst_decode();let api_structbox = structbox.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_option_box_arguments_twin_rust_async(api_i8box, api_u8box, api_i32box, api_i64box, api_f64box, api_boolbox, api_structbox).await)) } })
}
fn wire_handle_optional_increment_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<
            Option<
                crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync,
            >,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_increment_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opt = opt.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_optional_increment_twin_rust_async(api_opt).await)) } })
}
fn wire_handle_optional_return_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    left: impl CstDecode<f64> + core::panic::UnwindSafe,
    right: impl CstDecode<f64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_return_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_left = left.cst_decode();let api_right = right.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_optional_return_twin_rust_async(api_left, api_right).await)) } })
}
fn wire_handle_optional_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    document: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_document = document.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_optional_struct_twin_rust_async(api_document).await)) } })
}
fn wire_handle_vec_of_opts_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_opts_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opt = opt.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_vec_of_opts_twin_rust_async(api_opt).await)) } })
}
fn wire_handle_increment_boxed_optional_twin_sync_impl(
    opt: impl CstDecode<Option<Box<f64>>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_increment_boxed_optional_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opt = opt.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync::handle_increment_boxed_optional_twin_sync(api_opt))) })
}
fn wire_handle_option_box_arguments_twin_sync_impl(
    i8box: impl CstDecode<Option<Box<i8>>> + core::panic::UnwindSafe,
    u8box: impl CstDecode<Option<Box<u8>>> + core::panic::UnwindSafe,
    i32box: impl CstDecode<Option<Box<i32>>> + core::panic::UnwindSafe,
    i64box: impl CstDecode<Option<Box<i64>>> + core::panic::UnwindSafe,
    f64box: impl CstDecode<Option<Box<f64>>> + core::panic::UnwindSafe,
    boolbox: impl CstDecode<Option<Box<bool>>> + core::panic::UnwindSafe,
    structbox: impl CstDecode<
            Option<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>,
        > + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_option_box_arguments_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_i8box = i8box.cst_decode();let api_u8box = u8box.cst_decode();let api_i32box = i32box.cst_decode();let api_i64box = i64box.cst_decode();let api_f64box = f64box.cst_decode();let api_boolbox = boolbox.cst_decode();let api_structbox = structbox.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync::handle_option_box_arguments_twin_sync(api_i8box, api_u8box, api_i32box, api_i64box, api_f64box, api_boolbox, api_structbox))) })
}
fn wire_handle_optional_increment_twin_sync_impl(
    opt: impl CstDecode<Option<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_increment_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opt = opt.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::optional_twin_sync::handle_optional_increment_twin_sync(
                    api_opt,
                ),
            ))
        },
    )
}
fn wire_handle_optional_return_twin_sync_impl(
    left: impl CstDecode<f64> + core::panic::UnwindSafe,
    right: impl CstDecode<f64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_return_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_left = left.cst_decode();
            let api_right = right.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::optional_twin_sync::handle_optional_return_twin_sync(
                    api_left, api_right,
                ),
            ))
        },
    )
}
fn wire_handle_optional_struct_twin_sync_impl(
    document: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_document = document.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::optional_twin_sync::handle_optional_struct_twin_sync(
                    api_document,
                ),
            ))
        },
    )
}
fn wire_handle_vec_of_opts_twin_sync_impl(
    opt: impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_of_opts_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opt = opt.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::optional_twin_sync::handle_vec_of_opts_twin_sync(
                    api_opt,
                ),
            ))
        },
    )
}
fn wire_example_primitive_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_bool_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_f32_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_f64_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i16> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i16_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i32_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i64_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i8> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_i8_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u16> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u16_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u32_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u64_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u8> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive::example_primitive_type_u8_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_bool_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_bool_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_f32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_f32_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_f64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_f64_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i16_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i32_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i64_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_i8_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u16_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u32_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u64_twin_normal(api_arg))) } })
}
fn wire_example_primitive_list_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list::example_primitive_list_type_u8_twin_normal(api_arg))) } })
}
fn wire_handle_vec_of_primitive_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    n: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_primitive_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_n = n.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::handle_vec_of_primitive_twin_rust_async(api_n).await)) } })
}
fn wire_handle_vec_of_primitive_twin_sync_impl(
    n: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_primitive_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_n = n.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_misc_twin_sync::handle_vec_of_primitive_twin_sync(api_n))) })
}
fn wire_example_primitive_list_type_bool_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<bool>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_bool_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_bool_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_f32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_f32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_f32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_f64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_f64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_f64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_i16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_i16_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_i32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_i64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_i64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_i8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_i8_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_u16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u16>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_u16_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u32>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_u32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_u64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_u64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_rust_async::example_primitive_list_type_u8_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_list_type_bool_twin_sync_impl(
    arg: impl CstDecode<Vec<bool>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_bool_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_f32_twin_sync_impl(
    arg: impl CstDecode<Vec<f32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_f32_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_f64_twin_sync_impl(
    arg: impl CstDecode<Vec<f64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_f64_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_i16_twin_sync_impl(
    arg: impl CstDecode<Vec<i16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i16_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_i32_twin_sync_impl(
    arg: impl CstDecode<Vec<i32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i32_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_i64_twin_sync_impl(
    arg: impl CstDecode<Vec<i64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i64_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_i8_twin_sync_impl(
    arg: impl CstDecode<Vec<i8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_i8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_i8_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_u16_twin_sync_impl(
    arg: impl CstDecode<Vec<u16>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u16_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_u32_twin_sync_impl(
    arg: impl CstDecode<Vec<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u32_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_u64_twin_sync_impl(
    arg: impl CstDecode<Vec<u64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u64_twin_sync(api_arg))) })
}
fn wire_example_primitive_list_type_u8_twin_sync_impl(
    arg: impl CstDecode<Vec<u8>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_list_type_u8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_twin_sync::example_primitive_list_type_u8_twin_sync(api_arg))) })
}
fn wire_primitive_types_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<i32> + core::panic::UnwindSafe,
    my_i64: impl CstDecode<i64> + core::panic::UnwindSafe,
    my_f64: impl CstDecode<f64> + core::panic::UnwindSafe,
    my_bool: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_types_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_i32 = my_i32.cst_decode();let api_my_i64 = my_i64.cst_decode();let api_my_f64 = my_f64.cst_decode();let api_my_bool = my_bool.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_rust_async::primitive_types_twin_rust_async(api_my_i32, api_my_i64, api_my_f64, api_my_bool).await)) } })
}
fn wire_primitive_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_u32: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_u32 = my_u32.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_rust_async::primitive_u32_twin_rust_async(api_my_u32).await)) } })
}
fn wire_primitive_types_twin_sync_impl(
    my_i32: impl CstDecode<i32> + core::panic::UnwindSafe,
    my_i64: impl CstDecode<i64> + core::panic::UnwindSafe,
    my_f64: impl CstDecode<f64> + core::panic::UnwindSafe,
    my_bool: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_types_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_my_i32 = my_i32.cst_decode();
            let api_my_i64 = my_i64.cst_decode();
            let api_my_f64 = my_f64.cst_decode();
            let api_my_bool = my_bool.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::primitive_misc_twin_sync::primitive_types_twin_sync(
                    api_my_i32,
                    api_my_i64,
                    api_my_f64,
                    api_my_bool,
                ),
            ))
        },
    )
}
fn wire_primitive_u32_twin_sync_impl(
    my_u32: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_u32_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_my_u32 = my_u32.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::primitive_misc_twin_sync::primitive_u32_twin_sync(
                    api_my_u32,
                ),
            ))
        },
    )
}
fn wire_example_primitive_type_bool_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_bool_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_bool_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_f32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_f32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_f32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_f64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_f64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_f64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_i16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i16> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_i16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_i16_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_i32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_i64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_i64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_i64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_i8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i8> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_i8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_i8_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_u16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u16> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_u16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_u16_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_u32_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_u64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_u64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_u64_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u8> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_rust_async::example_primitive_type_u8_twin_rust_async(api_arg).await)) } })
}
fn wire_example_primitive_type_bool_twin_sync_impl(
    arg: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_bool_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_f32_twin_sync_impl(
    arg: impl CstDecode<f32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_f32_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_f64_twin_sync_impl(
    arg: impl CstDecode<f64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_f64_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_i16_twin_sync_impl(
    arg: impl CstDecode<i16> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i16_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_i32_twin_sync_impl(
    arg: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i32_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_i64_twin_sync_impl(
    arg: impl CstDecode<i64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i64_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_i8_twin_sync_impl(
    arg: impl CstDecode<i8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_i8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_i8_twin_sync(
                    api_arg,
                ),
            ))
        },
    )
}
fn wire_example_primitive_type_u16_twin_sync_impl(
    arg: impl CstDecode<u16> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u16_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_u32_twin_sync_impl(
    arg: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u32_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_u64_twin_sync_impl(
    arg: impl CstDecode<u64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_primitive_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u64_twin_sync(api_arg))) })
}
fn wire_example_primitive_type_u8_twin_sync_impl(
    arg: impl CstDecode<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_primitive_type_u8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::primitive_twin_sync::example_primitive_type_u8_twin_sync(
                    api_arg,
                ),
            ))
        },
    )
}
fn wire_test_more_than_just_one_raw_string_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_rust_async::test_more_than_just_one_raw_string_struct_twin_rust_async().await)) } })
}
fn wire_test_raw_string_item_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_item_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_rust_async::test_raw_string_item_struct_twin_rust_async().await)) } })
}
fn wire_test_more_than_just_one_raw_string_struct_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sync::test_more_than_just_one_raw_string_struct_twin_sync())) })
}
fn wire_test_raw_string_item_struct_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_item_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sync::test_raw_string_item_struct_twin_sync())) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();let api_that = api_that.rust_auto_opaque_decode_ref()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_arg_borrow_twin_sync(&api_that))) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();let mut api_that = api_that.rust_auto_opaque_decode_ref_mut()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_arg_mut_borrow_twin_sync(&mut api_that))) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();let api_that = api_that.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_arg_own_twin_sync(api_that))) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();let api_that = api_that.rust_auto_opaque_decode_ref()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_return_own_twin_sync(&api_that)))) })
}
fn wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_new_custom_name_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::new_custom_name_twin_sync()))) })
}
fn wire_NonCloneSimpleTwinSync_new_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_new_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::new_twin_sync()))) })
}
fn wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_arg_borrow_twin_sync(&api_arg))) })
}
fn wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_arg_mut_borrow_twin_sync(&mut api_arg))) })
}
fn wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_arg_own_twin_sync(api_arg))) })
}
fn wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_return_own_twin_sync()))) })
}
fn wire_rust_auto_opaque_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_borrow_twin_sync(&api_arg, api_expect))) })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<i32> + core::panic::UnwindSafe,
    adder: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_adder = adder.cst_decode();let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_mut_borrow_twin_sync(&mut api_arg, api_expect, api_adder))) })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_own_and_return_own_twin_sync(api_arg)))) })
}
fn wire_rust_auto_opaque_arg_own_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_own_twin_sync(api_arg, api_expect))) })
}
fn wire_rust_auto_opaque_callable_arg_twin_sync_impl(
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<
                    Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
                >,
            >,
        > + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_callable_arg_twin_sync(api_arg))) })
}
fn wire_rust_auto_opaque_callable_return_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_callable_return_twin_sync()))) })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_impl(
    a: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();let api_a = api_a.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_normal_and_opaque_arg_twin_sync(api_a, api_b))) })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_sync_impl(
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>,
            >,
        > + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_plus_sign_arg_twin_sync(api_arg))) })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_plus_sign_return_twin_sync()))) })
}
fn wire_rust_auto_opaque_return_own_twin_sync_impl(
    initial: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_initial = initial.cst_decode();transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_return_own_twin_sync(api_initial)))) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>,
            >,
        > + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(&api_arg))) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>,
            >,
        > + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(&mut api_arg))) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_impl(
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>,
            >,
        > + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(api_arg))) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync()))) })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_arg_borrow_twin_sync(&api_arg, api_expect))) })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(&mut api_arg, api_expect))) })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync_impl(
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_arg_own_twin_sync(api_arg, api_expect))) })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_return_own_one_twin_sync()))) })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_return_own_two_twin_sync()))) })
}
fn wire_rust_auto_opaque_two_args_twin_sync_impl(
    a: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
    b: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();let api_a = api_a.rust_auto_opaque_decode_owned()?;
let api_b = api_b.rust_auto_opaque_decode_owned()?;
transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_two_args_twin_sync(api_a, api_b))) })
}
fn wire_create_array_opaque_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_array_opaque_enum_twin_rust_async().await)) } })
}
fn wire_create_nested_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_nested_opaque_twin_rust_async().await)) } })
}
fn wire_create_opaque_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_opaque_twin_rust_async().await)) } })
}
fn wire_create_option_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_option_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_create_sync_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_sync_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_sync_opaque_twin_rust_async().await)) } })
}
fn wire_frb_generator_test_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::frb_generator_test_twin_rust_async().await)) } })
}
fn wire_opaque_array_run_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<[flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2]>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_data = data.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_array_run_twin_rust_async(api_data).await)) } })
}
fn wire_opaque_array_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_array_twin_rust_async().await)) } })
}
fn wire_opaque_vec_run_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_data = data.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_vec_run_twin_rust_async(api_data).await)) } })
}
fn wire_opaque_vec_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_vec_twin_rust_async().await)) } })
}
fn wire_run_enum_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_enum_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_run_nested_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_nested_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_run_non_clone_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    clone: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_clone = clone.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_non_clone_twin_rust_async(api_clone).await)) } })
}
fn wire_run_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_opaque_twin_rust_async(api_opaque).await)) } })
}
fn wire_run_opaque_with_delay_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_opaque_with_delay_twin_rust_async(api_opaque).await)) } })
}
fn wire_unwrap_rust_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::rust_opaque_twin_rust_async::unwrap_rust_opaque_twin_rust_async(api_opaque).await) } })
}
fn wire_create_array_opaque_enum_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync::create_array_opaque_enum_twin_sync())) })
}
fn wire_create_nested_opaque_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_nested_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::create_nested_opaque_twin_sync(),
            ))
        },
    )
}
fn wire_create_opaque_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::create_opaque_twin_sync(),
            ))
        },
    )
}
fn wire_create_option_opaque_twin_sync_impl(
    opaque: impl CstDecode<Option<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_option_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::create_option_opaque_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_create_sync_opaque_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_sync_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::create_sync_opaque_twin_sync(),
            ))
        },
    )
}
fn wire_frb_generator_test_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "frb_generator_test_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::frb_generator_test_twin_sync(),
            ))
        },
    )
}
fn wire_opaque_array_run_twin_sync_impl(
    data: impl CstDecode<[flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2]>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_run_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_data = data.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_array_run_twin_sync(
                    api_data,
                ),
            ))
        },
    )
}
fn wire_opaque_array_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_array_twin_sync(),
            ))
        },
    )
}
fn wire_opaque_vec_run_twin_sync_impl(
    data: impl CstDecode<Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_run_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_data = data.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_vec_run_twin_sync(
                    api_data,
                ),
            ))
        },
    )
}
fn wire_opaque_vec_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_vec_twin_sync(),
            ))
        },
    )
}
fn wire_run_enum_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_enum_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::run_enum_opaque_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_run_nested_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_nested_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::run_nested_opaque_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_run_non_clone_twin_sync_impl(
    clone: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_non_clone_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_clone = clone.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::run_non_clone_twin_sync(
                    api_clone,
                ),
            ))
        },
    )
}
fn wire_run_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::run_opaque_twin_sync(api_opaque),
            ))
        },
    )
}
fn wire_run_opaque_with_delay_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_with_delay_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::rust_opaque_twin_sync::run_opaque_with_delay_twin_sync(
                    api_opaque,
                ),
            ))
        },
    )
}
fn wire_unwrap_rust_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_rust_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(
                crate::api::pseudo_manual::rust_opaque_twin_sync::unwrap_rust_opaque_twin_sync(
                    api_opaque,
                ),
            )
        },
    )
}
fn wire_simple_adder_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<i32> + core::panic::UnwindSafe,
    b: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "simple_adder_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::simple_twin_rust_async::simple_adder_twin_rust_async(api_a, api_b).await)) } })
}
fn wire_simple_adder_twin_sync_impl(
    a: impl CstDecode<i32> + core::panic::UnwindSafe,
    b: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_adder_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::simple_twin_sync::simple_adder_twin_sync(api_a, api_b),
            ))
        },
    )
}
fn wire_func_stream_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::stream_twin_rust_async::func_stream_return_error_twin_rust_async(context.rust2dart_context().stream_sink::<_,String>()).await) } })
}
fn wire_func_stream_return_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_return_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(crate::api::pseudo_manual::stream_twin_rust_async::func_stream_return_panic_twin_rust_async(context.rust2dart_context().stream_sink::<_,String>()).await) } })
}
fn wire_func_stream_sink_arg_position_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32> + core::panic::UnwindSafe,
    b: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_sink_arg_position_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::func_stream_sink_arg_position_twin_rust_async(api_a, api_b, context.rust2dart_context().stream_sink::<_,u32>()).await)) } })
}
fn wire_handle_stream_of_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_of_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_of_struct_twin_rust_async(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync>()).await)) } })
}
fn wire_handle_stream_sink_at_1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_sink_at_1_twin_rust_async(api_key, api_max, context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>()).await)) } })
}
fn wire_handle_stream_sink_at_2_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_2_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_sink_at_2_twin_rust_async(api_key, context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>(), api_max).await)) } })
}
fn wire_handle_stream_sink_at_3_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_3_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_sink_at_3_twin_rust_async(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>(), api_key, api_max).await)) } })
}
fn wire_func_struct_with_one_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_one_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_struct_with_one_field_twin_rust_async(api_arg).await)) } })
}
fn wire_func_struct_with_two_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_two_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_struct_with_two_field_twin_rust_async(api_arg).await)) } })
}
fn wire_func_struct_with_zero_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_zero_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_struct_with_zero_field_twin_rust_async(api_arg).await)) } })
}
fn wire_func_tuple_struct_with_one_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_one_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_tuple_struct_with_one_field_twin_rust_async(api_arg).await)) } })
}
fn wire_func_tuple_struct_with_two_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_two_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_tuple_struct_with_two_field_twin_rust_async(api_arg).await)) } })
}
fn wire_func_struct_with_one_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_one_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_one_field_twin_sync(api_arg))) })
}
fn wire_func_struct_with_two_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_two_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_two_field_twin_sync(api_arg))) })
}
fn wire_func_struct_with_zero_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_zero_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_zero_field_twin_sync(api_arg))) })
}
fn wire_func_tuple_struct_with_one_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_one_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_tuple_struct_with_one_field_twin_sync(api_arg))) })
}
fn wire_func_tuple_struct_with_two_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_two_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_tuple_struct_with_two_field_twin_sync(api_arg))) })
}
fn wire_test_tuple_2_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Vec<(String, i32)>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_2_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::tuple_twin_rust_async::test_tuple_2_twin_rust_async(
                        api_value,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_test_tuple_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Option<(String, i32)>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_twin_rust_async",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| async move {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::tuple_twin_rust_async::test_tuple_twin_rust_async(
                        api_value,
                    )
                    .await,
                ))
            }
        },
    )
}
fn wire_test_tuple_2_twin_sync_impl(
    value: impl CstDecode<Vec<(String, i32)>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_2_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_value = value.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::tuple_twin_sync::test_tuple_2_twin_sync(api_value),
            ))
        },
    )
}
fn wire_test_tuple_twin_sync_impl(
    value: impl CstDecode<Option<(String, i32)>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_value = value.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::tuple_twin_sync::test_tuple_twin_sync(api_value),
            ))
        },
    )
}
fn wire_handle_type_alias_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async::handle_type_alias_id_twin_rust_async(api_input).await)) } })
}
fn wire_handle_type_alias_model_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_model_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async::handle_type_alias_model_twin_rust_async(api_input).await)) } })
}
fn wire_handle_type_nest_alias_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_nest_alias_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {  transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async::handle_type_nest_alias_id_twin_rust_async(api_input).await)) } })
}
fn wire_handle_type_alias_id_twin_sync_impl(
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_alias_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_input = input.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::type_alias_twin_sync::handle_type_alias_id_twin_sync(
                    api_input,
                ),
            ))
        },
    )
}
fn wire_handle_type_alias_model_twin_sync_impl(
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_alias_model_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_input = input.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::pseudo_manual::type_alias_twin_sync::handle_type_alias_model_twin_sync(
                    api_input,
                ),
            ))
        },
    )
}
fn wire_handle_type_nest_alias_id_twin_sync_impl(
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_nest_alias_id_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_input = input.cst_decode();transform_result_dco(Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sync::handle_type_nest_alias_id_twin_sync(api_input))) })
}
fn wire_handle_nested_uuids_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ids: impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_uuids_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_ids = ids.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::uuid_type_twin_rust_async::handle_nested_uuids_twin_rust_async(api_ids).await) } })
}
fn wire_handle_uuid_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<uuid::Uuid> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_uuid_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {  transform_result_dco(crate::api::pseudo_manual::uuid_type_twin_rust_async::handle_uuid_twin_rust_async(api_id).await) } })
}
fn wire_handle_nested_uuids_twin_sync_impl(
    ids: impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_nested_uuids_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ids = ids.cst_decode();
            transform_result_dco(
                crate::api::pseudo_manual::uuid_type_twin_sync::handle_nested_uuids_twin_sync(
                    api_ids,
                ),
            )
        },
    )
}
fn wire_handle_uuid_twin_sync_impl(
    id: impl CstDecode<uuid::Uuid> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_uuid_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco(
                crate::api::pseudo_manual::uuid_type_twin_sync::handle_uuid_twin_sync(api_id),
            )
        },
    )
}
fn wire_test_more_than_just_one_raw_string_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_more_than_just_one_raw_string_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::raw_string::test_more_than_just_one_raw_string_struct_twin_normal(),
                ))
            }
        },
    )
}
fn wire_test_raw_string_item_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_item_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::raw_string::test_raw_string_item_struct_twin_normal(),
                ))
            }
        },
    )
}
fn wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  { let api_that = api_that.rust_auto_opaque_decode_ref()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_arg_borrow_twin_normal(&api_that))) } })
}
fn wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  { let mut api_that = api_that.rust_auto_opaque_decode_ref_mut()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_arg_mut_borrow_twin_normal(&mut api_that))) } })
}
fn wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  { let api_that = api_that.rust_auto_opaque_decode_owned()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_arg_own_twin_normal(api_that))) } })
}
fn wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  { let api_that = api_that.rust_auto_opaque_decode_ref()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_return_own_twin_normal(&api_that)))) } })
}
fn wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_new_custom_name_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::new_custom_name_twin_normal()))) } })
}
fn wire_NonCloneSimpleTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "NonCloneSimpleTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::new_twin_normal(),
                    ),
                ))
            }
        },
    )
}
fn wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  { let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_arg_borrow_twin_normal(&api_arg))) } })
}
fn wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  { let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_arg_mut_borrow_twin_normal(&mut api_arg))) } })
}
fn wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  { let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_arg_own_twin_normal(api_arg))) } })
}
fn wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_return_own_twin_normal()))) } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_arg_borrow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            move |context| {
                let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
                transform_result_dco(Result::<_, anyhow::Error>::Ok(
                    crate::api::rust_auto_opaque::rust_auto_opaque_arg_borrow_twin_normal(
                        &api_arg, api_expect,
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<i32> + core::panic::UnwindSafe,
    adder: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_arg_mut_borrow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            let api_adder = adder.cst_decode();
            move |context| {
                let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
                transform_result_dco(Result::<_, anyhow::Error>::Ok(
                    crate::api::rust_auto_opaque::rust_auto_opaque_arg_mut_borrow_twin_normal(
                        &mut api_arg,
                        api_expect,
                        api_adder,
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  { let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::rust_auto_opaque::rust_auto_opaque_arg_own_and_return_own_twin_normal(api_arg)))) } })
}
fn wire_rust_auto_opaque_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_arg_own_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            move |context| {
                let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
                transform_result_dco(Result::<_, anyhow::Error>::Ok(
                    crate::api::rust_auto_opaque::rust_auto_opaque_arg_own_twin_normal(
                        api_arg, api_expect,
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_callable_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<
                    Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>,
                >,
            >,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_callable_arg_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
                transform_result_dco(Result::<_, anyhow::Error>::Ok(
                    crate::api::rust_auto_opaque::rust_auto_opaque_callable_arg_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_callable_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_callable_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::api::rust_auto_opaque::rust_auto_opaque_callable_return_twin_normal(
                        ),
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
    b: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context|  { let api_a = api_a.rust_auto_opaque_decode_owned()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_normal_and_opaque_arg_twin_normal(api_a, api_b))) } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>,
            >,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_plus_sign_arg_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
                transform_result_dco(Result::<_, anyhow::Error>::Ok(
                    crate::api::rust_auto_opaque::rust_auto_opaque_plus_sign_arg_twin_normal(
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_plus_sign_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_plus_sign_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::api::rust_auto_opaque::rust_auto_opaque_plus_sign_return_twin_normal(
                        ),
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_return_own_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_initial = initial.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::api::rust_auto_opaque::rust_auto_opaque_return_own_twin_normal(
                            api_initial,
                        ),
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>,
            >,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  { let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(&api_arg))) } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>,
            >,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  { let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(&mut api_arg))) } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
            flutter_rust_bridge::RustOpaque<
                std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>,
            >,
        > + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  { let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(api_arg))) } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal()))) } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  { let api_arg = api_arg.rust_auto_opaque_decode_ref()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_arg_borrow_twin_normal(&api_arg, api_expect))) } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  { let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut()?;
 transform_result_dco(Result::<_,anyhow::Error>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(&mut api_arg, api_expect))) } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>>
        + core::panic::UnwindSafe,
    expect: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_trait_object_arg_own_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            move |context| {
                let api_arg = api_arg.rust_auto_opaque_decode_owned()?;
                transform_result_dco(Result::<_, anyhow::Error>::Ok(
                    crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_arg_own_twin_normal(
                        api_arg, api_expect,
                    ),
                ))
            }
        },
    )
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_return_own_one_twin_normal()))) } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {  transform_result_dco(Result::<_,()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_return_own_two_twin_normal()))) } })
}
fn wire_rust_auto_opaque_two_args_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
    b: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_two_args_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                let api_a = api_a.rust_auto_opaque_decode_owned()?;
                let api_b = api_b.rust_auto_opaque_decode_owned()?;
                transform_result_dco(Result::<_, anyhow::Error>::Ok(
                    crate::api::rust_auto_opaque::rust_auto_opaque_two_args_twin_normal(
                        api_a, api_b,
                    ),
                ))
            }
        },
    )
}
fn wire_create_array_opaque_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_array_opaque_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::create_array_opaque_enum_twin_normal(),
                ))
            }
        },
    )
}
fn wire_create_nested_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_nested_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::create_nested_opaque_twin_normal(),
                ))
            }
        },
    )
}
fn wire_create_opaque_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::create_opaque_twin_normal(),
                ))
            }
        },
    )
}
fn wire_create_option_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_option_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::create_option_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_create_sync_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_sync_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::create_sync_opaque_twin_normal(),
                ))
            }
        },
    )
}
fn wire_frb_generator_test_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "frb_generator_test_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::frb_generator_test_twin_normal(),
                ))
            }
        },
    )
}
fn wire_opaque_array_run_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<[flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2]>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_run_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::opaque_array_run_twin_normal(api_data),
                ))
            }
        },
    )
}
fn wire_opaque_array_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::opaque_array_twin_normal(),
                ))
            }
        },
    )
}
fn wire_opaque_vec_run_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_run_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::opaque_vec_run_twin_normal(api_data),
                ))
            }
        },
    )
}
fn wire_opaque_vec_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::opaque_vec_twin_normal(),
                ))
            }
        },
    )
}
fn wire_run_enum_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::rust_opaque::EnumOpaqueTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_enum_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::run_enum_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_run_nested_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::rust_opaque::OpaqueNestedTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_nested_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::run_nested_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_run_non_clone_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    clone: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_non_clone_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_clone = clone.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::run_non_clone_twin_normal(api_clone),
                ))
            }
        },
    )
}
fn wire_run_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::run_opaque_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_run_opaque_with_delay_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_with_delay_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::rust_opaque::run_opaque_with_delay_twin_normal(api_opaque),
                ))
            }
        },
    )
}
fn wire_unwrap_rust_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_rust_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco(crate::api::rust_opaque::unwrap_rust_opaque_twin_normal(
                    api_opaque,
                ))
            }
        },
    )
}
fn wire_frb_sync_generator_test_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "frb_sync_generator_test_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::rust_opaque_sync::frb_sync_generator_test_twin_normal(),
            ))
        },
    )
}
fn wire_sync_create_non_clone_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_create_non_clone_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::rust_opaque_sync::sync_create_non_clone_twin_normal(),
            ))
        },
    )
}
fn wire_sync_create_opaque_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_create_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::rust_opaque_sync::sync_create_opaque_twin_normal(),
            ))
        },
    )
}
fn wire_sync_create_sync_opaque_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_create_sync_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::rust_opaque_sync::sync_create_sync_opaque_twin_normal(),
            ))
        },
    )
}
fn wire_sync_option_rust_opaque_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_option_rust_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco(
                crate::api::rust_opaque_sync::sync_option_rust_opaque_twin_normal(),
            )
        },
    )
}
fn wire_sync_run_opaque_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncReturnDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_run_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco(Result::<_, ()>::Ok(
                crate::api::rust_opaque_sync::sync_run_opaque_twin_normal(api_opaque),
            ))
        },
    )
}
fn wire_simple_adder_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<i32> + core::panic::UnwindSafe,
    b: impl CstDecode<i32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_adder_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::simple::simple_adder_twin_normal(api_a, api_b),
                ))
            }
        },
    )
}
fn wire_func_stream_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::stream::func_stream_return_error_twin_normal(
                    context.rust2dart_context().stream_sink::<_, String>(),
                ))
            }
        },
    )
}
fn wire_func_stream_return_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_return_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(crate::api::stream::func_stream_return_panic_twin_normal(
                    context.rust2dart_context().stream_sink::<_, String>(),
                ))
            }
        },
    )
}
fn wire_func_stream_sink_arg_position_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32> + core::panic::UnwindSafe,
    b: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_sink_arg_position_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::stream::func_stream_sink_arg_position_twin_normal(
                        api_a,
                        api_b,
                        context.rust2dart_context().stream_sink::<_, u32>(),
                    ),
                ))
            }
        },
    )
}
fn wire_handle_stream_of_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_of_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::stream::handle_stream_of_struct_twin_normal(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::stream::MyStreamEntryTwinNormal>(),
                    ),
                ))
            }
        },
    )
}
fn wire_handle_stream_sink_at_1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_sink_at_1_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_key = key.cst_decode();
            let api_max = max.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::stream::handle_stream_sink_at_1_twin_normal(
                        api_key,
                        api_max,
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::stream::LogTwinNormal>(),
                    ),
                ))
            }
        },
    )
}
fn wire_handle_stream_sink_at_2_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_sink_at_2_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_key = key.cst_decode();
            let api_max = max.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::stream::handle_stream_sink_at_2_twin_normal(
                        api_key,
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::stream::LogTwinNormal>(),
                        api_max,
                    ),
                ))
            }
        },
    )
}
fn wire_handle_stream_sink_at_3_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32> + core::panic::UnwindSafe,
    max: impl CstDecode<u32> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_sink_at_3_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_key = key.cst_decode();
            let api_max = max.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::stream::handle_stream_sink_at_3_twin_normal(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::stream::LogTwinNormal>(),
                        api_key,
                        api_max,
                    ),
                ))
            }
        },
    )
}
fn wire_func_stream_realistic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_realistic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::stream_misc::func_stream_realistic_twin_normal(
                        context.rust2dart_context().stream_sink::<_, String>(),
                        api_arg,
                    ),
                ))
            }
        },
    )
}
fn wire_func_struct_with_one_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::StructWithOneFieldTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::structure::func_struct_with_one_field_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_func_struct_with_two_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::StructWithTwoFieldTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::structure::func_struct_with_two_field_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_func_struct_with_zero_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::StructWithZeroFieldTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_struct_with_zero_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::structure::func_struct_with_zero_field_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::TupleStructWithOneFieldTwinNormal>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::structure::func_tuple_struct_with_one_field_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::structure::func_tuple_struct_with_two_field_twin_normal(api_arg),
                ))
            }
        },
    )
}
fn wire_test_tuple_2_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Vec<(String, i32)>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_2_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::tuple::test_tuple_2_twin_normal(api_value),
                ))
            }
        },
    )
}
fn wire_test_tuple_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Option<(String, i32)>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::tuple::test_tuple_twin_normal(api_value),
                ))
            }
        },
    )
}
fn wire_handle_type_alias_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_alias_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::type_alias::handle_type_alias_id_twin_normal(api_input),
                ))
            }
        },
    )
}
fn wire_handle_type_alias_model_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_alias_model_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::type_alias::handle_type_alias_model_twin_normal(api_input),
                ))
            }
        },
    )
}
fn wire_handle_type_nest_alias_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_nest_alias_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco(Result::<_, ()>::Ok(
                    crate::api::type_alias::handle_type_nest_alias_id_twin_normal(api_input),
                ))
            }
        },
    )
}
fn wire_handle_nested_uuids_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ids: impl CstDecode<crate::api::uuid_type::FeatureUuidTwinNormal> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_nested_uuids_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.cst_decode();
            move |context| {
                transform_result_dco(crate::api::uuid_type::handle_nested_uuids_twin_normal(
                    api_ids,
                ))
            }
        },
    )
}
fn wire_handle_uuid_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<uuid::Uuid> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_uuid_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco(crate::api::uuid_type::handle_uuid_twin_normal(api_id))
            }
        },
    )
}

// Section: wrapper_structs

#[derive(Clone)]
pub struct mirror_ApplicationEnv(crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv);

#[derive(Clone)]
pub struct mirror_ApplicationEnvVar(crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar);

#[derive(Clone)]
pub struct mirror_ApplicationMessage(
    crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage,
);

#[derive(Clone)]
pub struct mirror_ApplicationMode(crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode);

#[derive(Clone)]
pub struct mirror_ApplicationSettings(
    crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings,
);

#[derive(Clone)]
pub struct mirror_ListOfNestedRawStringMirrored(
    crate::api::pseudo_manual::mirror_twin_sync::ListOfNestedRawStringMirrored,
);

#[derive(Clone)]
pub struct mirror_NestedRawStringMirrored(
    crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored,
);

#[derive(Clone)]
pub struct mirror_Numbers(crate::api::pseudo_manual::mirror_twin_sync::Numbers);

#[derive(Clone)]
pub struct mirror_RawStringEnumMirrored(
    crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored,
);

#[derive(Clone)]
pub struct mirror_RawStringMirrored(crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored);

#[derive(Clone)]
pub struct mirror_Sequences(crate::api::pseudo_manual::mirror_twin_sync::Sequences);

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let ApplicationEnv =
            None::<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>.unwrap();
        let _: Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar> =
            ApplicationEnv.vars;
    }
    {
        let ApplicationEnvVar_ =
            None::<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar>.unwrap();
        let _: String = ApplicationEnvVar_.0;
        let _: bool = ApplicationEnvVar_.1;
    }
    match None::<crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage>.unwrap() {
        crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::DisplayMessage(field0) => {
            let _: String = field0;
        }
        crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::RenderPixel { x, y } => {
            let _: i32 = x;
            let _: i32 = y;
        }
        crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::Exit => {}
    }
    {
        let ApplicationSettings =
            None::<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>.unwrap();
        let _: String = ApplicationSettings.name;
        let _: String = ApplicationSettings.version;
        let _: crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode =
            ApplicationSettings.mode;
        let _: Box<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv> =
            ApplicationSettings.env;
        let _: Option<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv> =
            ApplicationSettings.env_optional;
    }
    {
        let ListOfNestedRawStringMirrored =
            None::<crate::api::pseudo_manual::mirror_twin_sync::ListOfNestedRawStringMirrored>
                .unwrap();
        let _: Vec<crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored> =
            ListOfNestedRawStringMirrored.raw;
    }
    {
        let NestedRawStringMirrored =
            None::<crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored>.unwrap();
        let _: crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored =
            NestedRawStringMirrored.raw;
    }
    {
        let Numbers_ = None::<crate::api::pseudo_manual::mirror_twin_sync::Numbers>.unwrap();
        let _: Vec<i32> = Numbers_.0;
    }
    match None::<crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored>.unwrap() {
        crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::Raw(field0) => {
            let _: crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored = field0;
        }
        crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::Nested(field0) => {
            let _: crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored = field0;
        }
        crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::ListOfNested(
            field0,
        ) => {
            let _: crate::api::pseudo_manual::mirror_twin_sync::ListOfNestedRawStringMirrored =
                field0;
        }
    }
    {
        let RawStringMirrored =
            None::<crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored>.unwrap();
        let _: String = RawStringMirrored.value;
    }
    {
        let Sequences_ = None::<crate::api::pseudo_manual::mirror_twin_sync::Sequences>.unwrap();
        let _: Vec<i32> = Sequences_.0;
    }
};

// Section: dart2rust

pub trait CstDecode<T> {
    fn cst_decode(self) -> T;
}

impl<T, S> CstDecode<Option<T>> for *mut S
where
    *mut S: CstDecode<T>,
{
    fn cst_decode(self) -> Option<T> {
        (!self.is_null()).then(|| self.cst_decode())
    }
}
impl CstDecode<chrono::DateTime<chrono::Local>> for i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Local> {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::DateTime::<chrono::Local>::from(
            chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
                chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                    .expect("invalid or out-of-range datetime"),
                chrono::Utc,
            ),
        )
    }
}
impl CstDecode<chrono::NaiveDateTime> for i64 {
    fn cst_decode(self) -> chrono::NaiveDateTime {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::NaiveDateTime::from_timestamp_opt(s, ns).expect("invalid or out-of-range datetime")
    }
}
impl CstDecode<chrono::DateTime<chrono::Utc>> for i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode> for i32 {
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode {
        match self {
            0 => crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode::Standalone,
            1 => crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        }
    }
}
impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<crate::api::enumeration::EnumSimpleTwinNormal> for i32 {
    fn cst_decode(self) -> crate::api::enumeration::EnumSimpleTwinNormal {
        match self {
            0 => crate::api::enumeration::EnumSimpleTwinNormal::A,
            1 => crate::api::enumeration::EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync>
    for i32
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
        match self {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinRustAsync: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync> for i32 {
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
        match self {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", self),
        }
    }
}
impl CstDecode<f32> for f32 {
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<f64> for f64 {
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<i16> for i16 {
    fn cst_decode(self) -> i16 {
        self
    }
}
impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<i8> for i8 {
    fn cst_decode(self) -> i8 {
        self
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyEnum> for i32 {
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyEnum {
        match self {
            0 => crate::auxiliary::sample_types::MyEnum::False,
            1 => crate::auxiliary::sample_types::MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", self),
        }
    }
}
impl CstDecode<u16> for u16 {
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u32> for u32 {
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    fn cst_decode(self) -> usize {
        self
    }
}
impl CstDecode<crate::api::misc_example::WeekdaysTwinNormal> for i32 {
    fn cst_decode(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        match self {
            0 => crate::api::misc_example::WeekdaysTwinNormal::Monday,
            1 => crate::api::misc_example::WeekdaysTwinNormal::Tuesday,
            2 => crate::api::misc_example::WeekdaysTwinNormal::Wednesday,
            3 => crate::api::misc_example::WeekdaysTwinNormal::Thursday,
            4 => crate::api::misc_example::WeekdaysTwinNormal::Friday,
            5 => crate::api::misc_example::WeekdaysTwinNormal::Saturday,
            6 => crate::api::misc_example::WeekdaysTwinNormal::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinNormal: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
    for i32
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        match self {
            0 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Monday,
1 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Tuesday,
2 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Wednesday,
3 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Thursday,
4 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Friday,
5 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Saturday,
6 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinRustAsync: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> for i32 {
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        match self {
            0 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Monday,
            1 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Tuesday,
            2 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Wednesday,
            3 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Thursday,
            4 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Friday,
            5 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Saturday,
            6 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinSync: {}", self),
        }
    }
}
pub trait SseDecode {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self;
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<
        std::sync::RwLock<Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>>,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for chrono::Duration {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(self);
    }
}

impl SseDecode for chrono::DateTime<chrono::Local> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(self);
    }
}

impl SseDecode for chrono::NaiveDateTime {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(self);
    }
}

impl SseDecode for chrono::DateTime<chrono::Utc> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(self);
    }
}

impl SseDecode
    for flutter_rust_bridge::DartFn<
        fn() -> flutter_rust_bridge::for_generated::futures::future::BoxFuture<'static, ()>,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for [flutter_rust_bridge::DartOpaque; 1] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<flutter_rust_bridge::DartOpaque>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<Mutex<HideData>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<RwLock<HideData>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for [flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<i32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<
        std::sync::RwLock<Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>>,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return inner;
    }
}

impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for uuid::Uuid {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::decode_uuid(inner);
    }
}

impl SseDecode for crate::api::misc_example::ATwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return ATwinNormal { a };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return ATwinRustAsync { a };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return ATwinSync { a };
    }
}

impl SseDecode for crate::api::misc_example::AbcTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <crate::api::misc_example::ATwinNormal>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::A(field0);
            }
            1 => {
                let mut field0 = <crate::api::misc_example::BTwinNormal>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::B(field0);
            }
            2 => {
                let mut field0 = <crate::api::misc_example::CTwinNormal>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::C(field0);
            }
            3 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::JustInt(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(field0);
            }
            1 => {
                let mut field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(field0);
            }
            2 => {
                let mut field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(field0);
            }
            3 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(field0);
            }
            1 => {
                let mut field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(field0);
            }
            2 => {
                let mut field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(field0);
            }
            3 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(
                    field0,
                );
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut vars =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar>>::sse_decode(
                deserializer,
            );
        return ApplicationEnv { vars };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <String>::sse_decode(deserializer);
        let mut field1 = <bool>::sse_decode(deserializer);
        return ApplicationEnvVar { field0, field1 };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode::Standalone,
            1 => crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut name = <String>::sse_decode(deserializer);
        let mut version = <String>::sse_decode(deserializer);
        let mut mode = <crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode>::sse_decode(
            deserializer,
        );
        let mut env =
            <Box<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>>::sse_decode(
                deserializer,
            );
        let mut envOptional =
            <Option<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>>::sse_decode(
                deserializer,
            );
        return ApplicationSettings {
            name,
            version,
            mode,
            env,
            env_optional: envOptional,
        };
    }
}

impl SseDecode for crate::api::optional::AttributeTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut key = <String>::sse_decode(deserializer);
        let mut value = <String>::sse_decode(deserializer);
        return AttributeTwinNormal { key, value };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut key = <String>::sse_decode(deserializer);
        let mut value = <String>::sse_decode(deserializer);
        return AttributeTwinRustAsync { key, value };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut key = <String>::sse_decode(deserializer);
        let mut value = <String>::sse_decode(deserializer);
        return AttributeTwinSync { key, value };
    }
}

impl SseDecode for crate::api::misc_example::BTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut b = <i32>::sse_decode(deserializer);
        return BTwinNormal { b };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut b = <i32>::sse_decode(deserializer);
        return BTwinRustAsync { b };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut b = <i32>::sse_decode(deserializer);
        return BTwinSync { b };
    }
}

impl SseDecode for crate::api::array::BlobTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 1600]>::sse_decode(deserializer);
        return BlobTwinNormal { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 1600]>::sse_decode(deserializer);
        return BlobTwinRustAsync { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 1600]>::sse_decode(deserializer);
        return BlobTwinSync { field0 };
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_bool::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>::sse_decode(
            deserializer,
        );
    }
}

impl SseDecode for Box<crate::api::array::BlobTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::array::BlobTwinNormal>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>::sse_decode(
            deserializer,
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>::sse_decode(
            deserializer,
        );
    }
}

impl SseDecode for Box<bool> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <bool>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::enumeration::DistanceTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::enumeration::DistanceTwinNormal>::sse_decode(deserializer);
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>::sse_decode(
            deserializer,
        );
    }
}

impl SseDecode for Box<crate::api::optional::ExoticOptionalsTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::optional::ExoticOptionalsTwinNormal>::sse_decode(deserializer);
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <f64>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<i32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <i32>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<i64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <i64>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<i8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <i8>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::enumeration::KitchenSinkTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::enumeration::KitchenSinkTwinNormal>::sse_decode(deserializer);
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::sse_decode(
            deserializer,
        );
    }
}

impl SseDecode for Box<crate::auxiliary::sample_types::MySize> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::auxiliary::sample_types::MySize>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::enumeration::SpeedTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::enumeration::SpeedTwinNormal>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>::sse_decode(
            deserializer,
        );
    }
}

impl SseDecode for Box<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <u8>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<[u8; 1600]> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <[u8; 1600]>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::misc_example::WeekdaysTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(deserializer);
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer);
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(
            deserializer,
        );
    }
}

impl SseDecode for crate::api::misc_example::CTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut c = <bool>::sse_decode(deserializer);
        return CTwinNormal { c };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut c = <bool>::sse_decode(deserializer);
        return CTwinRustAsync { c };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut c = <bool>::sse_decode(deserializer);
        return CTwinSync { c };
    }
}

impl SseDecode for crate::api::method::ConcatenateWithTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return ConcatenateWithTwinNormal { a };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return ConcatenateWithTwinRustAsync { a };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return ConcatenateWithTwinSync { a };
    }
}

impl SseDecode for crate::api::exception::CustomNestedErrorInnerTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <String>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(field0);
            }
            1 => {
                let mut field0 = <u32>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three(field0);
            }
            1 => {
                let mut field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three(field0);
            }
            1 => {
                let mut field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomNestedErrorOuterTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <String>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedErrorOuterTwinNormal::One(field0);
            }
            1 => {
                let mut field0 =
                    <crate::api::exception::CustomNestedErrorInnerTwinNormal>::sse_decode(
                        deserializer,
                    );
                return crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One(field0);
            }
            1 => {
                let mut field0 = <crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(field0);
            }
            1 => {
                let mut field0 = <crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomStructErrorTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return CustomStructErrorTwinNormal { a };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return CustomStructErrorTwinRustAsync { a };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <String>::sse_decode(deserializer);
        return CustomStructErrorTwinSync { a };
    }
}

impl SseDecode for crate::api::exception::CustomStructTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut message = <String>::sse_decode(deserializer);
        return CustomStructTwinNormal { message };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut message = <String>::sse_decode(deserializer);
        return CustomStructTwinRustAsync { message };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut message = <String>::sse_decode(deserializer);
        return CustomStructTwinSync { message };
    }
}

impl SseDecode for crate::api::attribute::CustomizedTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut finalField = <String>::sse_decode(deserializer);
        let mut nonFinalField = <Option<String>>::sse_decode(deserializer);
        return CustomizedTwinNormal {
            final_field: finalField,
            non_final_field: nonFinalField,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut finalField = <String>::sse_decode(deserializer);
        let mut nonFinalField = <Option<String>>::sse_decode(deserializer);
        return CustomizedTwinRustAsync {
            final_field: finalField,
            non_final_field: nonFinalField,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut finalField = <String>::sse_decode(deserializer);
        let mut nonFinalField = <Option<String>>::sse_decode(deserializer);
        return CustomizedTwinSync {
            final_field: finalField,
            non_final_field: nonFinalField,
        };
    }
}

impl SseDecode for crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return DartOpaqueNestedTwinNormal { first, second };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return DartOpaqueNestedTwinRustAsync { first, second };
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return DartOpaqueNestedTwinSync { first, second };
    }
}

impl SseDecode for crate::api::enumeration::DistanceTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::DistanceTwinNormal::Unknown;
            }
            1 => {
                let mut field0 = <f64>::sse_decode(deserializer);
                return crate::api::enumeration::DistanceTwinNormal::Map(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown;
            }
            1 => {
                let mut field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown;
            }
            1 => {
                let mut field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(
                    field0,
                );
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::misc_type::EmptyTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return EmptyTwinNormal {};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return EmptyTwinRustAsync {};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return EmptyTwinSync {};
    }
}

impl SseDecode for crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                return crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(field0);
            }
            1 => {
                let mut field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive(field0);
            }
            1 => {
                let mut field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(field0);
            }
            1 => {
                let mut field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::rust_opaque::EnumOpaqueTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <flutter_rust_bridge::RustOpaque<
                    crate::auxiliary::sample_types::HideData,
                >>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(field0);
            }
            1 => {
                let mut field0 = <flutter_rust_bridge::RustOpaque<i32>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(field0);
            }
            2 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>>>::sse_decode(
                        deserializer,
                    );
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(field0);
            }
            3 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<Mutex<HideData>>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(field0);
            }
            4 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<RwLock<HideData>>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <flutter_rust_bridge::RustOpaque<
                    crate::auxiliary::sample_types::HideData,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct(field0);
            }
            1 => {
                let mut field0 = <flutter_rust_bridge::RustOpaque<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive(field0);
            }
            2 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>>>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj(field0);
            }
            3 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<Mutex<HideData>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex(field0);
            }
            4 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<RwLock<HideData>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <flutter_rust_bridge::RustOpaque<
                    crate::auxiliary::sample_types::HideData,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(field0);
            }
            1 => {
                let mut field0 = <flutter_rust_bridge::RustOpaque<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(field0);
            }
            2 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>>>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(field0);
            }
            3 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<Mutex<HideData>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(
                    field0,
                );
            }
            4 => {
                let mut field0 =
                    <flutter_rust_bridge::RustOpaque<RwLock<HideData>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::enumeration::EnumSimpleTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::api::enumeration::EnumSimpleTwinNormal::A,
            1 => crate::api::enumeration::EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", self),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinRustAsync: {}", self),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", self),
        };
    }
}

impl SseDecode for crate::api::enumeration::EnumWithItemMixedTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::EnumWithItemMixedTwinNormal::A;
            }
            1 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemMixedTwinNormal::B(field0);
            }
            2 => {
                let mut cField = <String>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemMixedTwinNormal::C { c_field: cField };
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A;
            }
            1 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B(field0);
            }
            2 => {
                let mut cField = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field: cField};
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A;
            }
            1 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(field0);
            }
            2 => {
                let mut cField = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C{c_field: cField};
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::enumeration::EnumWithItemStructTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemStructTwinNormal::A {
                    a_field: aField,
                };
            }
            1 => {
                let mut bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemStructTwinNormal::B {
                    b_field: bField,
                };
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field: aField};
            }
            1 => {
                let mut bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field: bField};
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A{a_field: aField};
            }
            1 => {
                let mut bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B{b_field: bField};
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::enumeration::EnumWithItemTupleTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemTupleTwinNormal::A(field0);
            }
            1 => {
                let mut field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemTupleTwinNormal::B(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A(field0);
            }
            1 => {
                let mut field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(field0);
            }
            1 => {
                let mut field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::event_listener::EventTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut address = <String>::sse_decode(deserializer);
        let mut payload = <String>::sse_decode(deserializer);
        return EventTwinNormal { address, payload };
    }
}

impl SseDecode for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut address = <String>::sse_decode(deserializer);
        let mut payload = <String>::sse_decode(deserializer);
        return EventTwinRustAsync { address, payload };
    }
}

impl SseDecode for crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut address = <String>::sse_decode(deserializer);
        let mut payload = <String>::sse_decode(deserializer);
        return EventTwinSync { address, payload };
    }
}

impl SseDecode for crate::api::optional::ExoticOptionalsTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut int32 = <Option<i32>>::sse_decode(deserializer);
        let mut int64 = <Option<i64>>::sse_decode(deserializer);
        let mut float64 = <Option<f64>>::sse_decode(deserializer);
        let mut boolean = <Option<bool>>::sse_decode(deserializer);
        let mut zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut attributes =
            <Option<Vec<crate::api::optional::AttributeTwinNormal>>>::sse_decode(deserializer);
        let mut attributesNullable =
            <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_decode(deserializer);
        let mut nullableAttributes =
            <Option<Vec<Option<crate::api::optional::AttributeTwinNormal>>>>::sse_decode(
                deserializer,
            );
        let mut newtypeint =
            <Option<crate::api::newtype_pattern::NewTypeIntTwinNormal>>::sse_decode(deserializer);
        return ExoticOptionalsTwinNormal {
            int32,
            int64,
            float64,
            boolean,
            zerocopy,
            int8list: int8List,
            uint8list: uint8List,
            int32list: int32List,
            float32list: float32List,
            float64list: float64List,
            attributes,
            attributes_nullable: attributesNullable,
            nullable_attributes: nullableAttributes,
            newtypeint,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut int32 = <Option<i32>>::sse_decode(deserializer);
        let mut int64 = <Option<i64>>::sse_decode(deserializer);
        let mut float64 = <Option<f64>>::sse_decode(deserializer);
        let mut boolean = <Option<bool>>::sse_decode(deserializer);
        let mut zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
        >>::sse_decode(deserializer);
        let mut attributesNullable = <Vec<
            Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
        >>::sse_decode(deserializer);
        let mut nullableAttributes = <Option<
            Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >,
        >>::sse_decode(deserializer);
        let mut newtypeint = <Option<
            crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
        >>::sse_decode(deserializer);
        return ExoticOptionalsTwinRustAsync {
            int32,
            int64,
            float64,
            boolean,
            zerocopy,
            int8list: int8List,
            uint8list: uint8List,
            int32list: int32List,
            float32list: float32List,
            float64list: float64List,
            attributes,
            attributes_nullable: attributesNullable,
            nullable_attributes: nullableAttributes,
            newtypeint,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut int32 = <Option<i32>>::sse_decode(deserializer);
        let mut int64 = <Option<i64>>::sse_decode(deserializer);
        let mut float64 = <Option<f64>>::sse_decode(deserializer);
        let mut boolean = <Option<bool>>::sse_decode(deserializer);
        let mut zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>,
        >>::sse_decode(deserializer);
        let mut attributesNullable = <Vec<
            Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>,
        >>::sse_decode(deserializer);
        let mut nullableAttributes = <Option<
            Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>,
        >>::sse_decode(deserializer);
        let mut newtypeint = <Option<
            crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync,
        >>::sse_decode(deserializer);
        return ExoticOptionalsTwinSync {
            int32,
            int64,
            float64,
            boolean,
            zerocopy,
            int8list: int8List,
            uint8list: uint8List,
            int32list: int32List,
            float32list: float32List,
            float64list: float64List,
            attributes,
            attributes_nullable: attributesNullable,
            nullable_attributes: nullableAttributes,
            newtypeint,
        };
    }
}

impl SseDecode for f32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for [f64; 16] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<f64>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::chrono_type::FeatureChronoTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut utc = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut local = <chrono::DateTime<chrono::Local>>::sse_decode(deserializer);
        let mut duration = <chrono::Duration>::sse_decode(deserializer);
        let mut naive = <chrono::NaiveDateTime>::sse_decode(deserializer);
        return FeatureChronoTwinNormal {
            utc,
            local,
            duration,
            naive,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut utc = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut local = <chrono::DateTime<chrono::Local>>::sse_decode(deserializer);
        let mut duration = <chrono::Duration>::sse_decode(deserializer);
        let mut naive = <chrono::NaiveDateTime>::sse_decode(deserializer);
        return FeatureChronoTwinRustAsync {
            utc,
            local,
            duration,
            naive,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut utc = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut local = <chrono::DateTime<chrono::Local>>::sse_decode(deserializer);
        let mut duration = <chrono::Duration>::sse_decode(deserializer);
        let mut naive = <chrono::NaiveDateTime>::sse_decode(deserializer);
        return FeatureChronoTwinSync {
            utc,
            local,
            duration,
            naive,
        };
    }
}

impl SseDecode for crate::api::uuid_type::FeatureUuidTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut one = <uuid::Uuid>::sse_decode(deserializer);
        return FeatureUuidTwinNormal { one };
    }
}

impl SseDecode for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut one = <uuid::Uuid>::sse_decode(deserializer);
        return FeatureUuidTwinRustAsync { one };
    }
}

impl SseDecode for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut one = <uuid::Uuid>::sse_decode(deserializer);
        return FeatureUuidTwinSync { one };
    }
}

impl SseDecode for crate::api::array::FeedIdTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 8]>::sse_decode(deserializer);
        return FeedIdTwinNormal { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 8]>::sse_decode(deserializer);
        return FeedIdTwinRustAsync { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 8]>::sse_decode(deserializer);
        return FeedIdTwinSync { field0 };
    }
}

impl SseDecode for i16 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for [i32; 2] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<i32>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for i64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i8::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::enumeration::KitchenSinkTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::KitchenSinkTwinNormal::Empty;
            }
            1 => {
                let mut int32 = <i32>::sse_decode(deserializer);
                let mut float64 = <f64>::sse_decode(deserializer);
                let mut boolean = <bool>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                    int32,
                    float64,
                    boolean,
                };
            }
            2 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                let mut field1 =
                    <Box<crate::api::enumeration::KitchenSinkTwinNormal>>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Nested(field0, field1);
            }
            3 => {
                let mut field0 = <Option<i32>>::sse_decode(deserializer);
                let mut field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Optional(field0, field1);
            }
            4 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Buffer(field0);
            }
            5 => {
                let mut field0 =
                    <crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Enums(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty;
            }
            1 => {
                let mut int32 = <i32>::sse_decode(deserializer);
                let mut float64 = <f64>::sse_decode(deserializer);
                let mut boolean = <bool>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32, float64, boolean};
            }
            2 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                let mut field1 = <Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested(field0, field1);
            }
            3 => {
                let mut field0 = <Option<i32>>::sse_decode(deserializer);
                let mut field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional(field0, field1);
            }
            4 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer(field0);
            }
            5 => {
                let mut field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty;
            }
            1 => {
                let mut int32 = <i32>::sse_decode(deserializer);
                let mut float64 = <f64>::sse_decode(deserializer);
                let mut boolean = <bool>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives{int32, float64, boolean};
            }
            2 => {
                let mut field0 = <i32>::sse_decode(deserializer);
                let mut field1 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(field0, field1);
            }
            3 => {
                let mut field0 = <Option<i32>>::sse_decode(deserializer);
                let mut field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(field0, field1);
            }
            4 => {
                let mut field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(field0);
            }
            5 => {
                let mut field0 = <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for Vec<chrono::Duration> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<chrono::Duration>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<chrono::NaiveDateTime> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<chrono::NaiveDateTime>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<flutter_rust_bridge::DartOpaque> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<flutter_rust_bridge::DartOpaque>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<flutter_rust_bridge::RustOpaque<
                crate::auxiliary::sample_types::HideData,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::optional::AttributeTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::optional::AttributeTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<bool> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<bool>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::auxiliary::sample_types::MySize> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::auxiliary::sample_types::MySize>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::misc_example::MyTreeNodeTwinNormal>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<String>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<String>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::optional::AttributeTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <Option<crate::api::optional::AttributeTwinNormal>>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<i32>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<i32>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <Option<crate::api::misc_example::WeekdaysTwinNormal>>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<Vec<i32>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<Vec<i32>>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i16> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i16>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u16> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u16>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, i32)> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, i32)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::array::TestIdTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::array::TestIdTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::misc_example::WeekdaysTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for crate::api::inside_macro::MacroStruct {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut data = <i32>::sse_decode(deserializer);
        return MacroStruct { data };
    }
}

impl SseDecode for crate::api::enumeration::MeasureTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 =
                    <Box<crate::api::enumeration::SpeedTwinNormal>>::sse_decode(deserializer);
                return crate::api::enumeration::MeasureTwinNormal::Speed(field0);
            }
            1 => {
                let mut field0 =
                    <Box<crate::api::enumeration::DistanceTwinNormal>>::sse_decode(deserializer);
                return crate::api::enumeration::MeasureTwinNormal::Distance(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(field0);
            }
            1 => {
                let mut field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(
                    field0,
                );
            }
            1 => {
                let mut field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(
                    field0,
                );
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::array::MessageIdTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 32]>::sse_decode(deserializer);
        return MessageIdTwinNormal { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 32]>::sse_decode(deserializer);
        return MessageIdTwinRustAsync { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[u8; 32]>::sse_decode(deserializer);
        return MessageIdTwinSync { field0 };
    }
}

impl SseDecode for crate::auxiliary::sample_types::MyEnum {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::auxiliary::sample_types::MyEnum::False,
            1 => crate::auxiliary::sample_types::MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", self),
        };
    }
}

impl SseDecode for crate::api::misc_example::MyNestedStructTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut treeNode =
            <crate::api::misc_example::MyTreeNodeTwinNormal>::sse_decode(deserializer);
        let mut weekday = <crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(deserializer);
        return MyNestedStructTwinNormal {
            tree_node: treeNode,
            weekday,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut treeNode = <crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_decode(deserializer);
        let mut weekday = <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer);
        return MyNestedStructTwinRustAsync {
            tree_node: treeNode,
            weekday,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut treeNode =
            <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_decode(
                deserializer,
            );
        let mut weekday =
            <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(
                deserializer,
            );
        return MyNestedStructTwinSync {
            tree_node: treeNode,
            weekday,
        };
    }
}

impl SseDecode for crate::auxiliary::sample_types::MySize {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut width = <i32>::sse_decode(deserializer);
        let mut height = <i32>::sse_decode(deserializer);
        return MySize { width, height };
    }
}

impl SseDecode for crate::auxiliary::sample_types::MyStruct {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut content = <bool>::sse_decode(deserializer);
        return MyStruct { content };
    }
}

impl SseDecode for crate::api::misc_example::MyTreeNodeTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut valueI32 = <i32>::sse_decode(deserializer);
        let mut valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut valueBoolean = <bool>::sse_decode(deserializer);
        let mut children =
            <Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>::sse_decode(deserializer);
        return MyTreeNodeTwinNormal {
            value_i32: valueI32,
            value_vec_u8: valueVecU8,
            value_boolean: valueBoolean,
            children,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut valueI32 = <i32>::sse_decode(deserializer);
        let mut valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut valueBoolean = <bool>::sse_decode(deserializer);
        let mut children = <Vec<
            crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync,
        >>::sse_decode(deserializer);
        return MyTreeNodeTwinRustAsync {
            value_i32: valueI32,
            value_vec_u8: valueVecU8,
            value_boolean: valueBoolean,
            children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut valueI32 = <i32>::sse_decode(deserializer);
        let mut valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut valueBoolean = <bool>::sse_decode(deserializer);
        let mut children = <Vec<
            crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync,
        >>::sse_decode(deserializer);
        return MyTreeNodeTwinSync {
            value_i32: valueI32,
            value_vec_u8: valueVecU8,
            value_boolean: valueBoolean,
            children,
        };
    }
}

impl SseDecode for crate::api::newtype_pattern::NewTypeIntTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i64>::sse_decode(deserializer);
        return NewTypeIntTwinNormal { field0 };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i64>::sse_decode(deserializer);
        return NewTypeIntTwinRustAsync { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i64>::sse_decode(deserializer);
        return NewTypeIntTwinSync { field0 };
    }
}

impl SseDecode for crate::api::enumeration::NoteTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut day = <Box<crate::api::misc_example::WeekdaysTwinNormal>>::sse_decode(deserializer);
        let mut body = <String>::sse_decode(deserializer);
        return NoteTwinNormal { day, body };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut day = <Box<
            crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync,
        >>::sse_decode(deserializer);
        let mut body = <String>::sse_decode(deserializer);
        return NoteTwinRustAsync { day, body };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut day =
            <Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>::sse_decode(
                deserializer,
            );
        let mut body = <String>::sse_decode(deserializer);
        return NoteTwinSync { day, body };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::Numbers {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <Vec<i32>>::sse_decode(deserializer);
        return Numbers { field0 };
    }
}

impl SseDecode for crate::api::rust_opaque::OpaqueNestedTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut first =
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_decode(
                deserializer,
            );
        let mut second =
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_decode(
                deserializer,
            );
        return OpaqueNestedTwinNormal { first, second };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut first =
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_decode(
                deserializer,
            );
        let mut second =
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_decode(
                deserializer,
            );
        return OpaqueNestedTwinRustAsync { first, second };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut first =
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_decode(
                deserializer,
            );
        let mut second =
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_decode(
                deserializer,
            );
        return OpaqueNestedTwinSync { first, second };
    }
}

impl SseDecode for Option<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <String>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::DateTime<chrono::Utc>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<flutter_rust_bridge::DartOpaque> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>::sse_decode(
                deserializer,
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::optional::AttributeTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::optional::AttributeTwinNormal>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_decode(
                deserializer,
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <bool>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::optional::ExoticOptionalsTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::optional::ExoticOptionalsTwinNormal>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <f32>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <f64>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i16> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <i16>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <i32>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <i64>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <i8>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::newtype_pattern::NewTypeIntTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::newtype_pattern::NewTypeIntTwinNormal>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<(String, i32)> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <(String, i32)>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u16> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <u16>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <u32>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <u64>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <u8>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::misc_example::WeekdaysTwinNormal> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<bool>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<bool>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<crate::api::optional::ExoticOptionalsTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<crate::api::optional::ExoticOptionalsTwinNormal>>::sse_decode(
                deserializer,
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<
                crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync,
            >>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<f64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<f64>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<i32>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<i32>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<i64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<i64>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<i8>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<i8>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<u8>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Box<u8>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::optional::AttributeTwinNormal>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<crate::api::optional::AttributeTwinNormal>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<
                crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync,
            >>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<Option<crate::api::optional::AttributeTwinNormal>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_decode(
                deserializer,
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<f32>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<f32>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<f64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<f64>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<i32>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<i32>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<i8>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<i8>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return <Vec<u8>>::sse_decode(deserializer);
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::optional::OptVecsTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut enums =
            <Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>::sse_decode(deserializer);
        let mut strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return OptVecsTwinNormal {
            i32,
            enums,
            strings,
            buffers,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut enums = <Vec<
            Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>,
        >>::sse_decode(deserializer);
        let mut strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return OptVecsTwinRustAsync {
            i32,
            enums,
            strings,
            buffers,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut enums = <Vec<
            Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>,
        >>::sse_decode(deserializer);
        let mut strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return OptVecsTwinSync {
            i32,
            enums,
            strings,
            buffers,
        };
    }
}

impl SseDecode for (String, i32) {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <String>::sse_decode(deserializer);
        let mut field1 = <i32>::sse_decode(deserializer);
        return (field0, field1);
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::Sequences {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <Vec<i32>>::sse_decode(deserializer);
        return Sequences { field0 };
    }
}

impl SseDecode for crate::api::exception::SomeStructTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut value = <u32>::sse_decode(deserializer);
        return SomeStructTwinNormal { value };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut value = <u32>::sse_decode(deserializer);
        return SomeStructTwinRustAsync { value };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut value = <u32>::sse_decode(deserializer);
        return SomeStructTwinSync { value };
    }
}

impl SseDecode for crate::api::enumeration::SpeedTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::SpeedTwinNormal::Unknown;
            }
            1 => {
                let mut field0 = <f64>::sse_decode(deserializer);
                return crate::api::enumeration::SpeedTwinNormal::GPS(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown;
            }
            1 => {
                let mut field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(field0);
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown;
            }
            1 => {
                let mut field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(
                    field0,
                );
            }
            _ => {
                unimplemented!();
            }
        }
    }
}

impl SseDecode for crate::api::comment::StructWithCommentsTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut fieldWithComments = <i32>::sse_decode(deserializer);
        return StructWithCommentsTwinNormal {
            field_with_comments: fieldWithComments,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut fieldWithComments = <i32>::sse_decode(deserializer);
        return StructWithCommentsTwinRustAsync {
            field_with_comments: fieldWithComments,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut fieldWithComments = <i32>::sse_decode(deserializer);
        return StructWithCommentsTwinSync {
            field_with_comments: fieldWithComments,
        };
    }
}

impl SseDecode for crate::api::misc_example::StructWithEnumTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut abc1 = <crate::api::misc_example::AbcTwinNormal>::sse_decode(deserializer);
        let mut abc2 = <crate::api::misc_example::AbcTwinNormal>::sse_decode(deserializer);
        return StructWithEnumTwinNormal { abc1, abc2 };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut abc1 =
            <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_decode(
                deserializer,
            );
        let mut abc2 =
            <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_decode(
                deserializer,
            );
        return StructWithEnumTwinRustAsync { abc1, abc2 };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut abc1 = <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_decode(
            deserializer,
        );
        let mut abc2 = <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_decode(
            deserializer,
        );
        return StructWithEnumTwinSync { abc1, abc2 };
    }
}

impl SseDecode for crate::api::structure::StructWithOneFieldTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <i32>::sse_decode(deserializer);
        return StructWithOneFieldTwinNormal { a };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <i32>::sse_decode(deserializer);
        return StructWithOneFieldTwinRustAsync { a };
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <i32>::sse_decode(deserializer);
        return StructWithOneFieldTwinSync { a };
    }
}

impl SseDecode for crate::api::structure::StructWithTwoFieldTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <i32>::sse_decode(deserializer);
        let mut b = <i32>::sse_decode(deserializer);
        return StructWithTwoFieldTwinNormal { a, b };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <i32>::sse_decode(deserializer);
        let mut b = <i32>::sse_decode(deserializer);
        return StructWithTwoFieldTwinRustAsync { a, b };
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut a = <i32>::sse_decode(deserializer);
        let mut b = <i32>::sse_decode(deserializer);
        return StructWithTwoFieldTwinSync { a, b };
    }
}

impl SseDecode for crate::api::structure::StructWithZeroFieldTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return StructWithZeroFieldTwinNormal {};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return StructWithZeroFieldTwinRustAsync {};
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return StructWithZeroFieldTwinSync {};
    }
}

impl SseDecode for crate::api::method::SumWithTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut x = <u32>::sse_decode(deserializer);
        return SumWithTwinNormal { x };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut x = <u32>::sse_decode(deserializer);
        return SumWithTwinRustAsync { x };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut x = <u32>::sse_decode(deserializer);
        return SumWithTwinSync { x };
    }
}

impl SseDecode for crate::api::array::TestIdTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[i32; 2]>::sse_decode(deserializer);
        return TestIdTwinNormal { field0 };
    }
}

impl SseDecode for [crate::api::array::TestIdTwinNormal; 4] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::array::TestIdTwinNormal>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[i32; 2]>::sse_decode(deserializer);
        return TestIdTwinRustAsync { field0 };
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <[i32; 2]>::sse_decode(deserializer);
        return TestIdTwinSync { field0 };
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::structure::TupleStructWithOneFieldTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i32>::sse_decode(deserializer);
        return TupleStructWithOneFieldTwinNormal { field0 };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i32>::sse_decode(deserializer);
        return TupleStructWithOneFieldTwinRustAsync { field0 };
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i32>::sse_decode(deserializer);
        return TupleStructWithOneFieldTwinSync { field0 };
    }
}

impl SseDecode for crate::api::structure::TupleStructWithTwoFieldTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i32>::sse_decode(deserializer);
        let mut field1 = <i32>::sse_decode(deserializer);
        return TupleStructWithTwoFieldTwinNormal { field0, field1 };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i32>::sse_decode(deserializer);
        let mut field1 = <i32>::sse_decode(deserializer);
        return TupleStructWithTwoFieldTwinRustAsync { field0, field1 };
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut field0 = <i32>::sse_decode(deserializer);
        let mut field1 = <i32>::sse_decode(deserializer);
        return TupleStructWithTwoFieldTwinSync { field0, field1 };
    }
}

impl SseDecode for u16 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8::<NativeEndian>().unwrap()
    }
}

impl SseDecode for [u8; 1600] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [u8; 32] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [u8; 8] {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::attribute::UserIdTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut value = <u32>::sse_decode(deserializer);
        return UserIdTwinNormal { value };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut value = <u32>::sse_decode(deserializer);
        return UserIdTwinRustAsync { value };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut value = <u32>::sse_decode(deserializer);
        return UserIdTwinSync { value };
    }
}

impl SseDecode for usize {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_usize::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::misc_example::WeekdaysTwinNormal {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::api::misc_example::WeekdaysTwinNormal::Monday,
            1 => crate::api::misc_example::WeekdaysTwinNormal::Tuesday,
            2 => crate::api::misc_example::WeekdaysTwinNormal::Wednesday,
            3 => crate::api::misc_example::WeekdaysTwinNormal::Thursday,
            4 => crate::api::misc_example::WeekdaysTwinNormal::Friday,
            5 => crate::api::misc_example::WeekdaysTwinNormal::Saturday,
            6 => crate::api::misc_example::WeekdaysTwinNormal::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinNormal: {}", self),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Monday,
1 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Tuesday,
2 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Wednesday,
3 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Thursday,
4 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Friday,
5 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Saturday,
6 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinRustAsync: {}", self),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match self {
            0 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Monday,
            1 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Tuesday,
            2 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Wednesday,
            3 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Thursday,
            4 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Friday,
            5 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Saturday,
            6 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinSync: {}", self),
        };
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::api::misc_example::ATwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::ATwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::ATwinNormal>
    for crate::api::misc_example::ATwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::ATwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::AbcTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::misc_example::AbcTwinNormal::A(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::misc_example::AbcTwinNormal::B(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::misc_example::AbcTwinNormal::C(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::misc_example::AbcTwinNormal::JustInt(field0) => {
                vec![3.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::AbcTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::AbcTwinNormal>
    for crate::api::misc_example::AbcTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::AbcTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                field0,
            ) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                field0,
            ) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                field0,
            ) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                field0,
            ) => {
                vec![3.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(field0) => {
                vec![3.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::inside_macro::AnotherMacroStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.data.into_into_dart().into_dart(),
            self.non_final_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::inside_macro::AnotherMacroStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::inside_macro::AnotherMacroStructTwinNormal>
    for crate::api::inside_macro::AnotherMacroStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::inside_macro::AnotherMacroStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::mirror::AnotherTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mirror::AnotherTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mirror::AnotherTwinNormal>
    for crate::api::mirror::AnotherTwinNormal
{
    fn into_into_dart(self) -> crate::api::mirror::AnotherTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync,
    > for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>
    for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_ApplicationEnv {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.vars.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationEnv {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationEnv>
    for crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv
{
    fn into_into_dart(self) -> mirror_ApplicationEnv {
        mirror_ApplicationEnv(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_ApplicationEnvVar {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.0 .0.into_into_dart().into_dart(),
            self.0 .1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationEnvVar {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationEnvVar>
    for crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar
{
    fn into_into_dart(self) -> mirror_ApplicationEnvVar {
        mirror_ApplicationEnvVar(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_ApplicationMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::DisplayMessage(
                field0,
            ) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::RenderPixel {
                x,
                y,
            } => {
                vec![
                    1.into_dart(),
                    x.into_into_dart().into_dart(),
                    y.into_into_dart().into_dart(),
                ]
            }
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::Exit => {
                vec![2.into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationMessage {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationMessage>
    for crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage
{
    fn into_into_dart(self) -> mirror_ApplicationMessage {
        mirror_ApplicationMessage(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_ApplicationMode {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode::Standalone => 0,
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode::Embedded => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationMode {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationMode>
    for crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode
{
    fn into_into_dart(self) -> mirror_ApplicationMode {
        mirror_ApplicationMode(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_ApplicationSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.0.name.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.mode.into_into_dart().into_dart(),
            self.0.env.into_into_dart().into_dart(),
            self.0.env_optional.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationSettings {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationSettings>
    for crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings
{
    fn into_into_dart(self) -> mirror_ApplicationSettings {
        mirror_ApplicationSettings(self)
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::optional::AttributeTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::AttributeTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::AttributeTwinNormal>
    for crate::api::optional::AttributeTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::AttributeTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::BTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::BTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::BTwinNormal>
    for crate::api::misc_example::BTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::BTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::BigBuffersTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::BigBuffersTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::BigBuffersTwinNormal>
    for crate::api::misc_example::BigBuffersTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::BigBuffersTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::array::BlobTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::BlobTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::BlobTwinNormal>
    for crate::api::array::BlobTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::BlobTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::CTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::CTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::CTwinNormal>
    for crate::api::misc_example::CTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::CTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::method::ConcatenateWithTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::method::ConcatenateWithTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::method::ConcatenateWithTwinNormal>
    for crate::api::method::ConcatenateWithTwinNormal
{
    fn into_into_dart(self) -> crate::api::method::ConcatenateWithTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync,
    > for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync,
    > for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::mirror::ContainsMirroredSubStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mirror::ContainsMirroredSubStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mirror::ContainsMirroredSubStructTwinNormal>
    for crate::api::mirror::ContainsMirroredSubStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::mirror::ContainsMirroredSubStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync,
    >
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync,
    > for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomEnumErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomEnumErrorTwinNormal::One { message, backtrace } => {
                vec![
                    0.into_dart(),
                    message.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
            crate::api::exception::CustomEnumErrorTwinNormal::Two { message, backtrace } => {
                vec![
                    1.into_dart(),
                    message.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomEnumErrorTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomEnumErrorTwinNormal>
    for crate::api::exception::CustomEnumErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomEnumErrorTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message,backtrace} => { vec![0.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message,backtrace} => { vec![1.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One {
                message,
                backtrace,
            } => {
                vec![
                    0.into_dart(),
                    message.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two {
                message,
                backtrace,
            } => {
                vec![
                    1.into_dart(),
                    message.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomErrorTwinNormal::Error0 { e, backtrace } => {
                vec![
                    0.into_dart(),
                    e.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
            crate::api::exception::CustomErrorTwinNormal::Error1 { e, backtrace } => {
                vec![
                    1.into_dart(),
                    e.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomErrorTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomErrorTwinNormal>
    for crate::api::exception::CustomErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomErrorTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e,backtrace} => { vec![0.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e,backtrace} => { vec![1.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0 {
                e,
                backtrace,
            } => {
                vec![
                    0.into_dart(),
                    e.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1 {
                e,
                backtrace,
            } => {
                vec![
                    1.into_dart(),
                    e.into_into_dart().into_dart(),
                    backtrace.into_into_dart().into_dart(),
                ]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedError1TwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedError1TwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedError1TwinNormal>
    for crate::api::exception::CustomNestedError1TwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedError1TwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedError2TwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedError2TwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedError2TwinNormal>
    for crate::api::exception::CustomNestedError2TwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedError2TwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedErrorInnerTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedErrorInnerTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for crate::api::exception::CustomNestedErrorInnerTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedErrorOuterTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedErrorOuterTwinNormal::One(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedErrorOuterTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for crate::api::exception::CustomNestedErrorOuterTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                field0,
            ) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                field0,
            ) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomStructErrorAnotherTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomStructErrorAnotherTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomStructErrorAnotherTwinNormal>
    for crate::api::exception::CustomStructErrorAnotherTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomStructErrorAnotherTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomStructErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomStructErrorTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomStructErrorTwinNormal>
    for crate::api::exception::CustomStructErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomStructTwinNormal>
    for crate::api::exception::CustomStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::attribute::CustomizedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::attribute::CustomizedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::attribute::CustomizedTwinNormal>
    for crate::api::attribute::CustomizedTwinNormal
{
    fn into_into_dart(self) -> crate::api::attribute::CustomizedTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync,
    > for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync,
    > for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart_opaque::DartOpaqueNestedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for crate::api::dart_opaque::DartOpaqueNestedTwinNormal
{
    fn into_into_dart(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
    > for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync,
    > for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::DistanceTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::DistanceTwinNormal::Unknown => {
                vec![0.into_dart()]
            }
            crate::api::enumeration::DistanceTwinNormal::Map(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::DistanceTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::DistanceTwinNormal>
    for crate::api::enumeration::DistanceTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::DistanceTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown => { vec![0.into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown => {
                vec![0.into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::optional::ElementTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::ElementTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::ElementTwinNormal>
    for crate::api::optional::ElementTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::ElementTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_type::EmptyTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_type::EmptyTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_type::EmptyTwinNormal>
    for crate::api::misc_type::EmptyTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_type::EmptyTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync,
    > for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart_opaque::EnumDartOpaqueTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for crate::api::dart_opaque::EnumDartOpaqueTwinNormal
{
    fn into_into_dart(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
    > for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                field0,
            ) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                field0,
            ) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync,
    > for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::rust_opaque::EnumOpaqueTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(field0) => {
                vec![3.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(field0) => {
                vec![4.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::rust_opaque::EnumOpaqueTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::rust_opaque::EnumOpaqueTwinNormal>
    for crate::api::rust_opaque::EnumOpaqueTwinNormal
{
    fn into_into_dart(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj(field0) => { vec![2.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex(field0) => { vec![3.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock(field0) => { vec![4.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                field0,
            ) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                field0,
            ) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                field0,
            ) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(field0) => {
                vec![3.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                field0,
            ) => {
                vec![4.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumSimpleTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumSimpleTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumSimpleTwinNormal>
    for crate::api::enumeration::EnumSimpleTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumSimpleTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumWithItemMixedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::EnumWithItemMixedTwinNormal::A => {
                vec![0.into_dart()]
            }
            crate::api::enumeration::EnumWithItemMixedTwinNormal::B(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::enumeration::EnumWithItemMixedTwinNormal::C { c_field } => {
                vec![2.into_dart(), c_field.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemMixedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for crate::api::enumeration::EnumWithItemMixedTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A => { vec![0.into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field} => { vec![2.into_dart(),
c_field.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A => {
                vec![0.into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                field0,
            ) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                c_field,
            } => {
                vec![2.into_dart(), c_field.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumWithItemStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::EnumWithItemStructTwinNormal::A { a_field } => {
                vec![0.into_dart(), a_field.into_into_dart().into_dart()]
            }
            crate::api::enumeration::EnumWithItemStructTwinNormal::B { b_field } => {
                vec![1.into_dart(), b_field.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for crate::api::enumeration::EnumWithItemStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field} => { vec![0.into_dart(),
a_field.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field} => { vec![1.into_dart(),
b_field.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                a_field,
            } => {
                vec![0.into_dart(), a_field.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                b_field,
            } => {
                vec![1.into_dart(), b_field.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumWithItemTupleTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::EnumWithItemTupleTwinNormal::A(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::enumeration::EnumWithItemTupleTwinNormal::B(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemTupleTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for crate::api::enumeration::EnumWithItemTupleTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                field0,
            ) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                field0,
            ) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::event_listener::EventTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::event_listener::EventTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::event_listener::EventTwinNormal>
    for crate::api::event_listener::EventTwinNormal
{
    fn into_into_dart(self) -> crate::api::event_listener::EventTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync,
    > for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync,
    > for crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::optional::ExoticOptionalsTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::ExoticOptionalsTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::ExoticOptionalsTwinNormal>
    for crate::api::optional::ExoticOptionalsTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::chrono_type::FeatureChronoTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.utc.into_into_dart().into_dart(),
            self.local.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.naive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::chrono_type::FeatureChronoTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::chrono_type::FeatureChronoTwinNormal>
    for crate::api::chrono_type::FeatureChronoTwinNormal
{
    fn into_into_dart(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.utc.into_into_dart().into_dart(),
            self.local.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.naive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync,
    > for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.utc.into_into_dart().into_dart(),
            self.local.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.naive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync,
    > for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::uuid_type::FeatureUuidTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.one.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::uuid_type::FeatureUuidTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uuid_type::FeatureUuidTwinNormal>
    for crate::api::uuid_type::FeatureUuidTwinNormal
{
    fn into_into_dart(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.one.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync,
    > for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.one.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync,
    > for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::array::FeedIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::FeedIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::FeedIdTwinNormal>
    for crate::api::array::FeedIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::FeedIdTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::KitchenSinkTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::KitchenSinkTwinNormal::Empty => {
                vec![0.into_dart()]
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                int32,
                float64,
                boolean,
            } => {
                vec![
                    1.into_dart(),
                    int32.into_into_dart().into_dart(),
                    float64.into_into_dart().into_dart(),
                    boolean.into_into_dart().into_dart(),
                ]
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Nested(field0, field1) => {
                vec![
                    2.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                ]
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Optional(field0, field1) => {
                vec![
                    3.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                ]
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Buffer(field0) => {
                vec![4.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Enums(field0) => {
                vec![5.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::KitchenSinkTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::KitchenSinkTwinNormal>
    for crate::api::enumeration::KitchenSinkTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty => { vec![0.into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32,float64,boolean} => { vec![1.into_dart(),
int32.into_into_dart().into_dart(),
float64.into_into_dart().into_dart(),
boolean.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested(field0,field1) => { vec![2.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional(field0,field1) => { vec![3.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer(field0) => { vec![4.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums(field0) => { vec![5.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty => {
                vec![0.into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                int32,
                float64,
                boolean,
            } => {
                vec![
                    1.into_dart(),
                    int32.into_into_dart().into_dart(),
                    float64.into_into_dart().into_dart(),
                    boolean.into_into_dart().into_dart(),
                ]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                field0,
                field1,
            ) => {
                vec![
                    2.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                ]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                field0,
                field1,
            ) => {
                vec![
                    3.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                ]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                field0,
            ) => {
                vec![4.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                field0,
            ) => {
                vec![5.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_ListOfNestedRawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for mirror_ListOfNestedRawStringMirrored
{
}
impl flutter_rust_bridge::IntoIntoDart<mirror_ListOfNestedRawStringMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync::ListOfNestedRawStringMirrored
{
    fn into_into_dart(self) -> mirror_ListOfNestedRawStringMirrored {
        mirror_ListOfNestedRawStringMirrored(self)
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::method::Log2TwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::method::Log2TwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::method::Log2TwinNormal>
    for crate::api::method::Log2TwinNormal
{
    fn into_into_dart(self) -> crate::api::method::Log2TwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync,
    > for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>
    for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::stream::LogTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::stream::LogTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::stream::LogTwinNormal>
    for crate::api::stream::LogTwinNormal
{
    fn into_into_dart(self) -> crate::api::stream::LogTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync,
    > for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::inside_macro::MacroStruct {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.data.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::inside_macro::MacroStruct
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::inside_macro::MacroStruct>
    for crate::api::inside_macro::MacroStruct
{
    fn into_into_dart(self) -> crate::api::inside_macro::MacroStruct {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::MeasureTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::MeasureTwinNormal::Speed(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::enumeration::MeasureTwinNormal::Distance(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::MeasureTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::MeasureTwinNormal>
    for crate::api::enumeration::MeasureTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::MeasureTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(field0) => { vec![0.into_dart(),
field0.into_into_dart().into_dart()] }
crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance(field0) => { vec![1.into_dart(),
field0.into_into_dart().into_dart()] }
  }.into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::array::MessageIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::MessageIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::MessageIdTwinNormal>
    for crate::api::array::MessageIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::MessageIdTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::mirror::MirrorStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mirror::MirrorStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mirror::MirrorStructTwinNormal>
    for crate::api::mirror::MirrorStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::mirror::MirrorStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync,
    > for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync,
    > for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal,
    > for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    vec![
                    self.regular.into_into_dart().into_dart(),
self.r#type.into_into_dart().into_dart(),
self.r#async.into_into_dart().into_dart(),
self.another.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync> for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
            fn into_into_dart(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                self
            }
        }
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync,
    > for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::auxiliary::sample_types::MyEnum {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::False => 0,
            Self::True => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MyEnum
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::auxiliary::sample_types::MyEnum>
    for crate::auxiliary::sample_types::MyEnum
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MyEnum {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::MyNestedStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::MyNestedStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::MyNestedStructTwinNormal>
    for crate::api::misc_example::MyNestedStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::auxiliary::sample_types::MySize {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MySize
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::auxiliary::sample_types::MySize>
    for crate::auxiliary::sample_types::MySize
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MySize {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::stream::MyStreamEntryTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::stream::MyStreamEntryTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::stream::MyStreamEntryTwinNormal>
    for crate::api::stream::MyStreamEntryTwinNormal
{
    fn into_into_dart(self) -> crate::api::stream::MyStreamEntryTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync,
    > for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::auxiliary::sample_types::MyStruct {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.content.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MyStruct
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::auxiliary::sample_types::MyStruct>
    for crate::auxiliary::sample_types::MyStruct
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MyStruct {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::MyTreeNodeTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::MyTreeNodeTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::MyTreeNodeTwinNormal>
    for crate::api::misc_example::MyTreeNodeTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_NestedRawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for mirror_NestedRawStringMirrored
{
}
impl flutter_rust_bridge::IntoIntoDart<mirror_NestedRawStringMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored
{
    fn into_into_dart(self) -> mirror_NestedRawStringMirrored {
        mirror_NestedRawStringMirrored(self)
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::auxiliary::new_module_system::sub_module::NewSimpleStruct,
    > for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
    fn into_into_dart(self) -> crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::newtype_pattern::NewTypeIntTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::newtype_pattern::NewTypeIntTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for crate::api::newtype_pattern::NewTypeIntTwinNormal
{
    fn into_into_dart(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
    > for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync,
    > for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::NoteTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::NoteTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::NoteTwinNormal>
    for crate::api::enumeration::NoteTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::NoteTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_Numbers {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_Numbers {}
impl flutter_rust_bridge::IntoIntoDart<mirror_Numbers>
    for crate::api::pseudo_manual::mirror_twin_sync::Numbers
{
    fn into_into_dart(self) -> mirror_Numbers {
        mirror_Numbers(self)
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::auxiliary::old_module_system::sub_module::OldSimpleStruct,
    > for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
    fn into_into_dart(self) -> crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::rust_opaque::OpaqueNestedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::rust_opaque::OpaqueNestedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for crate::api::rust_opaque::OpaqueNestedTwinNormal
{
    fn into_into_dart(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::optional::OptVecsTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::OptVecsTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::OptVecsTwinNormal>
    for crate::api::optional::OptVecsTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::OptVecsTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::array::PointTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::PointTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::PointTwinNormal>
    for crate::api::array::PointTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::PointTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::PointTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::PointTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_RawStringEnumMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::Raw(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::Nested(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::ListOfNested(
                field0,
            ) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_RawStringEnumMirrored {}
impl flutter_rust_bridge::IntoIntoDart<mirror_RawStringEnumMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored
{
    fn into_into_dart(self) -> mirror_RawStringEnumMirrored {
        mirror_RawStringEnumMirrored(self)
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::raw_string::RawStringItemStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::raw_string::RawStringItemStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::raw_string::RawStringItemStructTwinNormal>
    for crate::api::raw_string::RawStringItemStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::raw_string::RawStringItemStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync,
    > for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync,
    > for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_RawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_RawStringMirrored {}
impl flutter_rust_bridge::IntoIntoDart<mirror_RawStringMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored
{
    fn into_into_dart(self) -> mirror_RawStringMirrored {
        mirror_RawStringMirrored(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_Sequences {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_Sequences {}
impl flutter_rust_bridge::IntoIntoDart<mirror_Sequences>
    for crate::api::pseudo_manual::mirror_twin_sync::Sequences
{
    fn into_into_dart(self) -> mirror_Sequences {
        mirror_Sequences(self)
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::exception::SomeStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::SomeStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::SomeStructTwinNormal>
    for crate::api::exception::SomeStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::SomeStructTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::SpeedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::SpeedTwinNormal::Unknown => {
                vec![0.into_dart()]
            }
            crate::api::enumeration::SpeedTwinNormal::GPS(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::SpeedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::SpeedTwinNormal>
    for crate::api::enumeration::SpeedTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::SpeedTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown => {
                vec![0.into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                field0,
            ) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown => {
                vec![0.into_dart()]
            }
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::comment::StructWithCommentsTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::comment::StructWithCommentsTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::comment::StructWithCommentsTwinNormal>
    for crate::api::comment::StructWithCommentsTwinNormal
{
    fn into_into_dart(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
    > for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync,
    > for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::StructWithEnumTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::StructWithEnumTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::StructWithEnumTwinNormal>
    for crate::api::misc_example::StructWithEnumTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::structure::StructWithOneFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::StructWithOneFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::StructWithOneFieldTwinNormal>
    for crate::api::structure::StructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
    > for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::structure::StructWithTwoFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::StructWithTwoFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::StructWithTwoFieldTwinNormal>
    for crate::api::structure::StructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
    > for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::structure::StructWithZeroFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::StructWithZeroFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::StructWithZeroFieldTwinNormal>
    for crate::api::structure::StructWithZeroFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::method::SumWithTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::method::SumWithTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::method::SumWithTwinNormal>
    for crate::api::method::SumWithTwinNormal
{
    fn into_into_dart(self) -> crate::api::method::SumWithTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync,
    > for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::chrono_type::TestChronoTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.dt.into_into_dart().into_dart(),
            self.dt2.into_into_dart().into_dart(),
            self.du.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::chrono_type::TestChronoTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::chrono_type::TestChronoTwinNormal>
    for crate::api::chrono_type::TestChronoTwinNormal
{
    fn into_into_dart(self) -> crate::api::chrono_type::TestChronoTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.dt.into_into_dart().into_dart(),
            self.dt2.into_into_dart().into_dart(),
            self.du.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync,
    > for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.dt.into_into_dart().into_dart(),
            self.dt2.into_into_dart().into_dart(),
            self.du.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync,
    > for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::array::TestIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::TestIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::TestIdTwinNormal>
    for crate::api::array::TestIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::TestIdTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::type_alias::TestModelTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::type_alias::TestModelTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::type_alias::TestModelTwinNormal>
    for crate::api::type_alias::TestModelTwinNormal
{
    fn into_into_dart(self) -> crate::api::type_alias::TestModelTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync,
    > for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync,
    > for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::structure::TupleStructWithOneFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::TupleStructWithOneFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for crate::api::structure::TupleStructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    >
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::structure::TupleStructWithTwoFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::TupleStructWithTwoFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for crate::api::structure::TupleStructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    >
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::attribute::UserIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::attribute::UserIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::attribute::UserIdTwinNormal>
    for crate::api::attribute::UserIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::attribute::UserIdTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync,
    > for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync,
    > for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int16list.into_into_dart().into_dart(),
            self.uint16list.into_into_dart().into_dart(),
            self.uint32list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.uint64list.into_into_dart().into_dart(),
            self.int64list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.bool_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal>
    for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal
{
    fn into_into_dart(self) -> crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    vec![
                    self.int8list.into_into_dart().into_dart(),
self.uint8list.into_into_dart().into_dart(),
self.int16list.into_into_dart().into_dart(),
self.uint16list.into_into_dart().into_dart(),
self.uint32list.into_into_dart().into_dart(),
self.int32list.into_into_dart().into_dart(),
self.uint64list.into_into_dart().into_dart(),
self.int64list.into_into_dart().into_dart(),
self.float32list.into_into_dart().into_dart(),
self.float64list.into_into_dart().into_dart(),
self.bool_list.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync> for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
            fn into_into_dart(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                self
            }
        }
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int16list.into_into_dart().into_dart(),
            self.uint16list.into_into_dart().into_dart(),
            self.uint32list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.uint64list.into_into_dart().into_dart(),
            self.int64list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.bool_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync,
    > for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::WeekdaysTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::WeekdaysTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::WeekdaysTwinNormal>
    for crate::api::misc_example::WeekdaysTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        self
    }
}
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        self
    }
}

pub trait SseEncode {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer);
}

fn transform_result_sse<T, E>(
    raw: Result<T, E>,
) -> Result<
    flutter_rust_bridge::for_generated::Rust2DartMessageSse,
    flutter_rust_bridge::for_generated::Rust2DartMessageSse,
>
where
    T: SseEncode,
    E: SseEncode,
{
    use flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};

    match raw {
        Ok(raw) => Ok(SseCodec::encode(Rust2DartAction::Success, |serializer| {
            raw.sse_encode(serializer)
        })),
        Err(raw) => Err(SseCodec::encode(Rust2DartAction::Error, |serializer| {
            raw.sse_encode(serializer)
        })),
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<
        std::sync::RwLock<Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>>,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(TODO, serializer);
    }
}

impl SseEncode for chrono::Duration {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.microsecondsSinceEpoch, serializer);
    }
}

impl SseEncode for chrono::DateTime<chrono::Local> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.microsecondsSinceEpoch, serializer);
    }
}

impl SseEncode for chrono::NaiveDateTime {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.microsecondsSinceEpoch, serializer);
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.microsecondsSinceEpoch, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::DartFn<
        fn() -> flutter_rust_bridge::for_generated::futures::future::BoxFuture<'static, ()>,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(wire.dart_opaque_dart2rust_encode(self), serializer);
    }
}

impl SseEncode for [flutter_rust_bridge::DartOpaque; 1] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<flutter_rust_bridge::DartOpaque>>::sse_encode(self, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<Mutex<HideData>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<RwLock<HideData>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::FrbOpaqueReturn>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::FrbOpaqueSyncReturn>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for [flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>>::sse_encode(self, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<i32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonCloneData> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::NonSendHideData>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<
        std::sync::RwLock<Box<dyn Fn(String) -> String + Send + Sync + UnwindSafe + RefUnwindSafe>>,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinNormal>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn HelloTraitTwinSync>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinNormal + Send + Sync>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Box<dyn MyTraitTwinSync + Send + Sync>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<NonCloneSimpleTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinNormal>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<std::sync::RwLock<StructWithGoodAndOpaqueFieldTwinSync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.sseEncode(), serializer);
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for uuid::Uuid {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.toBytes(), serializer);
    }
}

impl SseEncode for crate::api::misc_example::ATwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::misc_example::AbcTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::misc_example::AbcTwinNormal::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::misc_example::ATwinNormal>::sse_encode(field0, serializer);
            }
            crate::api::misc_example::AbcTwinNormal::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::misc_example::BTwinNormal>::sse_encode(field0, serializer);
            }
            crate::api::misc_example::AbcTwinNormal::C(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::misc_example::CTwinNormal>::sse_encode(field0, serializer);
            }
            crate::api::misc_example::AbcTwinNormal::JustInt(field0) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                field0,
            ) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(field0) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::inside_macro::AnotherMacroStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.data, serializer);
        <i32>::sse_encode(self.non_final_data, serializer);
    }
}

impl SseEncode for crate::api::mirror::AnotherTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar>>::sse_encode(
            self.vars, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.field0, serializer);
        <bool>::sse_encode(self.field1, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::DisplayMessage(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::RenderPixel {
                x,
                y,
            } => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(x, serializer);
                <i32>::sse_encode(y, serializer);
            }
            crate::api::pseudo_manual::mirror_twin_sync::ApplicationMessage::Exit => {
                <i32>::sse_encode(2, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.version, serializer);
        <crate::api::pseudo_manual::mirror_twin_sync::ApplicationMode>::sse_encode(
            self.mode, serializer,
        );
        <Box<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>>::sse_encode(
            self.env, serializer,
        );
        <Option<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>>::sse_encode(
            self.env_optional,
            serializer,
        );
    }
}

impl SseEncode for crate::api::optional::AttributeTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::misc_example::BTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::misc_example::BigBuffersTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode for crate::api::array::BlobTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_bool::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::array::BlobTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::array::BlobTwinNormal>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<bool> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::enumeration::DistanceTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::enumeration::DistanceTwinNormal>::sse_encode(self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::optional::ExoticOptionalsTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::optional::ExoticOptionalsTwinNormal>::sse_encode(self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::array::FeedIdTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::array::FeedIdTwinNormal>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<i32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<i64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<i8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i8>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::enumeration::KitchenSinkTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::enumeration::KitchenSinkTwinNormal>::sse_encode(self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<crate::auxiliary::sample_types::MySize> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::auxiliary::sample_types::MySize>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::enumeration::SpeedTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::enumeration::SpeedTwinNormal>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for Box<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u8>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<[u8; 1600]> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<[u8; 8]> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::misc_example::WeekdaysTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::misc_example::CTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::method::ConcatenateWithTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::mirror::ContainsMirroredSubStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::mirror::AnotherTwinNormal>::sse_encode(self.test2, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync>::sse_encode(
            self.test2, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>::sse_encode(
            self.test2, serializer,
        );
    }
}

impl SseEncode for crate::api::exception::CustomEnumErrorTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomEnumErrorTwinNormal::One { message, backtrace } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(message, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
            crate::api::exception::CustomEnumErrorTwinNormal::Two { message, backtrace } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(message, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message,backtrace} => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(message, serializer);
<String>::sse_encode(backtrace, serializer);

                     }
crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message,backtrace} => { 
                        <i32>::sse_encode(1, serializer);
                        <u32>::sse_encode(message, serializer);
<String>::sse_encode(backtrace, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One {
                message,
                backtrace,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(message, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two {
                message,
                backtrace,
            } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(message, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::exception::CustomErrorTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomErrorTwinNormal::Error0 { e, backtrace } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(e, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
            crate::api::exception::CustomErrorTwinNormal::Error1 { e, backtrace } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(e, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e,backtrace} => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(e, serializer);
<String>::sse_encode(backtrace, serializer);

                     }
crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e,backtrace} => { 
                        <i32>::sse_encode(1, serializer);
                        <u32>::sse_encode(e, serializer);
<String>::sse_encode(backtrace, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0 {
                e,
                backtrace,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(e, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1 {
                e,
                backtrace,
            } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(e, serializer);
                <String>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::exception::CustomNestedError1TwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::exception::CustomNestedError2TwinNormal>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::exception::CustomNestedError2TwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <u32>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <u32>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::exception::CustomNestedErrorInnerTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <u32>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <u32>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::exception::CustomNestedErrorOuterTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedErrorOuterTwinNormal::One(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::exception::CustomNestedErrorInnerTwinNormal>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <String>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::exception::CustomStructErrorAnotherTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::exception::CustomStructErrorTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::exception::CustomStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::attribute::CustomizedTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::DartAbi {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!();
    }
}

impl SseEncode for crate::api::enumeration::DistanceTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::DistanceTwinNormal::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::DistanceTwinNormal::Map(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown => { 
                        <i32>::sse_encode(0, serializer);
                        
                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <f64>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::optional::ElementTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::optional::AttributeTwinNormal>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Option<Vec<crate::api::optional::ElementTwinNormal>>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>>::sse_encode(self.attributes, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::misc_type::EmptyTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(field0) => {
                <i32>::sse_encode(0, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(field0) => {
                <i32>::sse_encode(1, serializer);
                <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <i32>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::rust_opaque::EnumOpaqueTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(field0) => {
                <i32>::sse_encode(0, serializer);
                <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(field0) => {
                <i32>::sse_encode(1, serializer);
                <flutter_rust_bridge::RustOpaque<i32>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(field0) => {
                <i32>::sse_encode(2, serializer);
                <flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinNormal>>>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(field0) => {
                <i32>::sse_encode(3, serializer);
                <flutter_rust_bridge::RustOpaque<Mutex<HideData>>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(field0) => {
                <i32>::sse_encode(4, serializer);
                <flutter_rust_bridge::RustOpaque<RwLock<HideData>>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for [crate::api::rust_opaque::EnumOpaqueTwinNormal; 5] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal>>::sse_encode(self, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <flutter_rust_bridge::RustOpaque<i32>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj(field0) => { 
                        <i32>::sse_encode(2, serializer);
                        <flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinRustAsync>>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex(field0) => { 
                        <i32>::sse_encode(3, serializer);
                        <flutter_rust_bridge::RustOpaque<Mutex < HideData >>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock(field0) => { 
                        <i32>::sse_encode(4, serializer);
                        <flutter_rust_bridge::RustOpaque<RwLock < HideData >>>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5]
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>>::sse_encode(self, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <flutter_rust_bridge::RustOpaque<i32>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <flutter_rust_bridge::RustOpaque<Box<dyn DartDebugTwinSync>>>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(field0) => {
                <i32>::sse_encode(3, serializer);
                <flutter_rust_bridge::RustOpaque<Mutex<HideData>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                field0,
            ) => {
                <i32>::sse_encode(4, serializer);
                <flutter_rust_bridge::RustOpaque<RwLock<HideData>>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for [crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::enumeration::EnumSimpleTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::enumeration::EnumWithItemMixedTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::EnumWithItemMixedTwinNormal::A => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::EnumWithItemMixedTwinNormal::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::EnumWithItemMixedTwinNormal::C { c_field } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(c_field, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A => { 
                        <i32>::sse_encode(0, serializer);
                        
                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <Vec<u8>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field} => { 
                        <i32>::sse_encode(2, serializer);
                        <String>::sse_encode(c_field, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                c_field,
            } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(c_field, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::enumeration::EnumWithItemStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::EnumWithItemStructTwinNormal::A { a_field } => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(a_field, serializer);
            }
            crate::api::enumeration::EnumWithItemStructTwinNormal::B { b_field } => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(b_field, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field} => { 
                        <i32>::sse_encode(0, serializer);
                        <Vec<u8>>::sse_encode(a_field, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field} => { 
                        <i32>::sse_encode(1, serializer);
                        <Vec<i32>>::sse_encode(b_field, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                a_field,
            } => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(a_field, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                b_field,
            } => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(b_field, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::enumeration::EnumWithItemTupleTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::EnumWithItemTupleTwinNormal::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::EnumWithItemTupleTwinNormal::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <Vec<u8>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <Vec<i32>>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::event_listener::EventTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::event_listener_twin_sync::EventTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode for crate::api::optional::ExoticOptionalsTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::optional::AttributeTwinNormal>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_encode(
            self.attributes_nullable,
            serializer,
        );
        <Option<Vec<Option<crate::api::optional::AttributeTwinNormal>>>>::sse_encode(
            self.nullable_attributes,
            serializer,
        );
        <Option<crate::api::newtype_pattern::NewTypeIntTwinNormal>>::sse_encode(
            self.newtypeint,
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>>::sse_encode(self.attributes, serializer);
        <Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>>::sse_encode(self.attributes_nullable, serializer);
        <Option<
            Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >,
        >>::sse_encode(self.nullable_attributes, serializer);
        <Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>>::sse_encode(self.newtypeint, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(
            self.attributes_nullable,
            serializer,
        );
        <Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>>::sse_encode(self.nullable_attributes, serializer);
        <Option<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>>::sse_encode(self.newtypeint, serializer);
    }
}

impl SseEncode for f32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for [f64; 16] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<f64>>::sse_encode(self, serializer);
    }
}

impl SseEncode for crate::api::chrono_type::FeatureChronoTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.utc, serializer);
        <chrono::DateTime<chrono::Local>>::sse_encode(self.local, serializer);
        <chrono::Duration>::sse_encode(self.duration, serializer);
        <chrono::NaiveDateTime>::sse_encode(self.naive, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.utc, serializer);
        <chrono::DateTime<chrono::Local>>::sse_encode(self.local, serializer);
        <chrono::Duration>::sse_encode(self.duration, serializer);
        <chrono::NaiveDateTime>::sse_encode(self.naive, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.utc, serializer);
        <chrono::DateTime<chrono::Local>>::sse_encode(self.local, serializer);
        <chrono::Duration>::sse_encode(self.duration, serializer);
        <chrono::NaiveDateTime>::sse_encode(self.naive, serializer);
    }
}

impl SseEncode for crate::api::uuid_type::FeatureUuidTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.one, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.one, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.one, serializer);
    }
}

impl SseEncode for crate::api::array::FeedIdTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for i16 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for [i32; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i32>>::sse_encode(self, serializer);
    }
}

impl SseEncode for i64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i8::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::enumeration::KitchenSinkTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::KitchenSinkTwinNormal::Empty => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                int32,
                float64,
                boolean,
            } => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(int32, serializer);
                <f64>::sse_encode(float64, serializer);
                <bool>::sse_encode(boolean, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Nested(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <i32>::sse_encode(field0, serializer);
                <Box<crate::api::enumeration::KitchenSinkTwinNormal>>::sse_encode(
                    field1, serializer,
                );
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Optional(field0, field1) => {
                <i32>::sse_encode(3, serializer);
                <Option<i32>>::sse_encode(field0, serializer);
                <Option<i32>>::sse_encode(field1, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Buffer(field0) => {
                <i32>::sse_encode(4, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Enums(field0) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty => { 
                        <i32>::sse_encode(0, serializer);
                        
                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32,float64,boolean} => { 
                        <i32>::sse_encode(1, serializer);
                        <i32>::sse_encode(int32, serializer);
<f64>::sse_encode(float64, serializer);
<bool>::sse_encode(boolean, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested(field0,field1) => { 
                        <i32>::sse_encode(2, serializer);
                        <i32>::sse_encode(field0, serializer);
<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>>::sse_encode(field1, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional(field0,field1) => { 
                        <i32>::sse_encode(3, serializer);
                        <Option<i32>>::sse_encode(field0, serializer);
<Option<i32>>::sse_encode(field1, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer(field0) => { 
                        <i32>::sse_encode(4, serializer);
                        <Vec<u8>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums(field0) => { 
                        <i32>::sse_encode(5, serializer);
                        <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                int32,
                float64,
                boolean,
            } => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(int32, serializer);
                <f64>::sse_encode(float64, serializer);
                <bool>::sse_encode(boolean, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                field0,
                field1,
            ) => {
                <i32>::sse_encode(2, serializer);
                <i32>::sse_encode(field0, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>>::sse_encode(field1, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                field0,
                field1,
            ) => {
                <i32>::sse_encode(3, serializer);
                <Option<i32>>::sse_encode(field0, serializer);
                <Option<i32>>::sse_encode(field1, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                field0,
            ) => {
                <i32>::sse_encode(4, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                field0,
            ) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode for Vec<chrono::Duration> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <chrono::Duration>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<chrono::DateTime<chrono::Local>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <chrono::DateTime<chrono::Local>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<chrono::NaiveDateTime> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <chrono::NaiveDateTime>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<flutter_rust_bridge::DartOpaque> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <flutter_rust_bridge::DartOpaque>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnvVar>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::optional::AttributeTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::optional::AttributeTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<bool> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <bool>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::optional::ElementTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::optional::ElementTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::rust_opaque::EnumOpaqueTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::auxiliary::sample_types::MyEnum> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::auxiliary::sample_types::MyEnum>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::auxiliary::sample_types::MySize> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::auxiliary::sample_types::MySize>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::misc_example::MyTreeNodeTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ListOfNestedRawStringMirrored {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored>>::sse_encode(
            self.raw, serializer,
        );
    }
}

impl SseEncode for Vec<Option<String>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<String>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<crate::api::optional::AttributeTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<crate::api::optional::AttributeTwinNormal>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<Option<i32>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<i32>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<crate::api::misc_example::WeekdaysTwinNormal>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<Vec<i32>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <Option<Vec<i32>>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::array::PointTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::array::PointTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sync::PointTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<f32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <f32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <f64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i16> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <i16>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <i32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <i64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <i8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u16> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <u16>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <u32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <u64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<(String, i32)> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <(String, i32)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::method::SumWithTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::method::SumWithTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::array::TestIdTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::array::TestIdTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::misc_example::WeekdaysTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len(), serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for crate::api::method::Log2TwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::stream::LogTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::inside_macro::MacroStruct {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.data, serializer);
    }
}

impl SseEncode for crate::api::enumeration::MeasureTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::MeasureTwinNormal::Speed(field0) => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::api::enumeration::SpeedTwinNormal>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::MeasureTwinNormal::Distance(field0) => {
                <i32>::sse_encode(1, serializer);
                <Box<crate::api::enumeration::DistanceTwinNormal>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self { crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(field0) => { 
                        <i32>::sse_encode(0, serializer);
                        <Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>>::sse_encode(field0, serializer);

                     }
crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance(field0) => { 
                        <i32>::sse_encode(1, serializer);
                        <Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>>::sse_encode(field0, serializer);

                     }
  }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(field0) => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(field0) => {
                <i32>::sse_encode(1, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::array::MessageIdTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::mirror::MirrorStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.regular, serializer);
        <String>::sse_encode(self.r#type, serializer);
        <bool>::sse_encode(self.r#async, serializer);
        <String>::sse_encode(self.another, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
                        <String>::sse_encode(self.regular, serializer);
<String>::sse_encode(self.r#type, serializer);
<bool>::sse_encode(self.r#async, serializer);
<String>::sse_encode(self.another, serializer);

                    }
                }

impl SseEncode
    for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.regular, serializer);
        <String>::sse_encode(self.r#type, serializer);
        <bool>::sse_encode(self.r#async, serializer);
        <String>::sse_encode(self.another, serializer);
    }
}

impl SseEncode for crate::auxiliary::sample_types::MyEnum {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::misc_example::MyNestedStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::misc_example::MyTreeNodeTwinNormal>::sse_encode(self.tree_node, serializer);
        <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(self.weekday, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_encode(self.tree_node, serializer);
        <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(self.weekday, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_encode(
            self.tree_node,
            serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
            self.weekday,
            serializer,
        );
    }
}

impl SseEncode for crate::auxiliary::sample_types::MySize {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.width, serializer);
        <i32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for crate::api::stream::MyStreamEntryTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.hello, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.hello, serializer);
    }
}

impl SseEncode for crate::auxiliary::sample_types::MyStruct {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.content, serializer);
    }
}

impl SseEncode for crate::api::misc_example::MyTreeNodeTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored>::sse_encode(
            self.raw, serializer,
        );
    }
}

impl SseEncode for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field, serializer);
    }
}

impl SseEncode for crate::api::newtype_pattern::NewTypeIntTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::enumeration::NoteTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::misc_example::WeekdaysTwinNormal>>::sse_encode(self.day, serializer);
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>::sse_encode(self.day, serializer);
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>::sse_encode(
            self.day, serializer,
        );
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::Numbers {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i32>>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field, serializer);
    }
}

impl SseEncode for crate::api::rust_opaque::OpaqueNestedTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
            self.first, serializer,
        );
        <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
            self.second,
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
            self.first, serializer,
        );
        <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
            self.second,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
            self.first, serializer,
        );
        <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
            self.second,
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <String>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <chrono::Duration>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<chrono::NaiveDateTime> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <chrono::NaiveDateTime>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Utc>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <chrono::DateTime<chrono::Utc>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<flutter_rust_bridge::DartOpaque> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <flutter_rust_bridge::DartOpaque>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <flutter_rust_bridge::RustOpaque<crate::auxiliary::sample_types::HideData>>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::mirror_twin_sync::ApplicationEnv>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::optional::AttributeTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::optional::AttributeTwinNormal>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<bool> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <bool>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::optional::ElementTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::optional::ElementTwinNormal>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::optional::ExoticOptionalsTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::optional::ExoticOptionalsTwinNormal>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<f32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <f32>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <f64>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<i16> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <i16>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <i32>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <i64>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<i8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <i8>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::enumeration::MeasureTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::enumeration::MeasureTwinNormal>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::newtype_pattern::NewTypeIntTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::newtype_pattern::NewTypeIntTwinNormal>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<(String, i32)> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <(String, i32)>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<u16> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <u16>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <u32>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <u64>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <u8>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::misc_example::WeekdaysTwinNormal> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<Box<bool>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<bool>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Box<crate::api::optional::ExoticOptionalsTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<crate::api::optional::ExoticOptionalsTwinNormal>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Box<f64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<f64>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Box<i32>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<i32>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Box<i64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<i64>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Box<i8>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<i8>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Box<u8>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Box<u8>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::optional::AttributeTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<crate::api::optional::AttributeTwinNormal>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<Vec<crate::api::optional::ElementTwinNormal>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<crate::api::optional::ElementTwinNormal>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>>::sse_encode(
                self, serializer,
            );
        }
    }
}

impl SseEncode for Option<Vec<Option<crate::api::optional::AttributeTwinNormal>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<f32>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<f32>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<f64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<f64>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<i32>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<i32>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<i8>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<i8>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self != None, serializer);
        if (self != None) {
            <Vec<u8>>::sse_encode(self, serializer);
        }
    }
}

impl SseEncode for crate::api::optional::OptVecsTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>::sse_encode(
            self.enums, serializer,
        );
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>>::sse_encode(self.enums, serializer);
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>>::sse_encode(self.enums, serializer);
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::array::PointTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::array::PointTwinNormal; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::array::PointTwinNormal>>::sse_encode(self, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::Raw(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::Nested(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::mirror_twin_sync::NestedRawStringMirrored>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored::ListOfNested(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::pseudo_manual::mirror_twin_sync::ListOfNestedRawStringMirrored>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::raw_string::RawStringItemStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::RawStringMirrored {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode
    for (
        crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored,
    )
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync::ApplicationSettings>::sse_encode(
            self.1, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_sync::RawStringEnumMirrored>::sse_encode(
            self.2, serializer,
        );
    }
}

impl SseEncode for (String, i32) {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.1, serializer);
        <i32>::sse_encode(self.2, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::Sequences {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i32>>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::exception::SomeStructTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::enumeration::SpeedTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::SpeedTwinNormal::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::SpeedTwinNormal::GPS(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::comment::StructWithCommentsTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode for crate::api::misc_example::StructWithEnumTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::misc_example::AbcTwinNormal>::sse_encode(self.abc1, serializer);
        <crate::api::misc_example::AbcTwinNormal>::sse_encode(self.abc2, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_encode(
            self.abc1, serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_encode(
            self.abc2, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_encode(
            self.abc1, serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_encode(
            self.abc2, serializer,
        );
    }
}

impl SseEncode for crate::api::structure::StructWithOneFieldTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::structure::StructWithTwoFieldTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::structure::StructWithZeroFieldTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::method::SumWithTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::method::SumWithTwinNormal; 3] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::method::SumWithTwinNormal>>::sse_encode(self, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::chrono_type::TestChronoTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(self.dt, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.dt2, serializer);
        <Option<chrono::Duration>>::sse_encode(self.du, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(self.dt, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.dt2, serializer);
        <Option<chrono::Duration>>::sse_encode(self.du, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(self.dt, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.dt2, serializer);
        <Option<chrono::Duration>>::sse_encode(self.du, serializer);
    }
}

impl SseEncode for crate::api::array::TestIdTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for [crate::api::array::TestIdTwinNormal; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::array::TestIdTwinNormal>>::sse_encode(self, serializer);
    }
}

impl SseEncode for [crate::api::array::TestIdTwinNormal; 4] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::array::TestIdTwinNormal>>::sse_encode(self, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>::sse_encode(
            self, serializer,
        );
    }
}

impl SseEncode for crate::api::type_alias::TestModelTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::structure::TupleStructWithOneFieldTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field0, serializer);
    }
}

impl SseEncode for crate::api::structure::TupleStructWithTwoFieldTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field0, serializer);
        <i32>::sse_encode(self.field1, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field0, serializer);
        <i32>::sse_encode(self.field1, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field0, serializer);
        <i32>::sse_encode(self.field1, serializer);
    }
}

impl SseEncode for u16 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for [u8; 1600] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self, serializer);
    }
}

impl SseEncode for [u8; 32] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self, serializer);
    }
}

impl SseEncode for [u8; 5] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self, serializer);
    }
}

impl SseEncode for [u8; 8] {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self, serializer);
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::attribute::UserIdTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for usize {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_usize::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i8>>::sse_encode(self.int8list, serializer);
        <Vec<u8>>::sse_encode(self.uint8list, serializer);
        <Vec<i16>>::sse_encode(self.int16list, serializer);
        <Vec<u16>>::sse_encode(self.uint16list, serializer);
        <Vec<u32>>::sse_encode(self.uint32list, serializer);
        <Vec<i32>>::sse_encode(self.int32list, serializer);
        <Vec<u64>>::sse_encode(self.uint64list, serializer);
        <Vec<i64>>::sse_encode(self.int64list, serializer);
        <Vec<f32>>::sse_encode(self.float32list, serializer);
        <Vec<f64>>::sse_encode(self.float64list, serializer);
        <Vec<bool>>::sse_encode(self.bool_list, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
                        <Vec<i8>>::sse_encode(self.int8list, serializer);
<Vec<u8>>::sse_encode(self.uint8list, serializer);
<Vec<i16>>::sse_encode(self.int16list, serializer);
<Vec<u16>>::sse_encode(self.uint16list, serializer);
<Vec<u32>>::sse_encode(self.uint32list, serializer);
<Vec<i32>>::sse_encode(self.int32list, serializer);
<Vec<u64>>::sse_encode(self.uint64list, serializer);
<Vec<i64>>::sse_encode(self.int64list, serializer);
<Vec<f32>>::sse_encode(self.float32list, serializer);
<Vec<f64>>::sse_encode(self.float64list, serializer);
<Vec<bool>>::sse_encode(self.bool_list, serializer);

                    }
                }

impl SseEncode
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i8>>::sse_encode(self.int8list, serializer);
        <Vec<u8>>::sse_encode(self.uint8list, serializer);
        <Vec<i16>>::sse_encode(self.int16list, serializer);
        <Vec<u16>>::sse_encode(self.uint16list, serializer);
        <Vec<u32>>::sse_encode(self.uint32list, serializer);
        <Vec<i32>>::sse_encode(self.int32list, serializer);
        <Vec<u64>>::sse_encode(self.uint64list, serializer);
        <Vec<i64>>::sse_encode(self.int64list, serializer);
        <Vec<f32>>::sse_encode(self.float32list, serializer);
        <Vec<f64>>::sse_encode(self.float64list, serializer);
        <Vec<bool>>::sse_encode(self.bool_list, serializer);
    }
}

impl SseEncode for crate::api::misc_example::WeekdaysTwinNormal {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
